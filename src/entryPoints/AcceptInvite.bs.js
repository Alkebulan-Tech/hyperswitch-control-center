// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../components/Button.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as APIUtils from "../screens/APIUtils/APIUtils.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../screens/Utils/HSwitchUtils.bs.js";
import * as LocalStorage from "../libraries/LocalStorage.bs.js";
import * as GlobalProvider from "./Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../screens/HSLocalStorage.bs.js";
import * as AuthInfoProvider from "../context/AuthInfoProvider.bs.js";
import * as HSwitchGlobalVars from "../utils/HSwitchGlobalVars.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchAuthUtils from "../screens/login/HSwitchLoginFlow/HyperSwitchAuthUtils.bs.js";

function AcceptInvite(props) {
  var flowType = HyperSwitchAuthUtils.flowTypeStrToVariantMapper(
    HSLocalStorage.getFromUserDetails("flow_type"),
  );
  var match = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match.setDashboardPageState;
  var match$1 = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match$1[1];
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$2 = React.useState(function () {
    return [];
  });
  var setMerchantData = match$2[1];
  var merchantData = match$2[0];
  var merchantDataJsonFromLocalStorage = LogicUtils.safeParse(
    LogicUtils.getValFromNullableValue(
      localStorage.getItem("accept_invite_data"),
      "",
    ),
  );
  var logoutUser = function (param) {
    localStorage.clear();
    Curry._1(setAuthStatus, /* LoggedOut */ 0);
  };
  React.useEffect(function () {
    var arr = Core__JSON.Classify.classify(merchantDataJsonFromLocalStorage);
    if (typeof arr === "number" || arr.TAG !== /* Array */ 4) {
      logoutUser(undefined);
    } else {
      var arr$1 = arr._0;
      if (arr$1.length > 0) {
        Curry._1(setMerchantData, function (param) {
          return arr$1;
        });
      } else {
        logoutUser(undefined);
      }
    }
  }, []);
  React.useEffect(
    function () {
      if (flowType === /* MERCHANT_SELECT */ 0) {
        RescriptReactRouter.replace(
          HSwitchGlobalVars.appendDashboardPath("/accept-invite"),
        );
      } else {
        Curry._1(setDashboardPageState, function (param) {
          return "HOME";
        });
        RescriptReactRouter.replace(
          HSwitchGlobalVars.appendDashboardPath("/home"),
        );
      }
    },
    [flowType],
  );
  var isAtleastOneAccept = React.useMemo(
    function () {
      return LogicUtils.getBool(
        LogicUtils.getDictFromJsonObject(
          Core__Option.getOr(
            merchantData.find(function (ele) {
              var merchantDataDict = LogicUtils.getDictFromJsonObject(ele);
              return (
                LogicUtils.getBool(merchantDataDict, "is_active", false) ===
                true
              );
            }),
            null,
          ),
        ),
        "is_active",
        false,
      );
    },
    [merchantData],
  );
  var textHeadingClass = HSwitchUtils.getTextClass([
    /* H2 */ 1, /* Optional */ 4,
  ]);
  var textSubHeadingClass = HSwitchUtils.getTextClass([
    /* P1 */ 3, /* Regular */ 0,
  ]);
  var onClickLoginToDashboard = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "ACCEPT_INVITE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var acceptedMerchantIds = Core__Array.reduce(
        merchantData,
        [],
        function (acc, ele) {
          var merchantDataDict = LogicUtils.getDictFromJsonObject(ele);
          if (LogicUtils.getBool(merchantDataDict, "is_active", false)) {
            acc.push(LogicUtils.getString(merchantDataDict, "merchant_id", ""));
          }
          return acc;
        },
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["merchant_ids", acceptedMerchantIds],
        ["need_dashboard_entry_response", true],
      ]);
      var res = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var email = HSLocalStorage.getFromMerchantDetails("email");
      var token = HyperSwitchAuthUtils.parseResponseJson(res, email);
      LocalStorage.setItem("login", token);
      localStorage.removeItem("accept_invite_data");
      HSwitchUtils.setUserDetails("flow_type", "dashboard_entry");
      return Curry._1(setDashboardPageState, function (param) {
        return "HOME";
      });
    } catch (exn) {
      return;
    }
  };
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "h-full w-full flex items-center justify-center p-6",
        },
        React.createElement(
          "div",
          {
            className: "bg-white h-35-rem w-200 rounded-2xl",
          },
          React.createElement(
            "div",
            {
              className: "p-6 border-b-2",
            },
            React.createElement("img", {
              src: "assets/Dark/hyperswitchLogoIconWithText.svg",
            }),
          ),
          React.createElement(
            "div",
            {
              className: "p-6 flex flex-col gap-2",
            },
            React.createElement(
              "p",
              {
                className: "" + textHeadingClass + " text-grey-900",
              },
              "Hey there, welcome to Hyperswitch!",
            ),
            React.createElement(
              "p",
              {
                className: textSubHeadingClass,
              },
              "Please accept the your pending invitations",
            ),
          ),
          React.createElement(
            "div",
            {
              className: "h-[50%] overflow-auto show-scrollbar",
            },
            merchantData.map(function (ele, index) {
              var merchantId = LogicUtils.getString(
                LogicUtils.getDictFromJsonObject(ele),
                "merchant_id",
                "",
              );
              var merchantName = LogicUtils.getString(
                LogicUtils.getDictFromJsonObject(ele),
                "merchant_name",
                "",
              );
              var isActive = LogicUtils.getBool(
                LogicUtils.getDictFromJsonObject(ele),
                "is_active",
                false,
              );
              return React.createElement(
                "div",
                {
                  key: String(index),
                  className:
                    "border-1 m-6 p-5 flex items-center justify-between rounded-xl",
                },
                React.createElement(
                  "div",
                  {
                    className: "flex items-center gap-5",
                  },
                  React.createElement(Icon.make, {
                    name: "group-users",
                    size: 40,
                  }),
                  React.createElement(
                    "div",
                    undefined,
                    "You've been invited to the Hyperswitch dashboard by ",
                    React.createElement(
                      "span",
                      {
                        className: "font-bold",
                      },
                      merchantName.length > 0 ? merchantName : merchantId,
                    ),
                  ),
                ),
                React.createElement(UIUtils.RenderIf.make, {
                  condition: !isActive,
                  children: React.createElement(Button.make, {
                    text: "Accept",
                    buttonType: /* PrimaryOutline */ 2,
                    onClick: function (param) {
                      var merchantDataUpdated = Core__Option.getOr(
                        Core__JSON.Decode.array(
                          LogicUtils.safeParse(
                            Core__Option.getOr(
                              JSON.stringify(merchantData),
                              "",
                            ),
                          ),
                        ),
                        [],
                      );
                      LogicUtils.getDictFromJsonObject(
                        LogicUtils.getValueFromArray(
                          merchantDataUpdated,
                          index,
                          null,
                        ),
                      )["is_active"] = true;
                      Curry._1(setMerchantData, function (param) {
                        return merchantDataUpdated;
                      });
                    },
                    customButtonStyle: "!p-2",
                  }),
                }),
                React.createElement(UIUtils.RenderIf.make, {
                  condition: isActive,
                  children: React.createElement(
                    "div",
                    {
                      className:
                        "flex items-center gap-1 text-green-accepted_green_800",
                    },
                    React.createElement(Icon.make, {
                      name: "green-tick-without-background",
                    }),
                    "Accepted",
                  ),
                }),
              );
            }),
          ),
          React.createElement(
            "div",
            {
              className: "w-full flex items-center justify-center mt-4",
            },
            React.createElement(Button.make, {
              buttonState: isAtleastOneAccept
                ? /* Normal */ 0
                : /* Disabled */ 2,
              text: "Login to Dashboard",
              buttonType: /* Primary */ 0,
              onClick: function (param) {
                onClickLoginToDashboard(undefined);
              },
            }),
          ),
        ),
      ),
    ),
  });
}

var make = AcceptInvite;

export { make };
/* Icon Not a pure module */
