// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../screens/APIUtils/APIUtils.bs.js";
import * as MixPanel from "../libraries/MixPanel.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as NoDataFound from "../components/NoDataFound.bs.js";
import * as LocalStorage from "../libraries/LocalStorage.bs.js";
import * as DecisionScreen from "./DecisionScreen.bs.js";
import * as GlobalProvider from "./Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../screens/HSLocalStorage.bs.js";
import * as EntryPointUtils from "./EntryPointUtils.bs.js";
import * as GoogleAnalytics from "../libraries/GoogleAnalytics.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";
import * as FeatureFlagUtils from "./FeatureFlagUtils.bs.js";
import MixpanelBrowser from "mixpanel-browser";
import * as HSwitchGlobalVars from "../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../screens/Utils/PageLoaderWrapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HSiwtchTimeZoneUtils from "../screens/HSiwtchTimeZoneUtils.bs.js";
import * as UserTimeZoneProvider from "../context/UserTimeZoneProvider.bs.js";
import * as HyperSwitchAuthWrapper from "../components/HyperSwitchAuthWrapper.bs.js";
import * as HyperSwitchDefaultConfig from "./configs/HyperSwitchDefaultConfig.bs.js";

function HyperSwitchEntry$HyperSwitchEntryComponent(props) {
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var email = HSLocalStorage.getFromMerchantDetails("email");
  var name = HSLocalStorage.getFromUserDetails("name");
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useContext(UserTimeZoneProvider.userTimeContext);
  var setZone = match[1];
  var setFeatureFlag = Recoil.useSetRecoilState(
    HyperswitchAtom.featureFlagAtom,
  );
  var match$1 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$1[1];
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var configTheme = function (uiConfg) {
    var dict = LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(uiConfg),
      "theme",
    );
    var value_primaryColor = LogicUtils.getString(
      dict,
      "primary_color",
      "#006DF9",
    );
    var value_primaryHover = LogicUtils.getString(
      dict,
      "primary_hover_color",
      "#005ED6",
    );
    var value_sidebar = LogicUtils.getString(dict, "sidebar_color", "#242F48");
    var value = {
      primaryColor: value_primaryColor,
      primaryHover: value_primaryHover,
      sidebar: value_sidebar,
    };
    window.appendStyle(value);
  };
  var configureFavIcon = function (faviconUrl) {
    try {
      var a = document.createElement("link");
      a.setAttribute("href", "" + faviconUrl + "");
      a.setAttribute("rel", "shortcut icon");
      a.setAttribute("type", "image/x-icon");
      document.head.appendChild(a);
      return;
    } catch (exn) {
      return Js_exn.raiseError("Error on configuring favicon");
    }
  };
  var configURL = function (urlConfig) {
    try {
      var dict = LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(urlConfig),
        "endpoints",
      );
      var value_apiBaseUrl = LogicUtils.getString(dict, "api_url", "");
      var value_faviconUrl = LogicUtils.getString(
        dict,
        "favicon_url",
        "/HyperswitchFavicon.png",
      );
      var value_mixpanelToken = LogicUtils.getString(dict, "mixpanelToken", "");
      var value_logoUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "logo_url", ""),
      );
      var value_sdkBaseUrl = LogicUtils.getNonEmptyString(
        LogicUtils.getString(dict, "sdk_url", ""),
      );
      var value = {
        apiBaseUrl: value_apiBaseUrl,
        faviconUrl: value_faviconUrl,
        mixpanelToken: value_mixpanelToken,
        logoUrl: value_logoUrl,
        sdkBaseUrl: value_sdkBaseUrl,
      };
      window._env_ = value;
      configureFavIcon(value_faviconUrl);
      return;
    } catch (exn) {
      return Js_exn.raiseError("Error on configuring endpoint");
    }
  };
  var fetchConfig = async function (param) {
    try {
      var domain = LogicUtils.getValFromNullableValue(
        sessionStorage.getItem("domain"),
        "default",
      );
      console.log(domain);
      var apiURL =
        "" +
        HSwitchGlobalVars.getHostUrlWithBasePath +
        "/config/merchant-config?domain=" +
        domain +
        "";
      var res = await Curry._1(fetchDetails, apiURL);
      var featureFlags = FeatureFlagUtils.featureFlagType(res);
      configTheme(res);
      configURL(res);
      setFeatureFlag(function (param) {
        return featureFlags;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      return Curry._1(setScreenState, function (param) {
        return /* Custom */ 2;
      });
    }
  };
  React.useEffect(function () {
    fetchConfig(undefined);
  }, []);
  React.useEffect(function () {
    Curry._1(setZone, HSiwtchTimeZoneUtils.getUserTimeZone(undefined));
  }, []);
  React.useEffect(
    function () {
      MixPanel.init(window._env_.mixpanelToken, {
        batch_requests: true,
        loaded: function (param) {
          var mixpanelUserInfo = Object.fromEntries([
            ["name", email],
            ["merchantName", name],
          ]);
          var userId = MixPanel.getDistinctId(undefined);
          LocalStorage.setItem("deviceid", userId);
          MixPanel.identify(userId);
          MixpanelBrowser.people.set(mixpanelUserInfo);
        },
      });
    },
    [name, email, window._env_.mixpanelToken],
  );
  var setPageName = function (pageTitle) {
    var page = LogicUtils.snakeToTitle(pageTitle);
    var title = featureFlagDetails.isLiveMode
      ? "" + page + " - Dashboard"
      : "" + page + " - Dashboard [Test]";
    document.title = title;
    GoogleAnalytics.send({
      hitType: "pageview",
      page: page,
    });
  };
  React.useEffect(
    function () {
      var match = url.path;
      var exit = 0;
      if (match && match.hd === "user") {
        var match$1 = match.tl;
        if (match$1) {
          switch (match$1.hd) {
            case "login":
              if (match$1.tl) {
                exit = 1;
              } else {
                setPageName("magic_link_verify");
              }
              break;
            case "set_password":
              if (match$1.tl) {
                exit = 1;
              } else {
                setPageName("set_password");
              }
              break;
            case "verify_email":
              if (match$1.tl) {
                exit = 1;
              } else {
                setPageName("verify_email");
              }
              break;
            default:
              exit = 1;
          }
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
      if (exit === 1) {
        var pageTitle = Core__List.head(url.path);
        if (pageTitle !== undefined) {
          setPageName(pageTitle);
        }
      }
    },
    [url.path],
  );
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "text-black",
        },
        React.createElement(HyperSwitchAuthWrapper.make, {
          children: React.createElement(GlobalProvider.make, {
            children: React.createElement(DecisionScreen.make, {}),
          }),
        }),
      ),
    ),
    screenState: match$1[0],
    customUI: Caml_option.some(
      React.createElement(NoDataFound.make, {
        message: "Oops! Missing config",
        renderType: /* NotFound */ 2,
      }),
    ),
    sectionHeight: "h-screen",
  });
}

var HyperSwitchEntryComponent = {
  make: HyperSwitchEntry$HyperSwitchEntryComponent,
};

EntryPointUtils.renderDashboardApp(
  React.createElement(HyperSwitchEntry$HyperSwitchEntryComponent, {}),
);

var uiConfig = HyperSwitchDefaultConfig.config;

export { HyperSwitchEntryComponent, uiConfig };
/*  Not a pure module */
