// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Home from "../screens/Home/Home.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Recon from "../screens/Recon/Recon.bs.js";
import * as React from "react";
import * as HomeV2 from "../screens/Home/HomeV2.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Loader from "../components/Loader.bs.js";
import * as Navbar from "../components/Navbar.bs.js";
import * as Orders from "../screens/Order/Orders.bs.js";
import * as Refund from "../screens/Refunds/Refund.bs.js";
import * as Recoil from "recoil";
import * as SDKPage from "../screens/SDKPayment/SDKPage.bs.js";
import * as Sidebar from "../screens/Sidebar/Sidebar.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as APIUtils from "../screens/APIUtils/APIUtils.bs.js";
import * as Disputes from "../screens/Disputes/Disputes.bs.js";
import * as Customers from "../screens/Customers/Customers.bs.js";
import * as FRMSelect from "../screens/FraudAndRisk/FRMSelect.bs.js";
import * as ShowOrder from "../screens/Order/ShowOrder.bs.js";
import * as Surcharge from "../screens/Surcharge/Surcharge.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as ShowRefund from "../screens/Refunds/ShowRefund.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InviteUsers from "../screens/UserManagement/InviteUsers.bs.js";
import * as WooCommerce from "./WooCommerce/WooCommerce.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DisputeTable from "../screens/Analytics/GlobalSearchResults/Tables/Disputes/DisputeTable.bs.js";
import * as FRMConfigure from "../screens/FraudAndRisk/FRMConfigure.bs.js";
import * as HSwitchUtils from "../screens/Utils/HSwitchUtils.bs.js";
import * as RefundsTable from "../screens/Analytics/GlobalSearchResults/Tables/Refunds/RefundsTable.bs.js";
import * as RoutingStack from "../screens/Routing/RoutingStack.bs.js";
import * as ShowDisputes from "../screens/Disputes/ShowDisputes.bs.js";
import * as ShowUserData from "../screens/UserManagement/ShowUserData.bs.js";
import * as AccessControl from "../utils/AccessControl.bs.js";
import * as ConnectorHome from "../screens/Connectors/ConnectorHome.bs.js";
import * as ConnectorList from "../screens/Connectors/ConnectorList.bs.js";
import * as ErrorBoundary from "../components/ErrorBoundary.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as KeyManagement from "../screens/Developer/APIKeys/KeyManagement.bs.js";
import * as ShowCustomers from "../screens/Customers/ShowCustomers.bs.js";
import * as SidebarValues from "./SidebarValues.bs.js";
import * as UserRoleEntry from "../screens/UserManagement/UserRoleEntry.bs.js";
import * as EntityScaffold from "../components/EntityScaffold.bs.js";
import * as GlobalProvider from "./Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../screens/HSLocalStorage.bs.js";
import * as HSwitchThreeDS from "../screens/ThreeDSFlow/HSwitchThreeDS.bs.js";
import * as ProdIntentForm from "../screens/Home/ProdIntent/ProdIntentForm.bs.js";
import * as SwitchMerchant from "../screens/SwitchMerchant/SwitchMerchant.bs.js";
import * as UserOnboarding from "../screens/SelfServe/HSwitchSandboxOnboarding/UserOnboarding.bs.js";
import * as BusinessDetails from "../screens/Settings/BusinessDetails.bs.js";
import * as BusinessProfile from "../screens/Settings/BusinessMapping/BusinessProfile.bs.js";
import * as EnumVariantHook from "../screens/Hooks/EnumVariantHook.bs.js";
import * as GlobalSearchBar from "../screens/Analytics/GlobalSearch/GlobalSearchBar.bs.js";
import * as HSwitchSettings from "../screens/Settings/HSwitchSettings.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";
import * as PaymentSettings from "../screens/Developer/PaymentSettings/PaymentSettings.bs.js";
import * as PermissionUtils from "../screens/UserManagement/PermissionUtils.bs.js";
import * as PostLoginScreen from "../screens/PostLoginScreen/PostLoginScreen.bs.js";
import * as QuickStartUtils from "../screens/Home/QuickStart/QuickStartUtils.bs.js";
import * as CreateCustomRole from "../screens/UserManagement/CreateCustomRole.bs.js";
import * as DisputeAnalytics from "../screens/Analytics/DisputeAnalytics/DisputeAnalytics.bs.js";
import * as PaymentAnalytics from "../screens/Analytics/PaymentsAnalytics/PaymentAnalytics.bs.js";
import * as RefundsAnalytics from "../screens/Analytics/RefundsAnalytics/RefundsAnalytics.bs.js";
import * as RoutingConfigure from "../screens/Routing/RoutingConfigure.bs.js";
import * as StripePlusPaypal from "../screens/StripePlusPaypal/StripePlusPaypal.bs.js";
import * as UnauthorizedPage from "../components/UnauthorizedPage.bs.js";
import * as ConnectorListHook from "../screens/Hooks/ConnectorListHook.bs.js";
import * as HSwitchGlobalVars from "../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../screens/Utils/PageLoaderWrapper.bs.js";
import * as PaymentMethodList from "../screens/ConfigurePMTs/paymentMethodList.bs.js";
import * as SearchResultsPage from "../screens/Analytics/GlobalSearchResults/SearchResultsPage.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as PaymentIntentTable from "../screens/Analytics/GlobalSearchResults/Tables/PaymentIntent/PaymentIntentTable.bs.js";
import * as PayoutRoutingStack from "../screens/PayoutRouting/PayoutRoutingStack.bs.js";
import * as BusinessProfileHook from "../screens/Hooks/BusinessProfileHook.bs.js";
import * as HSwitchSetupAccount from "../screens/SetupAccount/HSwitchSetupAccount.bs.js";
import * as MerchantDetailsHook from "../screens/Hooks/MerchantDetailsHook.bs.js";
import * as PaymentAttemptTable from "../screens/Analytics/GlobalSearchResults/Tables/PaymentAttempt/PaymentAttemptTable.bs.js";
import * as PaymentSettingsList from "../screens/Developer/PaymentSettings/PaymentSettingsList.bs.js";
import * as ProdOnboardingUtils from "../screens/SelfServe/HSwitchProdOnboarding/ProdOnboardingUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as SbxOnboardingSurvey from "../screens/Others/SbxOnboardingSurvey.bs.js";
import * as HSwitchFeedBackModal from "../components/HSwitchFeedBackModal.bs.js";
import * as ThreeDsConnectorList from "../screens/ThreeDsProcessors/ThreeDsConnectorList.bs.js";
import * as ThreeDsProcessorHome from "../screens/ThreeDsProcessors/ThreeDsProcessorHome.bs.js";
import * as UserJourneyAnalytics from "../screens/Analytics/UserAnalytics/UserJourneyAnalytics.bs.js";
import * as ProdOnboardingLanding from "../screens/SelfServe/HSwitchProdOnboarding/ProdOnboardingLanding.bs.js";
import * as ConfigureControlCenter from "../screens/Home/QuickStart/ConfigureControlCenter.bs.js";
import * as HSwitchAgreementScreen from "../screens/SelfServe/HSwitchProdOnboarding/HSwitchAgreementScreen.bs.js";
import * as HSwitchProfileSettings from "../screens/Settings/HSwitchProfile/HSwitchProfileSettings.bs.js";
import * as PayoutRoutingConfigure from "../screens/PayoutRouting/PayoutRoutingConfigure.bs.js";
import * as SwitchMerchantListHook from "../screens/SwitchMerchant/SwitchMerchantListHook.bs.js";
import * as SystemMetricsAnalytics from "../screens/Analytics/SystemMetrics/SystemMetricsAnalytics.bs.js";
import * as DelayedVerificationBanner from "../screens/Home/DelayedVerificationBanner.bs.js";

function HyperSwitchApp(props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match.setQuickStartPageState;
  var isProdIntentCompleted = match.isProdIntentCompleted;
  var setDashboardPageState = match.setDashboardPageState;
  var dashboardPageState = match.dashboardPageState;
  var showFeedbackModal = match.showFeedbackModal;
  var match$1 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$1[1];
  var fetchBusinessProfiles =
    BusinessProfileHook.useFetchBusinessProfiles(undefined);
  var fetchMerchantAccountDetails =
    MerchantDetailsHook.useFetchMerchantDetails(undefined);
  var fetchSwitchMerchantList =
    SwitchMerchantListHook.useFetchSwitchMerchantList(undefined);
  var fetchConnectorListResponse =
    ConnectorListHook.useFetchConnectorList(undefined);
  var enumDetails = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(
      Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom),
    ),
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match$2 = Recoil.useRecoilState(HyperswitchAtom.userPermissionAtom);
  var setuserPermissionJson = match$2[1];
  var userPermissionJson = match$2[0];
  var match$3 = React.useState(function () {
    return false;
  });
  var setSurveyModal = match$3[1];
  var surveyModal = match$3[0];
  var getEnumDetails = EnumVariantHook.useFetchEnumDetails(undefined);
  var verificationDays = LogicUtils.getIntFromString(
    HSLocalStorage.getFromMerchantDetails("verification"),
    -1,
  );
  var merchantId = HSLocalStorage.getFromMerchantDetails("merchant_id");
  var userRole = HSLocalStorage.getFromUserDetails("user_role");
  var modeText = featureFlagDetails.isLiveMode ? "Live Mode" : "Test Mode";
  var modeStyles = featureFlagDetails.isLiveMode
    ? "bg-hyperswitch_green_trans border-hyperswitch_green_trans text-hyperswitch_green"
    : "bg-orange-600/80 border-orange-500 text-grey-700";
  var merchantDetailsTypedValue =
    HSwitchUtils.useMerchantDetailsValue(undefined);
  var isReconEnabled =
    merchantDetailsTypedValue.recon_status === /* Active */ 2;
  var hyperSwitchAppSidebars =
    SidebarValues.useGetSidebarValues(isReconEnabled);
  APIUtils.sessionExpired.contents = false;
  var getAgreementEnum = async function (param) {
    try {
      var url = ProdOnboardingUtils.getProdOnboardingUrl("ProductionAgreement");
      var response = await Curry._1(fetchDetails, url);
      var productionAgreementResponse = Core__Option.getOr(
        LogicUtils.getArrayFromJson(response, []).find(function (ele) {
          return LogicUtils.getBool(
            LogicUtils.getDictFromJsonObject(ele),
            "ProductionAgreement",
            false,
          );
        }),
        null,
      );
      if (
        LogicUtils.getBool(
          LogicUtils.getDictFromJsonObject(productionAgreementResponse),
          "ProductionAgreement",
          false,
        )
      ) {
        return Curry._1(setDashboardPageState, function (param) {
          return "PROD_ONBOARDING";
        });
      } else {
        return Curry._1(setDashboardPageState, function (param) {
          return "AGREEMENT_SIGNATURE";
        });
      }
    } catch (exn) {
      Curry._1(setDashboardPageState, function (param) {
        return "HOME";
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    }
  };
  var fetchInitialEnums = async function (param) {
    try {
      var response = await Curry._1(
        getEnumDetails,
        QuickStartUtils.quickStartEnumIntialArray,
      );
      var responseValueDict = LogicUtils.getValFromNullableValue(response, {});
      var pageStateToSet = QuickStartUtils.getCurrentStep(responseValueDict);
      Curry._1(setQuickStartPageState, function (param) {
        return QuickStartUtils.enumToVarinatMapper(pageStateToSet);
      });
      return responseValueDict;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
  var fetchOnboardingSurveyDetails = async function (param) {
    try {
      var url =
        "" +
        APIUtils.getURL(
          /* USERS */ 22,
          /* Get */ 0,
          undefined,
          undefined,
          "USER_DATA",
          undefined,
          undefined,
          undefined,
          undefined,
        ) +
        "?keys=OnboardingSurvey";
      var res = await Curry._1(fetchDetails, url);
      var firstValueFromArray = LogicUtils.getValueFromArray(
        LogicUtils.getArrayFromJson(res, []),
        0,
        null,
      );
      var onboardingDetailsFilled = LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(firstValueFromArray),
        "OnboardingSurvey",
      );
      var val = Object.keys(onboardingDetailsFilled).length === 0;
      return Curry._1(setSurveyModal, function (param) {
        return val;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
  var fetchPermissions = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Get */ 0,
        undefined,
        undefined,
        "GET_PERMISSIONS",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await Curry._1(fetchDetails, "" + url + "?groups=true");
      var permissionsValue = LogicUtils.getArrayFromJson(response, []).map(
        function (ele) {
          return Core__Option.getOr(Core__JSON.Decode.string(ele), "");
        },
      );
      var permissionJson = PermissionUtils.getPermissionJson(
        permissionsValue.map(PermissionUtils.mapStringToPermissionType),
      );
      setuserPermissionJson(function (param) {
        return permissionJson;
      });
      return permissionJson;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
  var setUpDashboard = async function (param) {
    try {
      window.init(undefined);
      await Curry._1(fetchSwitchMerchantList, undefined);
      var permissionJson = await fetchPermissions(undefined);
      if (!featureFlagDetails.isLiveMode) {
        await fetchOnboardingSurveyDetails(undefined);
      }
      if (LogicUtils.isNonEmptyString(merchantId)) {
        if (
          permissionJson.connectorsView === /* Access */ 1 ||
          permissionJson.workflowsView === /* Access */ 1 ||
          permissionJson.workflowsManage === /* Access */ 1
        ) {
          await Curry._1(fetchConnectorListResponse, undefined);
        }
        await Curry._1(fetchBusinessProfiles, undefined);
        await Curry._1(fetchMerchantAccountDetails, undefined);
      }
      if (featureFlagDetails.quickStart) {
        await fetchInitialEnums(undefined);
      }
      if (featureFlagDetails.isLiveMode) {
        getAgreementEnum(undefined);
      } else {
        Curry._1(setDashboardPageState, function (param) {
          return "HOME";
        });
      }
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      Curry._1(setDashboardPageState, function (param) {
        return "HOME";
      });
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "",
        };
      });
    }
  };
  React.useEffect(function () {
    setUpDashboard(undefined);
  }, []);
  var determineStripePlusPayPal = function (param) {
    if (HSwitchUtils.checkStripePlusPayPal(enumDetails)) {
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/home"),
      );
    } else {
      Curry._1(setDashboardPageState, function (param) {
        return "STRIPE_PLUS_PAYPAL";
      });
    }
    return null;
  };
  var determineWooCommerce = function (param) {
    if (HSwitchUtils.checkWooCommerce(enumDetails)) {
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/home"),
      );
    } else {
      Curry._1(setDashboardPageState, function (param) {
        return "WOOCOMMERCE_FLOW";
      });
    }
    return null;
  };
  var determineQuickStartPageState = function (param) {
    if (
      Core__Option.getOr(isProdIntentCompleted, false) &&
      enumDetails.integrationCompleted &&
      !LogicUtils.isEmptyString(enumDetails.testPayment.payment_id)
    ) {
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/home"),
      );
    } else {
      Curry._1(setDashboardPageState, function (param) {
        return "QUICK_START";
      });
    }
    return null;
  };
  var tmp;
  if (dashboardPageState === "STRIPE_PLUS_PAYPAL") {
    tmp = React.createElement(StripePlusPaypal.make, {});
  } else if (dashboardPageState === "PROD_ONBOARDING") {
    tmp = React.createElement(ProdOnboardingLanding.make, {});
  } else if (dashboardPageState === "AUTO_CONNECTOR_INTEGRATION") {
    tmp = React.createElement(HSwitchSetupAccount.make, {});
  } else if (dashboardPageState === "WOOCOMMERCE_FLOW") {
    tmp = React.createElement(WooCommerce.make, {});
  } else if (dashboardPageState === "QUICK_START") {
    tmp = React.createElement(ConfigureControlCenter.make, {});
  } else if (dashboardPageState === "DEFAULT") {
    tmp = React.createElement(
      "div",
      {
        className: "h-screen flex justify-center items-center",
      },
      React.createElement(Loader.make, {}),
    );
  } else if (dashboardPageState === "INTEGRATION_DOC") {
    tmp = React.createElement(UserOnboarding.make, {});
  } else if (dashboardPageState === "HOME") {
    var url$1 = window._env_.logoUrl;
    var match$4 = HSwitchUtils.urlPath(url.path);
    var tmp$1;
    var exit = 0;
    if (match$4) {
      switch (match$4.hd) {
        case "3ds":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              permission: userPermissionJson.workflowsView,
              children: React.createElement(HSwitchThreeDS.make, {}),
            });
          }
          break;
        case "3ds-authenticators":
          tmp$1 = React.createElement(AccessControl.make, {
            isEnabled: featureFlagDetails.threedsAuthenticator,
            permission: userPermissionJson.connectorsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "3DS Authenticator",
              remainingPath: match$4.tl,
              renderList: function (param) {
                return React.createElement(ThreeDsConnectorList.make, {});
              },
              renderNewForm: function (param) {
                return React.createElement(ThreeDsProcessorHome.make, {});
              },
              renderShow: function (param) {
                return React.createElement(ThreeDsProcessorHome.make, {});
              },
            }),
          });
          break;
        case "account-settings":
          var match$5 = match$4.tl;
          if (match$5) {
            if (match$5.hd === "profile" && !match$5.tl) {
              tmp$1 = React.createElement(HSwitchProfileSettings.make, {});
            } else {
              exit = 1;
            }
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.sampleData,
              permission: userPermissionJson.merchantDetailsManage,
              children: React.createElement(HSwitchSettings.make, {}),
            });
          }
          break;
        case "analytics-disputes":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.disputeAnalytics,
              permission: userPermissionJson.analyticsView,
              children: JsxPPXReactSupport.createElementWithKey(
                "DisputeAnalytics",
                FilterContext.make,
                {
                  index: "DisputeAnalytics",
                  children: React.createElement(DisputeAnalytics.make, {}),
                },
              ),
            });
          }
          break;
        case "analytics-payments":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              permission: userPermissionJson.analyticsView,
              children: JsxPPXReactSupport.createElementWithKey(
                "PaymentsAnalytics",
                FilterContext.make,
                {
                  index: "PaymentsAnalytics",
                  children: React.createElement(PaymentAnalytics.make, {}),
                },
              ),
            });
          }
          break;
        case "analytics-refunds":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              permission: userPermissionJson.analyticsView,
              children: JsxPPXReactSupport.createElementWithKey(
                "PaymentsRefunds",
                FilterContext.make,
                {
                  index: "PaymentsRefunds",
                  children: React.createElement(RefundsAnalytics.make, {}),
                },
              ),
            });
          }
          break;
        case "analytics-user-journey":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.userJourneyAnalytics,
              permission: userPermissionJson.analyticsView,
              children: JsxPPXReactSupport.createElementWithKey(
                "UserJourneyAnalytics",
                FilterContext.make,
                {
                  index: "UserJourneyAnalytics",
                  children: React.createElement(UserJourneyAnalytics.make, {}),
                },
              ),
            });
          }
          break;
        case "business-details":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.default,
              permission: /* Access */ 1,
              children: React.createElement(BusinessDetails.make, {}),
            });
          }
          break;
        case "business-profiles":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              permission: /* Access */ 1,
              children: React.createElement(BusinessProfile.make, {}),
            });
          }
          break;
        case "configure-pmts":
          tmp$1 = React.createElement(AccessControl.make, {
            isEnabled: featureFlagDetails.configurePmts,
            permission: userPermissionJson.connectorsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "ConfigurePMTs",
              remainingPath: match$4.tl,
              renderList: function (param) {
                return React.createElement(PaymentMethodList.make, {});
              },
              renderShow: function (profileId) {
                return React.createElement(PaymentSettings.make, {
                  webhookOnly: false,
                  showFormOnly: false,
                });
              },
            }),
          });
          break;
        case "connectors":
          tmp$1 = React.createElement(AccessControl.make, {
            permission: userPermissionJson.connectorsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "Connectors",
              remainingPath: match$4.tl,
              renderList: function (param) {
                return React.createElement(ConnectorList.make, {});
              },
              renderNewForm: function (param) {
                return React.createElement(ConnectorHome.make, {});
              },
              renderShow: function (param) {
                return React.createElement(ConnectorHome.make, {});
              },
            }),
          });
          break;
        case "customers":
          tmp$1 = React.createElement(AccessControl.make, {
            permission: userPermissionJson.operationsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "Customers",
              remainingPath: match$4.tl,
              access: /* Access */ 1,
              renderList: function (param) {
                return React.createElement(Customers.make, {});
              },
              renderShow: function (id) {
                return React.createElement(ShowCustomers.make, {
                  id: id,
                });
              },
            }),
          });
          break;
        case "developer-api-keys":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              permission: userPermissionJson.merchantDetailsManage,
              children: React.createElement(
                KeyManagement.KeysManagement.make,
                {},
              ),
            });
          }
          break;
        case "developer-system-metrics":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled:
                userRole.includes("internal_") &&
                featureFlagDetails.systemMetrics,
              permission: userPermissionJson.analyticsView,
              children: JsxPPXReactSupport.createElementWithKey(
                "SystemMetrics",
                FilterContext.make,
                {
                  index: "SystemMetrics",
                  children: React.createElement(
                    SystemMetricsAnalytics.make,
                    {},
                  ),
                },
              ),
            });
          }
          break;
        case "dispute-global":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.globalSearch,
              permission: userPermissionJson.operationsView,
              children: React.createElement(DisputeTable.make, {}),
            });
          }
          break;
        case "disputes":
          tmp$1 = React.createElement(AccessControl.make, {
            permission: userPermissionJson.operationsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "Disputes",
              remainingPath: match$4.tl,
              access: /* Access */ 1,
              renderList: function (param) {
                return React.createElement(Disputes.make, {});
              },
              renderShow: function (id) {
                return React.createElement(ShowDisputes.make, {
                  id: id,
                });
              },
            }),
          });
          break;
        case "fraud-risk-management":
          tmp$1 = React.createElement(AccessControl.make, {
            isEnabled: featureFlagDetails.frm,
            permission: userPermissionJson.connectorsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "risk-management",
              remainingPath: match$4.tl,
              renderList: function (param) {
                return React.createElement(FRMSelect.make, {});
              },
              renderNewForm: function (param) {
                return React.createElement(FRMConfigure.make, {});
              },
              renderShow: function (param) {
                return React.createElement(FRMConfigure.make, {});
              },
            }),
          });
          break;
        case "home":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = featureFlagDetails.quickStart
              ? React.createElement(HomeV2.make, {})
              : React.createElement(Home.make, {});
          }
          break;
        case "payment-attempts":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.globalSearch,
              permission: userPermissionJson.operationsView,
              children: React.createElement(PaymentAttemptTable.make, {}),
            });
          }
          break;
        case "payment-intents":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.globalSearch,
              permission: userPermissionJson.operationsView,
              children: React.createElement(PaymentIntentTable.make, {}),
            });
          }
          break;
        case "payment-settings":
          tmp$1 = React.createElement(EntityScaffold.make, {
            entityName: "PaymentSettings",
            remainingPath: match$4.tl,
            renderList: function (param) {
              return React.createElement(PaymentSettingsList.make, {});
            },
            renderShow: function (profileId) {
              return React.createElement(PaymentSettings.make, {
                webhookOnly: false,
                showFormOnly: false,
              });
            },
          });
          break;
        case "payments":
          tmp$1 = React.createElement(AccessControl.make, {
            permission: userPermissionJson.operationsView,
            children: JsxPPXReactSupport.createElementWithKey(
              "payments",
              FilterContext.make,
              {
                index: "payments",
                children: React.createElement(EntityScaffold.make, {
                  entityName: "Payments",
                  remainingPath: match$4.tl,
                  access: /* Access */ 1,
                  renderList: function (param) {
                    return React.createElement(Orders.make, {});
                  },
                  renderShow: function (id) {
                    return React.createElement(ShowOrder.make, {
                      id: id,
                    });
                  },
                }),
                disableSessionStorage: true,
              },
            ),
          });
          break;
        case "payoutconnectors":
          tmp$1 = React.createElement(AccessControl.make, {
            isEnabled: featureFlagDetails.payOut,
            permission: userPermissionJson.connectorsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "PayoutConnectors",
              remainingPath: match$4.tl,
              renderList: function (param) {
                return React.createElement(ConnectorList.make, {
                  isPayoutFlow: true,
                });
              },
              renderNewForm: function (param) {
                return React.createElement(ConnectorHome.make, {
                  isPayoutFlow: true,
                });
              },
              renderShow: function (param) {
                return React.createElement(ConnectorHome.make, {
                  isPayoutFlow: true,
                });
              },
            }),
          });
          break;
        case "payoutrouting":
          var remainingPath = match$4.tl;
          tmp$1 = React.createElement(AccessControl.make, {
            isEnabled: featureFlagDetails.payOut,
            permission: userPermissionJson.workflowsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "PayoutRouting",
              remainingPath: remainingPath,
              renderList: function (param) {
                return React.createElement(PayoutRoutingStack.make, {
                  remainingPath: remainingPath,
                });
              },
              renderShow: function (routingType) {
                return React.createElement(PayoutRoutingConfigure.make, {
                  routingType: routingType,
                });
              },
            }),
          });
          break;
        case "quick-start":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = determineQuickStartPageState(undefined);
          }
          break;
        case "recon":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.recon,
              permission: /* Access */ 1,
              children: React.createElement(Recon.make, {}),
            });
          }
          break;
        case "refunds":
          tmp$1 = React.createElement(AccessControl.make, {
            permission: userPermissionJson.operationsView,
            children: JsxPPXReactSupport.createElementWithKey(
              "refunds",
              FilterContext.make,
              {
                index: "refunds",
                children: React.createElement(EntityScaffold.make, {
                  entityName: "Refunds",
                  remainingPath: match$4.tl,
                  access: /* Access */ 1,
                  renderList: function (param) {
                    return React.createElement(Refund.make, {});
                  },
                  renderShow: function (id) {
                    return React.createElement(ShowRefund.make, {
                      id: id,
                    });
                  },
                }),
                disableSessionStorage: true,
              },
            ),
          });
          break;
        case "refunds-global":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.globalSearch,
              permission: userPermissionJson.operationsView,
              children: React.createElement(RefundsTable.make, {}),
            });
          }
          break;
        case "routing":
          var remainingPath$1 = match$4.tl;
          tmp$1 = React.createElement(AccessControl.make, {
            permission: userPermissionJson.workflowsView,
            children: React.createElement(EntityScaffold.make, {
              entityName: "Routing",
              remainingPath: remainingPath$1,
              renderList: function (param) {
                return React.createElement(RoutingStack.make, {
                  remainingPath: remainingPath$1,
                });
              },
              renderShow: function (routingType) {
                return React.createElement(RoutingConfigure.make, {
                  routingType: routingType,
                });
              },
            }),
          });
          break;
        case "sdk":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: !featureFlagDetails.isLiveMode,
              permission: /* Access */ 1,
              children: React.createElement(SDKPage.make, {}),
            });
          }
          break;
        case "search":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(SearchResultsPage.make, {});
          }
          break;
        case "stripe-plus-paypal":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = determineStripePlusPayPal(undefined);
          }
          break;
        case "surcharge":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(AccessControl.make, {
              isEnabled: featureFlagDetails.surcharge,
              permission: userPermissionJson.workflowsView,
              children: React.createElement(Surcharge.make, {}),
            });
          }
          break;
        case "unauthorized":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = React.createElement(UnauthorizedPage.make, {});
          }
          break;
        case "users":
          var remainingPath$2 = match$4.tl;
          var exit$1 = 0;
          if (remainingPath$2) {
            switch (remainingPath$2.hd) {
              case "create-custom-role":
                if (remainingPath$2.tl) {
                  exit$1 = 2;
                } else {
                  tmp$1 = React.createElement(AccessControl.make, {
                    permission: userPermissionJson.usersManage,
                    children: React.createElement(CreateCustomRole.make, {}),
                  });
                }
                break;
              case "invite-users":
                if (remainingPath$2.tl) {
                  exit$1 = 2;
                } else {
                  tmp$1 = React.createElement(AccessControl.make, {
                    permission: userPermissionJson.usersManage,
                    children: React.createElement(InviteUsers.make, {}),
                  });
                }
                break;
              default:
                exit$1 = 2;
            }
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            tmp$1 = React.createElement(AccessControl.make, {
              permission: userPermissionJson.usersView,
              children: React.createElement(EntityScaffold.make, {
                entityName: "UserManagement",
                remainingPath: remainingPath$2,
                renderList: function (param) {
                  return React.createElement(UserRoleEntry.make, {});
                },
                renderShow: function (param) {
                  return React.createElement(ShowUserData.make, {});
                },
              }),
            });
          }
          break;
        case "woocommerce":
          if (match$4.tl) {
            exit = 1;
          } else {
            tmp$1 = determineWooCommerce(undefined);
          }
          break;
        default:
          exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/home"),
      );
      tmp$1 = React.createElement(Home.make, {});
    }
    tmp = React.createElement(
      "div",
      {
        className: "relative",
      },
      React.createElement(
        "div",
        {
          className: "h-screen flex flex-col",
        },
        React.createElement(
          "div",
          {
            className: "flex relative overflow-auto h-screen ",
          },
          React.createElement(Sidebar.make, {
            sidebars: hyperSwitchAppSidebars,
            path: url.path,
          }),
          React.createElement(
            "div",
            {
              className:
                "flex relative flex-col flex-1  bg-hyperswitch_background dark:bg-black overflow-scroll md:overflow-x-hidden",
            },
            React.createElement(UIUtils.RenderIf.make, {
              condition: verificationDays > 0,
              children: React.createElement(DelayedVerificationBanner.make, {
                verificationDays: verificationDays,
              }),
            }),
            React.createElement(
              "div",
              {
                className: "border-b shadow hyperswitch_box_shadow ",
              },
              React.createElement(
                "div",
                {
                  className: "w-full max-w-fixedPageWidth px-9",
                },
                React.createElement(Navbar.make, {
                  headerActions: Caml_option.some(
                    React.createElement(
                      "div",
                      {
                        className: "relative flex items-center gap-4 my-2 ",
                      },
                      React.createElement(GlobalSearchBar.make, {}),
                      React.createElement(SwitchMerchant.make, {
                        userRole: userRole,
                        isAddMerchantEnabled: userRole === "org_admin",
                      }),
                      React.createElement(
                        "div",
                        {
                          className:
                            "px-4 py-2 rounded whitespace-nowrap text-fs-13 " +
                            modeStyles +
                            " font-semibold",
                        },
                        modeText,
                      ),
                    ),
                  ),
                  headerLeftActions: Caml_option.some(
                    url$1 !== undefined
                      ? React.createElement("img", {
                          src: "" + url$1 + "",
                        })
                      : null,
                  ),
                }),
              ),
            ),
            React.createElement(
              "div",
              {
                className:
                  "w-full h-screen overflow-x-scroll xl:overflow-x-hidden overflow-y-scroll",
              },
              React.createElement(
                "div",
                {
                  className:
                    "p-6 md:px-16 md:pb-16 pt-[4rem] flex flex-col gap-10 max-w-fixedPageWidth",
                },
                React.createElement(ErrorBoundary.make, {
                  children: tmp$1,
                }),
              ),
            ),
          ),
        ),
        React.createElement(UIUtils.RenderIf.make, {
          condition: showFeedbackModal && featureFlagDetails.feedback,
          children: React.createElement(HSwitchFeedBackModal.make, {
            modalHeading: "We'd love to hear from you!",
            setShowModal: match.setShowFeedbackModal,
            showModal: showFeedbackModal,
          }),
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition:
            !featureFlagDetails.isLiveMode || featureFlagDetails.quickStart,
          children: React.createElement(ProdIntentForm.make, {}),
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition:
            !featureFlagDetails.isLiveMode &&
            userPermissionJson.merchantDetailsManage === /* Access */ 1 &&
            surveyModal,
          children: React.createElement(SbxOnboardingSurvey.make, {
            showModal: surveyModal,
            setShowModal: setSurveyModal,
          }),
        }),
      ),
    );
  } else {
    tmp =
      dashboardPageState === "POST_LOGIN_QUES_NOT_DONE"
        ? React.createElement(PostLoginScreen.make, {})
        : React.createElement(HSwitchAgreementScreen.make, {});
  }
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(React.createElement("div", undefined, tmp)),
      screenState: match$1[0],
      sectionHeight: "!h-screen",
    }),
  );
}

var make = HyperSwitchApp;

export { make };
/* Home Not a pure module */
