// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as Shimmer from "../libraries/Shimmer.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../screens/Utils/HSwitchUtils.bs.js";
import * as MixpanelHook from "../screens/MixpanelHook.bs.js";
import * as ConnectorUtils from "../screens/Connectors/ConnectorUtils.bs.js";
import * as GlobalProvider from "./Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../screens/HSLocalStorage.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";

function SidebarValues$GetProductionAccess(props) {
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var textStyles = HSwitchUtils.getTextClass([/* P2 */ 4, /* Medium */ 1]);
  var match = React.useContext(GlobalProvider.defaultContext);
  var isProdIntentCompleted = match.isProdIntentCompleted;
  var setShowProdIntentForm = match.setShowProdIntentForm;
  var isProdIntent = Core__Option.getOr(isProdIntentCompleted, false);
  var backgroundColor = isProdIntent ? "bg-light_green" : "bg-light_blue";
  var cursorStyles = isProdIntent ? "cursor-default" : "cursor-pointer";
  var productionAccessString = isProdIntent
    ? "Production Access Requested"
    : "Get Production Access";
  if (isProdIntentCompleted !== undefined) {
    return React.createElement(
      "div",
      {
        className:
          "flex items-center gap-2 " +
          backgroundColor +
          " " +
          cursorStyles +
          " px-4 py-3 m-2 ml-2 mb-3 !mx-4 whitespace-nowrap rounded",
        onClick: function (param) {
          if (isProdIntent) {
            return;
          } else {
            Curry._1(setShowProdIntentForm, function (param) {
              return true;
            });
            return Curry._4(
              mixpanelEvent,
              "get_production_access",
              undefined,
              undefined,
              undefined,
            );
          }
        },
      },
      React.createElement(
        "div",
        {
          className: "text-white " + textStyles + " !font-semibold",
        },
        productionAccessString,
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition: !isProdIntent,
        children: React.createElement(Icon.make, {
          name: "thin-right-arrow",
          size: 20,
          customIconColor: "text-white",
        }),
      }),
    );
  } else {
    return React.createElement(Shimmer.make, {
      styleClass: "h-10 px-4 py-3 m-2 ml-2 mb-3 dark:bg-black bg-white rounded",
      shimmerType: /* Small */ 0,
    });
  }
}

var GetProductionAccess = {
  make: SidebarValues$GetProductionAccess,
};

var emptyComponent = {
  TAG: /* CustomComponent */ 0,
  _0: {
    component: null,
  },
};

function productionAccessComponent(isProductionAccessEnabled) {
  if (isProductionAccessEnabled) {
    return {
      TAG: /* CustomComponent */ 0,
      _0: {
        component: React.createElement(SidebarValues$GetProductionAccess, {}),
      },
    };
  } else {
    return emptyComponent;
  }
}

function home(isHomeEnabled) {
  if (isHomeEnabled) {
    return {
      TAG: /* Link */ 3,
      _0: {
        name: "Home",
        icon: "hswitch-home",
        link: "/home",
        access: /* Access */ 1,
      },
    };
  } else {
    return emptyComponent;
  }
}

function payments(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Payments",
      link: "/payments",
      access: permissionJson.operationsView,
      searchOptions: [["View payment operations", ""]],
    },
  };
}

function refunds(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Refunds",
      link: "/refunds",
      access: permissionJson.operationsView,
      searchOptions: [["View refund operations", ""]],
    },
  };
}

function disputes(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Disputes",
      link: "/disputes",
      access: permissionJson.operationsView,
      searchOptions: [["View dispute operations", ""]],
    },
  };
}

function customers(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Customers",
      link: "/customers",
      access: permissionJson.operationsView,
      searchOptions: [["View customers", ""]],
    },
  };
}

function operations(isOperationsEnabled, permissionJson) {
  var payments$1 = payments(permissionJson);
  var refunds$1 = refunds(permissionJson);
  var disputes$1 = disputes(permissionJson);
  var customers$1 = customers(permissionJson);
  if (isOperationsEnabled) {
    return {
      TAG: /* Section */ 5,
      _0: {
        name: "Operations",
        icon: "hswitch-operations",
        links: [payments$1, refunds$1, disputes$1, customers$1],
        showSection: true,
      },
    };
  } else {
    return emptyComponent;
  }
}

function paymentProcessor(isLiveMode, permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Payment Processors",
      link: "/connectors",
      access: permissionJson.connectorsView,
      searchOptions: HSwitchUtils.getSearchOptionsForProcessors(
        isLiveMode
          ? ConnectorUtils.connectorListForLive
          : ConnectorUtils.connectorList,
        ConnectorUtils.getConnectorNameString,
      ),
    },
  };
}

function payoutConnectors(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Payout Processors",
      link: "/payoutconnectors",
      access: permissionJson.connectorsView,
      searchOptions: HSwitchUtils.getSearchOptionsForProcessors(
        ConnectorUtils.payoutConnectorList,
        ConnectorUtils.getConnectorNameString,
      ),
    },
  };
}

function fraudAndRisk(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Fraud & Risk",
      link: "/fraud-risk-management",
      access: permissionJson.connectorsView,
      searchOptions: [],
    },
  };
}

function threeDsConnector(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "3DS Authenticator",
      link: "/3ds-authenticators",
      access: permissionJson.connectorsView,
      searchOptions: [
        ["Connect 3dsecure.io", "/new?name=threedsecureio"],
        ["Connect threedsecureio", "/new?name=threedsecureio"],
      ],
    },
  };
}

function connectors(
  isConnectorsEnabled,
  isLiveMode,
  isFrmEnabled,
  isPayoutsEnabled,
  isThreedsConnectorEnabled,
  permissionJson,
) {
  var connectorLinkArray = [paymentProcessor(isLiveMode, permissionJson)];
  if (isPayoutsEnabled) {
    connectorLinkArray.push(payoutConnectors(permissionJson));
  }
  if (isThreedsConnectorEnabled) {
    connectorLinkArray.push(threeDsConnector(permissionJson));
  }
  if (isFrmEnabled) {
    connectorLinkArray.push(fraudAndRisk(permissionJson));
  }
  if (isConnectorsEnabled) {
    return {
      TAG: /* Section */ 5,
      _0: {
        name: "Connectors",
        icon: "connectors",
        links: connectorLinkArray,
        showSection: true,
      },
    };
  } else {
    return emptyComponent;
  }
}

var paymentAnalytcis = /* SubLevelLink */ {
  _0: {
    name: "Payments",
    link: "/analytics-payments",
    access: /* Access */ 1,
    searchOptions: [["View analytics", ""]],
  },
};

var disputeAnalytics = /* SubLevelLink */ {
  _0: {
    name: "Disputes",
    link: "/analytics-disputes",
    access: /* Access */ 1,
    searchOptions: [["View Dispute analytics", ""]],
  },
};

var refundAnalytics = /* SubLevelLink */ {
  _0: {
    name: "Refunds",
    link: "/analytics-refunds",
    access: /* Access */ 1,
    searchOptions: [["View analytics", ""]],
  },
};

var userJourneyAnalytics = /* SubLevelLink */ {
  _0: {
    name: "User Journey",
    link: "/analytics-user-journey",
    access: /* Access */ 1,
    searchOptions: [["View analytics", ""]],
    iconTag: "betaTag",
  },
};

function analytics(
  isAnalyticsEnabled,
  userJourneyAnalyticsFlag,
  disputeAnalyticsFlag,
  permissionJson,
) {
  var links = [paymentAnalytcis, refundAnalytics];
  if (userJourneyAnalyticsFlag) {
    links.push(userJourneyAnalytics);
  }
  if (disputeAnalyticsFlag) {
    links.push(disputeAnalytics);
  }
  if (isAnalyticsEnabled) {
    return {
      TAG: /* Section */ 5,
      _0: {
        name: "Analytics",
        icon: "analytics",
        links: links,
        showSection: permissionJson.analyticsView === /* Access */ 1,
      },
    };
  } else {
    return emptyComponent;
  }
}

function routing(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Routing",
      link: "/routing",
      access: permissionJson.workflowsView,
      searchOptions: [
        ["Manage default routing configuration", "/default"],
        ["Create new volume based routing", "/volume"],
        ["Create new rule based routing", "/rule"],
        ["Manage smart routing", ""],
      ],
    },
  };
}

function payoutRouting(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Payout Routing",
      link: "/payoutrouting",
      access: permissionJson.workflowsView,
      searchOptions: [
        ["Manage default routing configuration", "/default"],
        ["Create new volume based routing", "/volume"],
        ["Create new rule based routing", "/rule"],
        ["Manage smart routing", ""],
      ],
    },
  };
}

function threeDs(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "3DS Decision Manager",
      link: "/3ds",
      access: permissionJson.workflowsView,
      searchOptions: [["Configure 3ds", ""]],
    },
  };
}

function surcharge(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Surcharge",
      link: "/surcharge",
      access: permissionJson.workflowsView,
      searchOptions: [["Add Surcharge", ""]],
    },
  };
}

function workflow(
  isWorkflowEnabled,
  isSurchargeEnabled,
  permissionJson,
  isPayoutEnabled,
) {
  var routing$1 = routing(permissionJson);
  var threeDs$1 = threeDs(permissionJson);
  var payoutRouting$1 = payoutRouting(permissionJson);
  var surcharge$1 = surcharge(permissionJson);
  var defaultWorkFlow = [routing$1, threeDs$1];
  if (isSurchargeEnabled) {
    defaultWorkFlow.push(surcharge$1);
  }
  if (isPayoutEnabled) {
    defaultWorkFlow.push(payoutRouting$1);
  }
  if (isWorkflowEnabled) {
    return {
      TAG: /* Section */ 5,
      _0: {
        name: "Workflow",
        icon: "3ds",
        links: defaultWorkFlow,
        showSection: true,
      },
    };
  } else {
    return emptyComponent;
  }
}

function userManagement(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Team",
      link: "/users",
      access: permissionJson.usersView,
      searchOptions: [["View team management", ""]],
    },
  };
}

function accountSettings(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Account Settings",
      link: "/account-settings",
      access: permissionJson.merchantDetailsManage,
      searchOptions: [
        ["View profile", "/profile"],
        ["Change password", "/profile"],
        ["Manage your personal profile and preferences", "/profile"],
      ],
    },
  };
}

function businessDetails(param) {
  return /* SubLevelLink */ {
    _0: {
      name: "Business Details",
      link: "/business-details",
      access: /* Access */ 1,
      searchOptions: [["Configure business details", ""]],
    },
  };
}

function businessProfiles(param) {
  return /* SubLevelLink */ {
    _0: {
      name: "Business Profiles",
      link: "/business-profiles",
      access: /* Access */ 1,
      searchOptions: [["Configure business profiles", ""]],
    },
  };
}

function configurePMTs(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "Configure PMTs",
      link: "/configure-pmts",
      access: permissionJson.connectorsView,
      searchOptions: [
        ["Configure payment methods", "Configure country currency"],
      ],
    },
  };
}

function settings(isSampleDataEnabled, isConfigurePmtsEnabled, permissionJson) {
  var settingsLinkArray = [
    businessDetails(undefined),
    businessProfiles(undefined),
  ];
  if (isSampleDataEnabled) {
    settingsLinkArray.push(accountSettings(permissionJson));
  }
  if (isConfigurePmtsEnabled) {
    settingsLinkArray.push(configurePMTs(permissionJson));
  }
  settingsLinkArray.push(userManagement(permissionJson));
  return {
    TAG: /* Section */ 5,
    _0: {
      name: "Settings",
      icon: "hswitch-settings",
      links: settingsLinkArray,
      showSection: true,
    },
  };
}

function apiKeys(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "API Keys",
      link: "/developer-api-keys",
      access: permissionJson.merchantDetailsManage,
      searchOptions: [["View API Keys", ""]],
    },
  };
}

function systemMetric(permissionJson) {
  return /* SubLevelLink */ {
    _0: {
      name: "System Metrics",
      link: "/developer-system-metrics",
      access: permissionJson.analyticsView,
      searchOptions: [["View System Metrics", ""]],
      iconTag: "betaTag",
    },
  };
}

function paymentSettings(param) {
  return /* SubLevelLink */ {
    _0: {
      name: "Payment Settings",
      link: "/payment-settings",
      access: /* Access */ 1,
      searchOptions: [
        ["View payment settings", ""],
        ["View webhooks", ""],
        ["View return url", ""],
      ],
    },
  };
}

function developers(
  isDevelopersEnabled,
  userRole,
  systemMetrics,
  permissionJson,
) {
  var isInternalUser = userRole.includes("internal_");
  var apiKeys$1 = apiKeys(permissionJson);
  var paymentSettings$1 = paymentSettings(undefined);
  var systemMetric$1 = systemMetric(permissionJson);
  if (isDevelopersEnabled) {
    return {
      TAG: /* Section */ 5,
      _0: {
        name: "Developers",
        icon: "developer",
        links:
          isInternalUser && systemMetrics
            ? [apiKeys$1, paymentSettings$1, systemMetric$1]
            : [apiKeys$1, paymentSettings$1],
        showSection: true,
      },
    };
  } else {
    return emptyComponent;
  }
}

function reconTag(recon, isReconEnabled) {
  if (recon) {
    return {
      TAG: /* Link */ 3,
      _0: {
        name: "Reconcilation",
        icon: isReconEnabled ? "recon" : "recon-lock",
        link: "/recon",
        access: /* Access */ 1,
      },
    };
  } else {
    return emptyComponent;
  }
}

function useGetSidebarValues(isReconEnabled) {
  var userRole = HSLocalStorage.getFromUserDetails("user_role");
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var permissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var payOut = featureFlagDetails.payOut;
  var $$default = featureFlagDetails.default;
  return [
    productionAccessComponent(featureFlagDetails.quickStart),
    home($$default),
    operations($$default, permissionJson),
    connectors(
      $$default,
      featureFlagDetails.isLiveMode,
      featureFlagDetails.frm,
      payOut,
      featureFlagDetails.threedsAuthenticator,
      permissionJson,
    ),
    analytics(
      $$default,
      featureFlagDetails.userJourneyAnalytics,
      featureFlagDetails.disputeAnalytics,
      permissionJson,
    ),
    workflow($$default, featureFlagDetails.surcharge, permissionJson, payOut),
    reconTag(featureFlagDetails.recon, isReconEnabled),
    developers(
      $$default,
      userRole,
      featureFlagDetails.systemMetrics,
      permissionJson,
    ),
    settings(
      featureFlagDetails.sampleData,
      featureFlagDetails.configurePmts,
      permissionJson,
    ),
  ];
}

export {
  GetProductionAccess,
  emptyComponent,
  productionAccessComponent,
  home,
  payments,
  refunds,
  disputes,
  customers,
  operations,
  paymentProcessor,
  payoutConnectors,
  fraudAndRisk,
  threeDsConnector,
  connectors,
  paymentAnalytcis,
  disputeAnalytics,
  refundAnalytics,
  userJourneyAnalytics,
  analytics,
  routing,
  payoutRouting,
  threeDs,
  surcharge,
  workflow,
  userManagement,
  accountSettings,
  businessDetails,
  businessProfiles,
  configurePMTs,
  settings,
  apiKeys,
  systemMetric,
  paymentSettings,
  developers,
  reconTag,
  useGetSidebarValues,
};
/* emptyComponent Not a pure module */
