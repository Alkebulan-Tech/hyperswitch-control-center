// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as ApiProgressHooks from "./ApiProgressHooks.bs.js";
import * as AuthInfoProvider from "../context/AuthInfoProvider.bs.js";
import * as HSwitchGlobalVars from "../utils/HSwitchGlobalVars.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function getHeaders(uri, headers, contentTypeOpt, param) {
  var contentType =
    contentTypeOpt !== undefined
      ? contentTypeOpt
      : /* Headers */ {
          _0: "application/json",
        };
  var hyperSwitchToken = localStorage.getItem("login");
  var isMixpanel = uri.includes("mixpanel");
  if (isMixpanel) {
    return Object.fromEntries([
      ["Content-Type", "application/x-www-form-urlencoded"],
      ["accept", "application/json"],
    ]);
  }
  var res =
    hyperSwitchToken == null
      ? headers
      : ((headers["authorization"] = "Bearer " + hyperSwitchToken + ""),
        (headers["api-key"] = "hyperswitch"),
        headers);
  if (contentType) {
    headers["Content-Type"] = contentType._0;
  }
  return res;
}

function useApiFetcher(param) {
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match[1];
  var authStatus = match[0];
  var token = React.useMemo(
    function () {
      if (typeof authStatus === "number") {
        return;
      } else {
        return authStatus._0.token;
      }
    },
    [authStatus],
  );
  var setReqProgress = Recoil.useSetRecoilState(
    ApiProgressHooks.pendingRequestCount,
  );
  return React.useCallback(
    function (uri) {
      return function (
        bodyStrOpt,
        bodyFormDataOpt,
        headersOpt,
        method_,
        betaEndpointConfig,
        contentTypeOpt,
        param,
      ) {
        var bodyStr = bodyStrOpt !== undefined ? bodyStrOpt : "";
        var bodyFormData =
          bodyFormDataOpt !== undefined
            ? Caml_option.valFromOption(bodyFormDataOpt)
            : undefined;
        var headers =
          headersOpt !== undefined ? Caml_option.valFromOption(headersOpt) : {};
        var contentType =
          contentTypeOpt !== undefined
            ? contentTypeOpt
            : /* Headers */ {
                _0: "application/json",
              };
        var uri$1 =
          betaEndpointConfig !== undefined
            ? uri.replace(
                betaEndpointConfig.replaceStr,
                betaEndpointConfig.originalApiStr,
              )
            : uri;
        var body =
          method_ === 0
            ? Promise.resolve(undefined)
            : bodyFormData !== undefined
              ? Promise.resolve(
                  Caml_option.some(Caml_option.valFromOption(bodyFormData)),
                )
              : Promise.resolve(Caml_option.some(bodyStr));
        return body.then(function (body) {
          setReqProgress(function (p) {
            return (p + 1) | 0;
          });
          return Core__Promise.$$catch(
            fetch(
              uri$1,
              Fetch.RequestInit.make(
                method_,
                Caml_option.some(
                  getHeaders(uri$1, headers, contentType, undefined),
                ),
                body,
                undefined,
                undefined,
                undefined,
                /* SameOrigin */ 1,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              )(undefined),
            ),
            function (err) {
              setReqProgress(function (p) {
                return (p - 1) | 0;
              });
              return Promise.reject(err);
            },
          ).then(function (resp) {
            setReqProgress(function (p) {
              return (p - 1) | 0;
            });
            if (resp.status === 401 && typeof authStatus !== "number") {
              localStorage.clear();
              Curry._1(setAuthStatus, /* LoggedOut */ 0);
              RescriptReactRouter.push(
                HSwitchGlobalVars.appendDashboardPath("/login"),
              );
              return Promise.resolve(resp);
            } else {
              return Promise.resolve(resp);
            }
          });
        });
      };
    },
    [token],
  );
}

export { getHeaders, useApiFetcher };
/* react Not a pure module */
