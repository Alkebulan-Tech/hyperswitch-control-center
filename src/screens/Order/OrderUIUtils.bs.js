// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as Accordion from "../componentsDemo/Accordion.bs.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as OrderEntity from "./OrderEntity.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function OrderUIUtils$RenderAccordian(props) {
  var initialExpandedArray = props.initialExpandedArray;
  var initialExpandedArray$1 =
    initialExpandedArray !== undefined ? initialExpandedArray : [];
  return React.createElement(Accordion.make, {
    accordion: props.accordion,
    accordianTopContainerCss: "border",
    accordianBottomContainerCss: "p-5",
    contentExpandCss: "px-4 py-3 !border-t-0",
    initialExpandedArray: initialExpandedArray$1,
    titleStyle: "font-semibold text-bold text-md",
  });
}

var RenderAccordian = {
  make: OrderUIUtils$RenderAccordian,
};

function OrderUIUtils$GenerateSampleDataButton(props) {
  var getOrdersList = props.getOrdersList;
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var generateSampleData = async function (param) {
    Curry._4(
      mixpanelEvent,
      "generate_sample_data",
      undefined,
      undefined,
      undefined,
    );
    try {
      var generateSampleDataUrl = APIUtils.getURL(
        /* GENERATE_SAMPLE_DATA */ 21,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        generateSampleDataUrl,
        Object.fromEntries([["record", 50.0]]),
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Sample data generated successfully.",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(getOrdersList, undefined);
      return;
    } catch (exn) {
      return;
    }
  };
  return React.createElement(UIUtils.RenderIf.make, {
    condition: match.sampleData && !props.previewOnly,
    children: React.createElement(ACLButton.make, {
      text: "Generate Sample Data",
      buttonType: /* Secondary */ 1,
      buttonSize: /* XSmall */ 3,
      leftIcon: {
        TAG: /* CustomIcon */ 1,
        _0: React.createElement(Icon.make, {
          name: "plus",
          size: 13,
        }),
      },
      onClick: function (param) {
        generateSampleData(undefined);
      },
      access: userPermissionJson.operationsManage,
    }),
  });
}

var GenerateSampleDataButton = {
  make: OrderUIUtils$GenerateSampleDataButton,
};

function OrderUIUtils$NoData(props) {
  var isConfigureConnector = props.isConfigureConnector;
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var isLiveMode = match.isLiveMode;
  return React.createElement(HelperComponents.BluredTableComponent.make, {
    infoText: isConfigureConnector
      ? isLiveMode
        ? "There are no payments as of now."
        : "There are no payments as of now. Try making a test payment and visualise the checkout experience."
      : "Connect to a payment processor to make your first payment",
    buttonText: isConfigureConnector ? "Make a payment" : "Connect a connector",
    onClickUrl: isConfigureConnector ? "/sdk" : "/connectors",
    paymentModal: props.paymentModal,
    setPaymentModal: props.setPaymentModal,
    moduleName: "",
    showRedirectCTA: !isLiveMode,
  });
}

var NoData = {
  make: OrderUIUtils$NoData,
};

var startTimeFilterKey = "start_time";

var endTimeFilterKey = "end_time";

function filterByData(txnArr, value) {
  var searchText = LogicUtils.getStringFromJson(value, "");
  return Belt_Array.keepMap(
    Belt_Array.keepMap(txnArr, function (prim) {
      if (prim == null) {
        return;
      } else {
        return Caml_option.some(prim);
      }
    }),
    function (data) {
      var valueArr = Core__Array.reduce(
        Object.entries(data).map(function (item) {
          return LogicUtils.getStringFromJson(item[1], "")
            .toLowerCase()
            .includes(searchText);
        }),
        false,
        function (acc, item) {
          if (item) {
            return true;
          } else {
            return acc;
          }
        },
      );
      if (valueArr) {
        return Caml_option.some(data);
      }
    },
  );
}

function initialFilters(json) {
  var filterDict = LogicUtils.getDictFromJsonObject(json);
  return Object.keys(filterDict).map(function (key) {
    var title = "Select " + LogicUtils.snakeToTitle(key) + "";
    var values = LogicUtils.getStrArrayFromJsonArray(
      LogicUtils.getArrayFromDict(filterDict, key, []),
    );
    var arg = SelectBox.makeOptions(values);
    return {
      field: FormRenderer.makeFieldInfo(
        "",
        undefined,
        key,
        function (param) {
          var func = Curry._3(
            InputFields.multiSelectInput,
            param,
            arg,
            undefined,
          );
          return function (param) {
            return Curry.app(func, [
              param,
              title,
              undefined,
              undefined,
              false,
              undefined,
              undefined,
              true,
              undefined,
              undefined,
              undefined,
              undefined,
              "bg-none",
              undefined,
              undefined,
              true,
              true,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ]);
          };
        },
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      localFilter: filterByData,
    };
  });
}

function initialFixedFilter(param) {
  return [
    {
      field: FormRenderer.makeMultiInputFieldInfo(
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        false,
        InputFields.dateRangeField(
          startTimeFilterKey,
          endTimeFilterKey,
          "YYYY-MM-DDTHH:mm:ss[Z]",
          false,
          true,
          false,
          [
            /* Today */ 0,
            /* Yesterday */ 2,
            {
              TAG: /* Day */ 1,
              _0: 2.0,
            },
            {
              TAG: /* Day */ 1,
              _0: 7.0,
            },
            {
              TAG: /* Day */ 1,
              _0: 30.0,
            },
            /* ThisMonth */ 3,
            /* LastMonth */ 4,
          ],
          false,
          2,
          60,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        [],
        undefined,
      ),
      localFilter: undefined,
    },
  ];
}

function setData(
  offset,
  setOffset,
  total,
  data,
  setTotalCount,
  setOrdersData,
  setScreenState,
  previewOnly,
) {
  var arr = Core__Array.make(offset, {});
  if (total <= offset) {
    Curry._1(setOffset, function (param) {
      return 0;
    });
  }
  if (total <= 0) {
    return Curry._1(setScreenState, function (param) {
      return /* Custom */ 2;
    });
  }
  var orderDataDictArr = Belt_Array.keepMap(data, Core__JSON.Decode.object);
  var orderData = arr
    .concat(orderDataDictArr)
    .map(OrderEntity.itemToObjMapper)
    .filter(function (param, i) {
      if (previewOnly) {
        return i <= 2;
      } else {
        return true;
      }
    });
  var list = orderData.map(function (prim) {
    return prim;
  });
  Curry._1(setTotalCount, function (param) {
    return total;
  });
  Curry._1(setOrdersData, function (param) {
    return list;
  });
  return Curry._1(setScreenState, function (param) {
    return /* Success */ 1;
  });
}

async function getOrdersList(
  filterValueJson,
  updateDetails,
  setOrdersData,
  previewOnly,
  setScreenState,
  setOffset,
  setTotalCount,
  offset,
) {
  Curry._1(setScreenState, function (param) {
    return /* Loading */ 0;
  });
  try {
    var ordersUrl = APIUtils.getURL(
      /* ORDERS */ 13,
      /* Post */ 2,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var res = await Curry._7(
      updateDetails,
      ordersUrl,
      filterValueJson,
      /* Post */ 2,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var data = LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(res),
      "data",
      [],
    );
    var total = LogicUtils.getInt(
      LogicUtils.getDictFromJsonObject(res),
      "total_count",
      0,
    );
    if (
      !(data.length === 0 && Core__Option.isSome(filterValueJson["payment_id"]))
    ) {
      return setData(
        offset,
        setOffset,
        total,
        data,
        setTotalCount,
        setOrdersData,
        setScreenState,
        previewOnly,
      );
    }
    var payment_id = Core__Option.getOr(
      Core__JSON.Decode.string(
        Core__Option.getOr(filterValueJson["payment_id"], ""),
      ),
      "",
    );
    if (!/^[A-Za-z0-9]+_[A-Za-z0-9]+_[0-9]+/.test(payment_id)) {
      return Curry._1(setScreenState, function (param) {
        return /* Custom */ 2;
      });
    }
    var newID = payment_id.replace(/_[0-9]$/g, "");
    filterValueJson["payment_id"] = newID;
    var res$1 = await Curry._7(
      updateDetails,
      ordersUrl,
      filterValueJson,
      /* Post */ 2,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var data$1 = LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(res$1),
      "data",
      [],
    );
    var total$1 = LogicUtils.getInt(
      LogicUtils.getDictFromJsonObject(res$1),
      "total_count",
      0,
    );
    return setData(
      offset,
      setOffset,
      total$1,
      data$1,
      setTotalCount,
      setOrdersData,
      setScreenState,
      previewOnly,
    );
  } catch (raw_exn) {
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "Something went wrong!",
        };
      });
    }
    throw exn;
  }
}

export {
  RenderAccordian,
  GenerateSampleDataButton,
  NoData,
  startTimeFilterKey,
  endTimeFilterKey,
  filterByData,
  initialFilters,
  initialFixedFilter,
  setData,
  getOrdersList,
};
/* Icon Not a pure module */
