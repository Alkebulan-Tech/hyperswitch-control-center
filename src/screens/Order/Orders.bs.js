// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as TableAtoms from "../../Recoils/TableAtoms.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as OrderEntity from "./OrderEntity.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as OrderUIUtils from "./OrderUIUtils.bs.js";
import * as ErrorBoundary from "../../components/ErrorBoundary.bs.js";
import * as PortalCapture from "../../components/portal/PortalCapture.bs.js";
import * as GenerateReport from "../Analytics/GenerateReport.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as HSwitchRemoteFilter from "../HSwitchRemoteFilter.bs.js";
import * as LoadedTableWithCustomColumns from "../../components/LoadedTableWithCustomColumns.bs.js";

function Orders(props) {
  var previewOnly = props.previewOnly;
  var previewOnly$1 = previewOnly !== undefined ? previewOnly : false;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return [];
  });
  var setOrdersData = match$1[1];
  var orderData = match$1[0];
  var match$2 = React.useState(function () {
    return 0;
  });
  var setTotalCount = match$2[1];
  var match$3 = React.useState(function () {
    return "";
  });
  var setSearchText = match$3[1];
  var searchText = match$3[0];
  var match$4 = React.useState(function () {});
  var setFilters = match$4[1];
  var filters = match$4[0];
  var match$5 = React.useState(function () {
    return false;
  });
  var connectorList = Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom);
  var isConfigureConnector = connectorList.length > 0;
  var match$6 = React.useMemo(
    function () {
      if (previewOnly$1) {
        return ["w-full", "max-h-96"];
      } else {
        return ["w-full", ""];
      }
    },
    [previewOnly$1],
  );
  var pageDetailDict = Recoil.useRecoilValue(LoadedTable.table_pageDetails);
  var pageDetail = Core__Option.getOr(pageDetailDict["Orders"], {
    offset: 0,
    resultsPerPage: 10,
  });
  var match$7 = React.useState(function () {
    return pageDetail.offset;
  });
  var setOffset = match$7[1];
  var offset = match$7[0];
  var match$8 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var fetchOrders = function (param) {
    if (previewOnly$1) {
      var filters$1 = {};
      OrderUIUtils.getOrdersList(
        filters$1,
        updateDetails,
        setOrdersData,
        previewOnly$1,
        setScreenState,
        setOffset,
        setTotalCount,
        offset,
      );
      return;
    }
    if (filters === undefined) {
      return;
    }
    var filters$2 = {};
    filters$2["offset"] = offset;
    if (!LogicUtils.isEmptyString(searchText)) {
      filters$2["payment_id"] = searchText.trim();
    }
    Object.entries(Caml_option.valFromOption(filters)).forEach(function (item) {
      filters$2[item[0]] = item[1];
    });
    OrderUIUtils.getOrdersList(
      filters$2,
      updateDetails,
      setOrdersData,
      previewOnly$1,
      setScreenState,
      setOffset,
      setTotalCount,
      offset,
    );
  };
  React.useEffect(
    function () {
      fetchOrders(undefined);
    },
    [offset, filters, searchText],
  );
  var customTitleStyle = previewOnly$1 ? "py-0 !pt-0" : "";
  var customUI = React.createElement(OrderUIUtils.NoData.make, {
    isConfigureConnector: isConfigureConnector,
    paymentModal: match$5[0],
    setPaymentModal: match$5[1],
  });
  var filterUrl = "" + window._env_.apiBaseUrl + "/payments/filter";
  var filtersUI = React.useMemo(function () {
    return React.createElement(HSwitchRemoteFilter.RemoteTableFilters.make, {
      filterUrl: filterUrl,
      setFilters: setFilters,
      endTimeFilterKey: OrderUIUtils.endTimeFilterKey,
      startTimeFilterKey: OrderUIUtils.startTimeFilterKey,
      initialFilters: OrderUIUtils.initialFilters,
      initialFixedFilter: OrderUIUtils.initialFixedFilter,
      placeholder: "Search payment id",
      setSearchVal: setSearchText,
      searchVal: searchText,
      setOffset: setOffset,
    });
  }, []);
  return React.createElement(ErrorBoundary.make, {
    children: React.createElement(
      "div",
      {
        className:
          "flex flex-col mx-auto h-full " +
          match$6[0] +
          " " +
          match$6[1] +
          " min-h-[50vh]",
      },
      React.createElement(PageUtils.PageHeading.make, {
        title: "Payment Operations",
        subTitle: "View and manage all payments",
        customTitleStyle: customTitleStyle,
      }),
      React.createElement(
        "div",
        {
          className: "flex",
        },
        React.createElement(UIUtils.RenderIf.make, {
          condition: !previewOnly$1,
          children: React.createElement(
            "div",
            {
              className: "flex-1",
            },
            filtersUI,
          ),
        }),
        React.createElement(
          "div",
          {
            className: "flex justify-end gap-3",
          },
          React.createElement(UIUtils.RenderIf.make, {
            condition: match$8.generateReport,
            children: React.createElement(GenerateReport.make, {
              entityName: /* PAYMENT_REPORT */ 31,
            }),
          }),
          React.createElement(OrderUIUtils.GenerateSampleDataButton.make, {
            previewOnly: previewOnly$1,
            getOrdersList: fetchOrders,
          }),
          JsxPPXReactSupport.createElementWithKey(
            "OrdersCustomizeColumn",
            PortalCapture.make,
            {
              name: "OrdersCustomizeColumn",
            },
          ),
        ),
      ),
      React.createElement(PageLoaderWrapper.make, {
        children: Caml_option.some(
          React.createElement(LoadedTableWithCustomColumns.make, {
            title: "Orders",
            showSerialNumber: true,
            actualData: orderData,
            totalResults: previewOnly$1 ? orderData.length : match$2[0],
            resultsPerPage: 10,
            offset: offset,
            setOffset: setOffset,
            entity: OrderEntity.orderEntity,
            currrentFetchCount: orderData.length,
            hideTitle: true,
            customColumnMapper: TableAtoms.ordersMapDefaultCols,
            defaultColumns: OrderEntity.defaultColumns,
            sortingBasedOnDisabled: false,
            showSerialNumberInCustomizeColumns: false,
            showResultsPerPageSelector: false,
            previewOnly: previewOnly$1,
          }),
        ),
        screenState: match[0],
        customUI: Caml_option.some(customUI),
      }),
    ),
  });
}

var make = Orders;

export { make };
/* react Not a pure module */
