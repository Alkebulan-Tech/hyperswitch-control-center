// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as ToolTip from "../../components/tooltip/ToolTip.bs.js";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderHooks from "./OrderHooks.bs.js";
import * as OrderUtils from "../../components/OrderUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as LogsWrapper from "../Analytics/Logs/LogUtils/LogsWrapper.bs.js";
import * as NoDataFound from "../../components/NoDataFound.bs.js";
import * as OrderEntity from "./OrderEntity.bs.js";
import * as PaymentLogs from "../Analytics/Logs/PaymentLogs/PaymentLogs.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as OrderUIUtils from "./OrderUIUtils.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as DisputesEntity from "../Disputes/DisputesEntity.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as OrderRefundForm from "./OrderRefundForm.bs.js";
import * as PrettyPrintJson from "../Analytics/Logs/LogUtils/PrettyPrintJson.bs.js";
import * as HSwitchOrderUtils from "./HSwitchOrderUtils.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as BreadCrumbNavigation from "../../genericUtils/BreadCrumbNavigation.bs.js";
import * as CustomExpandableTable from "../../components/CustomExpandableTable.bs.js";

function ShowOrder$OrderInfo$Details(props) {
  var border = props.border;
  var connectorList = props.connectorList;
  var openRefundModal = props.openRefundModal;
  var isButtonEnabled = props.isButtonEnabled;
  var bgColor = props.bgColor;
  var widthClass = props.widthClass;
  var justifyClassName = props.justifyClassName;
  var getCell = props.getCell;
  var getHeading = props.getHeading;
  var data = props.data;
  var justifyClassName$1 =
    justifyClassName !== undefined ? justifyClassName : "justify-start";
  var widthClass$1 = widthClass !== undefined ? widthClass : "md:w-1/2 w-full";
  var bgColor$1 =
    bgColor !== undefined
      ? bgColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  var isButtonEnabled$1 =
    isButtonEnabled !== undefined ? isButtonEnabled : false;
  var border$1 =
    border !== undefined
      ? border
      : "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960";
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var typedPaymentStatus = HSwitchOrderUtils.statusVariantMapper(
    props.paymentStatus,
  );
  return React.createElement(
    OrderUtils.Section.make,
    {
      children: null,
      customCssClass:
        "" + border$1 + " " + bgColor$1 + " rounded-md p-5 h-full",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: isButtonEnabled$1,
      children: React.createElement(
        "div",
        {
          className: "flex items-center flex-wrap gap-3 m-3",
        },
        React.createElement(
          "div",
          {
            className: "flex items-start",
          },
          React.createElement(
            "div",
            {
              className: "md:text-5xl font-bold",
            },
            "" + (data.amount / 100.0).toString() + " " + data.currency + " ",
          ),
          React.createElement(ToolTip.make, {
            description: "Original amount that was authorized for the payment",
            toolTipFor: Caml_option.some(
              React.createElement(Icon.make, {
                name: "tooltip_info",
                className: "mt-1 ml-1",
              }),
            ),
            tooltipWidthClass: "w-fit",
            toolTipPosition: /* Top */ 0,
          }),
        ),
        OrderEntity.useGetStatus(data),
        React.createElement(ACLButton.make, {
          text: "+ Refund",
          buttonState:
            !props.isNonRefundConnector &&
            (typedPaymentStatus === /* Succeeded */ 0 ||
              typedPaymentStatus === /* PartiallyCaptured */ 7) &&
            !HSwitchOrderUtils.isTestData(props.paymentId)
              ? /* Normal */ 0
              : /* Disabled */ 2,
          buttonType: /* Secondary */ 1,
          onClick: function (param) {
            Curry._1(openRefundModal, undefined);
          },
          access: userPermissionJson.operationsManage,
        }),
      ),
    }),
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-wrap " +
            justifyClassName$1 +
            " dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
        },
        props.detailsFields.map(function (colType, i) {
          return React.createElement(
            "div",
            {
              key: i.toString(),
              className: widthClass$1,
            },
            React.createElement(OrderUtils.DisplayKeyValueParams.make, {
              heading: Curry._1(getHeading, colType),
              value: Curry._3(
                getCell,
                data,
                colType,
                Core__Option.getOr(connectorList, []),
              ),
              customMoneyStyle: "!font-normal !text-sm",
              labelMargin: "!py-0 mt-2",
              textColor: "!font-normal !text-jp-gray-700",
              overiddingHeadingStyles: "text-black text-sm font-medium",
            }),
          );
        }),
      ),
    }),
  );
}

var Details = {
  make: ShowOrder$OrderInfo$Details,
};

function ShowOrder$OrderInfo(props) {
  var isMetadata = props.isMetadata;
  var paymentId = props.paymentId;
  var isNonRefundConnector = props.isNonRefundConnector;
  var openRefundModal = props.openRefundModal;
  var isMetadata$1 = isMetadata !== undefined ? isMetadata : false;
  var order = OrderEntity.itemToObjMapper(props.orderDict);
  var paymentStatus = order.status;
  var headingStyles = "font-bold text-lg mb-5";
  var connectorList = Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom);
  return React.createElement(
    "div",
    {
      className: "md:flex md:flex-col md:gap-5",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: !isMetadata$1,
      children: React.createElement(
        "div",
        {
          className: "md:flex md:gap-10 md:items-stretch md:mt-5 mb-10",
        },
        React.createElement(
          "div",
          {
            className: "md:w-1/2 w-full",
          },
          React.createElement(
            "div",
            {
              className: "" + headingStyles + "",
            },
            "Summary",
          ),
          React.createElement(ShowOrder$OrderInfo$Details, {
            data: order,
            getHeading: OrderEntity.getHeadingForSummary,
            getCell: OrderEntity.getCellForSummary,
            detailsFields: [
              /* Created */ 0, /* LastUpdated */ 2, /* AmountReceived */ 5,
              /* PaymentId */ 3, /* ConnectorTransactionID */ 10,
              /* ErrorMessage */ 9,
            ],
            isButtonEnabled: true,
            isNonRefundConnector: isNonRefundConnector,
            paymentStatus: paymentStatus,
            openRefundModal: openRefundModal,
            paymentId: paymentId,
          }),
        ),
        React.createElement(
          "div",
          {
            className: "md:w-1/2 w-full",
          },
          React.createElement(
            "div",
            {
              className: "" + headingStyles + "",
            },
            "About Payment",
          ),
          React.createElement(ShowOrder$OrderInfo$Details, {
            data: order,
            getHeading: OrderEntity.getHeadingForAboutPayment,
            getCell: OrderEntity.getCellForAboutPayment,
            detailsFields: [
              /* ProfileId */ 1, /* ProfileName */ 2, /* Connector */ 0,
              /* ConnectorLabel */ 6, /* PaymentMethodType */ 4,
              /* PaymentMethod */ 3, /* AuthenticationType */ 8,
            ],
            isNonRefundConnector: isNonRefundConnector,
            paymentStatus: paymentStatus,
            openRefundModal: openRefundModal,
            paymentId: paymentId,
            connectorList: connectorList,
          }),
        ),
      ),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: isMetadata$1,
      children: React.createElement(
        "div",
        {
          className: "mb-10",
        },
        React.createElement(ShowOrder$OrderInfo$Details, {
          data: order,
          getHeading: OrderEntity.getHeadingForOtherDetails,
          getCell: OrderEntity.getCellForOtherDetails,
          detailsFields: [
            /* FirstName */ 6, /* LastName */ 7, /* Phone */ 8, /* Email */ 5,
            /* CustomerId */ 9, /* Description */ 10, /* Shipping */ 3,
            /* Billing */ 4, /* BillingEmail */ 25, /* AmountCapturable */ 1,
            /* ErrorCode */ 2, /* MandateData */ 0, /* MerchantId */ 11,
            /* ReturnUrl */ 12, /* OffSession */ 13, /* CaptureOn */ 14,
            /* NextAction */ 16, /* SetupFutureUsage */ 17,
            /* CancellationReason */ 18, /* StatementDescriptorName */ 19,
            /* StatementDescriptorSuffix */ 20, /* PaymentExperience */ 21,
            /* FRMName */ 22, /* FRMTransactionType */ 23, /* FRMStatus */ 24,
          ],
          widthClass: "md:w-1/4 w-full",
          isNonRefundConnector: isNonRefundConnector,
          paymentStatus: paymentStatus,
          openRefundModal: openRefundModal,
          paymentId: paymentId,
          border: "",
        }),
      ),
    }),
  );
}

var OrderInfo = {
  Details: Details,
  make: ShowOrder$OrderInfo,
};

function ShowOrder$RefundSection(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-row flex-wrap",
    },
    React.createElement(
      "div",
      {
        className: "w-full p-2",
      },
      React.createElement(OrderUtils.Details.make, {
        heading: {
          TAG: /* String */ 0,
          _0: "Refund Details",
        },
        data: props.data,
        getHeading: OrderEntity.getRefundHeading,
        getCell: OrderEntity.getRefundCell,
        detailsFields: OrderEntity.refundDetailsFields,
        widthClass: "w-1/3",
      }),
    ),
  );
}

var RefundSection = {
  make: ShowOrder$RefundSection,
};

function ShowOrder$AttemptsSection(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-row flex-wrap",
    },
    React.createElement(
      "div",
      {
        className: "w-full p-2",
      },
      React.createElement(OrderUtils.Details.make, {
        heading: {
          TAG: /* String */ 0,
          _0: "Attempt Details",
        },
        data: props.data,
        getHeading: OrderEntity.getAttemptHeading,
        getCell: OrderEntity.getAttemptCell,
        detailsFields: OrderEntity.attemptDetailsField,
        widthClass: "w-1/3",
      }),
    ),
  );
}

var AttemptsSection = {
  make: ShowOrder$AttemptsSection,
};

function ShowOrder$DisputesSection(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-row flex-wrap",
    },
    React.createElement(
      "div",
      {
        className: "w-1/2 p-2",
      },
      React.createElement(OrderUtils.Details.make, {
        heading: {
          TAG: /* String */ 0,
          _0: "Dispute Details",
        },
        data: props.data,
        getHeading: DisputesEntity.getHeading,
        getCell: DisputesEntity.getCell,
        detailsFields: DisputesEntity.columnsInPaymentPage,
        widthClass: "w-4/12",
      }),
    ),
  );
}

var DisputesSection = {
  make: ShowOrder$DisputesSection,
};

function ShowOrder$Refunds(props) {
  var refundData = props.refundData;
  var match = React.useState(function () {
    return [-1];
  });
  var setExpandedRowIndexArray = match[1];
  var expandedRowIndexArray = match[0];
  var heading = OrderEntity.refundColumns.map(OrderEntity.getRefundHeading);
  React.useEffect(function () {}, [-1]);
  var onExpandIconClick = function (isCurrentRowExpanded, rowIndex) {
    if (isCurrentRowExpanded) {
      var indexOfRemovalItem = expandedRowIndexArray.findIndex(function (item) {
        return item === rowIndex;
      });
      return Curry._1(setExpandedRowIndexArray, function (param) {
        var array = expandedRowIndexArray.map(function (item) {
          return item;
        });
        array.splice(indexOfRemovalItem, 1);
        return array;
      });
    } else {
      return Curry._1(setExpandedRowIndexArray, function (param) {
        return [rowIndex];
      });
    }
  };
  var rows = refundData.map(function (item) {
    return OrderEntity.refundColumns.map(function (colType) {
      return OrderEntity.getRefundCell(item, colType);
    });
  });
  var getRowDetails = function (rowIndex) {
    var data = refundData[rowIndex];
    if (data !== undefined) {
      return React.createElement(ShowOrder$RefundSection, {
        data: data,
      });
    } else {
      return null;
    }
  };
  return React.createElement(CustomExpandableTable.make, {
    title: "Refunds",
    heading: heading,
    rows: rows,
    onExpandIconClick: onExpandIconClick,
    expandedRowIndexArray: expandedRowIndexArray,
    getRowDetails: getRowDetails,
    showSerial: true,
  });
}

var Refunds = {
  make: ShowOrder$Refunds,
};

function ShowOrder$Attempts(props) {
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var match$2 = React.useState(function () {
    return [-1];
  });
  var setExpandedRowIndexArray = match$2[1];
  var expandedRowIndexArray = match$2[0];
  React.useEffect(function () {}, [-1]);
  var onExpandIconClick = function (isCurrentRowExpanded, rowIndex) {
    if (isCurrentRowExpanded) {
      var indexOfRemovalItem = expandedRowIndexArray.findIndex(function (item) {
        return item === rowIndex;
      });
      return Curry._1(setExpandedRowIndexArray, function (param) {
        var array = expandedRowIndexArray.map(function (item) {
          return item;
        });
        array.splice(indexOfRemovalItem, 1);
        return array;
      });
    } else {
      return Curry._1(setExpandedRowIndexArray, function (param) {
        return [rowIndex];
      });
    }
  };
  var attemptsData = OrderEntity.getAttempts(
    LogicUtils.getArrayFromDict(props.orderDict, "attempts", []),
  );
  var heading = OrderEntity.attemptsColumns.map(OrderEntity.getAttemptHeading);
  var rows = attemptsData.map(function (item) {
    return OrderEntity.attemptsColumns.map(function (colType) {
      return OrderEntity.getAttemptCell(item, colType);
    });
  });
  var getRowDetails = function (rowIndex) {
    var data = attemptsData[rowIndex];
    if (data !== undefined) {
      return React.createElement(ShowOrder$AttemptsSection, {
        data: data,
      });
    } else {
      return null;
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-4",
    },
    React.createElement(
      "div",
      {
        className:
          "flex  items-start " +
          match$1.border.borderColor.primaryNormal +
          " text-sm rounded-md gap-2 px-4 py-3",
      },
      React.createElement(Icon.make, {
        name: "info-vacent",
        size: 18,
        className: "" + match$1.font.textColor.primaryNormal + " mt-1",
      }),
      React.createElement(
        "span",
        undefined,
        "You can validate the information shown here by cross checking the payment attempt identifier (Attempt ID) in your payment processor portal.",
      ),
    ),
    React.createElement(
      "p",
      {
        className: "font-bold text-fs-16 text-jp-gray-900",
      },
      "Payment Attempts",
    ),
    React.createElement(CustomExpandableTable.make, {
      title: "Attempts",
      heading: heading,
      rows: rows,
      onExpandIconClick: onExpandIconClick,
      expandedRowIndexArray: expandedRowIndexArray,
      getRowDetails: getRowDetails,
      showSerial: true,
    }),
  );
}

var Attempts = {
  make: ShowOrder$Attempts,
};

function ShowOrder$Disputes(props) {
  var disputesData = props.disputesData;
  var match = React.useState(function () {
    return [-1];
  });
  var setExpandedRowIndexArray = match[1];
  var expandedRowIndexArray = match[0];
  var heading = DisputesEntity.columnsInPaymentPage.map(
    DisputesEntity.getHeading,
  );
  React.useEffect(function () {}, [-1]);
  var onExpandIconClick = function (isCurrentRowExpanded, rowIndex) {
    if (isCurrentRowExpanded) {
      var indexOfRemovalItem = expandedRowIndexArray.findIndex(function (item) {
        return item === rowIndex;
      });
      return Curry._1(setExpandedRowIndexArray, function (param) {
        var array = expandedRowIndexArray.map(function (item) {
          return item;
        });
        array.splice(indexOfRemovalItem, 1);
        return array;
      });
    } else {
      return Curry._1(setExpandedRowIndexArray, function (param) {
        return [rowIndex];
      });
    }
  };
  var rows = disputesData.map(function (item) {
    return DisputesEntity.columnsInPaymentPage.map(function (colType) {
      return DisputesEntity.getCell(item, colType);
    });
  });
  var getRowDetails = function (rowIndex) {
    var data = disputesData[rowIndex];
    if (data !== undefined) {
      return React.createElement(ShowOrder$DisputesSection, {
        data: data,
      });
    } else {
      return null;
    }
  };
  return React.createElement(CustomExpandableTable.make, {
    title: "Disputes",
    heading: heading,
    rows: rows,
    onExpandIconClick: onExpandIconClick,
    expandedRowIndexArray: expandedRowIndexArray,
    getRowDetails: getRowDetails,
    showSerial: true,
  });
}

var Disputes = {
  make: ShowOrder$Disputes,
};

function ShowOrder$OrderActions(props) {
  var setShowModal = props.setShowModal;
  var orderDict = props.orderDict;
  var match = React.useState(function () {
    return 0.0;
  });
  var setAmoutAvailableToRefund = match[1];
  var refundData = OrderEntity.getRefunds(
    LogicUtils.getArrayFromDict(orderDict, "refunds", []),
  );
  var amountRefunded = {
    contents: 0.0,
  };
  var requestedRefundAmount = {
    contents: 0.0,
  };
  refundData.map(function (ele) {
    if (ele.status === "pending") {
      requestedRefundAmount.contents =
        requestedRefundAmount.contents + ele.amount;
      return;
    } else if (ele.status === "succeeded") {
      amountRefunded.contents = amountRefunded.contents + ele.amount;
      return;
    } else {
      return;
    }
  });
  React.useEffect(
    function () {
      Curry._1(setAmoutAvailableToRefund, function (param) {
        return (
          LogicUtils.getFloat(orderDict, "amount", 0.0) / 100.0 -
          amountRefunded.contents / 100.0 -
          requestedRefundAmount.contents / 100.0
        );
      });
    },
    [Object.keys(orderDict).length],
  );
  var order = OrderEntity.itemToObjMapper(orderDict);
  return React.createElement(
    "div",
    {
      className: "flex flex-row justify-right gap-2",
    },
    React.createElement(Modal.make, {
      showModal: props.showModal,
      setShowModal: setShowModal,
      children: React.createElement(OrderRefundForm.make, {
        order: order,
        setShowModal: setShowModal,
        requestedRefundAmount: requestedRefundAmount,
        amountRefunded: amountRefunded,
        amoutAvailableToRefund: match[0],
        refetch: props.refetch,
      }),
      bgClass: "bg-white dark:bg-jp-gray-darkgray_background",
      modalClass:
        "w-fit absolute top-0 lg:top-0 md:top-1/3 left-0 lg:left-1/3 md:left-1/3 md:w-4/12 mt-10",
      childClass: "",
      borderBottom: true,
    }),
  );
}

var OrderActions = {
  make: ShowOrder$OrderActions,
};

function ShowOrder$FraudRiskBannerDetails(props) {
  var refetch = props.refetch;
  var order = props.order;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var updateMerchantDecision = async function (decision) {
    try {
      var ordersDecisionUrl =
        "" +
        APIUtils.getURL(
          /* ORDERS */ 13,
          /* Get */ 0,
          Caml_option.some(order.payment_id),
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ) +
        "/" +
        decision.toLowerCase() +
        "";
      await Curry._7(
        updateDetails,
        ordersDecisionUrl,
        {},
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Details Updated",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(refetch, undefined);
    } catch (exn) {
      return;
    }
  };
  var openPopUp = function (decision) {
    Curry._1(showPopUp, {
      heading: "Confirm Action?",
      description:
        decision === "APPROVE"
          ? "This transaction was deemed fraudulent, to confirm that this is a legitimate transaction and submit it for review in their feedback loop, kindly confirm."
          : "Please confirm if you will like to refund the payment.",
      popUpType: [/* Warning */ 4, /* WithIcon */ 0],
      handleCancel: {
        text: "Cancel",
      },
      handleConfirm: {
        text: "Confirm",
        onClick: function (param) {
          updateMerchantDecision(decision.toLowerCase());
        },
      },
    });
  };
  return React.createElement(
    "div",
    {
      className:
        "w-full bg-white dark:bg-jp-gray-lightgray_background rounded-md px-4 pb-5 h-full",
    },
    React.createElement(
      "div",
      {
        className:
          "flex flex-wrap dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
      },
      OrderEntity.frmColumns.map(function (colType, i) {
        return React.createElement(
          "div",
          {
            key: i.toString(),
            className: "w-1/3",
          },
          React.createElement(OrderUtils.DisplayKeyValueParams.make, {
            heading: OrderEntity.getFrmHeading(colType),
            value: OrderEntity.getFrmCell(order, colType),
            customMoneyStyle: "!font-normal !text-sm",
            labelMargin: "!py-0 mt-2",
            textColor: "!font-normal !text-jp-gray-700",
            overiddingHeadingStyles: "text-black text-sm font-medium",
          }),
        );
      }),
    ),
    React.createElement(UIUtils.RenderIf.make, {
      condition:
        order.merchant_decision.length === 0 &&
        order.frm_message.frm_status === "fraud" &&
        HSwitchOrderUtils.statusVariantMapper(order.status) ===
          /* Succeeded */ 0,
      children: React.createElement(
        "div",
        {
          className: "flex items-center gap-5 justify-end",
        },
        React.createElement(Button.make, {
          text: "Refund",
          buttonType: /* Secondary */ 1,
          onClick: function (param) {
            openPopUp("REJECT");
          },
          customTextSize: "text-sm",
          customButtonStyle: "!p-2",
        }),
        React.createElement(Button.make, {
          text: "Mark as true",
          buttonType: /* Primary */ 0,
          onClick: function (param) {
            openPopUp("APPROVE");
          },
          customTextSize: "text-sm",
          customButtonStyle: "!p-2",
        }),
      ),
    }),
  );
}

var FraudRiskBannerDetails = {
  make: ShowOrder$FraudRiskBannerDetails,
};

function ShowOrder$FraudRiskBanner(props) {
  var refElement = props.refElement;
  var frmMessage = props.frmMessage;
  var match = React.useContext(ConfigContext.configContext);
  return React.createElement(
    "div",
    {
      className:
        "flex justify-between items-center w-full  p-4 rounded-md bg-white border border-[#C04141]/50 ",
    },
    React.createElement(
      "div",
      {
        className: "flex gap-2",
      },
      React.createElement("img", {
        src: "/icons/redFlag.svg",
      }),
      React.createElement(
        "p",
        {
          className: "text-lightgray_background font-medium text-fs-16",
        },
        "This payment is marked fraudulent by " + frmMessage.frm_name + ".",
      ),
      React.createElement(GatewayIcon.make, {
        gateway: frmMessage.frm_name.toUpperCase(),
        className: "w-6 h-6 rounded-full",
      }),
    ),
    React.createElement(
      "div",
      {
        className:
          "" +
          match.globalUIConfig.font.textColor.primaryNormal +
          " font-semibold text-fs-16 cursor-pointer",
        onClick: function (param) {
          Core__Option.forEach(
            Caml_option.nullable_to_opt(refElement.current),
            function (input) {
              input.scrollIntoView({
                behavior: "smooth",
                block: "start",
                inline: "nearest",
              });
            },
          );
        },
      },
      "Review details",
    ),
  );
}

var FraudRiskBanner = {
  make: ShowOrder$FraudRiskBanner,
};

function ShowOrder(props) {
  var id = props.id;
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var match$1 = React.useState(function () {
    return 0;
  });
  var setRefetchCounter = match$1[1];
  var match$2 = React.useState(function () {
    return false;
  });
  var setShowModal = match$2[1];
  var frmDetailsRef = React.useRef(null);
  var orderData = OrderHooks.useGetOrdersData(id, match$1[0], match[1]);
  var order = OrderEntity.itemToObjMapper(
    LogicUtils.getDictFromJsonObject(orderData),
  );
  var refundData = OrderEntity.getRefunds(
    LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(orderData),
      "refunds",
      [],
    ),
  );
  var isRefundDataAvailable = refundData.length !== 0;
  var disputesData = DisputesEntity.getDisputes(
    LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(orderData),
      "disputes",
      [],
    ),
  );
  var isDisputeDataVisible = disputesData.length !== 0;
  var createdAt = React.useMemo(
    function () {
      return LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(orderData),
        "created",
        "",
      );
    },
    [orderData],
  );
  var refetch = React.useCallback(
    function (param) {
      Curry._1(setRefetchCounter, function (p) {
        return (p + 1) | 0;
      });
    },
    [setRefetchCounter],
  );
  var openRefundModal = function (param) {
    Curry._1(setShowModal, function (param) {
      return true;
    });
  };
  var showSyncButton = React.useCallback(
    function (param) {
      var status = HSwitchOrderUtils.statusVariantMapper(
        LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(orderData),
          "status",
          "",
        ),
      );
      if (!HSwitchOrderUtils.isTestData(id) && status !== /* Succeeded */ 0) {
        return status !== /* Failed */ 1;
      } else {
        return false;
      }
    },
    [orderData],
  );
  var refreshStatus = async function (param) {
    try {
      var getRefreshStatusUrl = APIUtils.getURL(
        /* ORDERS */ 13,
        /* Get */ 0,
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        "force_sync=true",
        undefined,
      );
      await Curry._1(fetchDetails, getRefreshStatusUrl);
      Curry._8(
        showToast,
        "Details Updated",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(refetch, undefined);
    } catch (exn) {
      return;
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-scroll gap-8",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between w-full",
      },
      React.createElement(
        "div",
        {
          className: "flex items-end justify-between w-full",
        },
        React.createElement(
          "div",
          {
            className: "w-full",
          },
          React.createElement(PageUtils.PageHeading.make, {
            title: "Payments",
          }),
          React.createElement(BreadCrumbNavigation.make, {
            path: [
              {
                title: "Payments",
                link: "/payments",
              },
            ],
            currentPageTitle: id,
            cursorStyle: "cursor-pointer",
          }),
        ),
        React.createElement(UIUtils.RenderIf.make, {
          condition: Curry._1(showSyncButton, undefined),
          children: React.createElement(ACLButton.make, {
            text: "Sync",
            buttonType: /* Primary */ 0,
            leftIcon: {
              TAG: /* CustomIcon */ 1,
              _0: React.createElement(Icon.make, {
                name: "sync",
                className:
                  "jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
              }),
            },
            onClick: function (param) {
              refreshStatus(undefined);
            },
            customButtonStyle: "!w-fit !px-4",
            access: userPermissionJson.operationsView,
          }),
        }),
        React.createElement("div", undefined),
      ),
      React.createElement(ShowOrder$OrderActions, {
        orderDict: LogicUtils.getDictFromJsonObject(orderData),
        refetch: refetch,
        showModal: match$2[0],
        setShowModal: setShowModal,
      }),
    ),
    React.createElement(UIUtils.RenderIf.make, {
      condition: order.frm_message.frm_status === "fraud",
      children: React.createElement(ShowOrder$FraudRiskBanner, {
        frmMessage: order.frm_message,
        refElement: frmDetailsRef,
      }),
    }),
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(
        React.createElement(
          "div",
          {
            className: "flex flex-col gap-8",
          },
          React.createElement(ShowOrder$OrderInfo, {
            orderDict: LogicUtils.getDictFromJsonObject(orderData),
            openRefundModal: openRefundModal,
            isNonRefundConnector:
              HSwitchOrderUtils.isNonRefundConnector(orderData),
            paymentId: id,
          }),
          React.createElement(
            "div",
            {
              className: "overflow-scroll",
            },
            React.createElement(ShowOrder$Attempts, {
              orderDict: LogicUtils.getDictFromJsonObject(orderData),
            }),
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: isRefundDataAvailable,
            children: React.createElement(
              "div",
              {
                className: "overflow-scroll",
              },
              React.createElement(OrderUIUtils.RenderAccordian.make, {
                initialExpandedArray: isRefundDataAvailable ? [0] : [],
                accordion: [
                  {
                    title: "Refunds",
                    renderContent: function (param) {
                      return React.createElement(ShowOrder$Refunds, {
                        refundData: refundData,
                      });
                    },
                    renderContentOnTop: undefined,
                  },
                ],
              }),
            ),
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: isDisputeDataVisible,
            children: React.createElement(
              "div",
              {
                className: "overflow-scroll",
              },
              React.createElement(OrderUIUtils.RenderAccordian.make, {
                initialExpandedArray: isDisputeDataVisible ? [0] : [],
                accordion: [
                  {
                    title: "Disputes",
                    renderContent: function (param) {
                      return React.createElement(ShowOrder$Disputes, {
                        disputesData: disputesData,
                      });
                    },
                    renderContentOnTop: undefined,
                  },
                ],
              }),
            ),
          }),
          React.createElement(
            "div",
            {
              className: "overflow-scroll",
            },
            React.createElement(OrderUIUtils.RenderAccordian.make, {
              accordion: [
                {
                  title: "FRM Details",
                  renderContent: function (param) {
                    return React.createElement(
                      "div",
                      {
                        ref: Caml_option.some(frmDetailsRef),
                      },
                      React.createElement(ShowOrder$FraudRiskBannerDetails, {
                        order: order,
                        refetch: refetch,
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: featureFlagDetails.auditTrail,
            children: React.createElement(OrderUIUtils.RenderAccordian.make, {
              accordion: [
                {
                  title: "Events and logs",
                  renderContent: function (param) {
                    return React.createElement(LogsWrapper.make, {
                      wrapperFor: "PAYMENT",
                      children: React.createElement(PaymentLogs.make, {
                        paymentId: id,
                        createdAt: createdAt,
                      }),
                    });
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition:
              order.payment_method === "card" &&
              Core__Option.isSome(order.payment_method_data),
            children: React.createElement(OrderUIUtils.RenderAccordian.make, {
              accordion: [
                {
                  title: "Payment Method Details",
                  renderContent: function (param) {
                    return React.createElement(
                      "div",
                      {
                        className: "bg-white p-2",
                      },
                      React.createElement(PrettyPrintJson.make, {
                        jsonToDisplay: Core__Option.getOr(
                          JSON.stringify(order.payment_method_data),
                          "",
                        ),
                        overrideBackgroundColor: "bg-white",
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: !LogicUtils.isEmptyDict(order.metadata),
            children: React.createElement(OrderUIUtils.RenderAccordian.make, {
              accordion: [
                {
                  title: "Payment Metadata",
                  renderContent: function (param) {
                    return React.createElement(
                      "div",
                      {
                        className: "bg-white p-2",
                      },
                      React.createElement(PrettyPrintJson.make, {
                        jsonToDisplay: Core__Option.getOr(
                          JSON.stringify(order.metadata),
                          "",
                        ),
                        overrideBackgroundColor: "bg-white",
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
            }),
          }),
          React.createElement(OrderUIUtils.RenderAccordian.make, {
            accordion: [
              {
                title: "More Payment Details",
                renderContent: function (param) {
                  return React.createElement(ShowOrder$OrderInfo, {
                    orderDict: LogicUtils.getDictFromJsonObject(orderData),
                    openRefundModal: openRefundModal,
                    isNonRefundConnector:
                      HSwitchOrderUtils.isNonRefundConnector(orderData),
                    paymentId: id,
                    isMetadata: true,
                  });
                },
                renderContentOnTop: undefined,
              },
            ],
          }),
        ),
      ),
      screenState: match[0],
      customUI: Caml_option.some(
        React.createElement(NoDataFound.make, {
          message: "Payment does not exists in out record",
          renderType: /* NotFound */ 2,
        }),
      ),
    }),
  );
}

var make = ShowOrder;

export {
  OrderInfo,
  RefundSection,
  AttemptsSection,
  DisputesSection,
  Refunds,
  Attempts,
  Disputes,
  OrderActions,
  FraudRiskBannerDetails,
  FraudRiskBanner,
  make,
};
/* Icon Not a pure module */
