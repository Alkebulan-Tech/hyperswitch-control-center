// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";

function statusVariantMapper(statusLabel) {
  var match = statusLabel.toUpperCase();
  switch (match) {
    case "CANCELLED":
      return /* Cancelled */ 2;
    case "FAILED":
      return /* Failed */ 1;
    case "PARTIALLY_CAPTURED":
      return /* PartiallyCaptured */ 7;
    case "PROCESSING":
      return /* Processing */ 3;
    case "REQUIRES_CONFIRMATION":
      return /* RequiresConfirmation */ 6;
    case "REQUIRES_CUSTOMER_ACTION":
      return /* RequiresCustomerAction */ 4;
    case "REQUIRES_PAYMENT_METHOD":
      return /* RequiresPaymentMethod */ 5;
    case "SUCCEEDED":
      return /* Succeeded */ 0;
    default:
      return /* None */ 8;
  }
}

function paymentAttemptStatusVariantMapper(statusLabel) {
  var match = statusLabel.toUpperCase();
  switch (match) {
    case "AUTHENTICATION_FAILED":
      return "AUTHENTICATION_FAILED";
    case "AUTHENTICATION_PENDING":
      return "AUTHENTICATION_PENDING";
    case "AUTHENTICATION_SUCCESSFUL":
      return "AUTHENTICATION_SUCCESSFUL";
    case "AUTHORIZATION_FAILED":
      return "AUTHORIZATION_FAILED";
    case "AUTHORIZED":
      return "AUTHORIZED";
    case "AUTHORIZING":
      return "AUTHORIZING";
    case "AUTO_REFUNDED":
      return "AUTO_REFUNDED";
    case "CAPTURE_FAILED":
      return "CAPTURE_FAILED";
    case "CAPTURE_INITIATED":
      return "CAPTURE_INITIATED";
    case "CHARGED":
      return "CHARGED";
    case "COD_INITIATED":
      return "COD_INITIATED";
    case "CONFIRMATION_AWAITED":
      return "CONFIRMATION_AWAITED";
    case "DEVICE_DATA_COLLECTION_PENDING":
      return "DEVICE_DATA_COLLECTION_PENDING";
    case "FAILURE":
      return "FAILURE";
    case "PARTIAL_CHARGED":
      return "PARTIAL_CHARGED";
    case "PAYMENT_METHOD_AWAITED":
      return "PAYMENT_METHOD_AWAITED";
    case "PENDING":
      return "PENDING";
    case "ROUTER_DECLINED":
      return "ROUTER_DECLINED";
    case "STARTED":
      return "STARTED";
    case "UNRESOLVED":
      return "UNRESOLVED";
    case "VOIDED":
      return "VOIDED";
    case "VOID_FAILED":
      return "VOID_FAILED";
    case "VOID_INITIATED":
      return "VOID_INITIATED";
    default:
      return "NONE";
  }
}

function refundStatusVariantMapper(statusLabel) {
  var match = statusLabel.toUpperCase();
  switch (match) {
    case "FAILURE":
      return /* Failure */ 2;
    case "PENDING":
      return /* Pending */ 1;
    case "SUCCESS":
      return /* Success */ 0;
    default:
      return /* None */ 3;
  }
}

function isTestData(id) {
  return id.includes("test_");
}

var amountField = FormRenderer.makeFieldInfo(
  "Refund Amount",
  undefined,
  "amount",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      return InputFields.numericTextInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Refund Amount",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var reasonField = FormRenderer.makeFieldInfo(
  "Reason",
  undefined,
  "reason",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Refund Reason",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  false,
  undefined,
  undefined,
  undefined,
);

var nonRefundConnectors = ["braintree", "klarna", "airwallex"];

function isNonRefundConnector(json) {
  return nonRefundConnectors.includes(
    LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(json),
      "connectors",
      "",
    ),
  );
}

export {
  statusVariantMapper,
  paymentAttemptStatusVariantMapper,
  refundStatusVariantMapper,
  isTestData,
  amountField,
  reasonField,
  nonRefundConnectors,
  isNonRefundConnector,
};
/* amountField Not a pure module */
