// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../components/Button.bs.js";
import * as APIUtils from "./APIUtils/APIUtils.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as SelectBox from "../components/SelectBox.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InputFields from "../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../components/form/FormRenderer.bs.js";
import * as RemoteFilter from "../components/RemoteFilter.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function formateDateString(date) {
  return TimeZoneHook.formattedISOString(
    date.toISOString(),
    "YYYY-MM-DDTHH:mm:[00][Z]",
  );
}

function getDateFilteredObject(param) {
  var currentDate = new Date();
  var end_time = TimeZoneHook.formattedISOString(
    currentDate.toISOString(),
    "YYYY-MM-DDTHH:mm:[00][Z]",
  );
  var date = new Date(
    new Date(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      currentDate.getDate(),
    ).setDate(((currentDate.getDate() | 0) - 7) | 0),
  );
  var start_time = TimeZoneHook.formattedISOString(
    date.toISOString(),
    "YYYY-MM-DDTHH:mm:[00][Z]",
  );
  return {
    start_time: start_time,
    end_time: end_time,
  };
}

function getFilterFields(json) {
  var filterDict = LogicUtils.getDictFromJsonObject(json);
  return Core__Array.reduce(Object.keys(filterDict), [], function (acc, key) {
    var title = "Select " + LogicUtils.snakeToTitle(key) + "";
    var values = LogicUtils.getStrArrayFromJsonArray(
      LogicUtils.getArrayFromDict(filterDict, key, []),
    );
    var arg = SelectBox.makeOptions(values).map(function (item) {
      var newrecord = Caml_obj.obj_dup(item);
      newrecord.label = item.value;
      return newrecord;
    });
    var dropdownOptions_field = FormRenderer.makeFieldInfo(
      "",
      undefined,
      key,
      function (param) {
        var func = Curry._3(
          InputFields.multiSelectInput,
          param,
          arg,
          undefined,
        );
        return function (param) {
          return Curry.app(func, [
            param,
            title,
            undefined,
            undefined,
            false,
            undefined,
            undefined,
            true,
            undefined,
            undefined,
            undefined,
            undefined,
            "bg-none",
            undefined,
            undefined,
            true,
            true,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          ]);
        };
      },
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var dropdownOptions_parser = function (val) {
      return val;
    };
    var dropdownOptions = {
      urlKey: key,
      field: dropdownOptions_field,
      parser: dropdownOptions_parser,
      localFilter: undefined,
    };
    if (values.length > 0) {
      acc.push(dropdownOptions);
    }
    return acc;
  });
}

function useSetInitialFilters(
  updateExistingKeys,
  startTimeFilterKey,
  endTimeFilterKey,
) {
  var match = React.useContext(FilterContext.filterContext);
  var filterValueJson = match.filterValueJson;
  return function (param) {
    var inititalSearchParam = {};
    var defaultDate = getDateFilteredObject(undefined);
    if (Object.keys(filterValueJson).length < 1) {
      [
        [startTimeFilterKey, defaultDate.start_time],
        [endTimeFilterKey, defaultDate.end_time],
      ].forEach(function (item) {
        var key = item[0];
        var match = inititalSearchParam[key];
        if (match !== undefined) {
          return;
        } else {
          inititalSearchParam[key] = item[1];
          return;
        }
      });
      return Curry._1(updateExistingKeys, inititalSearchParam);
    }
  };
}

function HSwitchRemoteFilter$SearchBarFilter(props) {
  var searchVal = props.searchVal;
  var setSearchVal = props.setSearchVal;
  var match = React.useState(function () {
    return "";
  });
  var setSearchValBase = match[1];
  var searchValBase = match[0];
  var onChange = function (ev) {
    var value = ev.target.value;
    Curry._1(setSearchValBase, function (param) {
      return value;
    });
  };
  React.useEffect(
    function () {
      var onKeyPress = function ($$event) {
        var keyPressed = $$event.key;
        if (keyPressed === "Enter") {
          return Curry._1(setSearchVal, function (param) {
            return searchValBase;
          });
        }
      };
      window.addEventListener("keydown", onKeyPress);
      return function (param) {
        window.removeEventListener("keydown", onKeyPress);
      };
    },
    [searchValBase],
  );
  React.useEffect(
    function () {
      if (searchValBase.length < 1 && LogicUtils.isNonEmptyString(searchVal)) {
        Curry._1(setSearchVal, function (param) {
          return searchValBase;
        });
      }
    },
    [searchValBase],
  );
  var inputSearch_onBlur = function (_ev) {};
  var inputSearch_onFocus = function (_ev) {};
  var inputSearch = {
    name: "name",
    onBlur: inputSearch_onBlur,
    onChange: onChange,
    onFocus: inputSearch_onFocus,
    value: searchValBase,
    checked: true,
  };
  return React.createElement(
    "div",
    {
      className: "w-1/3 flex items-center",
    },
    InputFields.textInput(
      inputSearch,
      props.placeholder,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      "w-full",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    ),
    React.createElement(Button.make, {
      buttonType: /* Secondary */ 1,
      leftIcon: {
        TAG: /* FontAwesome */ 0,
        _0: "search",
      },
      onClick: function (param) {
        Curry._1(setSearchVal, function (param) {
          return searchValBase;
        });
      },
    }),
  );
}

var SearchBarFilter = {
  make: HSwitchRemoteFilter$SearchBarFilter,
};

function HSwitchRemoteFilter$RemoteTableFilters(props) {
  var setOffset = props.setOffset;
  var initialFixedFilter = props.initialFixedFilter;
  var startTimeFilterKey = props.startTimeFilterKey;
  var endTimeFilterKey = props.endTimeFilterKey;
  var setFilters = props.setFilters;
  var filterUrl = props.filterUrl;
  var match = React.useContext(FilterContext.filterContext);
  var filterValueJson = match.filterValueJson;
  var removeKeys = match.removeKeys;
  var updateExistingKeys = match.updateExistingKeys;
  var filterValue = match.filterValue;
  var defaultFilters = "";
  var customViewTop = React.createElement(HSwitchRemoteFilter$SearchBarFilter, {
    placeholder: props.placeholder,
    setSearchVal: props.setSearchVal,
    searchVal: props.searchVal,
  });
  React.useEffect(function () {
    if (Object.keys(filterValueJson).length === 0) {
      Curry._1(setFilters, function (param) {
        return {};
      });
      Curry._1(setOffset, function (param) {
        return 0;
      });
    }
  }, []);
  var endTimeVal = LogicUtils.getString(filterValueJson, endTimeFilterKey, "");
  var startTimeVal = LogicUtils.getString(
    filterValueJson,
    startTimeFilterKey,
    "",
  );
  var filterBody = React.useMemo(
    function () {
      return Object.fromEntries([
        [startTimeFilterKey, startTimeVal],
        [endTimeFilterKey, endTimeVal],
      ]);
    },
    [startTimeVal, endTimeVal, filterValue],
  );
  var match$1 = React.useState(function () {});
  var setFilterDataJson = match$1[1];
  var filterDataJson = match$1[0];
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$2 = React.useContext(FilterContext.filterContext);
  var filterValueJson$1 = match$2.filterValueJson;
  var startTimeVal$1 = LogicUtils.getString(
    filterValueJson$1,
    "start_time",
    "",
  );
  var endTimeVal$1 = LogicUtils.getString(filterValueJson$1, "end_time", "");
  React.useEffect(
    function () {
      Curry._1(setFilterDataJson, function (param) {});
      if (
        LogicUtils.isNonEmptyString(startTimeVal$1) &&
        LogicUtils.isNonEmptyString(endTimeVal$1)
      ) {
        try {
          Core__Promise.$$catch(
            Curry._7(
              updateDetails,
              filterUrl,
              filterBody,
              /* Post */ 2,
              undefined,
              undefined,
              undefined,
              undefined,
            ).then(function (json) {
              Curry._1(setFilterDataJson, function (param) {
                return Caml_option.some(json);
              });
            }),
            function (param) {
              return Promise.resolve(undefined);
            },
          );
        } catch (exn) {}
      }
    },
    [startTimeVal$1, endTimeVal$1, JSON.stringify(filterBody)],
  );
  var filterData = Core__Option.getOr(filterDataJson, {});
  React.useEffect(
    function () {
      if (Object.keys(filterValueJson$1).length !== 0) {
        Curry._1(setFilters, function (param) {
          return Caml_option.some(filterValueJson$1);
        });
        Curry._1(setOffset, function (param) {
          return 0;
        });
      }
    },
    [filterValue],
  );
  var remoteFilters = Curry._1(props.initialFilters, filterData);
  var initialDisplayFilters = remoteFilters.filter(function (item) {
    return Core__Option.isSome(item.localFilter);
  });
  var remoteOptions = [];
  var clearFilters = function (param) {
    Curry._1(
      removeKeys,
      Object.keys(LogicUtils.getDictFromJsonObject(filterData)),
    );
  };
  var hideFiltersDefaultValue =
    Object.keys(filterValue).filter(function (item) {
      return Core__Option.isNone(
        [startTimeFilterKey, endTimeFilterKey].find(function (key) {
          return key === item;
        }),
      );
    }).length <= 0;
  if (filterDataJson !== undefined) {
    return JsxPPXReactSupport.createElementWithKey("0", RemoteFilter.make, {
      defaultFilters: defaultFilters,
      fixedFilters: Curry._1(initialFixedFilter, undefined),
      requiredSearchFieldsList: [],
      remoteFilters: remoteFilters,
      remoteOptions: remoteOptions,
      localOptions: [],
      localFilters: initialDisplayFilters,
      autoApply: false,
      showExtraFiltersInline: true,
      showClearFilterButton: true,
      defaultFilterKeys: [startTimeFilterKey, endTimeFilterKey],
      customViewTop: Caml_option.some(customViewTop),
      updateUrlWith: updateExistingKeys,
      clearFilters: clearFilters,
      filterFieldsPortalName: "",
      showFiltersBtn: getFilterFields(filterData).length > 0,
      hideFiltersDefaultValue: hideFiltersDefaultValue,
      disableURIdecode: true,
    });
  } else {
    return JsxPPXReactSupport.createElementWithKey("1", RemoteFilter.make, {
      defaultFilters: defaultFilters,
      fixedFilters: Curry._1(initialFixedFilter, undefined),
      requiredSearchFieldsList: [],
      remoteFilters: [],
      remoteOptions: [],
      localOptions: [],
      localFilters: [],
      autoApply: false,
      showExtraFiltersInline: true,
      showClearFilterButton: true,
      defaultFilterKeys: [startTimeFilterKey, endTimeFilterKey],
      customViewTop: Caml_option.some(customViewTop),
      updateUrlWith: updateExistingKeys,
      clearFilters: clearFilters,
      filterFieldsPortalName: "",
      showFiltersBtn: false,
      hideFiltersDefaultValue: hideFiltersDefaultValue,
      disableURIdecode: true,
    });
  }
}

var RemoteTableFilters = {
  make: HSwitchRemoteFilter$RemoteTableFilters,
};

export {
  formateDateString,
  getDateFilteredObject,
  getFilterFields,
  useSetInitialFilters,
  SearchBarFilter,
  RemoteTableFilters,
};
/* react Not a pure module */
