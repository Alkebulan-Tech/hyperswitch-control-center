// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as TextInput from "../../components/form/TextInput.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ButtonGroup from "../../components/ButtonGroup.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as RoutingUtils from "../Routing/RoutingUtils.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as ReactFinalForm from "../../libraries/ReactFinalForm.bs.js";
import * as NumericTextInput from "../../components/form/NumericTextInput.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as AdvancedRoutingUtils from "./AdvancedRoutingUtils.bs.js";
import * as MakeRuleFieldComponent from "../../components/MakeRuleFieldComponent.bs.js";

function AdvancedRoutingUIUtils$LogicalOps(props) {
  var match = React.useContext(ConfigContext.configContext);
  var textColor = match.globalUIConfig.font.textColor;
  var logicalOpsInput = ReactFinalForm$1.useField(
    "" + props.id + ".logical",
  ).input;
  React.useEffect(function () {
    if (LogicUtils.getStringFromJson(logicalOpsInput.value, "").length === 0) {
      Curry._1(logicalOpsInput.onChange, "AND");
    }
  }, []);
  return React.createElement(ButtonGroup.make, {
    children: ["AND", "OR"].map(function (text, i) {
      var active =
        LogicUtils.getStringFromJson(logicalOpsInput.value, "") === text;
      return JsxPPXReactSupport.createElementWithKey(
        i.toString(),
        Button.make,
        {
          text: text,
          buttonType: active ? /* SecondaryFilled */ 3 : /* Secondary */ 1,
          onClick: function (param) {
            Curry._1(logicalOpsInput.onChange, text);
          },
          textStyle: active ? "" + textColor.primaryNormal + "" : "",
          textWeight: active ? "font-semibold" : "font-medium",
          customButtonStyle: active ? "shadow-inner px-0" : "px-0",
        },
      );
    }),
    wrapperClass: "flex flex-row mr-2 ml-1",
  });
}

var LogicalOps = {
  make: AdvancedRoutingUIUtils$LogicalOps,
};

function AdvancedRoutingUIUtils$OperatorInp(props) {
  var keyType = props.keyType;
  var fieldsArray = props.fieldsArray;
  var defaultInput_input = ReactFinalForm.makeInputRecord("", function (_e) {});
  var defaultInput_meta = ReactFinalForm.makeCustomError(undefined);
  var defaultInput = {
    input: defaultInput_input,
    meta: defaultInput_meta,
  };
  var field = Core__Option.getOr(fieldsArray[0], defaultInput).input;
  var operator = Core__Option.getOr(fieldsArray[1], defaultInput).input;
  var valInp = Core__Option.getOr(fieldsArray[2], defaultInput).input;
  var match = React.useState(function () {
    return [];
  });
  var setOpVals = match[1];
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    Curry._1(operator.onChange, ev);
  };
  var input_onFocus = function (_ev) {};
  var input_value = operator.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  React.useEffect(
    function () {
      var match = AdvancedRoutingUtils.variantTypeMapper(keyType);
      var operatorVals;
      if (typeof match === "number") {
        switch (match) {
          case /* Number */ 0:
            operatorVals = ["EQUAL TO", "GREATER THAN", "LESS THAN"];
            break;
          case /* Enum_variant */ 1:
            operatorVals = ["IS", "CONTAINS", "IS_NOT", "NOT_CONTAINS"];
            break;
          case /* Metadata_value */ 2:
            operatorVals = ["EQUAL TO"];
            break;
          case /* String_value */ 3:
            operatorVals = ["EQUAL TO", "NOT EQUAL_TO"];
            break;
        }
      } else {
        operatorVals = [];
      }
      Curry._1(setOpVals, function (param) {
        return operatorVals;
      });
      if (Core__Option.isNone(Core__JSON.Decode.string(operator.value))) {
        Curry._1(operator.onChange, operatorVals[0]);
      }
    },
    [field.value, valInp.value],
  );
  var descriptionDict = Object.fromEntries([
    ["IS", "Includes only results that exactly match the filter value(s)."],
    [
      "CONTAINS",
      "Includes only results with any value for the filter property.",
    ],
    ["IS_NOT", "Includes results that does not match the filter value(s)."],
    [
      "NOT_CONTAINS",
      "Includes results except any value for the filter property.",
    ],
  ]);
  var disableSelect =
    Core__Option.getOr(Core__JSON.Decode.string(field.value), "").length === 0;
  var operatorOptions = match[0].map(function (opVal) {
    var obj = {
      label: opVal,
      value: opVal,
    };
    var description = descriptionDict[opVal];
    if (description === undefined) {
      return obj;
    }
    var newrecord = Caml_obj.obj_dup(obj);
    newrecord.description = description;
    return newrecord;
  });
  var textColorStyle = disableSelect
    ? "text-hyperswitch_red opacity-50"
    : "text-hyperswitch_red";
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: "Select Operator",
    allowMultiSelect: false,
    input: input,
    options: operatorOptions,
    hideMultiSelectButtons: true,
    disableSelect: disableSelect,
    textStyle: "text-body " + textColorStyle + "",
  });
}

var OperatorInp = {
  make: AdvancedRoutingUIUtils$OperatorInp,
};

function AdvancedRoutingUIUtils$ValueInp(props) {
  var keyType = props.keyType;
  var variantValues = props.variantValues;
  var fieldsArray = props.fieldsArray;
  var valueField = Core__Option.getOr(
    fieldsArray[1],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var opField = Core__Option.getOr(
    fieldsArray[2],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var typeField = Core__Option.getOr(
    fieldsArray[3],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  React.useEffect(
    function () {
      var tmp;
      if (
        AdvancedRoutingUtils.variantTypeMapper(keyType) ===
        /* Metadata_value */ 2
      ) {
        tmp = "metadata_variant";
      } else if (
        AdvancedRoutingUtils.variantTypeMapper(keyType) === /* String_value */ 3
      ) {
        tmp = "str_value";
      } else {
        var match = AdvancedRoutingUtils.operatorMapper(
          LogicUtils.getStringFromJson(opField.value, ""),
        );
        if (typeof match === "number") {
          switch (match) {
            case /* IS */ 0:
            case /* IS_NOT */ 1:
              tmp = "enum_variant";
              break;
            case /* CONTAINS */ 5:
            case /* NOT_CONTAINS */ 6:
              tmp = "enum_variant_array";
              break;
            case /* GREATER_THAN */ 2:
            case /* LESS_THAN */ 3:
            case /* EQUAL_TO */ 4:
            case /* NOT_EQUAL_TO */ 7:
              tmp = "number";
              break;
          }
        } else {
          tmp = "number";
        }
      }
      Curry._1(typeField.onChange, tmp);
    },
    [valueField.value],
  );
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    Curry._1(valueField.onChange, ev);
  };
  var input_onFocus = function (_ev) {};
  var input_value = valueField.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  var match = AdvancedRoutingUtils.operatorMapper(
    LogicUtils.getStringFromJson(opField.value, ""),
  );
  var exit = 0;
  if (typeof match !== "number") {
    return null;
  }
  switch (match) {
    case /* IS */ 0:
    case /* IS_NOT */ 1:
      exit = 2;
      break;
    case /* GREATER_THAN */ 2:
    case /* LESS_THAN */ 3:
      exit = 3;
      break;
    case /* EQUAL_TO */ 4:
      var match$1 = AdvancedRoutingUtils.variantTypeMapper(keyType);
      var exit$1 = 0;
      if (typeof match$1 === "number") {
        if (match$1 >= 2) {
          return React.createElement(TextInput.make, {
            input: input,
            placeholder: "Enter value",
          });
        }
        exit$1 = 4;
      } else {
        exit$1 = 4;
      }
      if (exit$1 === 4) {
        return React.createElement(NumericTextInput.make, {
          input: input,
          placeholder: "Enter value",
        });
      }
      break;
    case /* CONTAINS */ 5:
    case /* NOT_CONTAINS */ 6:
      exit = 1;
      break;
    case /* NOT_EQUAL_TO */ 7:
      return React.createElement(TextInput.make, {
        input: input,
        placeholder: "Enter value",
      });
  }
  switch (exit) {
    case 1:
      return React.createElement(SelectBox.BaseDropdown.make, {
        buttonText: "Select Value",
        allowMultiSelect: true,
        input: input,
        options: SelectBox.makeOptions(variantValues),
        hideMultiSelectButtons: true,
        showSelectionAsChips: false,
      });
    case 2:
      var val = LogicUtils.getStringFromJson(valueField.value, "");
      return React.createElement(SelectBox.BaseDropdown.make, {
        buttonText: val.length === 0 ? "Select Value" : val,
        allowMultiSelect: false,
        input: input,
        options: SelectBox.makeOptions(variantValues),
        hideMultiSelectButtons: true,
        fixedDropDownDirection: /* TopRight */ 5,
      });
    case 3:
      return React.createElement(NumericTextInput.make, {
        input: input,
        placeholder: "Enter value",
      });
  }
}

var ValueInp = {
  make: AdvancedRoutingUIUtils$ValueInp,
};

function AdvancedRoutingUIUtils$MetadataInp(props) {
  var valueField = Core__Option.getOr(
    props.fieldsArray[2],
    ReactFinalForm.fakeFieldRenderProps,
  ).input;
  var textInput_onBlur = function (_ev) {
    var value = valueField.value;
    var val = LogicUtils.getStringFromJson(value, "");
    var valSplit = val.split(",");
    var arrStr = valSplit.map(function (item) {
      return item.trim();
    });
    Curry._1(valueField.onChange, arrStr.join(","));
  };
  var textInput_onChange = function (ev) {
    var target = ev.target;
    Curry._1(valueField.onChange, target.value);
  };
  var textInput_onFocus = function (_ev) {};
  var textInput_value = valueField.value;
  var textInput = {
    name: "string",
    onBlur: textInput_onBlur,
    onChange: textInput_onChange,
    onFocus: textInput_onFocus,
    value: textInput_value,
    checked: true,
  };
  return React.createElement(UIUtils.RenderIf.make, {
    condition:
      AdvancedRoutingUtils.variantTypeMapper(props.keyType) ===
      /* Metadata_value */ 2,
    children: React.createElement(TextInput.make, {
      input: textInput,
      placeholder: "Enter Key",
    }),
  });
}

var MetadataInp = {
  make: AdvancedRoutingUIUtils$MetadataInp,
};

function renderOperatorInp(keyType, fieldsArray) {
  return React.createElement(AdvancedRoutingUIUtils$OperatorInp, {
    fieldsArray: fieldsArray,
    keyType: keyType,
  });
}

function renderValueInp(keyType, variantValues, fieldsArray) {
  return React.createElement(AdvancedRoutingUIUtils$ValueInp, {
    fieldsArray: fieldsArray,
    variantValues: variantValues,
    keyType: keyType,
  });
}

function renderMetaInput(keyType, fieldsArray) {
  return React.createElement(AdvancedRoutingUIUtils$MetadataInp, {
    fieldsArray: fieldsArray,
    keyType: keyType,
  });
}

function operatorInput(id, keyType) {
  return FormRenderer.makeMultiInputFieldInfoOld(
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    function (param) {
      return renderOperatorInp(keyType, param);
    },
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".lhs",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".comparison",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".value.value",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function valueInput(id, variantValues, keyType) {
  var valuePath =
    AdvancedRoutingUtils.variantTypeMapper(keyType) === /* Metadata_value */ 2
      ? "value.value.value"
      : "value.value";
  return FormRenderer.makeMultiInputFieldInfoOld(
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    function (param) {
      return renderValueInp(keyType, variantValues, param);
    },
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".lhs",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + "." + valuePath + "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".comparison",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".value.type",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function metaInput(id, keyType) {
  return FormRenderer.makeMultiInputFieldInfoOld(
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    function (param) {
      return renderMetaInput(keyType, param);
    },
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".value",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".operator",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".value.value.key",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function AdvancedRoutingUIUtils$FieldInp(props) {
  var onChangeMethod = props.onChangeMethod;
  var prefix = props.prefix;
  var methodKeys = props.methodKeys;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var field = ReactFinalForm$1.useField("" + prefix + ".lhs").input;
  var op = ReactFinalForm$1.useField("" + prefix + ".comparison").input;
  var val = ReactFinalForm$1.useField("" + prefix + ".value.value").input;
  var convertedValue = React.useMemo(function () {
    var match = RoutingUtils.urlToVariantMapper(url);
    return LogicUtils.convertMapObjectToDict(
      match !== 1
        ? window.getDescriptionCategory()
        : window.getPayoutDescriptionCategory(),
    );
  }, []);
  var options = React.useMemo(function () {
    return Core__Array.reduce(
      Object.keys(convertedValue),
      [],
      function (acc, ele) {
        LogicUtils.getArrayFromDict(convertedValue, ele, []).forEach(
          function (value) {
            var dictValue = LogicUtils.getDictFromJsonObject(value);
            var kindValue = LogicUtils.getString(dictValue, "kind", "");
            if (!methodKeys.includes(kindValue)) {
              return;
            }
            var generatedSelectBoxOptionType_optGroup = ele;
            var generatedSelectBoxOptionType_description = LogicUtils.getString(
              dictValue,
              "description",
              "",
            );
            var generatedSelectBoxOptionType = {
              label: kindValue,
              value: kindValue,
              optGroup: generatedSelectBoxOptionType_optGroup,
              description: generatedSelectBoxOptionType_description,
            };
            acc.push(generatedSelectBoxOptionType);
          },
        );
        return acc;
      },
    );
  }, []);
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    Curry._1(onChangeMethod, ev);
    Curry._1(field.onChange, ev);
    Curry._1(op.onChange, "");
    Curry._1(val.onChange, "");
  };
  var input_onFocus = function (_ev) {};
  var input_value = field.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: "Select Field",
    allowMultiSelect: false,
    input: input,
    options: options,
    hideMultiSelectButtons: true,
  });
}

var FieldInp = {
  make: AdvancedRoutingUIUtils$FieldInp,
};

function AdvancedRoutingUIUtils$RuleFieldBase(props) {
  var isFromSurcharge = props.isFromSurcharge;
  var isFrom3ds = props.isFrom3ds;
  var wasm = props.wasm;
  var id = props.id;
  var isFirst = props.isFirst;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
    return false;
  });
  var setHover = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setKeyType = match$1[1];
  var keyType = match$1[0];
  var match$2 = React.useState(function () {
    return [];
  });
  var setVariantValues = match$2[1];
  var field = ReactFinalForm$1.useField("" + id + ".lhs").input;
  var setKeyTypeAndVariants = function (wasm, value) {
    var keyType = AdvancedRoutingUtils.getWasmKeyType(wasm, value);
    var keyVariant = AdvancedRoutingUtils.variantTypeMapper(keyType);
    if (
      keyVariant !== /* Number */ 0 ||
      keyVariant !== /* Metadata_value */ 2
    ) {
      var match = RoutingUtils.urlToVariantMapper(url);
      var variantValues =
        match !== 1
          ? AdvancedRoutingUtils.getWasmVariantValues(wasm, value)
          : AdvancedRoutingUtils.getWasmPayoutVariantValues(wasm, value);
      Curry._1(setVariantValues, function (param) {
        return variantValues;
      });
    }
    Curry._1(setKeyType, function (param) {
      return keyType;
    });
  };
  var onChangeMethod = function (value) {
    setKeyTypeAndVariants(wasm, value);
  };
  var methodKeys = React.useMemo(function () {
    var value = LogicUtils.getStringFromJson(field.value, "");
    if (LogicUtils.isNonEmptyString(value)) {
      setKeyTypeAndVariants(wasm, value);
    }
    if (isFrom3ds) {
      return window.getThreeDsKeys();
    }
    if (isFromSurcharge) {
      return window.getSurchargeKeys();
    }
    var match = RoutingUtils.urlToVariantMapper(url);
    if (match !== 1) {
      return window.getAllKeys();
    } else {
      return window.getAllPayoutKeys();
    }
  }, []);
  return React.createElement(UIUtils.RenderIf.make, {
    condition: methodKeys.length > 0,
    children: props.isExpanded
      ? React.createElement(
          "div",
          {
            className:
              "flex flex-wrap items-center px-1 " +
              (match[0] ? "rounded-md bg-white dark:bg-black shadow" : "") +
              "",
          },
          React.createElement(UIUtils.RenderIf.make, {
            condition: !isFirst,
            children: React.createElement(AdvancedRoutingUIUtils$LogicalOps, {
              id: id,
            }),
          }),
          React.createElement(
            "div",
            {
              className: "-mt-5 p-1",
            },
            React.createElement(FormRenderer.FieldWrapper.make, {
              label: "",
              children: React.createElement(AdvancedRoutingUIUtils$FieldInp, {
                methodKeys: methodKeys,
                prefix: id,
                onChangeMethod: onChangeMethod,
              }),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "-mt-5",
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: metaInput(id, keyType),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "-mt-5",
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: operatorInput(id, keyType),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "-mt-5",
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: valueInput(id, match$2[0], keyType),
            }),
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: !isFirst,
            children: React.createElement(
              "div",
              {
                className:
                  "flex items-center cursor-pointer rounded-full  border border-jp-gray-500 dark:border-jp-gray-960 bg-red-400 hover:shadow focus:outline-none p-2",
                onClick: props.onClick,
                onMouseEnter: function (param) {
                  Curry._1(setHover, function (param) {
                    return true;
                  });
                },
                onMouseLeave: function (param) {
                  Curry._1(setHover, function (param) {
                    return false;
                  });
                },
              },
              React.createElement(Icon.make, {
                name: "close",
                size: 10,
                className: "text-gray-50 font-semibold",
              }),
            ),
          }),
        )
      : React.createElement(MakeRuleFieldComponent.CompressedView.make, {
          id: id,
          isFirst: isFirst,
        }),
  });
}

var RuleFieldBase = {
  make: AdvancedRoutingUIUtils$RuleFieldBase,
};

function AdvancedRoutingUIUtils$MakeRuleField(props) {
  var isFromSurcharge = props.isFromSurcharge;
  var isFrom3ds = props.isFrom3ds;
  var wasm = props.wasm;
  var isExpanded = props.isExpanded;
  var ruleJsonPath = "" + props.id + ".statements";
  var conditionsInput = ReactFinalForm$1.useField(ruleJsonPath).input;
  var fields = Core__Option.getOr(
    Core__JSON.Decode.array(conditionsInput.value),
    [],
  );
  var onPlusClick = function (param) {
    var toAdd = {};
    Curry._1(conditionsInput.onChange, fields.concat([toAdd]));
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-wrap items-center",
    },
    fields.map(function (param, i) {
      return JsxPPXReactSupport.createElementWithKey(
        i.toString(),
        AdvancedRoutingUIUtils$RuleFieldBase,
        {
          isFirst: i === 0,
          id: "" + ruleJsonPath + "[" + i.toString() + "]",
          isExpanded: isExpanded,
          onClick: function (param) {
            Curry._1(
              conditionsInput.onChange,
              fields.filter(function (param, i$1) {
                return i !== i$1;
              }),
            );
          },
          wasm: wasm,
          isFrom3ds: isFrom3ds,
          isFromSurcharge: isFromSurcharge,
        },
      );
    }),
    isExpanded
      ? React.createElement(
          "div",
          {
            className:
              "focus:outline-none p-2 ml-8 mt-2 md:mt-0 flex items-center bg-white dark:bg-jp-gray-darkgray_background \n           rounded-full border border-jp-gray-500 dark:border-jp-gray-960 \n           text-jp-gray-900 dark:text-jp-gray-text_darktheme   \n          cursor-pointer text-opacity-75 dark:text-opacity-50 \n                hover:text-opacity-100 dark:hover:text-opacity-75 hover:shadow",
            onClick: onPlusClick,
          },
          React.createElement(Icon.make, {
            name: "plus",
            size: 14,
          }),
        )
      : React.createElement(Icon.make, {
          name: "arrow-right",
          size: 14,
          className: "ml-4",
        }),
  );
}

var MakeRuleField = {
  make: AdvancedRoutingUIUtils$MakeRuleField,
};

var configurationNameInput = FormRenderer.makeFieldInfo(
  "Configuration Name",
  undefined,
  "name",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4 = true;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Configuration Name",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var descriptionInput = FormRenderer.makeFieldInfo(
  "Description",
  undefined,
  "description",
  function (param) {
    return function (param$1) {
      var param$2 = false;
      var param$3 = 3;
      var param$4;
      var param$5 = "text-sm";
      var param$6;
      var param$7;
      var param$8;
      return InputFields.multiLineTextInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Add a description for your configuration",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function AdvancedRoutingUIUtils$ConfigureRuleButton(props) {
  var setShowModal = props.setShowModal;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  return React.createElement(Button.make, {
    buttonState:
      !formState.hasValidationErrors && props.isConfigButtonEnabled
        ? /* Normal */ 0
        : /* Disabled */ 2,
    text: "Configure Rule",
    buttonType: /* Primary */ 0,
    onClick: function (param) {
      Curry._1(setShowModal, function (param) {
        return true;
      });
    },
    customButtonStyle: "w-1/5",
  });
}

var ConfigureRuleButton = {
  make: AdvancedRoutingUIUtils$ConfigureRuleButton,
};

function AdvancedRoutingUIUtils$SaveAndActivateButton(props) {
  var handleActivateConfiguration = props.handleActivateConfiguration;
  var onSubmit = props.onSubmit;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var handleSaveAndActivate = async function (_ev) {
    try {
      var onSubmitResponse = await Curry._2(onSubmit, formState.values, false);
      var currentActivatedFromJson = LogicUtils.getValFromNullableValue(
        onSubmitResponse,
        null,
      );
      var currentActivatedId = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(currentActivatedFromJson),
        "id",
        "",
      );
      await Curry._1(handleActivateConfiguration, currentActivatedId);
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        Core__Option.getOr(
          e._1.message,
          "Failed to save and activate configuration!",
        );
        return;
      }
      throw e;
    }
  };
  return React.createElement(Button.make, {
    text: "Save and Activate Rule",
    buttonType: /* Primary */ 0,
    buttonSize: /* Small */ 2,
    onClick: function (param) {
      handleSaveAndActivate(undefined);
    },
    customButtonStyle: "w-1/5 rounded-sm",
  });
}

var SaveAndActivateButton = {
  make: AdvancedRoutingUIUtils$SaveAndActivateButton,
};

export {
  LogicalOps,
  OperatorInp,
  ValueInp,
  MetadataInp,
  renderOperatorInp,
  renderValueInp,
  renderMetaInput,
  operatorInput,
  valueInput,
  metaInput,
  FieldInp,
  RuleFieldBase,
  MakeRuleField,
  configurationNameInput,
  descriptionInput,
  ConfigureRuleButton,
  SaveAndActivateButton,
};
/* configurationNameInput Not a pure module */
