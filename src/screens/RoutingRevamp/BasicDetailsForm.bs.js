// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as AdvancedRoutingUtils from "./AdvancedRoutingUtils.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";

var configurationNameInput = FormRenderer.makeFieldInfo(
  "Configuration Name",
  undefined,
  "name",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4 = true;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Configuration Name",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var descriptionInput = FormRenderer.makeFieldInfo(
  "Description",
  undefined,
  "description",
  function (param) {
    return function (param$1) {
      var param$2 = false;
      var param$3 = 3;
      var param$4;
      var param$5 = "text-sm";
      var param$6;
      var param$7;
      var param$8;
      return InputFields.multiLineTextInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Add a description for your configuration",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function BasicDetailsForm$BusinessProfileInp(props) {
  var routingType = props.routingType;
  var label = props.label;
  var options = props.options;
  var profile = props.profile;
  var setProfile = props.setProfile;
  var label$1 = label !== undefined ? label : "";
  var routingType$1 =
    routingType !== undefined ? routingType : /* ADVANCED */ 2;
  var selectedConnectorsInput = ReactFinalForm.useField("algorithm.data").input;
  return React.createElement(FormRenderer.FieldRenderer.make, {
    field: FormRenderer.makeFieldInfo(
      label$1,
      undefined,
      "profile_id",
      function (input, param) {
        return InputFields.selectInput(
          {
            name: input.name,
            onBlur: input.onBlur,
            onChange: function (ev) {
              Curry._1(setProfile, function (param) {
                return ev;
              });
              Curry._1(input.onChange, ev);
              Curry._1(
                selectedConnectorsInput.onChange,
                routingType$1 === /* VOLUME_SPLIT */ 1
                  ? []
                  : AdvancedRoutingUtils.defaultAlgorithmData,
              );
            },
            onFocus: input.onFocus,
            value: profile,
            checked: input.checked,
          },
          options,
          "",
          "",
          true,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      },
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      true,
      undefined,
      undefined,
      undefined,
    ),
  });
}

var BusinessProfileInp = {
  make: BasicDetailsForm$BusinessProfileInp,
};

function BasicDetailsForm(props) {
  var routingType = props.routingType;
  var profile = props.profile;
  var isThreeDs = props.isThreeDs;
  var formState = props.formState;
  var formState$1 = formState !== undefined ? formState : /* CreateConfig */ 0;
  var isThreeDs$1 = isThreeDs !== undefined ? isThreeDs : false;
  var routingType$1 =
    routingType !== undefined ? routingType : /* ADVANCED */ 2;
  var ip1 = ReactFinalForm.useField("name").input;
  var ip2 = ReactFinalForm.useField("description").input;
  var ip3 = ReactFinalForm.useField("profile_id").input;
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var form = ReactFinalForm.useForm();
  React.useEffect(function () {
    Curry._2(
      form.change,
      "profile_id",
      Core__Option.getOr(profile, defaultBusinessProfile.profile_id),
    );
  }, []);
  return React.createElement(
    "div",
    {
      className:
        " mb-6 p-4 bg-white dark:bg-jp-gray-lightgray_background rounded-md border border-jp-gray-600 dark:border-jp-gray-850",
    },
    formState$1 === /* ViewConfig */ 3
      ? React.createElement(
          "div",
          undefined,
          React.createElement(
            "div",
            {
              className: "flex flex-row justify-between gap-4",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-row gap-40",
              },
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-field", "Configuration Name"]],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-col gap-2 items-start justify-between py-2",
                  },
                  React.createElement(
                    "span",
                    {
                      className: "text-gray-500 dark:text-gray-400",
                    },
                    "Configuration Name",
                  ),
                  React.createElement(AddDataAttributes.make, {
                    attributes: [
                      [
                        "data-text",
                        LogicUtils.getStringFromJson(ip1.value, ""),
                      ],
                    ],
                    children: React.createElement(
                      "span",
                      {
                        className: "font-semibold",
                      },
                      LogicUtils.getStringFromJson(ip1.value, ""),
                    ),
                  }),
                ),
              }),
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-field", "Description"]],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-col gap-2 items-start justify-between py-2",
                  },
                  React.createElement(
                    "span",
                    {
                      className: "text-gray-500 dark:text-gray-400",
                    },
                    "Description",
                  ),
                  React.createElement(AddDataAttributes.make, {
                    attributes: [
                      [
                        "data-text",
                        LogicUtils.getStringFromJson(ip2.value, ""),
                      ],
                    ],
                    children: React.createElement(
                      "span",
                      {
                        className: "font-semibold",
                      },
                      LogicUtils.getStringFromJson(ip2.value, ""),
                    ),
                  }),
                ),
              }),
            ),
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-row justify-between gap-4",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-row gap-48",
              },
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-field", "Profile Id"]],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-col gap-2 items-start justify-between py-2",
                  },
                  React.createElement(
                    "span",
                    {
                      className: "text-gray-500 dark:text-gray-400",
                    },
                    "Profile",
                  ),
                  React.createElement(AddDataAttributes.make, {
                    attributes: [
                      [
                        "data-text",
                        LogicUtils.getStringFromJson(ip3.value, ""),
                      ],
                    ],
                    children: React.createElement(
                      "span",
                      {
                        className: "font-semibold",
                      },
                      React.createElement(
                        HelperComponents.BusinessProfileComponent.make,
                        {
                          profile_id: Core__Option.getOr(
                            profile,
                            defaultBusinessProfile.profile_id,
                          ),
                        },
                      ),
                    ),
                  }),
                ),
              }),
            ),
          ),
        )
      : React.createElement(
          React.Fragment,
          undefined,
          React.createElement(
            "div",
            {
              className: "flex",
            },
            React.createElement(
              "div",
              {
                className: "w-full md:w-1/2 lg:w-1/3",
              },
              React.createElement(UIUtils.RenderIf.make, {
                condition: !isThreeDs$1,
                children: React.createElement(
                  BasicDetailsForm$BusinessProfileInp,
                  {
                    setProfile: Core__Option.getOr(
                      props.setProfile,
                      function (param) {},
                    ),
                    profile: Core__Option.getOr(
                      profile,
                      defaultBusinessProfile.profile_id,
                    ),
                    options:
                      MerchantAccountUtils.businessProfileNameDropDownOption(
                        businessProfiles,
                      ),
                    label: "Profile",
                    routingType: routingType$1,
                  },
                ),
              }),
              React.createElement(FormRenderer.FieldRenderer.make, {
                field: configurationNameInput,
              }),
              React.createElement(FormRenderer.FieldRenderer.make, {
                field: descriptionInput,
              }),
            ),
          ),
        ),
  );
}

var make = BasicDetailsForm;

export { configurationNameInput, descriptionInput, BusinessProfileInp, make };
/* configurationNameInput Not a pure module */
