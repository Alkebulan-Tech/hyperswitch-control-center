// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as Core__Int from "@rescript/core/src/Core__Int.bs.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as CheckBoxIcon from "../../components/custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RoutingUtils from "../Routing/RoutingUtils.bs.js";
import * as NewThemeUtils from "../../components/NewThemeUtils.bs.js";
import * as RulePreviewer from "./Previewers/RulePreviewer.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as ConnectorTableUtils from "../Connectors/ConnectorTableUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as AdvancedRoutingUtils from "./AdvancedRoutingUtils.bs.js";

function AddRuleGateway(props) {
  var isFirst = props.isFirst;
  var id = props.id;
  var isFirst$1 = isFirst !== undefined ? isFirst : false;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var gateWaysInput = ReactFinalForm.useField(
    "" + id + ".connectorSelection.data",
  ).input;
  var gateWaysType = ReactFinalForm.useField(
    "" + id + ".connectorSelection.type",
  ).input;
  var isDistributeInput = ReactFinalForm.useField(
    "" + id + ".isDistribute",
  ).input;
  var isDistribute = LogicUtils.getBoolFromJson(isDistributeInput.value, false);
  var match = RoutingUtils.urlToVariantMapper(url);
  var connectorType =
    match !== 1 ? /* PaymentConnector */ 0 : /* PayoutConnector */ 2;
  var connectorList = RoutingUtils.filterConnectorList(
    Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom),
    connectorType,
  );
  React.useEffect(
    function () {
      var typeString = isDistribute ? "volume_split" : "priority";
      Curry._1(gateWaysType.onChange, typeString);
    },
    [isDistributeInput.value],
  );
  var selectedOptions = React.useMemo(
    function () {
      return Belt_Array.keepMap(
        Core__Option.getOr(Core__JSON.Decode.array(gateWaysInput.value), []),
        function (item) {
          return AdvancedRoutingUtils.connectorSelectionDataMapperFromJson(
            item,
          );
        },
      );
    },
    [gateWaysInput],
  );
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    if (ev.length === 0) {
      return Curry._1(gateWaysInput.onChange, []);
    } else {
      return Curry._1(
        gateWaysInput.onChange,
        ev.map(function (item) {
          var sharePercent = isDistribute
            ? Caml_int32.div(100, ev.length)
            : 100;
          if (isDistribute) {
            return {
              split: sharePercent,
              connector: {
                connector: ConnectorTableUtils.getConnectorObjectFromListViaId(
                  connectorList,
                  item,
                ).connector_name,
                merchant_connector_id: item,
              },
            };
          } else {
            return {
              connector: ConnectorTableUtils.getConnectorObjectFromListViaId(
                connectorList,
                item,
              ).connector_name,
              merchant_connector_id: item,
            };
          }
        }),
      );
    }
  };
  var input_onFocus = function (_ev) {};
  var input_value = selectedOptions.map(function (option) {
    return AdvancedRoutingUtils.getConnectorStringFromConnectorSelectionData(
      option,
    ).merchant_connector_id;
  });
  var input = {
    name: "gateways",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  if (props.isExpanded) {
    return React.createElement(
      "div",
      {
        className: "flex flex-row ml-2",
      },
      React.createElement(UIUtils.RenderIf.make, {
        condition: !isFirst$1,
        children: React.createElement("div", {
          className:
            "w-8 h-10 border-jp-gray-700 ml-10 border-dashed border-b border-l ",
        }),
      }),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-6 mt-6 mb-4 pt-0.5",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-wrap gap-4",
          },
          React.createElement(
            "div",
            {
              className: "flex",
            },
            React.createElement(SelectBox.BaseDropdown.make, {
              buttonText: "Add Processors",
              allowMultiSelect: true,
              input: input,
              options: props.gatewayOptions,
              hideMultiSelectButtons: true,
              buttonType: /* SecondaryFilled */ 3,
              defaultLeftIcon: {
                TAG: /* FontAwesome */ 0,
                _0: "plus",
              },
              customButtonStyle: "!bg-white ",
              fixedDropDownDirection: /* TopRight */ 5,
              searchable: true,
            }),
            React.createElement(
              "span",
              {
                className: "text-lg text-red-500 ml-1",
              },
              "*",
            ),
          ),
          selectedOptions.map(function (item, i) {
            var key = ((i + 1) | 0).toString();
            return React.createElement(
              "div",
              {
                key: key,
                className: "flex flex-row",
              },
              React.createElement(
                "div",
                {
                  className:
                    "w-min flex flex-row items-center justify-around gap-2 h-10 rounded-md  border border-jp-gray-500 dark:border-jp-gray-960\n               text-jp-gray-900 text-opacity-75 hover:text-opacity-100 dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme\n               dark:hover:text-opacity-75 text-jp-gray-900 text-opacity-50 hover:text-jp-gray-900 bg-gradient-to-b\n               from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950 dark:to-jp-gray-950 dark:text-jp-gray-text_darktheme\n               dark:text-opacity-50 focus:outline-none px-1 ",
                },
                React.createElement(NewThemeUtils.Badge.make, {
                  number: (i + 1) | 0,
                }),
                React.createElement(
                  "div",
                  undefined,
                  ConnectorTableUtils.getConnectorObjectFromListViaId(
                    connectorList,
                    AdvancedRoutingUtils.getConnectorStringFromConnectorSelectionData(
                      item,
                    ).merchant_connector_id,
                  ).connector_label,
                ),
                React.createElement(Icon.make, {
                  name: "close",
                  size: 10,
                  className: "mr-2 cursor-pointer ",
                  onClick: function (ev) {
                    ev.stopPropagation();
                    Curry._1(
                      input_onChange,
                      selectedOptions
                        .map(function (i) {
                          return AdvancedRoutingUtils.getConnectorStringFromConnectorSelectionData(
                            i,
                          ).merchant_connector_id;
                        })
                        .filter(function (param, i$1) {
                          return i$1 !== i;
                        }),
                    );
                  },
                }),
                React.createElement(UIUtils.RenderIf.make, {
                  condition: isDistribute && selectedOptions.length > 0,
                  children: React.createElement(
                    React.Fragment,
                    undefined,
                    React.createElement("input", {
                      className:
                        "w-10 text-right outline-none bg-white dark:bg-jp-gray-970 px-1 border border-jp-gray-300 dark:border-jp-gray-850 rounded-md",
                      inputMode: "text",
                      name: key,
                      type: "text",
                      value:
                        AdvancedRoutingUtils.getSplitFromConnectorSelectionData(
                          item,
                        ).toString(),
                      onChange: function (ev) {
                        var val = ev.target.value;
                        var value = Core__Option.getOr(
                          Core__Int.fromString(undefined, val),
                          0,
                        );
                        var slectedConnector;
                        slectedConnector =
                          item.TAG === /* VolumeObject */ 0
                            ? AdvancedRoutingUtils.getConnectorStringFromConnectorSelectionData(
                                {
                                  TAG: /* VolumeObject */ 0,
                                  _0: item._0,
                                },
                              ).merchant_connector_id
                            : item._0.connector;
                        if (value < 100) {
                          return Curry._1(
                            gateWaysInput.onChange,
                            selectedOptions.map(function (option) {
                              if (option.TAG !== /* VolumeObject */ 0) {
                                return option._0.connector;
                              }
                              var obj = option._0;
                              return {
                                split:
                                  slectedConnector ===
                                  AdvancedRoutingUtils.getConnectorStringFromConnectorSelectionData(
                                    {
                                      TAG: /* VolumeObject */ 0,
                                      _0: obj,
                                    },
                                  ).merchant_connector_id
                                    ? value
                                    : obj.split,
                                connector: obj.connector,
                              };
                            }),
                          );
                        }
                      },
                    }),
                    React.createElement("div", undefined, "%"),
                  ),
                }),
              ),
            );
          }),
        ),
        React.createElement(UIUtils.RenderIf.make, {
          condition: selectedOptions.length > 0,
          children: React.createElement(
            "div",
            {
              className:
                "flex flex-col md:flex-row md:items-center gap-4 md:gap-3 lg:gap-4 lg:ml-6",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-row items-center gap-4 md:gap-1 lg:gap-2",
              },
              React.createElement(CheckBoxIcon.make, {
                isSelected: isDistribute,
                isDisabled: false,
                setIsSelected: function (v) {
                  Curry._1(isDistributeInput.onChange, v);
                  var sharePercent = v
                    ? Caml_int32.div(100, selectedOptions.length)
                    : 100;
                  Curry._1(
                    gateWaysInput.onChange,
                    selectedOptions.map(function (item, i) {
                      var sharePercent$1 =
                        i === ((selectedOptions.length - 1) | 0) && v
                          ? (100 - Math.imul(sharePercent, i)) | 0
                          : sharePercent;
                      if (item.TAG === /* VolumeObject */ 0) {
                        return item._0.connector;
                      }
                      var obj = item._0;
                      return {
                        split: sharePercent$1,
                        connector: {
                          connector:
                            ConnectorTableUtils.getConnectorObjectFromListViaId(
                              connectorList,
                              obj.merchant_connector_id,
                            ).connector_name,
                          merchant_connector_id: obj.merchant_connector_id,
                        },
                      };
                    }),
                  );
                },
              }),
              React.createElement("div", undefined, "Distribute"),
            ),
          ),
        }),
      ),
    );
  } else {
    return React.createElement(RulePreviewer.GatewayView.make, {
      gateways: selectedOptions,
    });
  }
}

var make = AddRuleGateway;

export { make };
/* Icon Not a pure module */
