// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Loader from "../../components/Loader.bs.js";
import * as Lottie from "../../libraries/Lottie.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LottieFiles from "../../components/custom-icons/LottieFiles.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ProviderHelper from "../../entryPoints/Provider/ProviderHelper.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HyperSwitchUtils from "../../utils/HyperSwitchUtils.bs.js";
import * as ConnectorListHook from "../Hooks/ConnectorListHook.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as ReactSuspenseWrapper from "../../context/ReactSuspenseWrapper.bs.js";
import * as HSwitchSetupAccountUtils from "./HSwitchSetupAccountUtils.bs.js";

function HSwitchSetupAccount(props) {
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var finalTickLottieFile = LottieFiles.useLottieJson("FinalTick.json");
  var match = React.useState(function () {
    return "INITIALIZE";
  });
  var setStepCounter = match[1];
  var fetchConnectorListResponse =
    ConnectorListHook.useFetchConnectorList(undefined);
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  var indexOfStepCounterVal =
    HSwitchSetupAccountUtils.listOfStepCounter.indexOf(match[0]);
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setIntegrationDetails = match$1.setIntegrationDetails;
  var integrationDetails = match$1.integrationDetails;
  var setDashboardPageState = match$1.setDashboardPageState;
  var dashboardPageState = match$1.dashboardPageState;
  React.useEffect(
    function () {
      if (dashboardPageState !== "HOME") {
        RescriptReactRouter.push(
          HSwitchGlobalVars.appendDashboardPath("/setup-account"),
        );
      }
    },
    [dashboardPageState],
  );
  var apiCalls = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* CONNECTOR */ 0,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var stripeTestBody = HSwitchSetupAccountUtils.constructBody(
        "stripe_test",
        window.getConnectorConfig("stripe_test"),
        activeBusinessProfile.profile_id,
      );
      var stripeTestRes = ConnectorListMapper.getProcessorPayloadType(
        LogicUtils.getDictFromJsonObject(
          await Curry._7(
            updateDetails,
            url,
            stripeTestBody,
            /* Post */ 2,
            undefined,
            undefined,
            undefined,
            undefined,
          ),
        ),
      );
      var paypalTestBody = HSwitchSetupAccountUtils.constructBody(
        "paypal_test",
        window.getConnectorConfig("paypal_test"),
        activeBusinessProfile.profile_id,
      );
      var payPalTestRes = ConnectorListMapper.getProcessorPayloadType(
        LogicUtils.getDictFromJsonObject(
          await Curry._7(
            updateDetails,
            url,
            paypalTestBody,
            /* Post */ 2,
            undefined,
            undefined,
            undefined,
            undefined,
          ),
        ),
      );
      await Curry._1(fetchConnectorListResponse, undefined);
      Curry._1(setStepCounter, function (param) {
        return "CONNECTORS_CONFIGURED";
      });
      var payPalTestRouting_merchant_connector_id =
        payPalTestRes.merchant_connector_id;
      var payPalTestRouting = {
        connector_name: "paypal_test",
        merchant_connector_id: payPalTestRouting_merchant_connector_id,
      };
      var stripTestRouting_merchant_connector_id =
        stripeTestRes.merchant_connector_id;
      var stripTestRouting = {
        connector_name: "stripe_test",
        merchant_connector_id: stripTestRouting_merchant_connector_id,
      };
      var routingUrl = APIUtils.getURL(
        /* ROUTING */ 1,
        /* Post */ 2,
        Caml_option.some(undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var activatingId = LogicUtils.getOptionString(
        LogicUtils.getDictFromJsonObject(
          await Curry._7(
            updateDetails,
            routingUrl,
            HSwitchSetupAccountUtils.routingPayload(
              activeBusinessProfile.profile_id,
              stripTestRouting,
              payPalTestRouting,
            ),
            /* Post */ 2,
            undefined,
            undefined,
            undefined,
            undefined,
          ),
        ),
        "id",
      );
      var activateRuleURL = APIUtils.getURL(
        /* ROUTING */ 1,
        /* Post */ 2,
        Caml_option.some(activatingId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        activateRuleURL,
        {},
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setStepCounter, function (param) {
        return "ROUTING_ENABLED";
      });
      var generateSampleDataUrl = APIUtils.getURL(
        /* GENERATE_SAMPLE_DATA */ 21,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        generateSampleDataUrl,
        {},
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setStepCounter, function (param) {
        return "GENERATE_SAMPLE_DATA";
      });
      await HyperSwitchUtils.delay(HSwitchSetupAccountUtils.delayTime);
      Curry._1(setStepCounter, function (param) {
        return "COMPLETED";
      });
      await HyperSwitchUtils.delay(HSwitchSetupAccountUtils.delayTime);
      var body = HSwitchUtils.constructOnboardingBody(
        dashboardPageState,
        integrationDetails,
        true,
        undefined,
        undefined,
      );
      var integrationUrl = APIUtils.getURL(
        /* INTEGRATION_DETAILS */ 24,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        integrationUrl,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setIntegrationDetails, function (param) {
        return ProviderHelper.getIntegrationDetails(body);
      });
      return Curry._1(setDashboardPageState, function (param) {
        return "INTEGRATION_DOC";
      });
    } catch (exn) {
      await HyperSwitchUtils.delay(
        (HSwitchSetupAccountUtils.delayTime - 1000) | 0,
      );
      return Curry._1(setDashboardPageState, function (param) {
        return "HOME";
      });
    }
  };
  var getDetails = async function (param) {
    if (LogicUtils.isNonEmptyString(activeBusinessProfile.profile_id)) {
      apiCalls(undefined);
      return;
    }
  };
  React.useEffect(function () {
    getDetails(undefined);
  }, []);
  if (indexOfStepCounterVal <= 3) {
    return React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-5 items-center justify-center h-screen w-screen",
      },
      React.createElement(Loader.make, {}),
      React.createElement(
        "div",
        {
          className: "font-bold text-xl",
        },
        "Setting up your control center",
      ),
    );
  } else {
    return React.createElement(
      "div",
      {
        className:
          "flex flex-col justify-center items-center h-screen w-screen",
      },
      React.createElement(ReactSuspenseWrapper.make, {
        children: React.createElement(Lottie.make, {
          animationData: finalTickLottieFile,
          autoplay: true,
          loop: false,
        }),
      }),
      React.createElement(
        "div",
        {
          className: "font-semibold text-2xl",
        },
        "Setup complete",
      ),
    );
  }
}

var make = HSwitchSetupAccount;

export { make };
/* react Not a pure module */
