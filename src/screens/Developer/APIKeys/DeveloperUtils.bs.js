// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Table from "../../../components/Table.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as SelectBox from "../../../components/SelectBox.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HelperComponents from "../../Helpers/HelperComponents.bs.js";

function validateAPIKeyForm(
  values,
  setIsDisabledOpt,
  keys,
  setShowCustomDate,
  param,
) {
  var setIsDisabled =
    setIsDisabledOpt !== undefined ? setIsDisabledOpt : function (param) {};
  var errors = {};
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  keys.forEach(function (key) {
    var value = LogicUtils.getString(valuesDict, key, "");
    if (LogicUtils.isEmptyString(value)) {
      switch (key) {
        case "description":
          errors[key] = "Please enter description";
          return;
        case "expiration":
          errors[key] = "Please select expiry";
          return;
        case "name":
          errors[key] = "Please enter name";
          return;
        default:
          return;
      }
    } else {
      if (!(key === "expiration" && value.toLowerCase() !== "never")) {
        if (key === "expiration" && value.toLowerCase() === "never") {
          return Curry._1(setShowCustomDate, false);
        } else if (
          (LogicUtils.isNonEmptyString(value) &&
            (key === "webhook_url" || key === "return_url") &&
            !value.includes("localhost") &&
            !/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(
              value,
            )) ||
          ((key === "webhook_url" || key === "return_url") && value.length <= 0)
        ) {
          errors[key] = "Please Enter Valid URL";
          return;
        } else {
          return;
        }
      }
      Curry._1(setShowCustomDate, true);
      var date = LogicUtils.getString(valuesDict, "expiration_date", "");
      if (LogicUtils.isEmptyString(date)) {
        errors["expiration_date"] = "Please select expiry date";
        return;
      } else {
        return;
      }
    }
  });
  if (Caml_obj.equal(errors, {})) {
    Curry._1(setIsDisabled, function (param) {
      return false;
    });
  } else {
    Curry._1(setIsDisabled, function (param) {
      return true;
    });
  }
  return errors;
}

function getStringFromRecordType(value) {
  if (value) {
    return "custom";
  } else {
    return "never";
  }
}

function getRecordTypeFromString(value) {
  var match = value.toLowerCase();
  if (match === "never") {
    return /* Never */ 0;
  } else {
    return /* Custom */ 1;
  }
}

function itemToObjMapper(dict) {
  return {
    key_id: LogicUtils.getString(dict, "key_id", ""),
    name: LogicUtils.getString(dict, "name", ""),
    description: LogicUtils.getString(dict, "description", ""),
    prefix: LogicUtils.getString(dict, "prefix", ""),
    created: LogicUtils.getString(dict, "created", ""),
    expiration: getRecordTypeFromString(
      LogicUtils.getString(dict, "expiration", ""),
    ),
    expiration_date: LogicUtils.getString(dict, "expiration", ""),
  };
}

function getHeading(colType) {
  switch (colType) {
    case /* Name */ 0:
      return Table.makeHeaderInfo(
        "name",
        "Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Description */ 1:
      return Table.makeHeaderInfo(
        "description",
        "Description",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Prefix */ 2:
      return Table.makeHeaderInfo(
        "key",
        "API Key Prefix",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Created */ 3:
      return Table.makeHeaderInfo(
        "created",
        "Created",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Expiration */ 4:
      return Table.makeHeaderInfo(
        "expiration",
        "Expiration",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CustomCell */ 5:
      return Table.makeHeaderInfo(
        "",
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

var defaultColumns = [
  /* Prefix */ 2, /* Name */ 0, /* Description */ 1, /* Created */ 3,
  /* Expiration */ 4, /* CustomCell */ 5,
];

var allColumns = [
  /* Prefix */ 2, /* Name */ 0, /* Description */ 1, /* Created */ 3,
  /* Expiration */ 4, /* CustomCell */ 5,
];

function getItems(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapper);
}

var apiName = FormRenderer.makeFieldInfo(
  "Name",
  undefined,
  "name",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Name",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

var apiDescription = FormRenderer.makeFieldInfo(
  "Description",
  undefined,
  "description",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Description",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  true,
  undefined,
  undefined,
  undefined,
);

function makeOptions(options) {
  return options.map(function (str) {
    return {
      label: LogicUtils.snakeToTitle(str),
      value: str,
    };
  });
}

var arg = makeOptions(["never", "custom"]);

var keyExpiry = FormRenderer.makeFieldInfo(
  "Expiration",
  undefined,
  "expiration",
  function (param) {
    return function (param$1) {
      var param$2 = "Select Option";
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      var param$28;
      var param$29;
      var param$30;
      return InputFields.selectInput(
        param,
        arg,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
        param$28,
        param$29,
        param$30,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

var keyExpiryCustomDate = FormRenderer.makeFieldInfo(
  "",
  undefined,
  "expiration_date",
  function (param) {
    return function (param$1) {
      var param$2 = true;
      var param$3;
      var param$4;
      var param$5 = "YYYY-MM-DDTHH:mm:ss.SSS[Z]";
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      return InputFields.singleDatePickerInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

var webhookUrl = FormRenderer.makeFieldInfo(
  "Webhook URL",
  undefined,
  "webhook_url",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8 = "off";
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Webhook URL",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  false,
  undefined,
  undefined,
  undefined,
);

var returnUrl = FormRenderer.makeFieldInfo(
  "Return URL",
  undefined,
  "return_url",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8 = "off";
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter Return URL",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  false,
  undefined,
  undefined,
  undefined,
);

function authenticationConnectors(connectorList) {
  var arg = SelectBox.makeOptions(connectorList);
  return FormRenderer.makeFieldInfo(
    "Authentication Connectors",
    undefined,
    "authentication_connectors",
    function (param) {
      var func = Curry._3(InputFields.multiSelectInput, param, arg, undefined);
      return function (param) {
        return Curry.app(func, [
          param,
          "Select Field",
          undefined,
          undefined,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          "!rounded-md",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          /* TopRight */ 5,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ]);
      };
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    false,
    undefined,
    undefined,
    undefined,
  );
}

var threeDsRequestorUrl = FormRenderer.makeFieldInfo(
  "3DS Requestor URL",
  undefined,
  "three_ds_requestor_url",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8 = "off";
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter 3DS Requestor URL",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  false,
  undefined,
  undefined,
  undefined,
);

function DeveloperUtils$ErrorUI(props) {
  var text = props.text;
  return React.createElement(
    "div",
    {
      className: "flex p-5",
    },
    React.createElement("img", {
      className: "w-12 h-12 my-auto border-gray-100",
      alt: "warning",
      src: "/icons/error.svg",
    }),
    React.createElement(
      "div",
      {
        className: "text-jp-gray-900",
      },
      React.createElement(
        "div",
        {
          className:
            "font-bold ml-4 text-xl px-2 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
        },
        "API " + text + " Failed",
      ),
      React.createElement(
        "div",
        {
          className:
            "whitespace-pre-line flex flex-col gap-1 p-2 ml-4 text-fs-13 dark:text-jp-gray-text_darktheme dark:text-opacity-50",
        },
        "Unable to " + text + " a API key. Please try again later.",
      ),
    ),
  );
}

var ErrorUI = {
  make: DeveloperUtils$ErrorUI,
};

function DeveloperUtils$SuccessUI(props) {
  var apiKey = props.apiKey;
  var downloadFun = props.downloadFun;
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      {
        className: "flex p-5",
      },
      React.createElement(Icon.make, {
        name: "info-circle",
        size: 40,
        className: "align-middle fill-blue-600 self-center",
      }),
      React.createElement(
        "div",
        {
          className: "text-jp-gray-900 ml-4",
        },
        React.createElement(
          "div",
          {
            className:
              "font-bold text-xl px-2 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
          },
          "Download the API Key",
        ),
        React.createElement(
          "div",
          {
            className: "bg-gray-100 p-3 m-2",
          },
          React.createElement(HelperComponents.CopyTextCustomComp.make, {
            displayValue: apiKey,
            copyValue: Caml_option.some(apiKey),
            customTextCss:
              "break-all text-sm font-semibold text-jp-gray-800 text-opacity-75",
            customParentClass: "flex items-center gap-5",
          }),
        ),
        React.createElement(
          "h1",
          {
            className:
              "whitespace-pre-line text-orange-950 w-full p-2 rounded-md ",
          },
          React.createElement(
            "span",
            {
              className: "text-orange-950 font-bold text-fs-14",
            },
            "NOTE: ",
          ),
          "Please note down the API key for your future use as you won't be able to view it later.",
        ),
      ),
    ),
    React.createElement(
      "div",
      {
        className: "flex justify-end gap-5 mt-5 mb-1 mr-1",
      },
      React.createElement(Button.make, {
        text: "Download the key",
        buttonType: /* Primary */ 0,
        buttonSize: /* Small */ 2,
        leftIcon: {
          TAG: /* CustomIcon */ 1,
          _0: React.createElement(Icon.make, {
            name: "download",
            size: 17,
            className: "ml-3 mr-2",
          }),
        },
        onClick: function (param) {
          Curry._1(downloadFun, undefined);
        },
      }),
    ),
  );
}

var SuccessUI = {
  make: DeveloperUtils$SuccessUI,
};

export {
  validateAPIKeyForm,
  getStringFromRecordType,
  getRecordTypeFromString,
  itemToObjMapper,
  getHeading,
  defaultColumns,
  allColumns,
  getItems,
  apiName,
  apiDescription,
  makeOptions,
  keyExpiry,
  keyExpiryCustomDate,
  webhookUrl,
  returnUrl,
  authenticationConnectors,
  threeDsRequestorUrl,
  ErrorUI,
  SuccessUI,
};
/* apiName Not a pure module */
