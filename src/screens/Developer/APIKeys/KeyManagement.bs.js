// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Loader from "../../../components/Loader.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as ACLButton from "../../../components/ACLButton.bs.js";
import * as Clipboard from "../../../libraries/Clipboard.bs.js";
import * as PageUtils from "../../Utils/PageUtils.bs.js";
import * as EntityType from "../../../entities/EntityType.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../../hooks/PopUpState.bs.js";
import * as TableAtoms from "../../../Recoils/TableAtoms.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../../components/LoadedTable.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as MixpanelHook from "../../MixpanelHook.bs.js";
import * as DownloadUtils from "../../../utils/DownloadUtils.bs.js";
import * as DeveloperUtils from "./DeveloperUtils.bs.js";
import * as ReactFinalForm from "../../../libraries/ReactFinalForm.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as PageLoaderWrapper from "../../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as LabelVisibilityContext from "../../../components/form/LabelVisibilityContext.bs.js";
import * as PublishableAndHashKeySection from "./PublishableAndHashKeySection.bs.js";

function KeyManagement$ApiEditModal(props) {
  var keyId = props.keyId;
  var action = props.action;
  var showModal = props.showModal;
  var getAPIKeyDetails = props.getAPIKeyDetails;
  var setShowModal = props.setShowModal;
  var action$1 = action !== undefined ? action : /* Create */ 0;
  var match = React.useState(function () {
    return "";
  });
  var setApiKey = match[1];
  var apiKey = match[0];
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowCustomDate = match$1[1];
  var showCustomDate = match$1[0];
  var match$2 = React.useState(function () {
    return action$1;
  });
  var setModalState = match$2[1];
  var showToast = ToastState.useShowToast(undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var setShowCustomDate$1 = function (val) {
    Curry._1(setShowCustomDate, function (param) {
      return val;
    });
  };
  React.useEffect(
    function () {
      Curry._1(setShowCustomDate, function (param) {
        return false;
      });
      Curry._1(setModalState, function (param) {
        return action$1;
      });
    },
    [showModal],
  );
  var downloadKey = function (param) {
    DownloadUtils.downloadOld("apiKey.txt", apiKey);
  };
  var primaryBtnText = action$1 !== 1 ? "Create" : "Update";
  var modalheader = action$1 !== 1 ? "Create API Key" : "Update API Key";
  var onSubmit = async function (values, param) {
    try {
      var valuesDict = LogicUtils.getDictFromJsonObject(values);
      var body = {};
      body["name"] = LogicUtils.getString(valuesDict, "name", "");
      var description = LogicUtils.getString(valuesDict, "description", "");
      body["description"] = description;
      var expirationDate = LogicUtils.getString(
        valuesDict,
        "expiration_date",
        "",
      );
      var match = DeveloperUtils.getRecordTypeFromString(
        LogicUtils.getString(valuesDict, "expiration", ""),
      );
      var expriryValue = match
        ? expirationDate
        : DeveloperUtils.getStringFromRecordType(/* Never */ 0);
      body["expiration"] = expriryValue;
      Curry._1(setModalState, function (param) {
        return /* Loading */ 2;
      });
      var url;
      if (action$1 !== 1) {
        url = APIUtils.getURL(
          /* API_KEYS */ 12,
          /* Post */ 2,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      } else {
        var key_id = Core__Option.getOr(keyId, "");
        url = APIUtils.getURL(
          /* API_KEYS */ 12,
          /* Post */ 2,
          Caml_option.some(key_id),
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
      var json = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var keyDict = LogicUtils.getDictFromJsonObject(json);
      Curry._1(setApiKey, function (param) {
        return LogicUtils.getString(keyDict, "api_key", "");
      });
      if (action$1 !== 1) {
        Clipboard.writeText(LogicUtils.getString(keyDict, "api_key", ""));
        Curry._1(setModalState, function (param) {
          return /* Success */ 4;
        });
      } else {
        Curry._1(setShowModal, function (param) {
          return false;
        });
      }
      Curry._1(getAPIKeyDetails, undefined);
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var _error = e._1.message;
        if (_error !== undefined) {
          Curry._8(
            showToast,
            "Api Key Generation Failed",
            /* ToastError */ 0,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        }
        Curry._1(setModalState, function (param) {
          return /* SettingApiModalError */ 3;
        });
      } else {
        throw e;
      }
    }
    return null;
  };
  var tmp;
  var exit = 0;
  switch (match$2[0]) {
    case /* Create */ 0:
    case /* Update */ 1:
      exit = 1;
      break;
    case /* Loading */ 2:
      tmp = React.createElement(Loader.make, {});
      break;
    case /* SettingApiModalError */ 3:
      tmp = React.createElement(DeveloperUtils.ErrorUI.make, {
        text: primaryBtnText,
      });
      break;
    case /* Success */ 4:
      tmp = React.createElement(DeveloperUtils.SuccessUI.make, {
        downloadFun: downloadKey,
        apiKey: apiKey,
      });
      break;
  }
  if (exit === 1) {
    tmp = JsxPPXReactSupport.createElementWithKey(
      "API-key",
      ReactFinalForm$1.Form,
      {
        initialValues: Caml_option.some(props.initialValues),
        onSubmit: onSubmit,
        render: function (param) {
          return React.createElement(LabelVisibilityContext.make, {
            children: React.createElement(
              "form",
              {
                className: "flex flex-col gap-3 h-full w-full",
                onSubmit: param.handleSubmit,
              },
              React.createElement(
                FormRenderer.DesktopRow.make,
                {
                  children: null,
                },
                React.createElement(HSwitchUtils.TextFieldRow.make, {
                  label: DeveloperUtils.apiName.label,
                  children: React.createElement(
                    FormRenderer.FieldRenderer.make,
                    {
                      field: DeveloperUtils.apiName,
                      fieldWrapperClass: "w-96",
                      errorClass: HSwitchUtils.errorClass,
                    },
                  ),
                  isRequired: false,
                  labelWidth: "w-48",
                }),
                React.createElement(HSwitchUtils.TextFieldRow.make, {
                  label: DeveloperUtils.apiDescription.label,
                  children: React.createElement(
                    FormRenderer.FieldRenderer.make,
                    {
                      field: DeveloperUtils.apiDescription,
                      fieldWrapperClass: "w-96",
                      errorClass: HSwitchUtils.errorClass,
                    },
                  ),
                  isRequired: false,
                  labelWidth: "w-48",
                }),
                React.createElement(HSwitchUtils.TextFieldRow.make, {
                  label: DeveloperUtils.keyExpiry.label,
                  children: React.createElement(
                    FormRenderer.FieldRenderer.make,
                    {
                      field: DeveloperUtils.keyExpiry,
                      fieldWrapperClass: "w-96",
                      errorClass: HSwitchUtils.errorClass,
                    },
                  ),
                  isRequired: false,
                  labelWidth: "w-48",
                }),
                showCustomDate
                  ? React.createElement(HSwitchUtils.TextFieldRow.make, {
                      label: DeveloperUtils.keyExpiryCustomDate.label,
                      children: React.createElement(
                        FormRenderer.FieldRenderer.make,
                        {
                          field: DeveloperUtils.keyExpiryCustomDate,
                          fieldWrapperClass: "w-96",
                          errorClass: HSwitchUtils.errorClass,
                        },
                      ),
                      isRequired: false,
                      labelWidth: "w-48",
                    })
                  : null,
              ),
              React.createElement(FormRenderer.DesktopRow.make, {
                children: React.createElement(
                  "div",
                  {
                    className: "flex justify-end gap-5 mt-5 mb-1 -mr-2",
                  },
                  React.createElement(Button.make, {
                    text: "Cancel",
                    buttonType: /* Secondary */ 1,
                    buttonSize: /* Small */ 2,
                    onClick: function (param) {
                      Curry._1(setShowModal, function (param) {
                        return false;
                      });
                    },
                  }),
                  React.createElement(FormRenderer.SubmitButton.make, {
                    text: primaryBtnText,
                    buttonSize: /* Small */ 2,
                  }),
                ),
              }),
            ),
            showLabel: false,
          });
        },
        subscription: ReactFinalForm.subscribeToPristine,
        validate: function (values) {
          return DeveloperUtils.validateAPIKeyForm(
            values,
            undefined,
            ["name", "expiration"],
            setShowCustomDate$1,
            undefined,
          );
        },
      },
    );
  }
  var modalBody = React.createElement("div", undefined, tmp);
  return React.createElement(Modal.make, {
    showModal: showModal,
    setShowModal: setShowModal,
    children: modalBody,
    modalHeading: modalheader,
    modalClass:
      "w-full max-w-2xl m-auto !bg-white dark:!bg-jp-gray-lightgray_background",
    closeOnOutsideClick: true,
  });
}

var ApiEditModal = {
  make: KeyManagement$ApiEditModal,
};

function KeyManagement$ApiKeyAddBtn(props) {
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var initialValues = {};
  initialValues["expiration"] = DeveloperUtils.getStringFromRecordType(
    /* Never */ 0,
  );
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(KeyManagement$ApiEditModal, {
      setShowModal: setShowModal,
      getAPIKeyDetails: props.getAPIKeyDetails,
      initialValues: initialValues,
      showModal: match[0],
    }),
    React.createElement(ACLButton.make, {
      text: "Create New API Key",
      buttonType: /* Secondary */ 1,
      buttonSize: /* Small */ 2,
      leftIcon: {
        TAG: /* CustomIcon */ 1,
        _0: React.createElement(Icon.make, {
          name: "plus",
          size: 12,
          className: "jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
        }),
      },
      onClick: function (param) {
        Curry._4(
          mixpanelEvent,
          "create_new_api_key",
          undefined,
          undefined,
          undefined,
        );
        Curry._1(setShowModal, function (param) {
          return true;
        });
      },
      access: userPermissionJson.merchantDetailsManage,
    }),
  );
}

var ApiKeyAddBtn = {
  make: KeyManagement$ApiKeyAddBtn,
};

function KeyManagement$TableActionsCell(props) {
  var data = props.data;
  var getAPIKeyDetails = props.getAPIKeyDetails;
  var keyId = props.keyId;
  var showToast = ToastState.useShowToast(undefined);
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var deleteDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var deleteKey = async function (param) {
    try {
      var body = {};
      body["key_id"] = keyId;
      body["revoked"] = true;
      var deleteUrl = APIUtils.getURL(
        /* API_KEYS */ 12,
        /* Delete */ 4,
        Caml_option.some(keyId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        deleteDetails,
        deleteUrl,
        body,
        /* Delete */ 4,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(getAPIKeyDetails, undefined);
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var _error = e._1.message;
        if (_error !== undefined) {
          return Curry._8(
            showToast,
            "Failed to delete API key",
            /* ToastError */ 0,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        } else {
          return;
        }
      }
      throw e;
    }
  };
  var initialValues = Object.fromEntries([
    ["name", data.name],
    ["description", data.description],
  ]);
  if (data.expiration === /* Never */ 0) {
    initialValues["expiration"] = DeveloperUtils.getStringFromRecordType(
      /* Never */ 0,
    );
  } else {
    initialValues["expiration"] = DeveloperUtils.getStringFromRecordType(
      /* Custom */ 1,
    );
    initialValues["expiration_date"] = data.expiration_date;
  }
  return React.createElement(
    "div",
    undefined,
    React.createElement(KeyManagement$ApiEditModal, {
      setShowModal: setShowModal,
      getAPIKeyDetails: getAPIKeyDetails,
      initialValues: initialValues,
      showModal: match[0],
      action: /* Update */ 1,
      keyId: keyId,
    }),
    React.createElement(
      "div",
      {
        className: "invisible cursor-pointer group-hover:visible flex ",
      },
      React.createElement(
        "div",
        {
          onClick: function (param) {
            Curry._1(setShowModal, function (param) {
              return true;
            });
          },
        },
        React.createElement(Icon.make, {
          name: "edit",
          size: 14,
          className:
            "text-jp-gray-700 hover:text-jp-gray-900 dark:hover:text-white mr-4 mb-1",
        }),
      ),
      React.createElement(
        "div",
        {
          onClick: function (param) {
            Curry._1(showPopUp, {
              heading: "Delete API Key",
              description: "Are you sure you want to DELETE the API Key?",
              popUpType: [/* Warning */ 4, /* WithIcon */ 0],
              handleCancel: {
                text: "No, don't delete",
                onClick: function (param) {},
              },
              handleConfirm: {
                text: "Yes, delete it",
                onClick: function (param) {
                  deleteKey(undefined);
                },
              },
            });
          },
        },
        React.createElement(Icon.make, {
          name: "delete",
          size: 14,
          className:
            "text-jp-gray-700 hover:text-jp-gray-900 dark:hover:text-white mr-3 mb-1",
        }),
      ),
    ),
  );
}

var TableActionsCell = {
  make: KeyManagement$TableActionsCell,
};

function KeyManagement$ApiKeysTable(props) {
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return 0;
  });
  var match$1 = React.useState(function () {
    return [];
  });
  var setData = match$1[1];
  var data = match$1[0];
  var match$2 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$2[1];
  var getAPIKeyDetails = async function (param) {
    try {
      var apiKeyListUrl = APIUtils.getURL(
        /* API_KEYS */ 12,
        /* Get */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var apiKeys = await Curry._1(fetchDetails, apiKeyListUrl);
      Curry._1(setData, function (param) {
        return DeveloperUtils.getItems(apiKeys);
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var msg = e._1.message;
        if (msg !== undefined) {
          return Curry._1(setScreenState, function (param) {
            return /* Error */ {
              _0: msg,
            };
          });
        } else {
          return Curry._1(setScreenState, function (param) {
            return /* Error */ {
              _0: "Error",
            };
          });
        }
      }
      throw e;
    }
  };
  React.useEffect(function () {
    getAPIKeyDetails(undefined);
  }, []);
  var getCell = function (item, colType) {
    var appendString = function (str) {
      return str.concat("*".repeat(10));
    };
    switch (colType) {
      case /* Name */ 0:
        return {
          TAG: /* Text */ 1,
          _0: item.name,
        };
      case /* Description */ 1:
        return {
          TAG: /* Text */ 1,
          _0: item.description,
        };
      case /* Prefix */ 2:
        return {
          TAG: /* Text */ 1,
          _0: appendString(item.prefix),
        };
      case /* Created */ 3:
        return {
          TAG: /* Date */ 4,
          _0: item.created,
        };
      case /* Expiration */ 4:
        if (item.expiration === /* Never */ 0) {
          return {
            TAG: /* Text */ 1,
            _0: LogicUtils.getFirstLetterCaps(
              item.expiration_date,
              undefined,
              undefined,
            ),
          };
        } else {
          return {
            TAG: /* Date */ 4,
            _0: item.expiration_date,
          };
        }
      case /* CustomCell */ 5:
        return {
          TAG: /* CustomCell */ 10,
          _0: React.createElement(KeyManagement$TableActionsCell, {
            keyId: item.key_id,
            getAPIKeyDetails: getAPIKeyDetails,
            data: item,
          }),
          _1: "",
        };
    }
  };
  var visibleColumns = Recoil.useRecoilValue(TableAtoms.apiDefaultCols);
  var apiKeysTableEntity = EntityType.makeEntity(
    "",
    DeveloperUtils.getItems,
    DeveloperUtils.defaultColumns,
    DeveloperUtils.allColumns,
    DeveloperUtils.getHeading,
    getCell,
    "data",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "relative mt-10 md:mt-0",
        },
        React.createElement(
          "h2",
          {
            className:
              "font-bold absolute top-0 md:top-10 left-0 text-xl pb-3 text-black text-opacity-75 dark:text-white dark:text-opacity-75",
          },
          "API Keys",
        ),
        React.createElement(LoadedTable.make, {
          visibleColumns: visibleColumns,
          title: " ",
          tableActions: Caml_option.some(
            React.createElement(
              "div",
              {
                className: "mt-5",
              },
              React.createElement(KeyManagement$ApiKeyAddBtn, {
                getAPIKeyDetails: getAPIKeyDetails,
              }),
            ),
          ),
          showSerialNumber: true,
          actualData: data.map(function (prim) {
            return prim;
          }),
          totalResults: data.length,
          resultsPerPage: 7,
          offset: match[0],
          setOffset: match[1],
          entity: apiKeysTableEntity,
          currrentFetchCount: data.length,
        }),
      ),
    ),
    screenState: match$2[0],
  });
}

var ApiKeysTable = {
  make: KeyManagement$ApiKeysTable,
};

function KeyManagement$KeysManagement(props) {
  return React.createElement(
    "div",
    undefined,
    React.createElement(PageUtils.PageHeading.make, {
      title: "Keys",
      subTitle:
        "Manage API keys and credentials for integrated payment services",
    }),
    React.createElement(KeyManagement$ApiKeysTable, {}),
    React.createElement(PublishableAndHashKeySection.make, {}),
  );
}

var KeysManagement = {
  make: KeyManagement$KeysManagement,
};

export {
  ApiEditModal,
  ApiKeyAddBtn,
  TableActionsCell,
  ApiKeysTable,
  KeysManagement,
};
/* Icon Not a pure module */
