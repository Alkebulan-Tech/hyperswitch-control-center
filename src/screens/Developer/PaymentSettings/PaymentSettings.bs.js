// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Clipboard from "../../../libraries/Clipboard.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as FormValuesSpy from "../../../components/form/FormValuesSpy.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as DeveloperUtils from "../APIKeys/DeveloperUtils.bs.js";
import * as ReactFinalForm from "../../../libraries/ReactFinalForm.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as PageLoaderWrapper from "../../Utils/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as BusinessProfileHook from "../../Hooks/BusinessProfileHook.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../../genericUtils/BreadCrumbNavigation.bs.js";
import * as MerchantAccountUtils from "../../Settings/MerchantAccountUtils.bs.js";
import * as BusinessProfileMapper from "../../../utils/Mappers/BusinessProfileMapper.bs.js";

function PaymentSettings$InfoViewForWebhooks(props) {
  var isCopy = props.isCopy;
  var subHeading = props.subHeading;
  var isCopy$1 = isCopy !== undefined ? isCopy : false;
  var showToast = ToastState.useShowToast(undefined);
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-2 m-2 md:m-4 w-1/2",
    },
    React.createElement(
      "p",
      {
        className: "font-semibold text-fs-15",
      },
      props.heading,
    ),
    React.createElement(
      "div",
      {
        className: "flex gap-2 break-all w-full items-start",
      },
      React.createElement(
        "p",
        {
          className: "font-medium text-fs-14 text-black opacity-50",
        },
        subHeading,
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition: isCopy$1,
        children: React.createElement("img", {
          className: "cursor-pointer",
          src: "/assets/CopyToClipboard.svg",
          onClick: function (ev) {
            ev.stopPropagation();
            Clipboard.writeText(subHeading);
            Curry._8(
              showToast,
              "Copied to Clipboard!",
              /* ToastSuccess */ 3,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
          },
        }),
      }),
    ),
  );
}

var InfoViewForWebhooks = {
  make: PaymentSettings$InfoViewForWebhooks,
};

function PaymentSettings(props) {
  var profileId = props.profileId;
  var showFormOnly = props.showFormOnly;
  var webhookOnly = props.webhookOnly;
  var webhookOnly$1 = webhookOnly !== undefined ? webhookOnly : false;
  var showFormOnly$1 = showFormOnly !== undefined ? showFormOnly : false;
  var profileId$1 = profileId !== undefined ? profileId : "";
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var id = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    profileId$1,
  );
  var businessProfileDetails = BusinessProfileHook.useGetBusinessProflile(id);
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var showToast = ToastState.useShowToast(undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return false;
  });
  var setIsDisabled = match[1];
  var isDisabled = match[0];
  var match$1 = React.useState(function () {
    return businessProfileDetails;
  });
  var setProfileInfo = match$1[1];
  var profileInfo = match$1[0];
  var match$2 = React.useState(function () {
    return /* Success */ 1;
  });
  var setScreenState = match$2[1];
  var bgClass = webhookOnly$1
    ? ""
    : "bg-white dark:bg-jp-gray-lightgray_background";
  var fetchBusinessProfiles =
    BusinessProfileHook.useFetchBusinessProfiles(undefined);
  var threedsConnectorList = Recoil.useRecoilValue(
    HyperswitchAtom.connectorListAtom,
  ).filter(function (item) {
    return (
      ConnectorUtils.connectorTypeStringToTypeMapper(item.connector_type) ===
      /* AuthenticationProcessor */ 3
    );
  });
  var isBusinessProfileHasThreeds = threedsConnectorList.some(function (item) {
    return item.profile_id === id;
  });
  var fieldsToValidate = function (param) {
    var defaultFieldsToValidate = [
      /* WebhookUrl */ 5, /* ReturnUrl */ 6,
    ].filter(function (urlField) {
      if (urlField === /* WebhookUrl */ 5) {
        return true;
      } else {
        return !webhookOnly$1;
      }
    });
    if (isBusinessProfileHasThreeds) {
      Caml_splice_call.spliceObjApply(defaultFieldsToValidate, "push", [
        MerchantAccountUtils.threedsFields,
      ]);
    }
    return defaultFieldsToValidate;
  };
  var onSubmit = async function (values, param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var url = APIUtils.getURL(
        /* BUSINESS_PROFILE */ 29,
        /* Post */ 2,
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = MerchantAccountUtils.getBusinessProfilePayload(values);
      var res = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var profileTypeInfo =
        BusinessProfileMapper.businessProfileTypeMapper(res);
      Curry._1(setProfileInfo, function (param) {
        return profileTypeInfo;
      });
      Curry._8(
        showToast,
        "Details updated",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
      Curry._1(fetchBusinessProfiles, undefined);
    } catch (exn) {
      Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
      Curry._8(
        showToast,
        "Failed to updated",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "" +
            (showFormOnly$1 ? "" : "py-4 md:py-10") +
            " h-full flex flex-col",
        },
        React.createElement(UIUtils.RenderIf.make, {
          condition: !showFormOnly$1,
          children: React.createElement(BreadCrumbNavigation.make, {
            path: [
              {
                title: "Payment Settings",
                link: "/payment-settings",
              },
            ],
            currentPageTitle: businessProfileDetails.profile_name,
            cursorStyle: "cursor-pointer",
          }),
        }),
        React.createElement(
          "div",
          {
            className: "" + (showFormOnly$1 ? "" : "mt-4") + "",
          },
          React.createElement(
            "div",
            {
              className:
                "w-full " +
                (showFormOnly$1
                  ? ""
                  : "border border-jp-gray-500 rounded-md dark:border-jp-gray-960") +
                " " +
                bgClass +
                " ",
            },
            JsxPPXReactSupport.createElementWithKey(
              "merchantAccount",
              ReactFinalForm$1.Form,
              {
                initialValues: Caml_option.some(
                  MerchantAccountUtils.parseBussinessProfileJson(
                    businessProfileDetails,
                  ),
                ),
                onSubmit: onSubmit,
                render: function (param) {
                  return React.createElement(
                    "form",
                    {
                      className:
                        "" +
                        (showFormOnly$1 ? "" : "px-2 py-4") +
                        " flex flex-col gap-7 overflow-hidden",
                      onSubmit: param.handleSubmit,
                    },
                    React.createElement(
                      "div",
                      {
                        className: "flex items-center",
                      },
                      React.createElement(PaymentSettings$InfoViewForWebhooks, {
                        heading: "Profile ID",
                        subHeading: businessProfileDetails.profile_id,
                        isCopy: true,
                      }),
                      React.createElement(PaymentSettings$InfoViewForWebhooks, {
                        heading: "Profile Name",
                        subHeading: businessProfileDetails.profile_name,
                      }),
                    ),
                    React.createElement(
                      "div",
                      {
                        className: "flex items-center",
                      },
                      React.createElement(PaymentSettings$InfoViewForWebhooks, {
                        heading: "Merchant ID",
                        subHeading: businessProfileDetails.merchant_id,
                      }),
                      React.createElement(PaymentSettings$InfoViewForWebhooks, {
                        heading: "Payment Response Hash Key",
                        subHeading: Core__Option.getOr(
                          businessProfileDetails.payment_response_hash_key,
                          "NA",
                        ),
                        isCopy: true,
                      }),
                    ),
                    React.createElement(FormRenderer.DesktopRow.make, {
                      children: [
                        DeveloperUtils.webhookUrl,
                        DeveloperUtils.returnUrl,
                      ]
                        .filter(function (urlField) {
                          if (urlField.label === "Webhook URL") {
                            return true;
                          } else {
                            return !webhookOnly$1;
                          }
                        })
                        .map(function (field, index) {
                          return JsxPPXReactSupport.createElementWithKey(
                            index.toString(),
                            FormRenderer.FieldRenderer.make,
                            {
                              field: field,
                              fieldWrapperClass: "max-w-xl",
                              labelClass:
                                "!text-base !text-grey-700 font-semibold",
                              errorClass: HSwitchUtils.errorClass,
                            },
                          );
                        }),
                    }),
                    React.createElement(UIUtils.RenderIf.make, {
                      condition: isBusinessProfileHasThreeds,
                      children: React.createElement(
                        FormRenderer.DesktopRow.make,
                        {
                          children: null,
                        },
                        React.createElement(FormRenderer.FieldRenderer.make, {
                          field: DeveloperUtils.authenticationConnectors(
                            threedsConnectorList.map(function (item) {
                              return item.connector_name;
                            }),
                          ),
                          fieldWrapperClass: "max-w-xl",
                          labelClass: "!text-base !text-grey-700 font-semibold",
                          errorClass: HSwitchUtils.errorClass,
                        }),
                        React.createElement(FormRenderer.FieldRenderer.make, {
                          field: DeveloperUtils.threeDsRequestorUrl,
                          fieldWrapperClass: "max-w-xl",
                          labelClass: "!text-base !text-grey-700 font-semibold",
                          errorClass: HSwitchUtils.errorClass,
                        }),
                      ),
                    }),
                    React.createElement(FormRenderer.DesktopRow.make, {
                      children: React.createElement(
                        "div",
                        {
                          className: "flex justify-start w-full",
                        },
                        React.createElement(FormRenderer.SubmitButton.make, {
                          text: "Update",
                          disabledParamter: isDisabled,
                          customSumbitButtonStyle: "justify-start",
                          buttonType: /* Primary */ 0,
                          buttonSize: /* Small */ 2,
                        }),
                      ),
                    }),
                    React.createElement(FormValuesSpy.make, {}),
                  );
                },
                subscription: ReactFinalForm.subscribeToValues,
                validate: function (values) {
                  return MerchantAccountUtils.validateMerchantAccountForm(
                    values,
                    fieldsToValidate(undefined),
                    setIsDisabled,
                    MerchantAccountUtils.parseBussinessProfileJson(profileInfo),
                    featureFlagDetails.isLiveMode,
                  );
                },
              },
            ),
          ),
        ),
      ),
    ),
    screenState: match$2[0],
  });
}

var make = PaymentSettings;

export { InfoViewForWebhooks, make };
/* react Not a pure module */
