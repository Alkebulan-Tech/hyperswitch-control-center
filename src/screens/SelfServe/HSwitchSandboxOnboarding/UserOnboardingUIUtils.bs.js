// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../genericUtils/Form.bs.js";
import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Clipboard from "../../../libraries/Clipboard.bs.js";
import * as SelectBox from "../../../components/SelectBox.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as ConfigContext from "../../../context/ConfigContext.bs.js";
import * as DownloadUtils from "../../../utils/DownloadUtils.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ProviderHelper from "../../../entryPoints/Provider/ProviderHelper.bs.js";
import * as PaymentSettings from "../../Developer/PaymentSettings/PaymentSettings.bs.js";
import * as ReactDiffViewer from "../../../libraries/ReactDiffViewer.bs.js";
import * as HelperComponents from "../../Helpers/HelperComponents.bs.js";
import * as HyperSwitchUtils from "../../../utils/HyperSwitchUtils.bs.js";
import * as MonacoEditorLazy from "../../../components/MonacoEditorLazy.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as UserOnboardingUtils from "./UserOnboardingUtils.bs.js";
import * as ReactSuspenseWrapper from "../../../context/ReactSuspenseWrapper.bs.js";

function UserOnboardingUIUtils$ProgressBar(props) {
  var tabIndex = props.tabIndex;
  var match = React.useContext(ConfigContext.configContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var defaultStyle = function (currentIndex) {
    if (currentIndex < ((tabIndex + 1) | 0)) {
      return "" + backgroundColor + " h-1.5 w-full";
    } else {
      return "" + backgroundColor + " opacity-10 h-1.5 w-full";
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex w-full",
    },
    props.tabs.map(function (_val, i) {
      return React.createElement("div", {
        key: i.toString(),
        className: "" + defaultStyle(i) + "",
      });
    }),
  );
}

var ProgressBar = {
  make: UserOnboardingUIUtils$ProgressBar,
};

function UserOnboardingUIUtils$PublishableKeyArea(props) {
  var merchantDetailsValue = HSwitchUtils.useMerchantDetailsValue(undefined);
  return React.createElement(HelperComponents.KeyAndCopyArea.make, {
    copyValue: merchantDetailsValue.publishable_key,
  });
}

var PublishableKeyArea = {
  make: UserOnboardingUIUtils$PublishableKeyArea,
};

function UserOnboardingUIUtils$PaymentResponseHashKeyArea(props) {
  var merchantDetailsValue = HSwitchUtils.useMerchantDetailsValue(undefined);
  return React.createElement(HelperComponents.KeyAndCopyArea.make, {
    copyValue: Core__Option.getOr(
      merchantDetailsValue.payment_response_hash_key,
      "",
    ),
  });
}

var PaymentResponseHashKeyArea = {
  make: UserOnboardingUIUtils$PaymentResponseHashKeyArea,
};

function UserOnboardingUIUtils$DownloadAPIKeyButton(props) {
  var buttonStyle = props.buttonStyle;
  var currentTabName = props.currentTabName;
  var currentRoute = props.currentRoute;
  var currentRoute$1 =
    currentRoute !== undefined ? currentRoute : /* OnboardingDefault */ 2;
  var currentTabName$1 = currentTabName !== undefined ? currentTabName : "";
  var buttonStyle$1 = buttonStyle !== undefined ? buttonStyle : "";
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var match = React.useState(function () {
    return false;
  });
  var setShowCopyToClipboard = match[1];
  var apiKeyGeneration = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* API_KEYS */ 12,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = Object.fromEntries([
        ["name", "DefaultAPIKey"],
        ["description", "Default Value of the API key"],
        ["expiration", "never"],
      ]);
      var res = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var apiKey = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(res),
        "api_key",
        "",
      );
      DownloadUtils.downloadOld("apiKey.txt", apiKey);
      Clipboard.writeText(apiKey);
      await HyperSwitchUtils.delay(1000);
      Curry._8(
        showToast,
        "Api Key has been generated & Copied to clipboard",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setShowCopyToClipboard, function (param) {
        return true;
      });
      await HyperSwitchUtils.delay(2000);
      return Curry._1(setShowCopyToClipboard, function (param) {
        return false;
      });
    } catch (exn) {
      return Curry._8(
        showToast,
        "Api Key Generation Failed",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  var downloadZip = async function (param) {
    await HyperSwitchUtils.delay(1500);
    return Curry._8(
      showToast,
      "Plugin file has been downloaded!",
      /* ToastSuccess */ 3,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
  };
  var button = React.createElement(
    "div",
    {
      className: "flex items-center gap-5",
    },
    React.createElement(Button.make, {
      text: props.buttonText,
      buttonType: /* Primary */ 0,
      buttonSize: /* Medium */ 1,
      rightIcon: {
        TAG: /* FontAwesome */ 0,
        _0: "download-api-key",
      },
      onClick: function (param) {
        if (currentTabName$1 === "downloadWordpressPlugin") {
          downloadZip(undefined);
          return;
        }
        apiKeyGeneration(undefined);
      },
      customButtonStyle: "!w-1/3 " + buttonStyle$1 + "",
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: match[0],
      children: React.createElement(
        "div",
        {
          className: "text-green-700 text-lg",
        },
        "Copied to clipboard",
      ),
    }),
  );
  if (currentRoute$1 !== 3) {
    return button;
  } else {
    return React.createElement(
      "a",
      {
        href: "https://hyperswitch.io/zip/hyperswitch-checkout.zip",
      },
      button,
    );
  }
}

var DownloadAPIKeyButton = {
  make: UserOnboardingUIUtils$DownloadAPIKeyButton,
};

function UserOnboardingUIUtils$DownloadAPIKey(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-10",
    },
    React.createElement(
      "div",
      {
        className:
          "border-2 border-orange-border_orange bg-orange-warning_background_orange p-4 flex items-center gap-2 rounded",
      },
      React.createElement(Icon.make, {
        name: "badge-warning",
      }),
      React.createElement(
        "p",
        {
          className: "text-base",
        },
        "API key once misplaced cannot be restored. If misplaced, please re-generate a new key from Dashboard > Developers.",
      ),
    ),
    React.createElement(
      "div",
      {
        className: "p-10 bg-gray-50 border rounded flex flex-col gap-6",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-2.5",
        },
        React.createElement(
          "div",
          {
            className: "text-base text-grey-900 font-medium",
          },
          "Test API Key",
        ),
        React.createElement(
          "p",
          {
            className: "text-sm text-grey-50",
          },
          "Use this key to authenticate all API requests from your applicationâ€™s server",
        ),
      ),
      React.createElement(UserOnboardingUIUtils$DownloadAPIKeyButton, {
        buttonText: "Download API key",
        currentRoute: props.currentRoute,
        currentTabName: props.currentTabName,
      }),
    ),
  );
}

var DownloadAPIKey = {
  make: UserOnboardingUIUtils$DownloadAPIKey,
};

function UserOnboardingUIUtils$DownloadWordPressPlugin(props) {
  return React.createElement(UserOnboardingUIUtils$DownloadAPIKeyButton, {
    buttonText: "Download Plugin",
    currentRoute: props.currentRoute,
    currentTabName: props.currentTabName,
  });
}

var DownloadWordPressPlugin = {
  make: UserOnboardingUIUtils$DownloadWordPressPlugin,
};

function UserOnboardingUIUtils$TabsContentWrapper(props) {
  var customUi = props.customUi;
  var currentRoute = props.currentRoute;
  var customUi$1 =
    customUi !== undefined ? Caml_option.valFromOption(customUi) : null;
  var textClass = currentRoute !== 3 ? "text-base" : "text-lg";
  return React.createElement(
    "div",
    {
      className: "!h-full !w-full py-5 flex flex-col gap-4",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between w-full items-center",
      },
      React.createElement(
        "p",
        {
          className: "" + textClass + " font-medium py-2",
        },
        UserOnboardingUtils.getContentBasedOnIndex(
          currentRoute,
          props.tabIndex,
        ),
      ),
    ),
    customUi$1,
    React.createElement(
      "div",
      {
        className:
          "border bg-jp-gray-light_gray_bg h-full rounded-md p-6 overflow-scroll",
      },
      props.children,
    ),
  );
}

var TabsContentWrapper = {
  make: UserOnboardingUIUtils$TabsContentWrapper,
};

function UserOnboardingUIUtils$HeaderComponentView(props) {
  var langauge = props.langauge;
  var value = props.value;
  var showToast = ToastState.useShowToast(undefined);
  return React.createElement(
    "div",
    {
      className:
        "flex flex-row justify-between items-center flex-wrap border-b px-4 py-6 text-gray-900",
    },
    React.createElement(
      "p",
      {
        className: "font-medium text-base",
      },
      props.headerText,
    ),
    React.createElement(
      "div",
      {
        className: "flex gap-2",
      },
      React.createElement(
        "div",
        {
          className: "py-1 px-4 border rounded-md flex gap-2 items-center",
        },
        React.createElement(Icon.make, {
          name: "" + langauge.toLowerCase() + "",
          size: 16,
        }),
        React.createElement("p", undefined, langauge),
      ),
      React.createElement(
        "div",
        {
          className:
            "py-1 px-4 border rounded-md flex gap-2 items-center cursor-pointer",
          onClick: function (param) {
            Clipboard.writeText(value);
            Curry._8(
              showToast,
              "Copied to Clipboard!",
              /* ToastSuccess */ 3,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
          },
        },
        React.createElement("img", {
          src: "/assets/CopyToClipboard.svg",
        }),
        React.createElement("p", undefined, "Copy"),
      ),
    ),
  );
}

var HeaderComponentView = {
  make: UserOnboardingUIUtils$HeaderComponentView,
};

function UserOnboardingUIUtils$ShowCodeEditor(props) {
  var customHeight = props.customHeight;
  var value = props.value;
  var customHeight$1 = customHeight !== undefined ? customHeight : "8vh";
  return React.createElement(ReactSuspenseWrapper.make, {
    children: React.createElement(MonacoEditorLazy.make, {
      defaultLanguage: "javascript",
      value: value,
      height: customHeight$1,
      theme: props.theme,
      readOnly: true,
      width: "w-[90vh]",
      showCopy: false,
      minimap: false,
      headerComponent: Caml_option.some(
        React.createElement(UserOnboardingUIUtils$HeaderComponentView, {
          value: value,
          headerText: props.headerText,
          langauge: props.langauge,
        }),
      ),
    }),
  });
}

var ShowCodeEditor = {
  make: UserOnboardingUIUtils$ShowCodeEditor,
};

function UserOnboardingUIUtils$DiffCodeEditor(props) {
  var valueToShow = props.valueToShow;
  var oldValue = valueToShow.from;
  var newValue = valueToShow.to;
  return React.createElement(
    "div",
    {
      className:
        "flex flex-col gap-6 border bg-white overflow-x-scroll w-full !shadow-hyperswitch_box_shadow rounded-md",
    },
    React.createElement(UserOnboardingUIUtils$HeaderComponentView, {
      value: newValue,
      headerText: "Replace",
      langauge: props.langauge,
    }),
    React.createElement(
      "div",
      {
        className: "p-4",
      },
      React.createElement(ReactDiffViewer.make, {
        oldValue: oldValue,
        newValue: newValue,
        splitView: true,
        hideLineNumbers: false,
        useDarkTheme: false,
      }),
    ),
  );
}

var DiffCodeEditor = {
  make: UserOnboardingUIUtils$DiffCodeEditor,
};

function UserOnboardingUIUtils$BackendFrontendPlatformLangDropDown(props) {
  var setPlatform = props.setPlatform;
  var platform = props.platform;
  var currentRoute = props.currentRoute;
  var isFromLanding = props.isFromLanding;
  var setBackEndLang = props.setBackEndLang;
  var backEndLang = props.backEndLang;
  var setFrontEndLang = props.setFrontEndLang;
  var frontEndLang = props.frontEndLang;
  var isFromLanding$1 = isFromLanding !== undefined ? isFromLanding : false;
  var platfromInput_onBlur = function (_ev) {};
  var platfromInput_onChange = function (ev) {
    var val = UserOnboardingUtils.getPlatform(ev);
    Curry._1(setPlatform, function (param) {
      return val;
    });
  };
  var platfromInput_onFocus = function (_ev) {};
  var platfromInput = {
    name: "Platform Selecr",
    onBlur: platfromInput_onBlur,
    onChange: platfromInput_onChange,
    onFocus: platfromInput_onFocus,
    value: platform,
    checked: true,
  };
  var options = UserOnboardingUtils.platforms.map(function (op) {
    return {
      label: op,
      value: op,
    };
  });
  var backendLangInput_onBlur = function (_ev) {};
  var backendLangInput_onChange = function (ev) {
    var val = UserOnboardingUtils.getLangauge(ev);
    Curry._1(setBackEndLang, function (param) {
      return val;
    });
  };
  var backendLangInput_onFocus = function (_ev) {};
  var backendLangInput = {
    name: "BackEnd",
    onBlur: backendLangInput_onBlur,
    onChange: backendLangInput_onChange,
    onFocus: backendLangInput_onFocus,
    value: backEndLang,
    checked: true,
  };
  var frontendLangInput_onBlur = function (_ev) {};
  var frontendLangInput_onChange = function (ev) {
    var val = UserOnboardingUtils.getLangauge(ev);
    Curry._1(setFrontEndLang, function (param) {
      return val;
    });
  };
  var frontendLangInput_onFocus = function (_ev) {};
  var frontendLangInput = {
    name: "FrontEnd",
    onBlur: frontendLangInput_onBlur,
    onChange: frontendLangInput_onChange,
    onFocus: frontendLangInput_onFocus,
    value: frontEndLang,
    checked: true,
  };
  var match = UserOnboardingUtils.getLanguages(currentRoute);
  var frontendDropdownText =
    frontEndLang === "ChooseLanguage" ? "Choose Frontend" : frontEndLang;
  var backendDropdownText =
    backEndLang === "ChooseLanguage" ? "Choose Backend" : backEndLang;
  return React.createElement(Form.make, {
    children: React.createElement(
      "div",
      {
        className: "flex flex-row gap-4 flex-wrap",
      },
      React.createElement(UIUtils.RenderIf.make, {
        condition: !isFromLanding$1 && currentRoute !== /* SampleProjects */ 4,
        children: React.createElement(SelectBox.BaseDropdown.make, {
          buttonText: "Select Platform",
          allowMultiSelect: false,
          input: platfromInput,
          options: options,
          hideMultiSelectButtons: true,
          deselectDisable: true,
          baseComponent: Caml_option.some(
            React.createElement(Button.make, {
              text: platform,
              buttonSize: /* Small */ 2,
              leftIcon: {
                TAG: /* CustomIcon */ 1,
                _0: React.createElement(Icon.make, {
                  name: "" + platform.toLowerCase() + "",
                  size: 20,
                }),
              },
              rightIcon: {
                TAG: /* CustomIcon */ 1,
                _0: React.createElement(Icon.make, {
                  name: "chevron-down",
                  size: 20,
                  className: "pl-2 ",
                }),
              },
              customButtonStyle: "!bg-white !border !rounded-md",
              ellipsisOnly: true,
            }),
          ),
          defaultLeftIcon: {
            TAG: /* CustomIcon */ 1,
            _0: React.createElement(Icon.make, {
              name: "show-filters",
              size: 14,
            }),
          },
          customButtonStyle: "!rounded-md",
        }),
      }),
      React.createElement(
        UIUtils.RenderIf.make,
        {
          condition:
            !UserOnboardingUtils.requestOnlyPlatforms.includes(platform),
          children: null,
        },
        React.createElement(SelectBox.BaseDropdown.make, {
          buttonText: "Select Frontend",
          allowMultiSelect: false,
          input: frontendLangInput,
          options: match[0].map(function (lang) {
            return {
              label: lang,
              value: lang,
            };
          }),
          hideMultiSelectButtons: true,
          deselectDisable: true,
          baseComponent: Caml_option.some(
            React.createElement(Button.make, {
              text: frontendDropdownText,
              buttonSize: /* Small */ 2,
              leftIcon: {
                TAG: /* CustomIcon */ 1,
                _0: React.createElement(Icon.make, {
                  name: "" + frontEndLang.toLowerCase() + "",
                  size: 20,
                }),
              },
              rightIcon: {
                TAG: /* CustomIcon */ 1,
                _0: React.createElement(Icon.make, {
                  name: "chevron-down",
                  size: 20,
                  className: "pl-2 ",
                }),
              },
              customButtonStyle: "!bg-white !border !rounded-md",
              ellipsisOnly: true,
            }),
          ),
          autoApply: false,
          customButtonStyle: "!rounded-md",
          customStyle: "!rounded-md",
        }),
        React.createElement(SelectBox.BaseDropdown.make, {
          buttonText: "Select Backend",
          allowMultiSelect: false,
          input: backendLangInput,
          options: match[1].map(function (lang) {
            return {
              label: lang,
              value: lang,
            };
          }),
          hideMultiSelectButtons: true,
          deselectDisable: true,
          baseComponent: Caml_option.some(
            React.createElement(Button.make, {
              text: backendDropdownText,
              buttonSize: /* Small */ 2,
              leftIcon: {
                TAG: /* CustomIcon */ 1,
                _0: React.createElement(Icon.make, {
                  name: "" + backEndLang.toLowerCase() + "",
                  size: 20,
                }),
              },
              rightIcon: {
                TAG: /* CustomIcon */ 1,
                _0: React.createElement(Icon.make, {
                  name: "chevron-down",
                  size: 20,
                  className: "pl-2 ",
                }),
              },
              customButtonStyle: "!bg-white !border !rounded-md",
              ellipsisOnly: true,
            }),
          ),
          customButtonStyle: "!rounded-md",
        }),
      ),
    ),
    initialValues: {},
  });
}

var BackendFrontendPlatformLangDropDown = {
  make: UserOnboardingUIUtils$BackendFrontendPlatformLangDropDown,
};

function UserOnboardingUIUtils$LanguageTag(props) {
  var backendLang = props.backendLang;
  var frontendLang = props.frontendLang;
  var frontendLang$1 = frontendLang !== undefined ? frontendLang : "";
  var backendLang$1 = backendLang !== undefined ? backendLang : "";
  return React.createElement(UIUtils.RenderIf.make, {
    condition:
      LogicUtils.isNonEmptyString(frontendLang$1) &&
      LogicUtils.isNonEmptyString(backendLang$1),
    children: React.createElement(
      "div",
      {
        className: "flex gap-2 items-center",
      },
      React.createElement(Icon.make, {
        name: "" + frontendLang$1 + "",
        size: 25,
      }),
      React.createElement(Icon.make, {
        name: "" + backendLang$1 + "",
        size: 25,
      }),
    ),
  });
}

var LanguageTag = {
  make: UserOnboardingUIUtils$LanguageTag,
};

var headerTextCss = "font-semibold text-grey-700 text-xl";

var subTextCss = "font-normal text-grey-700 opacity-50 text-base";

function UserOnboardingUIUtils$LandingPageTileForIntegrateDocs(props) {
  var customRedirection = props.customRedirection;
  var rightIcon = props.rightIcon;
  var isTileVisible = props.isTileVisible;
  var isSkipButton = props.isSkipButton;
  var buttonType = props.buttonType;
  var subTextCustomValues = props.subTextCustomValues;
  var url = props.url;
  var subText = props.subText;
  var buttonType$1 = buttonType !== undefined ? buttonType : /* Secondary */ 1;
  var isSkipButton$1 = isSkipButton !== undefined ? isSkipButton : false;
  var isTileVisible$1 = isTileVisible !== undefined ? isTileVisible : true;
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useContext(GlobalProvider.defaultContext);
  var setIntegrationDetails = match.setIntegrationDetails;
  var integrationDetails = match.integrationDetails;
  var setDashboardPageState = match.setDashboardPageState;
  var dashboardPageState = match.dashboardPageState;
  var skipAndContinue = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* INTEGRATION_DETAILS */ 24,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var metaDataDict = Object.fromEntries([["is_skip", true]]);
      var body = HSwitchUtils.constructOnboardingBody(
        dashboardPageState,
        integrationDetails,
        false,
        Caml_option.some(metaDataDict),
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setIntegrationDetails, function (param) {
        return ProviderHelper.getIntegrationDetails(body);
      });
    } catch (exn) {}
    return Curry._1(setDashboardPageState, function (param) {
      return "HOME";
    });
  };
  return React.createElement(UIUtils.RenderIf.make, {
    condition: !props.isFromOnboardingChecklist || isTileVisible$1,
    children: React.createElement(
      "div",
      {
        className:
          "p-8 border rounded-md flex flex-col gap-7 justify-between bg-white w-full md:w-1/3",
      },
      React.createElement(
        "div",
        {
          className: "flex justify-between flex-wrap",
        },
        props.isIconImg
          ? React.createElement(
              "div",
              {
                className: "w-30 h-8",
              },
              React.createElement("img", {
                src: props.imagePath,
              }),
            )
          : React.createElement(Icon.make, {
              name: props.headerIcon,
              size: 35,
              className: props.customIconCss,
            }),
        React.createElement(UIUtils.RenderIf.make, {
          condition: Core__Option.isSome(rightIcon),
          children: Core__Option.getOr(rightIcon, null),
        }),
        props.leftSection,
      ),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-2",
        },
        React.createElement(
          "p",
          {
            className: headerTextCss,
          },
          props.headerText,
        ),
        React.createElement(UIUtils.RenderIf.make, {
          condition: Core__Option.isSome(subText),
          children: React.createElement(
            "p",
            {
              className: subTextCss,
            },
            Core__Option.getOr(subText, ""),
          ),
        }),
        React.createElement(
          "div",
          undefined,
          React.createElement(UIUtils.RenderIf.make, {
            condition: Core__Option.isSome(subTextCustomValues),
            children: React.createElement(
              "div",
              {
                className: "flex flex-col gap-3 mt-4",
              },
              Core__Option.getOr(subTextCustomValues, []).map(
                function (val, index) {
                  return React.createElement(
                    "div",
                    {
                      key: index.toString(),
                      className: subTextCss,
                    },
                    val,
                  );
                },
              ),
            ),
          }),
        ),
      ),
      React.createElement(Button.make, {
        text: props.buttonText,
        buttonType: buttonType$1,
        onClick: function (param) {
          if (isSkipButton$1) {
            skipAndContinue(undefined);
            return;
          } else {
            if (Core__Option.isSome(customRedirection)) {
              return RescriptReactRouter.replace(
                HSwitchGlobalVars.appendDashboardPath(
                  "/" +
                    Core__Option.getOr(customRedirection, "") +
                    "?type=" +
                    url +
                    "",
                ),
              );
            } else {
              return RescriptReactRouter.replace(
                HSwitchGlobalVars.appendDashboardPath(
                  "/onboarding?type=" + url + "",
                ),
              );
            }
          }
        },
      }),
    ),
  });
}

var LandingPageTileForIntegrateDocs = {
  make: UserOnboardingUIUtils$LandingPageTileForIntegrateDocs,
};

function UserOnboardingUIUtils$LandingPageTileForGithub(props) {
  var url = props.url;
  return React.createElement(
    "div",
    {
      className:
        "p-5 border rounded-md flex flex-col gap-4 justify-between bg-white cursor-pointer hover:bg-jp-gray-light_gray_bg",
      onClick: function (param) {
        window.open(url);
      },
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: "flex items-center justify-between",
        },
        React.createElement(
          "div",
          {
            className: "flex items-center",
          },
          React.createElement(
            "p",
            {
              className: headerTextCss,
            },
            props.displayFrontendLang,
          ),
          React.createElement(Icon.make, {
            name: "small-dot",
          }),
          React.createElement(
            "p",
            {
              className: headerTextCss,
            },
            props.displayBackendLang,
          ),
        ),
        React.createElement(Icon.make, {
          name: "open-new-tab",
          customIconColor: "black",
        }),
      ),
    ),
    React.createElement(
      "div",
      {
        className: "flex items-center gap-3",
      },
      React.createElement(Icon.make, {
        name: props.headerIcon,
        size: 20,
        className: props.customIconCss,
      }),
      React.createElement(
        "div",
        {
          className: "text-md text-grey-600",
        },
        "Web",
      ),
    ),
  );
}

var LandingPageTileForGithub = {
  make: UserOnboardingUIUtils$LandingPageTileForGithub,
};

function UserOnboardingUIUtils$Section(props) {
  var customRedirection = props.customRedirection;
  var isGithubSection = props.isGithubSection;
  var isFromOnboardingChecklist = props.isFromOnboardingChecklist;
  var leftSection = props.leftSection;
  var leftSection$1 =
    leftSection !== undefined
      ? Caml_option.valFromOption(leftSection)
      : React.createElement(React.Fragment, undefined);
  var isFromOnboardingChecklist$1 =
    isFromOnboardingChecklist !== undefined ? isFromOnboardingChecklist : false;
  var isGithubSection$1 =
    isGithubSection !== undefined ? isGithubSection : false;
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-6",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between items-center flex-wrap",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-1",
        },
        React.createElement(
          "p",
          {
            className: headerTextCss,
          },
          props.sectionHeaderText,
        ),
        React.createElement(
          "p",
          {
            className: subTextCss,
          },
          props.sectionSubText,
        ),
      ),
      leftSection$1,
    ),
    React.createElement(
      "div",
      {
        className:
          " " +
          (isGithubSection$1
            ? "grid grid-cols-1 md:grid-cols-3"
            : "flex md:flex-row flex-col items-center flex-wrap gap-16") +
          " gap-6",
      },
      props.subSectionArray.map(function (subSectionValue, index) {
        if (isGithubSection$1) {
          return JsxPPXReactSupport.createElementWithKey(
            index.toString(),
            UserOnboardingUIUtils$LandingPageTileForGithub,
            {
              headerIcon: subSectionValue.headerIcon,
              customIconCss: subSectionValue.customIconCss,
              url: subSectionValue.url,
              displayFrontendLang: Core__Option.getOr(
                subSectionValue.displayFrontendLang,
                "",
              ),
              displayBackendLang: Core__Option.getOr(
                subSectionValue.displayBackendLang,
                "",
              ),
            },
          );
        } else {
          return JsxPPXReactSupport.createElementWithKey(
            index.toString(),
            UserOnboardingUIUtils$LandingPageTileForIntegrateDocs,
            {
              headerIcon: subSectionValue.headerIcon,
              headerText: Core__Option.getOr(subSectionValue.headerText, ""),
              subText: subSectionValue.subText,
              buttonText: subSectionValue.buttonText,
              customIconCss: subSectionValue.customIconCss,
              url: subSectionValue.url,
              isIconImg: Core__Option.getOr(subSectionValue.isIconImg, false),
              imagePath: Core__Option.getOr(subSectionValue.imagePath, ""),
              leftSection: React.createElement(
                UserOnboardingUIUtils$LanguageTag,
                {
                  frontendLang: Core__Option.getOr(
                    subSectionValue.frontEndLang,
                    "",
                  ),
                  backendLang: Core__Option.getOr(
                    subSectionValue.backEndLang,
                    "",
                  ),
                },
              ),
              isFromOnboardingChecklist: isFromOnboardingChecklist$1,
              subTextCustomValues: subSectionValue.subTextCustomValues,
              buttonType: Core__Option.getOr(
                subSectionValue.buttonType,
                /* Secondary */ 1,
              ),
              isSkipButton: Core__Option.getOr(
                subSectionValue.isSkipButton,
                false,
              ),
              isTileVisible: Core__Option.getOr(
                subSectionValue.isTileVisible,
                true,
              ),
              rightIcon: subSectionValue.rightIcon,
              customRedirection: Core__Option.getOr(customRedirection, ""),
            },
          );
        }
      }),
    ),
  );
}

var Section = {
  make: UserOnboardingUIUtils$Section,
};

function UserOnboardingUIUtils$CreatePayment(props) {
  var theme = props.theme;
  var backEndLang = props.backEndLang;
  var match = React.useContext(ConfigContext.configContext);
  return React.createElement(UserOnboardingUIUtils$TabsContentWrapper, {
    children: React.createElement(
      "div",
      {
        className: props.defaultEditorStyle,
      },
      React.createElement(
        UIUtils.RenderIf.make,
        {
          condition: LogicUtils.isNonEmptyString(
            UserOnboardingUtils.getInstallDependencies(backEndLang),
          ),
          children: null,
        },
        React.createElement(UserOnboardingUIUtils$ShowCodeEditor, {
          value: UserOnboardingUtils.getInstallDependencies(backEndLang),
          theme: theme,
          headerText: "Installation",
          langauge: backEndLang,
        }),
        React.createElement("div", {
          className: "w-full h-px bg-jp-gray-700",
        }),
      ),
      React.createElement(UserOnboardingUIUtils$ShowCodeEditor, {
        value: UserOnboardingUtils.getCreateAPayment(backEndLang),
        theme: theme,
        headerText: "Request",
        customHeight: "25vh",
        langauge: backEndLang,
      }),
    ),
    tabIndex: props.tabIndex,
    currentRoute: props.currentRoute,
    customUi: Caml_option.some(
      React.createElement(
        "p",
        {
          className: "text-base font-normal py-2 flex gap-2",
        },
        "For the complete API schema, refer ",
        React.createElement(
          "p",
          {
            className:
              "" +
              match.globalUIConfig.font.textColor.primaryNormal +
              " underline cursor-pointer",
            onClick: function (param) {
              window.open(
                "https://api-reference.hyperswitch.io/docs/hyperswitch-api-reference/60bae82472db8-payments-create",
              );
            },
          },
          "API docs",
        ),
      ),
    ),
  });
}

var CreatePayment = {
  make: UserOnboardingUIUtils$CreatePayment,
};

function getTabsForIntegration(
  currentRoute,
  tabIndex,
  frontEndLang,
  theme,
  backEndLang,
  publishablekeyMerchant,
) {
  var defaultEditorStyle =
    "flex flex-col gap-8 bg-white flex flex-col px-6 py-4 border !shadow-hyperswitch_box_shadow rounded-md";
  switch (currentRoute) {
    case /* MigrateFromStripe */ 0:
      return [
        {
          title: "1. Download API Key",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  UserOnboardingUIUtils$DownloadAPIKey,
                  {
                    currentRoute: currentRoute,
                    currentTabName: "downloadApiKey",
                  },
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
              },
            );
          },
        },
        {
          title: "2. Install Dependencies",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  "div",
                  {
                    className: defaultEditorStyle,
                  },
                  React.createElement(UserOnboardingUIUtils$ShowCodeEditor, {
                    value: UserOnboardingUtils.getMigrateFromStripeDX(
                      frontEndLang,
                      backEndLang,
                    ),
                    theme: theme,
                    headerText: "Installation",
                    langauge: backEndLang,
                  }),
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
              },
            );
          },
        },
        {
          title: "3. Replace API Key",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  UserOnboardingUIUtils$DiffCodeEditor,
                  {
                    valueToShow:
                      UserOnboardingUtils.getReplaceAPIkeys(backEndLang),
                    langauge: backEndLang,
                  },
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
              },
            );
          },
        },
        {
          title: "4. Reconfigure Checkout Form",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  UserOnboardingUIUtils$DiffCodeEditor,
                  {
                    valueToShow:
                      UserOnboardingUtils.getCheckoutForm(frontEndLang),
                    langauge: frontEndLang,
                  },
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
                customUi: Caml_option.some(
                  React.createElement(
                    UserOnboardingUIUtils$PublishableKeyArea,
                    {},
                  ),
                ),
              },
            );
          },
        },
        {
          title: "5. Load HyperSwitch Checkout",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  UserOnboardingUIUtils$DiffCodeEditor,
                  {
                    valueToShow:
                      UserOnboardingUtils.getHyperswitchCheckout(frontEndLang),
                    langauge: frontEndLang,
                  },
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
                customUi: Caml_option.some(
                  React.createElement(
                    UserOnboardingUIUtils$PublishableKeyArea,
                    {},
                  ),
                ),
              },
            );
          },
        },
      ];
    case /* IntegrateFromScratch */ 1:
      return [
        {
          title: "1. Download API Key",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  UserOnboardingUIUtils$DownloadAPIKey,
                  {
                    currentRoute: currentRoute,
                    currentTabName: "downloadApiKey",
                  },
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
              },
            );
          },
        },
        {
          title: "2. Create a Payment",
          renderContent: function (param) {
            return React.createElement(UserOnboardingUIUtils$CreatePayment, {
              currentRoute: currentRoute,
              tabIndex: tabIndex,
              defaultEditorStyle: defaultEditorStyle,
              backEndLang: backEndLang,
              theme: theme,
            });
          },
        },
        {
          title: "3. Display Checkout Page",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  "div",
                  {
                    className: defaultEditorStyle,
                  },
                  React.createElement(
                    UIUtils.RenderIf.make,
                    {
                      condition: LogicUtils.isNonEmptyString(
                        UserOnboardingUtils.getInstallDependencies(
                          frontEndLang,
                        ),
                      ),
                      children: null,
                    },
                    React.createElement(UserOnboardingUIUtils$ShowCodeEditor, {
                      value:
                        UserOnboardingUtils.getInstallDependencies(
                          frontEndLang,
                        ),
                      theme: theme,
                      headerText: "Installation",
                      langauge: frontEndLang,
                    }),
                    React.createElement("div", {
                      className: "w-full h-px bg-jp-gray-700",
                    }),
                  ),
                  React.createElement(
                    UIUtils.RenderIf.make,
                    {
                      condition: LogicUtils.isNonEmptyString(
                        UserOnboardingUtils.getInstallDependencies(
                          frontEndLang,
                        ),
                      ),
                      children: null,
                    },
                    React.createElement(UserOnboardingUIUtils$ShowCodeEditor, {
                      value: UserOnboardingUtils.getImports(frontEndLang),
                      theme: theme,
                      headerText: "Imports",
                      langauge: frontEndLang,
                    }),
                    React.createElement("div", {
                      className: "w-full h-px bg-jp-gray-700",
                    }),
                  ),
                  React.createElement(
                    UIUtils.RenderIf.make,
                    {
                      condition: LogicUtils.isNonEmptyString(
                        UserOnboardingUtils.getLoad(frontEndLang),
                      ),
                      children: null,
                    },
                    React.createElement(UserOnboardingUIUtils$ShowCodeEditor, {
                      value: UserOnboardingUtils.getLoad(frontEndLang),
                      theme: theme,
                      headerText: "Load",
                      langauge: frontEndLang,
                    }),
                    React.createElement("div", {
                      className: "w-full h-px bg-jp-gray-700",
                    }),
                  ),
                  React.createElement(
                    UIUtils.RenderIf.make,
                    {
                      condition: LogicUtils.isNonEmptyString(
                        UserOnboardingUtils.getInitialize(frontEndLang),
                      ),
                      children: null,
                    },
                    React.createElement(UserOnboardingUIUtils$ShowCodeEditor, {
                      value: UserOnboardingUtils.getInitialize(frontEndLang),
                      theme: theme,
                      headerText: "Initialize",
                      langauge: frontEndLang,
                    }),
                    React.createElement("div", {
                      className: "w-full h-px bg-jp-gray-700",
                    }),
                  ),
                  React.createElement(UIUtils.RenderIf.make, {
                    condition: LogicUtils.isNonEmptyString(
                      UserOnboardingUtils.getCheckoutFormForDisplayCheckoutPage(
                        frontEndLang,
                      ),
                    ),
                    children: React.createElement(
                      UserOnboardingUIUtils$ShowCodeEditor,
                      {
                        value:
                          UserOnboardingUtils.getCheckoutFormForDisplayCheckoutPage(
                            frontEndLang,
                          ),
                        theme: theme,
                        headerText: "Checkout Form",
                        langauge: frontEndLang,
                      },
                    ),
                  }),
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
                customUi: Caml_option.some(
                  React.createElement(
                    UserOnboardingUIUtils$PublishableKeyArea,
                    {},
                  ),
                ),
              },
            );
          },
        },
        {
          title: "4. Display Payment Confirmation",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  "div",
                  {
                    className: defaultEditorStyle,
                  },
                  React.createElement(
                    UIUtils.RenderIf.make,
                    {
                      condition: LogicUtils.isNonEmptyString(
                        UserOnboardingUtils.getHandleEvents(frontEndLang),
                      ),
                      children: null,
                    },
                    React.createElement(UserOnboardingUIUtils$ShowCodeEditor, {
                      value: UserOnboardingUtils.getHandleEvents(frontEndLang),
                      theme: theme,
                      headerText: "Handle Events",
                      customHeight: "20vh",
                      langauge: frontEndLang,
                    }),
                    React.createElement("div", {
                      className: "w-full h-px bg-jp-gray-700",
                    }),
                  ),
                  React.createElement(UIUtils.RenderIf.make, {
                    condition: LogicUtils.isNonEmptyString(
                      UserOnboardingUtils.getDisplayConformation(frontEndLang),
                    ),
                    children: React.createElement(
                      UserOnboardingUIUtils$ShowCodeEditor,
                      {
                        value:
                          UserOnboardingUtils.getDisplayConformation(
                            frontEndLang,
                          ),
                        theme: theme,
                        headerText: "Display Payment Confirmation",
                        customHeight: "20vh",
                        langauge: frontEndLang,
                      },
                    ),
                  }),
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
                customUi: Caml_option.some(
                  React.createElement(
                    UserOnboardingUIUtils$PublishableKeyArea,
                    {},
                  ),
                ),
              },
            );
          },
        },
      ];
    case /* OnboardingDefault */ 2:
      return [];
    case /* WooCommercePlugin */ 3:
      return [
        {
          title: "1. Connect",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  "div",
                  {
                    className:
                      "bg-white p-7 flex flex-col gap-6 border !shadow-hyperswitch_box_shadow rounded-md",
                  },
                  React.createElement(
                    UserOnboardingUIUtils$DownloadWordPressPlugin,
                    {
                      currentRoute: currentRoute,
                      currentTabName: "downloadWordpressPlugin",
                    },
                  ),
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
              },
            );
          },
        },
        {
          title: "2. Configure",
          renderContent: function (param) {
            return React.createElement(
              "div",
              undefined,
              React.createElement(UserOnboardingUIUtils$TabsContentWrapper, {
                children: React.createElement(
                  "div",
                  {
                    className:
                      "bg-white p-7 flex flex-col gap-6 border !shadow-hyperswitch_box_shadow rounded-md",
                  },
                  React.createElement("img", {
                    style: {
                      height: "400px",
                      width: "100%",
                      objectFit: "cover",
                      objectPosition: "0% 12%",
                    },
                    src: "https://hyperswitch.io/img/site/wordpress_hyperswitch_settings.png",
                  }),
                ),
                tabIndex: 1,
                currentRoute: currentRoute,
              }),
              React.createElement(UserOnboardingUIUtils$TabsContentWrapper, {
                children: React.createElement(
                  UserOnboardingUIUtils$DownloadAPIKey,
                  {
                    currentRoute: currentRoute,
                    currentTabName: "downloadApiKey",
                  },
                ),
                tabIndex: 2,
                currentRoute: currentRoute,
              }),
              React.createElement(UserOnboardingUIUtils$TabsContentWrapper, {
                children: React.createElement(
                  UserOnboardingUIUtils$PublishableKeyArea,
                  {},
                ),
                tabIndex: 3,
                currentRoute: currentRoute,
              }),
              React.createElement(UserOnboardingUIUtils$TabsContentWrapper, {
                children: React.createElement(
                  UserOnboardingUIUtils$PaymentResponseHashKeyArea,
                  {},
                ),
                tabIndex: 4,
                currentRoute: currentRoute,
              }),
              React.createElement(
                UserOnboardingUIUtils$TabsContentWrapper,
                {
                  children: null,
                  tabIndex: 5,
                  currentRoute: currentRoute,
                },
                React.createElement(
                  "div",
                  {
                    className:
                      "bg-white p-7 flex flex-col gap-6 border !shadow-hyperswitch_box_shadow rounded-md",
                  },
                  React.createElement("img", {
                    style: {
                      height: "120px",
                      width: "100%",
                      objectFit: "cover",
                      objectPosition: "0% 52%",
                    },
                    src: "https://hyperswitch.io/img/site/wordpress_hyperswitch_settings.png",
                  }),
                ),
                React.createElement(PaymentSettings.make, {
                  webhookOnly: true,
                }),
              ),
              React.createElement(UserOnboardingUIUtils$TabsContentWrapper, {
                children: React.createElement(
                  "div",
                  {
                    className:
                      "bg-white p-7 flex flex-col gap-6 border !shadow-hyperswitch_box_shadow rounded-md",
                  },
                  React.createElement("img", {
                    style: {
                      height: "120px",
                      width: "100%",
                      objectFit: "cover",
                      objectPosition: "0% 100%",
                    },
                    src: "https://hyperswitch.io/img/site/wordpress_hyperswitch_settings.png",
                  }),
                ),
                tabIndex: 6,
                currentRoute: currentRoute,
              }),
              React.createElement(
                "div",
                {
                  className: "mt-4",
                },
                "Additionally, you can configure the other settings such as appearance, layout, etc as per your requirements.",
              ),
            );
          },
        },
      ];
    case /* SampleProjects */ 4:
      return [
        {
          title: "1. Download API Key",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  UserOnboardingUIUtils$DownloadAPIKey,
                  {
                    currentRoute: currentRoute,
                    currentTabName: "1.downloadaPIkey",
                  },
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
              },
            );
          },
        },
        {
          title: "2. Explore Sample Project",
          renderContent: function (param) {
            return React.createElement(
              UserOnboardingUIUtils$TabsContentWrapper,
              {
                children: React.createElement(
                  "div",
                  {
                    className: "flex flex-col gap-5",
                  },
                  React.createElement(
                    "div",
                    {
                      className: defaultEditorStyle,
                    },
                    React.createElement(HelperComponents.KeyAndCopyArea.make, {
                      copyValue: publishablekeyMerchant,
                      shadowClass:
                        "shadow shadow-hyperswitch_box_shadow md:!w-max",
                    }),
                  ),
                  React.createElement(
                    "div",
                    {
                      className: defaultEditorStyle,
                    },
                    React.createElement(UserOnboardingUIUtils$Section, {
                      sectionHeaderText: "Clone a sample project",
                      sectionSubText:
                        "Try out your choice of integration by cloning sample project",
                      subSectionArray: UserOnboardingUtils.getFilteredList(
                        frontEndLang,
                        backEndLang,
                        UserOnboardingUtils.githubCodespaces,
                      ),
                      isGithubSection: true,
                    }),
                  ),
                ),
                tabIndex: tabIndex,
                currentRoute: currentRoute,
                customUi: Caml_option.some(
                  React.createElement(
                    "p",
                    {
                      className: "text-base font-normal py-2 flex gap-2",
                    },
                    "Explore Sample Projects, make use of the publishable key wherever needed ",
                  ),
                ),
              },
            );
          },
        },
      ];
  }
}

export {
  ProgressBar,
  PublishableKeyArea,
  PaymentResponseHashKeyArea,
  DownloadAPIKeyButton,
  DownloadAPIKey,
  DownloadWordPressPlugin,
  TabsContentWrapper,
  HeaderComponentView,
  ShowCodeEditor,
  DiffCodeEditor,
  BackendFrontendPlatformLangDropDown,
  LanguageTag,
  headerTextCss,
  subTextCss,
  LandingPageTileForIntegrateDocs,
  LandingPageTileForGithub,
  Section,
  CreatePayment,
  getTabsForIntegration,
};
/* Form Not a pure module */
