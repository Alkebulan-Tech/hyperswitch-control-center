// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as TextInput from "../../../components/form/TextInput.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../../hooks/PopUpState.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as ConfigContext from "../../../context/ConfigContext.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as HelperComponents from "../../Helpers/HelperComponents.bs.js";
import * as ProdOnboardingUtils from "./ProdOnboardingUtils.bs.js";
import * as MerchantAccountUtils from "../../Settings/MerchantAccountUtils.bs.js";
import * as BusinessProfileMapper from "../../../utils/Mappers/BusinessProfileMapper.bs.js";
import * as ProdOnboardingUIUtils from "./ProdOnboardingUIUtils.bs.js";
import * as UserOnboardingUIUtils from "../HSwitchSandboxOnboarding/UserOnboardingUIUtils.bs.js";

var headerTextStyle = "text-xl font-semibold text-grey-700";

var subTextStyle = "text-base font-normal text-grey-700 opacity-50";

var dividerColor = "bg-grey-700 bg-opacity-20 h-px w-full";

function LiveEndpointsSetup$ReplaceAPIKey(props) {
  var webhookEndpoint = props.webhookEndpoint;
  var paymentResponseHashKey = props.paymentResponseHashKey;
  return React.createElement(
    "div",
    undefined,
    React.createElement(ProdOnboardingUIUtils.SetupWebhookProcessor.make, {
      headerSectionText: "Live Domain",
      subtextSectionText:
        "Configure this base url in your application for all server-server calls",
      customRightSection: React.createElement(
        HelperComponents.KeyAndCopyArea.make,
        {
          copyValue: window._env_.apiBaseUrl,
          shadowClass: "shadow shadow-hyperswitch_box_shadow md:!w-max",
        },
      ),
      rightTag: Caml_option.some(
        React.createElement(Icon.make, {
          name: "server-tag",
          size: 30,
          customWidth: "50",
        }),
      ),
    }),
    React.createElement("div", {
      className: "" + dividerColor + " px-2",
    }),
    React.createElement(ProdOnboardingUIUtils.SetupWebhookProcessor.make, {
      headerSectionText: "Publishable Key",
      subtextSectionText:
        "Use this key to authenticate all calls from your application's client to Hyperswitch SDK",
      customRightSection: React.createElement(
        HelperComponents.KeyAndCopyArea.make,
        {
          copyValue: props.publishablekeyMerchant,
          shadowClass: "shadow shadow-hyperswitch_box_shadow md:!w-max",
        },
      ),
      rightTag: Caml_option.some(
        React.createElement(Icon.make, {
          name: "client-tag",
          size: 30,
          customWidth: "50",
        }),
      ),
    }),
    React.createElement("div", {
      className: "" + dividerColor + " px-2",
    }),
    React.createElement(
      UIUtils.RenderIf.make,
      {
        condition:
          Core__Option.isSome(props.previewVariant) &&
          LogicUtils.isNonEmptyString(webhookEndpoint),
        children: null,
      },
      React.createElement(ProdOnboardingUIUtils.SetupWebhookProcessor.make, {
        headerSectionText: "Merchant Webhook Endpoint",
        subtextSectionText:
          "Provide the endpoint where you would want us to send live payment events",
        customRightSection: React.createElement(
          HelperComponents.KeyAndCopyArea.make,
          {
            copyValue: webhookEndpoint,
            shadowClass: "shadow shadow-hyperswitch_box_shadow md:!w-max",
          },
        ),
      }),
      React.createElement("div", {
        className: "" + dividerColor + " px-2",
      }),
      React.createElement(UIUtils.RenderIf.make, {
        condition: LogicUtils.isNonEmptyString(paymentResponseHashKey),
        children: React.createElement(
          ProdOnboardingUIUtils.SetupWebhookProcessor.make,
          {
            headerSectionText: "Payment Response Hash Key",
            subtextSectionText:
              "Download the provided key to authenticate and verify live events sent by Hyperswitch. Learn more",
            customRightSection: React.createElement(
              HelperComponents.KeyAndCopyArea.make,
              {
                copyValue: paymentResponseHashKey,
                shadowClass: "shadow shadow-hyperswitch_box_shadow md:!w-full",
              },
            ),
          },
        ),
      }),
      React.createElement("div", {
        className: "" + dividerColor + " px-2",
      }),
    ),
    React.createElement(ProdOnboardingUIUtils.SetupWebhookProcessor.make, {
      headerSectionText: "API Key",
      subtextSectionText:
        "Use this key to authenticate all API requests from your application's server to Hyperswitch server",
      customRightSection: React.createElement(
        UserOnboardingUIUtils.DownloadAPIKeyButton.make,
        {
          buttonText: "Create and download API key",
          buttonStyle: "!rounded-md",
        },
      ),
      rightTag: Caml_option.some(
        React.createElement(Icon.make, {
          name: "server-tag",
          size: 30,
          customWidth: "50",
        }),
      ),
    }),
  );
}

var ReplaceAPIKey = {
  make: LiveEndpointsSetup$ReplaceAPIKey,
};

function LiveEndpointsSetup$SetupWebhookUser(props) {
  var paymentResponseHashKey = props.paymentResponseHashKey;
  var setWebhookEndpoint = props.setWebhookEndpoint;
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var webhookEndpoint_onBlur = function (_ev) {};
  var webhookEndpoint_onChange = function (ev) {
    var value = ev.target.value;
    if (value.includes("<script>") || value.includes("</script>")) {
      Curry._1(showPopUp, {
        heading: "Script Tags are not allowed",
        description: "Input cannot contain <script>, </script> tags",
        popUpType: [/* Warning */ 4, /* WithIcon */ 0],
        handleConfirm: {
          text: "OK",
        },
      });
    }
    var val = value.replace("<script>", "").replace("</script>", "");
    Curry._1(setWebhookEndpoint, function (param) {
      return val;
    });
  };
  var webhookEndpoint_onFocus = function (_ev) {};
  var webhookEndpoint_value = props.webhookEndpoint;
  var webhookEndpoint = {
    name: "webhookEndpoint",
    onBlur: webhookEndpoint_onBlur,
    onChange: webhookEndpoint_onChange,
    onFocus: webhookEndpoint_onFocus,
    value: webhookEndpoint_value,
    checked: true,
  };
  return React.createElement(
    "div",
    undefined,
    React.createElement(ProdOnboardingUIUtils.SetupWebhookProcessor.make, {
      headerSectionText: "Merchant Webhook Endpoint",
      subtextSectionText:
        "Provide the endpoint where you would want us to send live payment events",
      customRightSection: React.createElement(FormRenderer.FieldWrapper.make, {
        label: "Webhook Endpoint",
        children: React.createElement(TextInput.make, {
          input: webhookEndpoint,
          placeholder: "Enter your webhook endpoint here ",
        }),
      }),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: LogicUtils.isNonEmptyString(paymentResponseHashKey),
      children: React.createElement(
        ProdOnboardingUIUtils.SetupWebhookProcessor.make,
        {
          headerSectionText: "Payment Response Hash Key",
          subtextSectionText:
            "Download the provided key to authenticate and verify live events sent by Hyperswitch. Learn more",
          customRightSection: React.createElement(
            HelperComponents.KeyAndCopyArea.make,
            {
              copyValue: paymentResponseHashKey,
              shadowClass: "shadow shadow-hyperswitch_box_shadow md:!w-full",
            },
          ),
        },
      ),
    }),
  );
}

var SetupWebhookUser = {
  make: LiveEndpointsSetup$SetupWebhookUser,
};

function LiveEndpointsSetup(props) {
  var previewState = props.previewState;
  var setPageView = props.setPageView;
  var pageView = props.pageView;
  var match = React.useContext(ConfigContext.configContext);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var merchantDetails = Recoil.useRecoilValue(
    HyperswitchAtom.merchantDetailsValueAtom,
  );
  var publishablekeyMerchant = merchantDetails.publishable_key;
  var paymentResponseHashKey = Core__Option.getOr(
    merchantDetails.payment_response_hash_key,
    "",
  );
  var match$1 = Recoil.useRecoilState(HyperswitchAtom.businessProfilesAtom);
  var setBusinessProfiles = match$1[1];
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    match$1[0],
  );
  var webhookUrl = Core__Option.getOr(
    activeBusinessProfile.webhook_details.webhook_url,
    "",
  );
  var match$2 = React.useState(function () {
    return webhookUrl;
  });
  var webhookEndpoint = match$2[0];
  var match$3 = React.useState(function () {
    return /* Normal */ 0;
  });
  var setButtonState = match$3[1];
  var headerText =
    pageView !== 3
      ? pageView !== 4
        ? ""
        : "Setup Webhooks On Your End"
      : "Replace API keys & Live Endpoints";
  var subHeaderText =
    pageView !== 3
      ? pageView !== 4
        ? ""
        : "Create webhook endpoints to allow us to receive and notify you of payment events"
      : "Point your application's client and server to our live environment";
  var backButtonEnabled = pageView !== 3;
  var updateLiveEndpoint = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "MERCHANT_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = ProdOnboardingUtils.getProdApiBody(
        "ConfigureEndpoint",
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setPageView, function (param) {
        return ProdOnboardingUtils.getPageView(pageView);
      });
      Curry._8(
        showToast,
        "Details updated",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    } catch (exn) {
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  var updateWebhookDetails = async function (param) {
    try {
      Curry._1(setButtonState, function (param) {
        return /* Loading */ 1;
      });
      var url = APIUtils.getURL(
        /* BUSINESS_PROFILE */ 29,
        /* Post */ 2,
        Caml_option.some(activeBusinessProfile.profile_id),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var merchantUpdateBody = Object.fromEntries([
        ["webhook_url", webhookEndpoint],
      ]);
      var body =
        MerchantAccountUtils.getBusinessProfilePayload(merchantUpdateBody);
      var res = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      setBusinessProfiles(function (param) {
        return BusinessProfileMapper.getArrayOfBusinessProfile(res);
      });
      Curry._8(
        showToast,
        "Details updated",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      updateLiveEndpoint(undefined);
      Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    } catch (exn) {
      Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
    return null;
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12 p-11",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between flex-wrap gap-4",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-2",
        },
        React.createElement(
          "p",
          {
            className: headerTextStyle,
          },
          headerText,
        ),
        React.createElement(
          "p",
          {
            className: subTextStyle,
          },
          subHeaderText,
        ),
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition: Core__Option.isNone(previewState),
        children: React.createElement(
          "div",
          {
            className: "flex gap-4",
          },
          React.createElement(UIUtils.RenderIf.make, {
            condition: backButtonEnabled,
            children: React.createElement(Button.make, {
              text: "Back",
              buttonType: /* PrimaryOutline */ 2,
              buttonSize: /* Small */ 2,
              onClick: function (param) {
                Curry._1(setPageView, function (param) {
                  return ProdOnboardingUtils.getBackPageView(pageView);
                });
              },
              customButtonStyle: "!rounded-md",
            }),
          }),
          React.createElement(Button.make, {
            buttonState: match$3[0],
            text: "Connect and Proceed",
            buttonType: /* Primary */ 0,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              if (pageView !== 4) {
                return Curry._1(setPageView, function (param) {
                  return ProdOnboardingUtils.getPageView(pageView);
                });
              } else {
                updateWebhookDetails(undefined);
                return;
              }
            },
            customButtonStyle: "!rounded-md",
          }),
        ),
      }),
    ),
    React.createElement(ProdOnboardingUIUtils.WarningBlock.make, {
      warningText: " Developer docs to complete integration",
      customComponent: Caml_option.some(
        Caml_option.some(
          React.createElement(
            React.Fragment,
            undefined,
            React.createElement(
              "p",
              {
                className: "" + subTextStyle + " !opacity-100",
              },
              "Not integrated with Hyperswitch yet? Visit our",
            ),
            React.createElement(
              "p",
              {
                className:
                  "text-base font-normal " +
                  match.globalUIConfig.font.textColor.primaryNormal +
                  " underline cursor-pointer",
                onClick: function (param) {
                  window.open("https://hyperswitch.io/docs");
                },
              },
              "Developer Docs",
            ),
            React.createElement(
              "p",
              {
                className: "" + subTextStyle + " !opacity-100",
              },
              "to complete the integration",
            ),
          ),
        ),
      ),
    }),
    pageView !== 3
      ? pageView !== 4
        ? React.createElement(React.Fragment, undefined)
        : React.createElement(LiveEndpointsSetup$SetupWebhookUser, {
            webhookEndpoint: webhookEndpoint,
            setWebhookEndpoint: match$2[1],
            paymentResponseHashKey: paymentResponseHashKey,
          })
      : React.createElement(LiveEndpointsSetup$ReplaceAPIKey, {
          publishablekeyMerchant: publishablekeyMerchant,
          paymentResponseHashKey: paymentResponseHashKey,
          webhookEndpoint: webhookEndpoint,
          previewVariant: undefined,
        }),
    previewState !== undefined
      ? React.createElement(LiveEndpointsSetup$ReplaceAPIKey, {
          publishablekeyMerchant: publishablekeyMerchant,
          paymentResponseHashKey: paymentResponseHashKey,
          webhookEndpoint: webhookEndpoint,
          previewVariant: previewState,
        })
      : null,
  );
}

var make = LiveEndpointsSetup;

export {
  headerTextStyle,
  subTextStyle,
  dividerColor,
  ReplaceAPIKey,
  SetupWebhookUser,
  make,
};
/* Icon Not a pure module */
