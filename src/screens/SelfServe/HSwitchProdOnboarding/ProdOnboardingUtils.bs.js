// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ConfigContext from "../../../context/ConfigContext.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";

var defaultValueOfCheckList_itemsVariants = [
  /* SELECT_PROCESSOR */ 0, /* SETUP_CREDS */ 1,
  /* SETUP_WEBHOOK_PROCESSOR */ 2,
];

var defaultValueOfCheckList = {
  headerText: "Setup Your First Processor",
  headerVariant: "SetupProcessor",
  itemsVariants: defaultValueOfCheckList_itemsVariants,
};

var checkList = [
  {
    headerText: "Configure Live Endpoints",
    headerVariant: "ConfigureEndpoint",
    itemsVariants: [/* REPLACE_API_KEYS */ 3, /* SETUP_WEBHOOK_USER */ 4],
  },
  {
    headerText: "Complete Setup",
    headerVariant: "SetupComplete",
    itemsVariants: [/* SETUP_COMPLETED */ 6],
  },
];

var updatedCheckList = [defaultValueOfCheckList].concat(checkList);

function getPageView(index) {
  switch (index) {
    case /* SELECT_PROCESSOR */ 0:
      return /* SETUP_CREDS */ 1;
    case /* SETUP_CREDS */ 1:
      return /* SETUP_WEBHOOK_PROCESSOR */ 2;
    case /* SETUP_WEBHOOK_PROCESSOR */ 2:
      return /* REPLACE_API_KEYS */ 3;
    case /* REPLACE_API_KEYS */ 3:
      return /* SETUP_WEBHOOK_USER */ 4;
    case /* SETUP_WEBHOOK_USER */ 4:
    case /* TEST_LIVE_PAYMENT */ 5:
    case /* SETUP_COMPLETED */ 6:
      return /* SETUP_COMPLETED */ 6;
  }
}

function getBackPageView(index) {
  switch (index) {
    case /* SETUP_CREDS */ 1:
      return /* SELECT_PROCESSOR */ 0;
    case /* SETUP_WEBHOOK_PROCESSOR */ 2:
      return /* SETUP_CREDS */ 1;
    case /* REPLACE_API_KEYS */ 3:
      return /* SETUP_WEBHOOK_PROCESSOR */ 2;
    case /* SETUP_WEBHOOK_USER */ 4:
      return /* REPLACE_API_KEYS */ 3;
    case /* SELECT_PROCESSOR */ 0:
    case /* TEST_LIVE_PAYMENT */ 5:
    case /* SETUP_COMPLETED */ 6:
      return /* SETUP_COMPLETED */ 6;
  }
}

function getIndexFromVariant(index) {
  switch (index) {
    case /* SETUP_CREDS */ 1:
      return 1;
    case /* SETUP_WEBHOOK_PROCESSOR */ 2:
      return 2;
    case /* REPLACE_API_KEYS */ 3:
      return 3;
    case /* SETUP_WEBHOOK_USER */ 4:
      return 4;
    case /* SELECT_PROCESSOR */ 0:
    case /* TEST_LIVE_PAYMENT */ 5:
      return 0;
    case /* SETUP_COMPLETED */ 6:
      return 5;
  }
}

function sidebarTextFromVariant(pageView) {
  switch (pageView) {
    case /* SELECT_PROCESSOR */ 0:
      return "Select a Processor";
    case /* SETUP_CREDS */ 1:
      return "Setup Credentials";
    case /* SETUP_WEBHOOK_PROCESSOR */ 2:
      return "Configure Processor Webhooks";
    case /* REPLACE_API_KEYS */ 3:
      return "Replace API keys & Live Endpoints";
    case /* SETUP_WEBHOOK_USER */ 4:
      return "Configure Hyperswitch Webhooks";
    case /* TEST_LIVE_PAYMENT */ 5:
      return "";
    case /* SETUP_COMPLETED */ 6:
      return "Setup Completed";
  }
}

function getCheckboxText(connectorName) {
  switch (connectorName.TAG | 0) {
    case /* Processors */ 0:
      var match = connectorName._0;
      if (match >= 10) {
        return "";
      }
      switch (match) {
        case /* ADYEN */ 0:
          return "I have submitted Hyperswitch's PCI Certificates to Adyen";
        case /* CHECKOUT */ 1:
        case /* STRIPE */ 6:
          break;
        case /* BRAINTREE */ 2:
        case /* BANKOFAMERICA */ 3:
        case /* BILLWERK */ 4:
        case /* AUTHORIZEDOTNET */ 5:
        case /* KLARNA */ 7:
        case /* GLOBALPAY */ 8:
          return "";
        case /* BLUESNAP */ 9:
          return "I have uploaded PCI DSS Certificate";
      }
      break;
    case /* ThreeDsAuthenticator */ 1:
    case /* UnknownConnector */ 2:
      return "";
  }
  return (
    "I have enabled raw cards on " +
    LogicUtils.capitalizeString(
      ConnectorUtils.getConnectorNameString(connectorName),
    ) +
    ""
  );
}

var subTextStyle = "text-base font-normal text-grey-700 opacity-50";

function useGetWarningBlockForConnector(connectorName) {
  var match = React.useContext(ConfigContext.configContext);
  var hightlightedText =
    "text-base font-normal " +
    match.globalUIConfig.font.textColor.primaryNormal +
    " underline";
  switch (connectorName.TAG | 0) {
    case /* Processors */ 0:
      var match$1 = connectorName._0;
      if (match$1 >= 10) {
        return;
      }
      switch (match$1) {
        case /* ADYEN */ 0:
          return Caml_option.some(
            React.createElement(
              React.Fragment,
              undefined,
              React.createElement(
                "p",
                {
                  className: hightlightedText,
                },
                "Download",
              ),
              React.createElement(
                "p",
                {
                  className: "" + subTextStyle + " !opacity-100",
                },
                "and submit our PCI Certificates to Adyen's support team to enable raw cards",
              ),
            ),
          );
        case /* CHECKOUT */ 1:
          return Caml_option.some(
            React.createElement(
              React.Fragment,
              undefined,
              React.createElement(
                "p",
                {
                  className: "" + subTextStyle + " !opacity-100",
                },
                "Enable Raw Cards: To enable full card processing on your account, drop an email to",
              ),
              React.createElement(
                "p",
                {
                  className: hightlightedText,
                },
                "support@checkout.com",
              ),
            ),
          );
        case /* STRIPE */ 6:
          return Caml_option.some(
            React.createElement(
              "span",
              undefined,
              React.createElement(
                "span",
                {
                  className: "" + subTextStyle + " !opacity-100",
                },
                "Enable Raw Cards: Navigate to Settings > Integrations in your Stripe dashboard; click on advanced options and toggle 'Handle card information directly' or raise a support ticket",
              ),
              React.createElement(
                "span",
                {
                  className: "ml-2",
                },
                React.createElement(
                  "a",
                  {
                    className: "" + hightlightedText + " cursor-pointer",
                    href: "https://support.stripe.com/contact/email?body=I+would+like+to+request+that+Stripe+enable+raw+card+data+APIs+for+my+account&question=other&subject=Request+to+enable+raw+card+data+APIs&topic=other",
                    target: "_blank",
                  },
                  "here",
                ),
              ),
            ),
          );
        case /* BRAINTREE */ 2:
        case /* BANKOFAMERICA */ 3:
        case /* BILLWERK */ 4:
        case /* AUTHORIZEDOTNET */ 5:
        case /* KLARNA */ 7:
        case /* GLOBALPAY */ 8:
          return;
        case /* BLUESNAP */ 9:
          return Caml_option.some(
            React.createElement(
              React.Fragment,
              undefined,
              React.createElement(
                "p",
                {
                  className: hightlightedText,
                },
                "Download",
              ),
              React.createElement(
                "p",
                {
                  className: "" + subTextStyle + " !opacity-100",
                },
                "and upload the PCI DSS Certificates",
              ),
              React.createElement(
                "a",
                {
                  className: hightlightedText,
                  href: "https://www.securitymetrics.com/pcidss/bluesnap",
                  target: "_blank",
                },
                "here",
              ),
            ),
          );
      }
    case /* ThreeDsAuthenticator */ 1:
    case /* UnknownConnector */ 2:
      return;
  }
}

function getProdApiBody(parentVariant, connectorIdOpt, _paymentIdOpt, param) {
  var connectorId = connectorIdOpt !== undefined ? connectorIdOpt : "";
  if (parentVariant === "SetupProcessor") {
    return LogicUtils.getJsonFromArrayOfJson([
      [parentVariant, Object.fromEntries([["connector_id", connectorId]])],
    ]);
  } else if (parentVariant === "ProductionAgreement") {
    return LogicUtils.getJsonFromArrayOfJson([
      [
        parentVariant,
        LogicUtils.getJsonFromArrayOfJson([
          ["version", HSwitchGlobalVars.agreementVersion],
        ]),
      ],
    ]);
  } else {
    return parentVariant;
  }
}

function getProdOnboardingUrl($$enum) {
  return (
    "" +
    APIUtils.getURL(
      /* USERS */ 22,
      /* Get */ 0,
      undefined,
      undefined,
      "USER_DATA",
      undefined,
      undefined,
      undefined,
      undefined,
    ) +
    "?keys=" +
    $$enum +
    ""
  );
}

var prodOnboardingEnumIntialArray = [
  "ProductionAgreement",
  "SetupProcessor",
  "ConfigureEndpoint",
  "SetupComplete",
];

function getSetupProcessorType(value) {
  return {
    connector_id: LogicUtils.getString(value, "connector_id", ""),
  };
}

function stringToVariantMapperForUserData(str) {
  switch (str) {
    case "ConfigureEndpoint":
      return "ConfigureEndpoint";
    case "ProductionAgreement":
      return "ProductionAgreement";
    case "SetupComplete":
      return "SetupComplete";
    case "SetupProcessor":
      return "SetupProcessor";
    default:
      return "ProductionAgreement";
  }
}

function getStringFromVariant(variant) {
  return variant;
}

function getTypedValue(dict) {
  return {
    configureEndpoint: LogicUtils.getBool(dict, "ConfigureEndpoint", false),
    productionAgreement: LogicUtils.getBool(dict, "ProductionAgreement", false),
    setupComplete: LogicUtils.getBool(dict, "SetupComplete", false),
    setupProcessor: getSetupProcessorType(
      LogicUtils.getDictfromDict(dict, "SetupProcessor"),
    ),
  };
}

function getPreviewState(headerVariant) {
  if (headerVariant === "SetupProcessor") {
    return /* SELECT_PROCESSOR_PREVIEW */ 0;
  } else if (headerVariant === "SetupComplete") {
    return /* COMPLETE_SETUP_PREVIEW */ 2;
  } else if (headerVariant === "ConfigureEndpoint") {
    return /* LIVE_ENDPOINTS_PREVIEW */ 1;
  } else {
    return /* SELECT_PROCESSOR_PREVIEW */ 0;
  }
}

export {
  defaultValueOfCheckList,
  checkList,
  updatedCheckList,
  getPageView,
  getBackPageView,
  getIndexFromVariant,
  sidebarTextFromVariant,
  getCheckboxText,
  subTextStyle,
  useGetWarningBlockForConnector,
  getProdApiBody,
  getProdOnboardingUrl,
  prodOnboardingEnumIntialArray,
  getSetupProcessorType,
  stringToVariantMapperForUserData,
  getStringFromVariant,
  getTypedValue,
  getPreviewState,
};
/* updatedCheckList Not a pure module */
