// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../../components/custom-icons/GatewayIcon.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as CustomizeNotificationsModal from "../../../components/CustomizeNotificationsModal.bs.js";

var subTextStyle = "text-base font-normal text-grey-700 opacity-50";

var headerTextStyle = "text-xl font-semibold text-grey-700";

function ProdOnboardingUIUtils$WarningBlock(props) {
  var customComponent = props.customComponent;
  var warningText = props.warningText;
  var warningText$1 = warningText !== undefined ? warningText : "";
  var customComponent$1 =
    customComponent !== undefined
      ? Caml_option.valFromOption(customComponent)
      : undefined;
  var warningSection =
    customComponent$1 !== undefined
      ? React.createElement(
          React.Fragment,
          undefined,
          Caml_option.valFromOption(customComponent$1),
        )
      : React.createElement(
          "p",
          {
            className: "" + subTextStyle + " !opacity-100",
          },
          warningText$1,
        );
  return React.createElement(
    "div",
    {
      className:
        "flex gap-2 bg-orange-100 w-fit p-4 border rounded-md border-orange-500 items-center",
    },
    React.createElement(Icon.make, {
      name: "warning-outlined",
      size: 25,
    }),
    warningSection,
  );
}

var WarningBlock = {
  make: ProdOnboardingUIUtils$WarningBlock,
};

function ProdOnboardingUIUtils$ModalChildElementsForSpecificConnector(props) {
  var connector = props.connector;
  switch (connector.TAG | 0) {
    case /* Processors */ 0:
      if (connector._0 !== 6) {
        return null;
      } else {
        return React.createElement(
          React.Fragment,
          undefined,
          React.createElement(
            "ol",
            {
              className: "list-decimal pl-4",
            },
            React.createElement(
              "li",
              {
                className: "mb-8",
              },
              "Open Stripe Dashboard",
            ),
            React.createElement(
              "li",
              {
                className: "mb-8",
              },
              "Navigate to the webhooks section of your Stripe dashboard (Developers -> Webhooks)",
            ),
            React.createElement(
              "li",
              {
                className: "mb-8",
              },
              "Create a new webhook by clicking on Add an endpoint.",
            ),
            React.createElement(
              "li",
              {
                className: "mb-8",
              },
              "Enter the Hyperswitch url under the Endpoint URL: https://sandbox.hyperswitch.io/webhooks/{{Your_Hyperswitch_Merchant_ID}}/stripe",
              React.createElement(
                "span",
                undefined,
                "Note: You can Find your Set Country and Label in Hyperswitch under Connectors -> Processors -> Stripe",
              ),
            ),
            React.createElement(
              "li",
              {
                className: "mb-8",
              },
              "Note: Hyperswitch currently does not support source verification.",
            ),
          ),
          React.createElement(
            "div",
            undefined,
            "Steps to Follow on Hyperswitch Dashboard : ",
          ),
          React.createElement(
            "ol",
            {
              className: "list-decimal pl-4",
            },
            React.createElement(
              "li",
              {
                className: "mb-8",
              },
              "Under Developers Tab > Webhooks",
            ),
            React.createElement(
              "li",
              {
                className: "mb-8",
              },
              "Enter the URL where you want to receive the Webhooks",
            ),
            React.createElement(
              "li",
              {
                className: "mb-8",
              },
              "Click Update",
            ),
          ),
          React.createElement(
            "div",
            {
              className: "italic",
            },
            "Congratulations! You have successfully configured with Stripe via Hyperswitch. Now in order to test the integration you can follow one of the following steps Test via Hyperswitch dashboard",
          ),
        );
      }
    case /* ThreeDsAuthenticator */ 1:
    case /* UnknownConnector */ 2:
      return null;
  }
}

var ModalChildElementsForSpecificConnector = {
  make: ProdOnboardingUIUtils$ModalChildElementsForSpecificConnector,
};

function ProdOnboardingUIUtils$SetupWebhookProcessor(props) {
  var rightTag = props.rightTag;
  var connectorName = props.connectorName;
  var connectorName$1 = connectorName !== undefined ? connectorName : "";
  var rightTag$1 =
    rightTag !== undefined ? Caml_option.valFromOption(rightTag) : null;
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-8",
    },
    React.createElement(
      "div",
      {
        className:
          "grid grid-cols-1 lg:grid-cols-2 bg-jp-gray-light_gray_bg p-10 items-center gap-6",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-2 col-span-1",
        },
        React.createElement(
          "div",
          {
            className: "flex gap-4 items-center",
          },
          React.createElement(
            "p",
            {
              className: "" + subTextStyle + " !opacity-100",
            },
            props.headerSectionText,
          ),
          rightTag$1,
        ),
        React.createElement(
          "p",
          {
            className: subTextStyle,
          },
          props.subtextSectionText,
        ),
      ),
      React.createElement(
        "div",
        {
          className: "col-span-1",
        },
        props.customRightSection,
      ),
    ),
    React.createElement(CustomizeNotificationsModal.make, {
      modalHeading: "Steps to Setup Webook",
      showModal: match[0],
      setShowModal: setShowModal,
      headerTextClass: "!text-xl !font-semibold !ml-3.5",
      element: React.createElement(
        ProdOnboardingUIUtils$ModalChildElementsForSpecificConnector,
        {
          connector: ConnectorUtils.getConnectorNameTypeFromString(
            connectorName$1,
            undefined,
            undefined,
          ),
        },
      ),
      onSubmitModal: function (param) {},
      onBackClick: function (param) {
        Curry._1(setShowModal, function (param) {
          return false;
        });
      },
      showBackIcon: false,
      modalWidth: "w-[35vw] !border-none",
      showModalHeadingIconName: connectorName$1.toUpperCase(),
      onCloseClickCustomFun: function (param) {
        Curry._1(setShowModal, function (param) {
          return false;
        });
      },
      headingClassOverride: "!p-12",
      overlayBG: "bg-banner_black opacity-50",
      headerAlignmentClass: "items-center",
      customIcon: Caml_option.some(
        Caml_option.some(
          React.createElement(GatewayIcon.make, {
            gateway: connectorName$1.toUpperCase(),
            className: "w-12 h-12",
          }),
        ),
      ),
    }),
  );
}

var SetupWebhookProcessor = {
  make: ProdOnboardingUIUtils$SetupWebhookProcessor,
};

function ProdOnboardingUIUtils$BasicAccountSetupSuccessfulPage(props) {
  var isButtonVisible = props.isButtonVisible;
  var buttonState = props.buttonState;
  var bgColor = props.bgColor;
  var customWidth = props.customWidth;
  var buttonOnClick = props.buttonOnClick;
  var customWidth$1 = customWidth !== undefined ? customWidth : "w-full";
  var bgColor$1 = bgColor !== undefined ? bgColor : "bg-green-success_page_bg";
  var buttonState$1 = buttonState !== undefined ? buttonState : /* Normal */ 0;
  var isButtonVisible$1 =
    isButtonVisible !== undefined ? isButtonVisible : true;
  return React.createElement(
    "div",
    {
      className:
        "flex flex-col gap-4 p-9 h-full " +
        customWidth$1 +
        " justify-between rounded shadow",
    },
    React.createElement(
      "div",
      {
        className:
          "p-4 h-5/6 " +
          bgColor$1 +
          " flex flex-col justify-center items-center gap-8",
      },
      React.createElement(Icon.make, {
        name: props.iconName,
        size: 120,
      }),
      React.createElement(
        "p",
        {
          className: headerTextStyle,
        },
        props.statusText,
      ),
    ),
    React.createElement(UIUtils.RenderIf.make, {
      condition: isButtonVisible$1,
      children: React.createElement(Button.make, {
        buttonState: buttonState$1,
        text: props.buttonText,
        buttonType: /* Primary */ 0,
        buttonSize: /* Small */ 2,
        onClick: function (param) {
          Curry._1(buttonOnClick, undefined);
        },
        customButtonStyle: "!rounded-md",
      }),
    }),
  );
}

var BasicAccountSetupSuccessfulPage = {
  make: ProdOnboardingUIUtils$BasicAccountSetupSuccessfulPage,
};

export {
  subTextStyle,
  headerTextStyle,
  WarningBlock,
  ModalChildElementsForSpecificConnector,
  SetupWebhookProcessor,
  BasicAccountSetupSuccessfulPage,
};
/* Icon Not a pure module */
