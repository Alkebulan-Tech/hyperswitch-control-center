// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as HomeUtils from "../../Home/HomeUtils.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConfigContext from "../../../context/ConfigContext.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../../HSLocalStorage.bs.js";
import * as SwitchMerchant from "../../SwitchMerchant/SwitchMerchant.bs.js";
import * as ChooseConnector from "./ChooseConnector.bs.js";
import * as ConnectorPreview from "../../Connectors/ConnectorPreview.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../../Utils/PageLoaderWrapper.bs.js";
import * as LiveEndpointsSetup from "./LiveEndpointsSetup.bs.js";
import * as ProdOnboardingUtils from "./ProdOnboardingUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ProdOnboardingUIUtils from "./ProdOnboardingUIUtils.bs.js";
import * as SetupConnectorCredentials from "./SetupConnectorCredentials.bs.js";

var unselectedNormalText = "text-base font-normal text-grey-700 opacity-50";

var selectedNormalText = "text-base font-medium text-grey-700 ";

var dividerColor = "bg-grey-700 bg-opacity-20 h-px w-full";

var unselectedSubHeading = "text-lg font-normal text-grey-700 ";

function ProdOnboardingLanding$CheckListSection(props) {
  var setPreviewState = props.setPreviewState;
  var getConnectorDetails = props.getConnectorDetails;
  var pageView = props.pageView;
  var headerVariant = props.headerVariant;
  var checkListItems = props.checkListItems;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var backgroundColor = match$1.backgroundColor;
  var stepColor = checkListItems.includes(pageView)
    ? "" + backgroundColor + " text-white py-px px-2 rounded-md"
    : "" +
      backgroundColor +
      " bg-opacity-20  " +
      match$1.font.textColor.primaryNormal +
      " py-px px-2 rounded-md";
  var bgColor = checkListItems.includes(pageView)
    ? "bg-white"
    : "bg-jp-gray-light_gray_bg";
  var selectedItemColor = function (indexVal) {
    if (
      ProdOnboardingUtils.getIndexFromVariant(indexVal) ===
      ProdOnboardingUtils.getIndexFromVariant(pageView)
    ) {
      return "bg-pdf_background rounded-md";
    } else {
      return "";
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col py-8 px-6 gap-3 " + bgColor + " cursor-pointer",
      onClick: function (param) {
        var currentViewindex = ProdOnboardingUtils.updatedCheckList.indexOf(
          Core__Option.getOr(
            ProdOnboardingUtils.updatedCheckList.filter(function (ele) {
              return ele.itemsVariants.includes(pageView);
            })[0],
            ProdOnboardingUtils.defaultValueOfCheckList,
          ),
        );
        if (currentViewindex !== 1) {
          if (currentViewindex === 2) {
            if (headerVariant === "SetupProcessor") {
              Curry._1(getConnectorDetails, headerVariant);
              return;
            }
            if (headerVariant === "ConfigureEndpoint") {
              return Curry._1(setPreviewState, function (param) {
                return ProdOnboardingUtils.getPreviewState("ConfigureEndpoint");
              });
            }
          }
        } else if (headerVariant === "SetupProcessor") {
          Curry._1(getConnectorDetails, headerVariant);
          return;
        }
        Curry._1(setPreviewState, function (param) {});
      },
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between ",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-4",
        },
        React.createElement(
          "p",
          {
            className: "" + stepColor + " font-bold",
          },
          ((props.sectionIndex + 1) | 0).toString(),
        ),
        React.createElement(
          "p",
          {
            className: unselectedSubHeading,
          },
          props.headerText,
        ),
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition: !checkListItems.includes(pageView),
        children: React.createElement(Icon.make, {
          name: "lock-outlined",
          size: 20,
        }),
      }),
    ),
    checkListItems.map(function (value, index) {
      return React.createElement(
        "div",
        {
          key: index.toString(),
          className:
            "flex pl-10 gap-2 py-2 cursor-pointer " +
            selectedItemColor(value) +
            "",
        },
        React.createElement(Icon.make, {
          name:
            ProdOnboardingUtils.getIndexFromVariant(value) <
            ProdOnboardingUtils.getIndexFromVariant(pageView)
              ? "green-check"
              : "nonselected",
          size: 20,
        }),
        React.createElement(
          "p",
          {
            key: index.toString(),
            className:
              "" +
              (ProdOnboardingUtils.getIndexFromVariant(value) ===
              ProdOnboardingUtils.getIndexFromVariant(pageView)
                ? selectedNormalText
                : unselectedNormalText) +
              "  ",
          },
          ProdOnboardingUtils.sidebarTextFromVariant(value),
        ),
      );
    }),
  );
}

var CheckListSection = {
  make: ProdOnboardingLanding$CheckListSection,
};

function ProdOnboardingLanding$ProgressBar(props) {
  var match = React.useContext(ConfigContext.configContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  return React.createElement(
    "div",
    {
      className: "" + backgroundColor + " bg-opacity-20 h-1.5 w-full",
    },
    React.createElement("div", {
      className: "h-full " + backgroundColor + "",
      style: {
        width: "" + props.progressState + "%",
      },
    }),
  );
}

var ProgressBar = {
  make: ProdOnboardingLanding$ProgressBar,
};

function ProdOnboardingLanding$SidebarChecklist(props) {
  var setPreviewState = props.setPreviewState;
  var getConnectorDetails = props.getConnectorDetails;
  var pageView = props.pageView;
  var match = React.useState(function () {
    return 0;
  });
  var setProgressState = match[1];
  var progressState = match[0];
  React.useEffect(
    function () {
      var currentIndex = ProdOnboardingUtils.getIndexFromVariant(pageView);
      var progress = (2 + (currentIndex << 4)) | 0;
      Curry._1(setProgressState, function (param) {
        return progress;
      });
    },
    [pageView],
  );
  var getProgressText =
    progressState !== 2
      ? "" + progressState.toString() + "% completed"
      : "0% completed";
  return React.createElement(
    "div",
    {
      className: "flex flex-col h-full w-[30rem] border bg-white shadow",
    },
    React.createElement(
      "p",
      {
        className: "font-semibold text-xl p-6",
      },
      "Setup Basic Live Account",
    ),
    React.createElement("div", {
      className: dividerColor,
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-4 px-6 py-8",
      },
      React.createElement(
        "p",
        {
          className: " text-grey-700 text-base font-normal",
        },
        getProgressText,
      ),
      React.createElement(ProdOnboardingLanding$ProgressBar, {
        progressState: progressState.toString(),
      }),
    ),
    React.createElement("div", {
      className: dividerColor,
    }),
    ProdOnboardingUtils.updatedCheckList.map(function (items, sectionIndex) {
      return React.createElement(
        "div",
        {
          key: sectionIndex.toString(),
        },
        React.createElement(ProdOnboardingLanding$CheckListSection, {
          headerText: items.headerText,
          checkListItems: items.itemsVariants,
          headerVariant: items.headerVariant,
          sectionIndex: sectionIndex,
          pageView: pageView,
          getConnectorDetails: getConnectorDetails,
          setPreviewState: setPreviewState,
        }),
        React.createElement("div", {
          className: dividerColor,
        }),
      );
    }),
  );
}

var SidebarChecklist = {
  make: ProdOnboardingLanding$SidebarChecklist,
};

function ProdOnboardingLanding(props) {
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return /* SELECT_PROCESSOR */ 0;
  });
  var setPageView = match[1];
  var pageView = match[0];
  var match$1 = React.useState(function () {
    return {
      TAG: /* Processors */ 0,
      _0: /* STRIPE */ 6,
    };
  });
  var selectedConnector = match$1[0];
  React.useState(function () {
    return "";
  });
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match$2 = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match$2.setDashboardPageState;
  var match$3 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {
    return /* Normal */ 0;
  });
  var setButtonState = match$4[1];
  var match$5 = React.useState(function () {});
  var setPreviewState = match$5[1];
  var previewState = match$5[0];
  var match$6 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$6[1];
  var match$7 = React.useState(function () {
    return "";
  });
  var setConnectorID = match$7[1];
  var connectorID = match$7[0];
  var routerUrl = RescriptReactRouter.useUrl(undefined, undefined);
  var centerItems =
    pageView === /* SETUP_COMPLETED */ 6 ? "justify-center" : "";
  var urlPush = HSwitchGlobalVars.appendDashboardPath(
    "/prod-onboarding?" + routerUrl.search + "",
  );
  var userRole = HSLocalStorage.getFromUserDetails("user_role");
  var getSetupCompleteEnum = function (prodEnums) {
    if (prodEnums.setupComplete) {
      Curry._1(setDashboardPageState, function (param) {
        return "HOME";
      });
      var baseUrlPath =
        "" +
        HSwitchGlobalVars.getHostUrl +
        "/" +
        Core__List.toArray(routerUrl.path).join("/") +
        "";
      if (LogicUtils.isNonEmptyString(routerUrl.search)) {
        return RescriptReactRouter.push(
          "" + baseUrlPath + "?" + routerUrl.search + "",
        );
      } else {
        return RescriptReactRouter.push("" + baseUrlPath + "");
      }
    }
    RescriptReactRouter.push(urlPush);
    Curry._1(setPageView, function (param) {
      return /* SETUP_COMPLETED */ 6;
    });
    Curry._1(setScreenState, function (param) {
      return /* Success */ 1;
    });
  };
  var getConfigureEndpointEnum = function (prodEnums) {
    if (prodEnums.configureEndpoint) {
      getSetupCompleteEnum(prodEnums);
      return;
    } else {
      RescriptReactRouter.push(urlPush);
      Curry._1(setPageView, function (param) {
        return /* REPLACE_API_KEYS */ 3;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    }
  };
  var getConnectorDetails = async function (headerVariant) {
    try {
      var connectorUrl = APIUtils.getURL(
        /* CONNECTOR */ 0,
        /* Get */ 0,
        Caml_option.some(connectorID),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var json = await Curry._1(fetchDetails, connectorUrl);
      var connectorName = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(json),
        "connector_name",
        "",
      );
      Curry._1(setInitialValues, function (param) {
        return json;
      });
      Curry._1(setPreviewState, function (param) {
        return ProdOnboardingUtils.getPreviewState(headerVariant);
      });
      return RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath(
          "/prod-onboarding?name=" + connectorName + "",
        ),
      );
    } catch (exn) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "",
        };
      });
    }
  };
  var getStatus = async function (param) {
    try {
      var url =
        "" +
        APIUtils.getURL(
          /* USERS */ 22,
          /* Get */ 0,
          undefined,
          undefined,
          "USER_DATA",
          undefined,
          undefined,
          undefined,
          undefined,
        ) +
        "?keys=" +
        ProdOnboardingUtils.prodOnboardingEnumIntialArray.join(",") +
        "";
      var response = await Curry._1(fetchDetails, url);
      var prodEnums = ProdOnboardingUtils.getTypedValue(
        HomeUtils.responseDataMapper(response, HomeUtils.getValueMappedForProd),
      );
      var connectorId = prodEnums.setupProcessor.connector_id;
      if (LogicUtils.isNonEmptyString(connectorId)) {
        Curry._1(setConnectorID, function (param) {
          return connectorId;
        });
        getConfigureEndpointEnum(prodEnums);
        return;
      } else {
        RescriptReactRouter.push(urlPush);
        Curry._1(setPageView, function (param) {
          return /* SELECT_PROCESSOR */ 0;
        });
        return Curry._1(setScreenState, function (param) {
          return /* Success */ 1;
        });
      }
    } catch (exn) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "",
        };
      });
    }
  };
  var updateSetupPageCompleted = async function (param) {
    try {
      Curry._1(setButtonState, function (param) {
        return /* Loading */ 1;
      });
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "MERCHANT_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = ProdOnboardingUtils.getProdApiBody(
        "SetupComplete",
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
      return Curry._1(setDashboardPageState, function (param) {
        return "HOME";
      });
    } catch (exn) {
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  React.useEffect(function () {
    getStatus(undefined);
  }, []);
  var tmp;
  if (previewState !== undefined) {
    switch (previewState) {
      case /* SELECT_PROCESSOR_PREVIEW */ 0:
        tmp = React.createElement(
          "div",
          {
            className: "h-full w-full px-11 py-8",
          },
          React.createElement(ConnectorPreview.make, {
            connectorInfo: match$6[0],
            currentStep: /* Preview */ 3,
            setCurrentStep: function (param) {},
            isUpdateFlow: true,
            isPayoutFlow: false,
            showMenuOption: false,
            setInitialValues: setInitialValues,
            getPayPalStatus: function (param) {},
          }),
        );
        break;
      case /* LIVE_ENDPOINTS_PREVIEW */ 1:
        tmp = React.createElement(LiveEndpointsSetup.make, {
          pageView: pageView,
          setPageView: setPageView,
          previewState: previewState,
        });
        break;
      case /* COMPLETE_SETUP_PREVIEW */ 2:
        tmp = null;
        break;
    }
  } else {
    var exit = 0;
    switch (pageView) {
      case /* SELECT_PROCESSOR */ 0:
        tmp = React.createElement(ChooseConnector.make, {
          selectedConnector: selectedConnector,
          setSelectedConnector: match$1[1],
          pageView: pageView,
          setPageView: setPageView,
        });
        break;
      case /* SETUP_CREDS */ 1:
      case /* SETUP_WEBHOOK_PROCESSOR */ 2:
        exit = 1;
        break;
      case /* REPLACE_API_KEYS */ 3:
      case /* SETUP_WEBHOOK_USER */ 4:
        tmp = React.createElement(LiveEndpointsSetup.make, {
          pageView: pageView,
          setPageView: setPageView,
          previewState: previewState,
        });
        break;
      case /* TEST_LIVE_PAYMENT */ 5:
        tmp = null;
        break;
      case /* SETUP_COMPLETED */ 6:
        tmp = React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "account-setup-completed",
            statusText: "Basic Account Setup Successful",
            buttonText: "Go to Dashboard",
            buttonOnClick: function (param) {
              updateSetupPageCompleted(undefined);
            },
            buttonState: match$4[0],
          },
        );
        break;
    }
    if (exit === 1) {
      tmp = React.createElement(SetupConnectorCredentials.make, {
        selectedConnector: selectedConnector,
        pageView: pageView,
        setPageView: setPageView,
        setConnectorID: setConnectorID,
      });
    }
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex h-screen w-screen",
        },
        React.createElement(ProdOnboardingLanding$SidebarChecklist, {
          pageView: pageView,
          getConnectorDetails: getConnectorDetails,
          setPreviewState: setPreviewState,
        }),
        React.createElement(
          "div",
          {
            className:
              "bg-hyperswitch_background flex items-center h-screen w-full overflow-scroll " +
              centerItems +
              "",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-col xl:w-77-rem  mx-7 xl:ml-[7rem]",
            },
            React.createElement(
              "div",
              {
                className: "flex justify-end w-full pb-5",
              },
              React.createElement(SwitchMerchant.make, {
                userRole: userRole,
              }),
            ),
            React.createElement(
              "div",
              {
                className:
                  "h-[52rem] overflow-scroll bg-white rounded-md w-full border",
              },
              tmp,
            ),
          ),
        ),
      ),
    ),
    screenState: match$3[0],
    sectionHeight: "h-screen",
  });
}

var make = ProdOnboardingLanding;

export {
  unselectedNormalText,
  selectedNormalText,
  dividerColor,
  unselectedSubHeading,
  CheckListSection,
  ProgressBar,
  SidebarChecklist,
  make,
};
/* Icon Not a pure module */
