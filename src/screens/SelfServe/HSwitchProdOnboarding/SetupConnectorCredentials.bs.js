// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../../components/custom-icons/GatewayIcon.bs.js";
import * as CheckBoxIcon from "../../../components/custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as FormValuesSpy from "../../../components/form/FormValuesSpy.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as HSLocalStorage from "../../HSLocalStorage.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as HelperComponents from "../../Helpers/HelperComponents.bs.js";
import * as JsonFlattenUtils from "../../../utils/JsonFlattenUtils.bs.js";
import * as PageLoaderWrapper from "../../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ProdOnboardingUtils from "./ProdOnboardingUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../../Settings/MerchantAccountUtils.bs.js";
import * as ProdOnboardingUIUtils from "./ProdOnboardingUIUtils.bs.js";
import * as ConnectorAccountDetailsHelper from "../../Connectors/ConnectorAccountDetailsHelper.bs.js";

var headerTextStyle = "text-xl font-semibold text-grey-700";

var subTextStyle = "text-base font-normal text-grey-700 opacity-50";

var dividerColor = "bg-grey-700 bg-opacity-20 h-px w-full";

function SetupConnectorCredentials$ConnectorDetailsForm(props) {
  var verifyErrorMessage = props.verifyErrorMessage;
  var setIsCheckboxSelected = props.setIsCheckboxSelected;
  var isCheckboxSelected = props.isCheckboxSelected;
  var connectorName = props.connectorName;
  var match = React.useState(function () {
    return false;
  });
  var match$1 = ConnectorUtils.getConnectorFields(props.connectorDetails);
  var connectorVariant = ConnectorUtils.getConnectorNameTypeFromString(
    connectorName,
    undefined,
    undefined,
  );
  var selectedConnector = React.useMemo(
    function () {
      return ConnectorUtils.getConnectorInfo(connectorVariant);
    },
    [connectorName],
  );
  var match$2 = ConnectorUtils.getSuggestedAction(
    verifyErrorMessage,
    connectorName,
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-6",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(
        ConnectorAccountDetailsHelper.BusinessProfileRender.make,
        {
          isUpdateFlow: false,
          selectedConnector: connectorName,
        },
      ),
    ),
    React.createElement(
      ConnectorAccountDetailsHelper.ConnectorConfigurationFields.make,
      {
        connectorAccountFields: match$1[1],
        connector: connectorVariant,
        selectedConnector: selectedConnector,
        connectorMetaDataFields: match$1[2],
        connectorWebHookDetails: match$1[4],
        connectorLabelDetailField: match$1[5],
      },
    ),
    React.createElement(
      ConnectorAccountDetailsHelper.VerifyConnectorModal.make,
      {
        showVerifyModal: match[0],
        setShowVerifyModal: match[1],
        connector: connectorName,
        verifyErrorMessage: verifyErrorMessage,
        suggestedActionExists: match$2[1],
        suggestedAction: match$2[0],
        setVerifyDone: props.setVerifyDone,
      },
    ),
    React.createElement(UIUtils.RenderIf.make, {
      condition: LogicUtils.isNonEmptyString(props.checkboxText),
      children: React.createElement(
        "div",
        {
          className: "flex gap-2 items-center",
        },
        React.createElement(CheckBoxIcon.make, {
          isSelected: isCheckboxSelected,
          setIsSelected: function (param) {
            Curry._1(setIsCheckboxSelected, function (param) {
              return !isCheckboxSelected;
            });
          },
        }),
        React.createElement(
          "p",
          {
            className: subTextStyle,
          },
          ProdOnboardingUtils.getCheckboxText(connectorVariant),
        ),
      ),
    }),
  );
}

var ConnectorDetailsForm = {
  make: SetupConnectorCredentials$ConnectorDetailsForm,
};

function SetupConnectorCredentials(props) {
  var setConnectorID = props.setConnectorID;
  var setPageView = props.setPageView;
  var pageView = props.pageView;
  var selectedConnector = props.selectedConnector;
  var showToast = ToastState.useShowToast(undefined);
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsCheckboxSelected = match$1[1];
  var isCheckboxSelected = match$1[0];
  var connectorVariant = ConnectorUtils.getConnectorNameTypeFromString(
    connectorName,
    undefined,
    undefined,
  );
  var match$2 = React.useState(function () {
    return null;
  });
  var setConnectorDetails = match$2[1];
  var connectorDetails = match$2[0];
  var match$3 = React.useState(function () {
    return false;
  });
  var setIsLoading = match$3[1];
  var isLoading = match$3[0];
  var merchantId = HSLocalStorage.getFromMerchantDetails("merchant_id");
  var match$4 = React.useState(function () {
    return null;
  });
  var setInitialValues = match$4[1];
  var getDetails = async function (param) {
    try {
      await window.init(undefined);
      var val = window.getConnectorConfig(connectorName);
      Curry._1(setConnectorDetails, function (param) {
        return val;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong!");
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match$5 = React.useState(function () {
    return false;
  });
  var setShowVerifyModal = match$5[1];
  var match$6 = React.useState(function () {});
  var setVerifyErrorMessage = match$6[1];
  var verifyErrorMessage = match$6[0];
  var match$7 = React.useState(function () {
    return /* NoAttempt */ 2;
  });
  var setVerifyDone = match$7[1];
  var verifyDone = match$7[0];
  var connectorID = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    "",
  );
  var checkboxText = ProdOnboardingUtils.getCheckboxText(connectorVariant);
  var match$8 = ConnectorUtils.getConnectorFields(connectorDetails);
  var connectorLabelDetailField = match$8[5];
  var connectorWebHookDetails = match$8[4];
  var isVerifyConnector = match$8[3];
  var connectorMetaDataFields = match$8[2];
  var connectorAccountFields = match$8[1];
  var bodyType = match$8[0];
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var match$9 = ConnectorUtils.getSuggestedAction(
    verifyErrorMessage,
    connectorName,
  );
  React.useEffect(
    function () {
      Curry._1(setInitialValues, function (prevJson) {
        var prevJsonDict = LogicUtils.getDictFromJsonObject(prevJson);
        prevJsonDict["connector_label"] =
          "" +
          ConnectorUtils.getConnectorNameString(selectedConnector) +
          "_" +
          defaultBusinessProfile.profile_name +
          "";
        prevJsonDict["profile_id"] = defaultBusinessProfile.profile_id;
        return prevJsonDict;
      });
    },
    [selectedConnector],
  );
  var match$10 = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  var profile_id = match$10.profile_id;
  var updateSetupConnectorCredentials = async function (connectorId) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "MERCHANT_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = ProdOnboardingUtils.getProdApiBody(
        "SetupProcessor",
        connectorId,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setPageView, function (param) {
        return ProdOnboardingUtils.getPageView(pageView);
      });
    } catch (exn) {
      return;
    }
  };
  var onSubmitMain = async function (values) {
    try {
      Curry._1(setIsLoading, function (param) {
        return true;
      });
      var url = APIUtils.getURL(
        /* CONNECTOR */ 0,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var dict = LogicUtils.getDictFromJsonObject(
        window.getConnectorConfig(connectorName),
      );
      var creditCardNetworkArray = ConnectorUtils.getPaymentMethodMapper(
        LogicUtils.getArrayFromDict(dict, "credit", []),
      );
      var debitCardNetworkArray = ConnectorUtils.getPaymentMethodMapper(
        LogicUtils.getArrayFromDict(dict, "debit", []),
      );
      var paymentMethodsEnabledArray = [
        {
          payment_method: "card",
          payment_method_type: "credit",
          provider: [],
          card_provider: creditCardNetworkArray,
        },
        {
          payment_method: "card",
          payment_method_type: "debit",
          provider: [],
          card_provider: debitCardNetworkArray,
        },
      ];
      var requestPayload_metadata = {};
      var requestPayload = {
        payment_methods_enabled: paymentMethodsEnabledArray,
        connector: connectorName,
        metadata: requestPayload_metadata,
      };
      var payload = ConnectorUtils.generateInitialValuesDict(
        values,
        connectorName,
        bodyType,
        undefined,
        featureFlagDetails.isLiveMode,
        undefined,
        undefined,
      );
      var body = ConnectorUtils.constructConnectorRequestBody(
        requestPayload,
        payload,
      );
      var res = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var connectorId = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(res),
        "merchant_connector_id",
        "",
      );
      Curry._1(setConnectorID, function (param) {
        return connectorId;
      });
      updateSetupConnectorCredentials(connectorId);
      return Curry._1(setIsLoading, function (param) {
        return false;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        Curry._1(setIsLoading, function (param) {
          return false;
        });
        Curry._1(setShowVerifyModal, function (param) {
          return false;
        });
        Curry._1(setVerifyDone, function (param) {
          return /* NoAttempt */ 2;
        });
        Curry._1(setPageView, function (param) {
          return /* SELECT_PROCESSOR */ 0;
        });
        var message = e._1.message;
        if (message !== undefined) {
          if (message.includes("HE_01")) {
            Curry._8(
              showToast,
              "This configuration already exists for the connector. Please try with a different country or label under advanced settings.",
              /* ToastError */ 0,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return Curry._1(setScreenState, function (param) {
              return /* Success */ 1;
            });
          } else {
            Curry._8(
              showToast,
              "Failed to Save the Configuration!",
              /* ToastError */ 0,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return Curry._1(setScreenState, function (param) {
              return /* Error */ {
                _0: message,
              };
            });
          }
        } else {
          return Curry._1(setScreenState, function (param) {
            return /* Error */ {
              _0: "Failed to Fetch!",
            };
          });
        }
      }
      throw e;
    }
  };
  var validateMandatoryField = function (values) {
    var errors = {};
    var valuesFlattenJson = JsonFlattenUtils.flattenObject(values, true);
    return ConnectorUtils.validateConnectorRequiredFields(
      connectorVariant,
      valuesFlattenJson,
      connectorAccountFields,
      connectorMetaDataFields,
      connectorWebHookDetails,
      connectorLabelDetailField,
      errors,
    );
  };
  var onSubmitVerify = async function (values) {
    try {
      Curry._1(setIsLoading, function (param) {
        return true;
      });
      var body = ConnectorUtils.ignoreFields(
        ConnectorUtils.generateInitialValuesDict(
          values,
          connectorName,
          bodyType,
          false,
          featureFlagDetails.isLiveMode,
          undefined,
          undefined,
        ),
        connectorID,
        ConnectorUtils.verifyConnectorIgnoreField,
      );
      var url = APIUtils.getURL(
        /* CONNECTOR */ 0,
        /* Post */ 2,
        undefined,
        Caml_option.some(connectorName),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setShowVerifyModal, function (param) {
        return false;
      });
      onSubmitMain(values);
      return Curry._1(setIsLoading, function (param) {
        return false;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        Curry._1(setIsLoading, function (param) {
          return false;
        });
        var message = e._1.message;
        if (message === undefined) {
          return Curry._1(setScreenState, function (param) {
            return /* Error */ {
              _0: "Failed to Fetch!",
            };
          });
        }
        var errorMessage = JSON.parse(message);
        Curry._1(setVerifyErrorMessage, function (param) {
          return errorMessage.message;
        });
        Curry._1(setShowVerifyModal, function (param) {
          return true;
        });
        return Curry._1(setVerifyDone, function (param) {
          return /* Failure */ 1;
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    getDetails(undefined);
  }, []);
  var getHeaderTextofPage = function (param) {
    if (pageView >= 3) {
      return "";
    }
    switch (pageView) {
      case /* SELECT_PROCESSOR */ 0:
        return "";
      case /* SETUP_CREDS */ 1:
        return (
          "Setup " +
          ConnectorUtils.getDisplayNameForConnector(undefined, connectorName) +
          " credentials"
        );
      case /* SETUP_WEBHOOK_PROCESSOR */ 2:
        return (
          "Setup Webhooks on " +
          ConnectorUtils.getDisplayNameForConnector(undefined, connectorName) +
          ""
        );
    }
  };
  var getSubTextOfPage = function (param) {
    if (pageView >= 3) {
      return "";
    }
    switch (pageView) {
      case /* SELECT_PROCESSOR */ 0:
        return "";
      case /* SETUP_CREDS */ 1:
        return "Start by providing your live credentials";
      case /* SETUP_WEBHOOK_PROCESSOR */ 2:
        return (
          "Enable relevant webhooks on your " +
          LogicUtils.capitalizeString(connectorName) +
          " account"
        );
    }
  };
  var warningBlock =
    ProdOnboardingUtils.useGetWarningBlockForConnector(connectorVariant);
  var getComponentToRender = function (param) {
    if (pageView >= 3) {
      return React.createElement(React.Fragment, undefined);
    }
    switch (pageView) {
      case /* SELECT_PROCESSOR */ 0:
        return React.createElement(React.Fragment, undefined);
      case /* SETUP_CREDS */ 1:
        return React.createElement(
          React.Fragment,
          undefined,
          React.createElement(UIUtils.RenderIf.make, {
            condition: Core__Option.isSome(warningBlock),
            children: React.createElement(
              ProdOnboardingUIUtils.WarningBlock.make,
              {
                customComponent: Caml_option.some(warningBlock),
              },
            ),
          }),
          React.createElement(SetupConnectorCredentials$ConnectorDetailsForm, {
            connectorName: connectorName,
            connectorDetails: connectorDetails,
            isCheckboxSelected: isCheckboxSelected,
            setIsCheckboxSelected: setIsCheckboxSelected,
            setVerifyDone: setVerifyDone,
            verifyErrorMessage: verifyErrorMessage,
            checkboxText: checkboxText,
          }),
        );
      case /* SETUP_WEBHOOK_PROCESSOR */ 2:
        return React.createElement(
          ProdOnboardingUIUtils.SetupWebhookProcessor.make,
          {
            connectorName: connectorName,
            headerSectionText: "Hyperswitch Webhook Endpoint",
            subtextSectionText:
              "Configure this endpoint in the processors dashboard under webhook settings for us to receive events",
            customRightSection: React.createElement(
              HelperComponents.KeyAndCopyArea.make,
              {
                copyValue: ConnectorUtils.getWebhooksUrl(
                  connectorName,
                  merchantId,
                ),
                shadowClass: "shadow shadow-hyperswitch_box_shadow !w-full",
              },
            ),
          },
        );
    }
  };
  var onSubmit = function (values) {
    var dict = LogicUtils.getDictFromJsonObject(values);
    dict["profile_id"] = profile_id;
    ConnectorUtils.onSubmit(
      dict,
      onSubmitVerify,
      onSubmitMain,
      setVerifyDone,
      verifyDone,
      isVerifyConnector,
    );
  };
  var handleSubmit = function (values, param) {
    if (pageView !== 2) {
      Curry._1(setPageView, function (param) {
        return ProdOnboardingUtils.getPageView(pageView);
      });
    } else {
      onSubmit(values);
    }
    return Promise.resolve(null);
  };
  var buttonText;
  if (verifyDone !== 0) {
    switch (verifyDone) {
      case /* Failure */ 1:
        buttonText = "Try Again";
        break;
      case /* NoAttempt */ 2:
        buttonText = "Connect and Proceed";
        break;
      case /* Loading */ 3:
        buttonText = "Loading...";
        break;
    }
  } else {
    buttonText = "Loading...";
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        Form.make,
        {
          children: null,
          onSubmit: handleSubmit,
          initialValues: Caml_option.some(match$4[0]),
          validate: validateMandatoryField,
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col h-full w-full ",
          },
          React.createElement(
            "div",
            {
              className: "flex justify-between px-11 py-8 flex-wrap gap-4",
            },
            React.createElement(
              "div",
              {
                className: "flex gap-4 items-center",
              },
              React.createElement(GatewayIcon.make, {
                gateway: connectorName.toUpperCase(),
                className: "w-8 h-8",
              }),
              React.createElement(
                "p",
                {
                  className: headerTextStyle,
                },
                ConnectorUtils.getDisplayNameForConnector(
                  undefined,
                  connectorName,
                ),
              ),
            ),
            React.createElement(
              "div",
              {
                className: "flex gap-4",
              },
              React.createElement(Button.make, {
                buttonState: isLoading ? /* Disabled */ 2 : /* Normal */ 0,
                text: "Back",
                buttonType: /* PrimaryOutline */ 2,
                buttonSize: /* Small */ 2,
                onClick: function (param) {
                  Curry._1(setPageView, function (param) {
                    return ProdOnboardingUtils.getBackPageView(pageView);
                  });
                },
                customButtonStyle: "!rounded-md",
              }),
              React.createElement(FormRenderer.SubmitButton.make, {
                text: buttonText,
                disabledParamter:
                  LogicUtils.isNonEmptyString(checkboxText) &&
                  !isCheckboxSelected,
                customSumbitButtonStyle: "!rounded-md",
                loadingText: isLoading ? "Loading ..." : "",
              }),
            ),
          ),
          React.createElement("div", {
            className: "" + dividerColor + "",
          }),
          React.createElement(
            "div",
            {
              className: "flex flex-col gap-8 p-11 ",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-col gap-2 ",
              },
              React.createElement(
                "p",
                {
                  className: headerTextStyle,
                },
                getHeaderTextofPage(undefined),
              ),
              React.createElement(
                "p",
                {
                  className: subTextStyle,
                },
                getSubTextOfPage(undefined),
              ),
            ),
            getComponentToRender(undefined),
          ),
        ),
        React.createElement(
          ConnectorAccountDetailsHelper.VerifyConnectorModal.make,
          {
            showVerifyModal: match$5[0],
            setShowVerifyModal: setShowVerifyModal,
            connector: connectorName,
            verifyErrorMessage: verifyErrorMessage,
            suggestedActionExists: match$9[1],
            suggestedAction: match$9[0],
            setVerifyDone: setVerifyDone,
          },
        ),
        React.createElement(FormValuesSpy.make, {}),
      ),
    ),
    screenState: match[0],
  });
}

var make = SetupConnectorCredentials;

export {
  headerTextStyle,
  subTextStyle,
  dividerColor,
  ConnectorDetailsForm,
  make,
};
/* Form Not a pure module */
