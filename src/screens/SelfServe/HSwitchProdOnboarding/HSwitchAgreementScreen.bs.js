// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Loader from "../../../components/Loader.bs.js";
import * as ToolTip from "../../../components/tooltip/ToolTip.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as AuthHooks from "../../../hooks/AuthHooks.bs.js";
import * as GlobalVars from "../../../utils/GlobalVars.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CheckBoxIcon from "../../../components/custom-icons/CheckBoxIcon.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as TimeZoneHook from "../../../hooks/TimeZoneHook.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DownloadUtils from "../../../utils/DownloadUtils.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../../HSLocalStorage.bs.js";
import * as SwitchMerchant from "../../SwitchMerchant/SwitchMerchant.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as DefaultLandingPage from "../../Utils/DefaultLandingPage.bs.js";
import * as ProdOnboardingUtils from "./ProdOnboardingUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ReactSuspenseWrapper from "../../../context/ReactSuspenseWrapper.bs.js";
import * as ReactPDFViewerSinglePageLazy from "../../../libraries/PDFViewer/ReactPDFViewerSinglePageLazy.bs.js";

function HSwitchAgreementScreen(props) {
  var showToast = ToastState.useShowToast(undefined);
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match.setDashboardPageState;
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsAgreeEnable = match$1[1];
  var match$2 = React.useState(function () {
    return false;
  });
  var setIsSelected = match$2[1];
  var isSelected = match$2[0];
  var userRole = HSLocalStorage.getFromUserDetails("user_role");
  React.useEffect(
    function () {
      RescriptReactRouter.push(
        HSwitchGlobalVars.appendDashboardPath("/agreement-signature"),
      );
    },
    [match.dashboardPageState],
  );
  var agreementSignature = async function (param) {
    try {
      var agreementUrl = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "MERCHANT_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = ProdOnboardingUtils.getProdApiBody(
        "ProductionAgreement",
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        agreementUrl,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setDashboardPageState, function (param) {
        return "PROD_ONBOARDING";
      });
    } catch (exn) {
      return Curry._8(
        showToast,
        "Oops, something went wrong. Please try again.",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  var errorState = React.createElement(DefaultLandingPage.make, {
    width: "100%",
    height: "75vh",
    title: "Oops, we hit a little bump on the road!",
    subtitle:
      "We apologize for the inconvenience, but it seems like we encountered a hiccup while processing your request.",
    customStyle: "py-16 !m-0",
    isButton: true,
    buttonText: "Refresh",
    onClickHandler: function (param) {
      window.location.reload();
    },
    overriddingStylesTitle: "text-2xl font-semibold",
    overriddingStylesSubtitle: "!text-sm text-grey-700 opacity-50 !w-3/4",
  });
  var loadingState = React.createElement(
    "div",
    {
      className: "h-screen w-screen flex flex-col justify-center items-center",
    },
    React.createElement(Loader.make, {}),
  );
  var buttonState =
    GlobalVars.isLocalhost || (isSelected && match$1[0])
      ? /* Normal */ 0
      : /* Disabled */ 2;
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "w-full h-[90%] md:w-pageWidth11 mx-auto py-10",
        },
        React.createElement(
          "div",
          {
            className:
              "flex items-center justify-between px-20 bg-white pb-5 pt-10",
          },
          React.createElement("img", {
            src: "assets/Dark/hyperswitchLogoIconWithText.svg",
          }),
          React.createElement(SwitchMerchant.make, {
            userRole: userRole,
          }),
        ),
        React.createElement(
          "div",
          {
            className:
              "flex flex-col gap-5 bg-white px-20 pb-10 w-full h-full overflow-hidden",
          },
          React.createElement(
            "div",
            {
              className: "flex justify-between items-center flex-wrap gap-2",
            },
            React.createElement(
              "div",
              {
                className: "font-semibold text-xl",
              },
              "Hyperswitch Service Agreement",
            ),
            React.createElement(ToolTip.make, {
              description:
                "Please read to the bottom of this Service Agreement before you can continue",
              toolTipFor: Caml_option.some(
                React.createElement(Button.make, {
                  buttonState: buttonState,
                  text: "Accept & Proceed",
                  buttonType: /* Primary */ 0,
                  buttonSize: /* Small */ 2,
                  onClick: function (param) {
                    if (GlobalVars.isLocalhost) {
                      return Curry._1(setDashboardPageState, function (param) {
                        return "PROD_ONBOARDING";
                      });
                    } else {
                      var currentDate = TimeZoneHook.formattedISOString(
                        new Date(Date.now()).toISOString(),
                        "YYYY-MM-DD HH:mm:ss",
                      );
                      if (
                        LogicUtils.isNonEmptyString(
                          HSwitchGlobalVars.urlFordownloadingAgreementMapper,
                        )
                      ) {
                        Core__Promise.$$catch(
                          Curry._8(
                            fetchApi,
                            HSwitchGlobalVars.urlFordownloadingAgreementMapper,
                            undefined,
                            undefined,
                            undefined,
                            /* Get */ 0,
                            undefined,
                            undefined,
                            undefined,
                          )
                            .then(function (resp) {
                              return Fetch.$$Response.blob(resp);
                            })
                            .then(function (content) {
                              DownloadUtils.download(
                                "HyperswitchTermsAndConditions-" +
                                  currentDate +
                                  ".pdf",
                                content,
                                "application/pdf",
                              );
                              Curry._8(
                                showToast,
                                "Agreement download complete",
                                /* ToastSuccess */ 3,
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                              );
                              agreementSignature(undefined);
                              return Promise.resolve(undefined);
                            }),
                          function (param) {
                            Curry._8(
                              showToast,
                              "Oops, something went wrong with the download. Please try again.",
                              /* ToastError */ 0,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                            );
                            return Promise.resolve(undefined);
                          },
                        );
                        return;
                      } else {
                        Curry._8(
                          showToast,
                          "Oops, something went wrong with the download - localhost",
                          /* ToastError */ 0,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                        );
                        return Curry._1(
                          setDashboardPageState,
                          function (param) {
                            return "PROD_ONBOARDING";
                          },
                        );
                      }
                    }
                  },
                  customButtonStyle: "!px-2 rounded-lg",
                }),
              ),
              tooltipWidthClass: "w-auto",
              toolTipPosition: /* Top */ 0,
            }),
          ),
          React.createElement(
            "div",
            {
              className:
                "h-full w-full overflow-auto show-scrollbar bg-pdf_background p-5 md:p-10",
              onScroll: function (ev) {
                var reachedBottom =
                  ((ev.target.scrollHeight - 250) | 0) <
                  ((ev.target.clientHeight + ev.target.scrollTop) | 0);
                if (reachedBottom) {
                  return Curry._1(setIsAgreeEnable, function (param) {
                    return true;
                  });
                }
              },
            },
            React.createElement(ReactSuspenseWrapper.make, {
              children: React.createElement(ReactPDFViewerSinglePageLazy.make, {
                url: HSwitchGlobalVars.urlFordownloadingAgreementMapper,
                loading: Caml_option.some(loadingState),
                error: Caml_option.some(errorState),
              }),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex items-center gap-2",
            },
            React.createElement(CheckBoxIcon.make, {
              isSelected: isSelected,
              setIsSelected: function (param) {
                Curry._1(setIsSelected, function (prev) {
                  return !prev;
                });
              },
            }),
            React.createElement(
              "p",
              undefined,
              "I have read and agree to Hyperswitch's Services Agreement.",
            ),
          ),
        ),
      ),
    ),
  });
}

var make = HSwitchAgreementScreen;

export { make };
/* react Not a pure module */
