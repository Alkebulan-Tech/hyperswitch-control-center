// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as MerchantDetailsHook from "../Hooks/MerchantDetailsHook.bs.js";

function Recon(props) {
  var match = React.useState(function () {
    return "";
  });
  var setRedirecToken = match[1];
  var redirectToken = match[0];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var fetchMerchantAccountDetails =
    MerchantDetailsHook.useFetchMerchantDetails(undefined);
  var merchentDetails = HSwitchUtils.useMerchantDetailsValue(undefined);
  var match$1 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$1[1];
  var isReconEnabled = merchentDetails.recon_status === /* Active */ 2;
  var onClickForReconRequest = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* RECON */ 23,
        /* Get */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        "REQUEST",
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        null,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._1(fetchMerchantAccountDetails, undefined);
      return Curry._8(
        showToast,
        "Thank you for your interest in our reconciliation module. We are currently reviewing your request for access. We will follow up with you soon regarding next steps.",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      return Curry._8(
        showToast,
        "Something went wrong. Please try again.",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  var openReconTab = async function (param) {
    try {
      if (redirectToken.length === 0) {
        Curry._1(setScreenState, function (param) {
          return /* Loading */ 0;
        });
        var url = APIUtils.getURL(
          /* RECON */ 23,
          /* Get */ 0,
          undefined,
          undefined,
          undefined,
          undefined,
          "TOKEN",
          undefined,
          undefined,
        );
        var res = await Curry._1(fetchDetails, url);
        var token = LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(res),
          "token",
          "",
        );
        Curry._1(setRedirecToken, function (param) {
          return token;
        });
        var link =
          "https://sandbox.hyperswitch.io/recon-dashboard/?token=" + token;
        window.open(link);
        return Curry._1(setScreenState, function (param) {
          return /* Success */ 1;
        });
      }
      var link$1 =
        "https://sandbox.hyperswitch.io/recon-dashboard/?token=" +
        redirectToken;
      window.open(link$1);
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to fetch Token!");
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    if (isReconEnabled) {
      openReconTab(undefined);
    } else {
      Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    }
  }, []);
  var subTitleText = isReconEnabled
    ? "Streamline your reconciliation and settlement operations"
    : "Upgrade today to streamline your reconciliation and settlement operations";
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "h-screen overflow-scroll flex flex-col w-full ",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col overflow-scroll h-full gap-6",
          },
          React.createElement(PageUtils.PageHeading.make, {
            title: isReconEnabled
              ? "Reconciliation"
              : "Activate Reconciliation",
            subTitle: subTitleText,
          }),
          isReconEnabled
            ? React.createElement(
                "div",
                {
                  className:
                    "bg-white dark:bg-jp-gray-lightgray_background border-2 rounded dark:border-jp-gray-850 grid grid-cols-1 md:gap-5 p-2 md:p-8 h-2/3 items-center",
                },
                React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-col items-center w-4/6 md:w-2/6 justify-self-center gap-1",
                  },
                  React.createElement(
                    "div",
                    {
                      className:
                        "text-center text-semibold text-s text-grey-700 opacity-60 dark:text-white",
                    },
                    "You will be redirected to the recon dashboard in a moment. (Enable pop-ups in your browser for auto-redirection.)",
                  ),
                  React.createElement(Button.make, {
                    buttonState: /* Normal */ 0,
                    text: "Go to recon tab",
                    buttonType: /* Primary */ 0,
                    buttonSize: /* Small */ 2,
                    onClick: function (v) {
                      openReconTab(undefined);
                    },
                    customButtonStyle:
                      "w-2/3 rounded-sm !bg-jp-blue-button_blue border border-jp-blue-border_blue mt-4",
                  }),
                ),
              )
            : React.createElement(
                "div",
                {
                  className:
                    "flex flex-col gap-5 bg-white dark:bg-jp-gray-lightgray_background border-2 rounded dark:border-jp-gray-850 md:gap-5 p-2 md:p-8 h-2/3 items-center justify-center",
                },
                merchentDetails.recon_status === /* Requested */ 1
                  ? React.createElement(
                      "div",
                      {
                        className:
                          "text-center text-semibold text-s text-grey-700 opacity-60 dark:text-white",
                      },
                      "Thank you for your interest in our reconciliation module. We are currently reviewing your request for access. We will follow up with you soon regarding next steps.",
                    )
                  : React.createElement(
                      "div",
                      {
                        className:
                          "flex flex-col items-center w-2/3 justify-self-center gap-1 my-10",
                      },
                      React.createElement(
                        "div",
                        {
                          className: "font-bold text-xl dark:text-white",
                        },
                        "Drop us an email!",
                      ),
                      React.createElement(
                        "div",
                        {
                          className:
                            "text-center text-semibold text-s text-grey-700 opacity-60 dark:text-white",
                        },
                        "Once submitted, you should hear a response in 48 hours, often sooner.",
                      ),
                      React.createElement(Button.make, {
                        buttonState: /* Normal */ 0,
                        text: "Send an email",
                        buttonType: /* Primary */ 0,
                        buttonSize: /* Small */ 2,
                        onClick: function (v) {
                          onClickForReconRequest(undefined);
                        },
                        customButtonStyle:
                          "w-2/3 rounded-sm !bg-jp-blue-button_blue border border-jp-blue-border_blue mt-4",
                      }),
                      React.createElement(
                        "div",
                        {
                          className: "flex text-center",
                        },
                        React.createElement(
                          "div",
                          {
                            className:
                              "text-s text-grey-700 opacity-60  dark:text-white",
                          },
                          "or contact us on",
                        ),
                        React.createElement(
                          "div",
                          {
                            className: "m-1",
                          },
                          React.createElement(Icon.make, {
                            name: "slack",
                            size: 16,
                          }),
                        ),
                        React.createElement(
                          "div",
                          undefined,
                          React.createElement(
                            "a",
                            {
                              className: "text-[#0000FF]",
                              href: "https://hyperswitch-io.slack.com/?redir=%2Fssb%2Fredirect",
                              target: "_blank",
                            },
                            "slack",
                          ),
                        ),
                      ),
                    ),
              ),
        ),
      ),
    ),
    screenState: match$1[0],
  });
}

var make = Recon;

export { make };
/* Icon Not a pure module */
