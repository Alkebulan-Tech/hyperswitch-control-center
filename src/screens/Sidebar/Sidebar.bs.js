// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Link from "../../components/router/Link.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ToolTip from "../../components/tooltip/ToolTip.bs.js";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as AuthHooks from "../../hooks/AuthHooks.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as SidebarProvider from "./SidebarProvider.bs.js";
import * as UserPrefContext from "../../context/UserPrefContext.bs.js";
import * as AuthInfoProvider from "../../context/AuthInfoProvider.bs.js";
import * as React$1 from "@headlessui/react";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ClearRecoilValueHook from "../Hooks/ClearRecoilValueHook.bs.js";
import * as RippleEffectBackground from "../../components/RippleEffectBackground.bs.js";

function defaultLinkSelectionCheck(firstPart, tabLink) {
  return firstPart === tabLink;
}

function getIconSize(buttonType) {
  switch (buttonType) {
    case "large":
      return 42;
    case "larger":
      return 65;
    default:
      return 20;
  }
}

function Sidebar$MenuOption(props) {
  var children = props.children;
  var text = props.text;
  return React.createElement(
    "button",
    {
      className:
        "px-4 py-3 flex text-sm w-full text-offset_white cursor-pointer bg-popover-background hover:bg-popover-background-hover",
      onClick: props.onClick,
    },
    text !== undefined ? text : null,
    children !== undefined ? Caml_option.valFromOption(children) : null,
  );
}

var MenuOption = {
  make: Sidebar$MenuOption,
};

function Sidebar$SidebarOption(props) {
  var isSelected = props.isSelected;
  var icon = props.icon;
  var textBoldStyles = isSelected ? "font-bold" : "font-semibold opacity-60";
  var iconColor = isSelected ? "text-white" : "text-white opacity-60";
  if (props.isExpanded) {
    return React.createElement(
      "div",
      {
        className: "flex items-center gap-5",
      },
      React.createElement(Icon.make, {
        name: icon,
        size: getIconSize("small"),
        className: iconColor,
      }),
      React.createElement(
        "div",
        {
          className:
            "text-offset_white text-sm " +
            textBoldStyles +
            " whitespace-nowrap",
        },
        props.name,
      ),
    );
  } else {
    return React.createElement(Icon.make, {
      name: icon,
      size: getIconSize("small"),
      className: iconColor,
    });
  }
}

var SidebarOption = {
  make: Sidebar$SidebarOption,
};

function Sidebar$SidebarSubOption(props) {
  var children = props.children;
  var children$1 =
    children !== undefined ? Caml_option.valFromOption(children) : null;
  var subOptionClass = props.isSelected ? "bg-light_white" : "";
  var alignmentClasses = Caml_obj.equal(children$1, null)
    ? ""
    : "flex flex-row items-center";
  return React.createElement(
    "div",
    {
      className:
        "text-sm w-full " +
        alignmentClasses +
        " " +
        (props.isSectionExpanded
          ? "transition duration-[250ms] animate-textTransitionSideBar"
          : "transition duration-[1000ms] animate-textTransitionSideBarOff") +
        " " +
        (props.isSideBarExpanded ? "mx-2" : "mx-1") +
        " border-l-2 border-light_grey",
    },
    React.createElement("div", {
      className: "w-6",
    }),
    React.createElement(
      "div",
      {
        className:
          "" +
          subOptionClass +
          " w-full pl-3 py-3 p-4.5 rounded-sm flex items-center hover:bg-light_white whitespace-nowrap my-0.5",
      },
      props.name,
      children$1,
    ),
  );
}

var SidebarSubOption = {
  make: Sidebar$SidebarSubOption,
};

function Sidebar$SidebarItem(props) {
  var setOpenItem = props.setOpenItem;
  var isExpanded = props.isExpanded;
  var isSelected = props.isSelected;
  var tabInfo = props.tabInfo;
  var setOpenItem$1 =
    setOpenItem !== undefined ? setOpenItem : function (param) {};
  var sidebarItemRef = React.useRef(null);
  var match = React.useContext(UserPrefContext.userPrefContext);
  var getSearchParamByLink = match.getSearchParamByLink;
  var selectedClass = isSelected
    ? "border-l-2 rounded-sm border-white bg-light_white"
    : "border-l-2 rounded-sm border-transparent rounded-sm hover:transition hover:duration-300 rounded-lg";
  var textColor = isSelected
    ? "text-sm font-bold text-offset_white"
    : "text-sm font-semibold text-unselected_white";
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var match$1 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarExpanded = match$1.setIsSidebarExpanded;
  RippleEffectBackground.useHorizontalRippleHook(sidebarItemRef);
  switch (tabInfo.TAG | 0) {
    case /* RemoteLink */ 2:
      var tabOption = tabInfo._0;
      var link = tabOption.link;
      var match$2 = Core__Option.getOr(tabOption.remoteIcon, false)
        ? [
            React.createElement(Icon.make, {
              name: "external-link-alt",
              size: 14,
              className: "ml-3",
            }),
            link,
          ]
        : [
            null,
            "" +
              link +
              "" +
              Curry._1(getSearchParamByLink, link.substring(0)) +
              "",
          ];
      return React.createElement(UIUtils.RenderIf.make, {
        condition: tabOption.access !== /* NoAccess */ 0,
        children: React.createElement(
          "a",
          {
            className:
              "" +
              textColor +
              " flex flex-row items-center cursor-pointer " +
              selectedClass +
              " p-3",
            href: match$2[1],
            target: "_blank",
          },
          React.createElement(Sidebar$SidebarOption, {
            isExpanded: isExpanded,
            name: tabOption.name,
            icon: tabOption.icon,
            isSelected: isSelected,
          }),
          match$2[0],
        ),
      });
    case /* Link */ 3:
      var tabOption$1 = tabInfo._0;
      var link$1 = tabOption$1.link;
      var name = tabOption$1.name;
      var redirectionLink =
        "" +
        link$1 +
        "" +
        Curry._1(getSearchParamByLink, link$1.substring(0)) +
        "";
      var onSidebarItemClick = function (param) {
        if (isMobileView) {
          Curry._1(setIsSidebarExpanded, function (param) {
            return false;
          });
        }
        Curry._1(setOpenItem$1, function (prev) {
          if (prev === name) {
            return "";
          } else {
            return name;
          }
        });
      };
      return React.createElement(UIUtils.RenderIf.make, {
        condition: tabOption$1.access !== /* NoAccess */ 0,
        children: React.createElement(Link.make, {
          to_: redirectionLink,
          children: React.createElement(AddDataAttributes.make, {
            attributes: [
              ["data-testid", name.replace(/\s/g, "").toLowerCase()],
            ],
            children: React.createElement(
              "div",
              {
                ref: Caml_option.some(sidebarItemRef),
                className:
                  "" +
                  textColor +
                  " relative overflow-hidden flex flex-row items-center rounded-lg cursor-pointer " +
                  selectedClass +
                  " p-3 " +
                  (isExpanded ? "mx-2" : "mx-1") +
                  " hover:bg-light_white my-0.5",
                onClick: onSidebarItemClick,
              },
              React.createElement(Sidebar$SidebarOption, {
                isExpanded: isExpanded,
                name: name,
                icon: tabOption$1.icon,
                isSelected: isSelected,
              }),
            ),
          }),
          sendMixpanelEvents: true,
        }),
      });
    case /* LinkWithTag */ 4:
      var tabOption$2 = tabInfo._0;
      var link$2 = tabOption$2.link;
      return React.createElement(UIUtils.RenderIf.make, {
        condition: tabOption$2.access !== /* NoAccess */ 0,
        children: React.createElement(Link.make, {
          to_:
            "" +
            link$2 +
            "" +
            Curry._1(getSearchParamByLink, link$2.substring(0)) +
            "",
          children: React.createElement(
            "div",
            {
              className:
                "" +
                textColor +
                " flex flex-row items-center cursor-pointer transition duration-300 " +
                selectedClass +
                " p-3 " +
                (isExpanded ? "mx-2" : "mx-1") +
                " hover:bg-light_white my-0.5",
              onClick: function (param) {
                if (isMobileView) {
                  return Curry._1(setIsSidebarExpanded, function (param) {
                    return false;
                  });
                }
              },
            },
            React.createElement(Sidebar$SidebarOption, {
              isExpanded: isExpanded,
              name: tabOption$2.name,
              icon: tabOption$2.icon,
              isSelected: isSelected,
            }),
            React.createElement(UIUtils.RenderIf.make, {
              condition: isExpanded,
              children: React.createElement(Icon.make, {
                name: tabOption$2.iconTag,
                size: Core__Option.getOr(tabOption$2.iconSize, 26),
                className:
                  "ml-2 " +
                  Core__Option.getOr(tabOption$2.iconStyles, "w-26 h-26") +
                  "",
              }),
            }),
          ),
          sendMixpanelEvents: true,
        }),
      });
    default:
      return null;
  }
}

var SidebarItem = {
  make: Sidebar$SidebarItem,
};

function Sidebar$NestedSidebarItem(props) {
  var isSideBarExpanded = props.isSideBarExpanded;
  var isSelected = props.isSelected;
  var match = React.useContext(UserPrefContext.userPrefContext);
  var selectedClass = isSelected
    ? "font-semibold mx-1"
    : "font-semibold mx-1 rounded-sm hover:transition hover:duration-300";
  var textColor = isSelected
    ? "text-md font-small text-offset_white"
    : "text-md font-small text-unselected_white";
  var match$1 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarExpanded = match$1.setIsSidebarExpanded;
  var paddingClass = isSideBarExpanded ? "pl-4" : "";
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var nestedSidebarItemRef = React.useRef(null);
  var tabOption = props.tabInfo._0;
  var iconTag = tabOption.iconTag;
  var link = tabOption.link;
  var name = tabOption.name;
  return React.createElement(UIUtils.RenderIf.make, {
    condition: isSideBarExpanded,
    children: React.createElement(UIUtils.RenderIf.make, {
      condition: tabOption.access !== /* NoAccess */ 0,
      children: React.createElement(Link.make, {
        to_:
          "" +
          link +
          "" +
          Curry._1(match.getSearchParamByLink, link.substr(0)) +
          "",
        children: React.createElement(AddDataAttributes.make, {
          attributes: [["data-testid", name.replace(/\s/g, "").toLowerCase()]],
          children: React.createElement(
            "div",
            {
              ref: Caml_option.some(nestedSidebarItemRef),
              className:
                "" +
                textColor +
                " relative overflow-hidden flex flex-row items-center cursor-pointer rounded-lg " +
                paddingClass +
                " " +
                selectedClass +
                "",
              onClick: function (param) {
                if (isMobileView) {
                  return Curry._1(setIsSidebarExpanded, function (param) {
                    return false;
                  });
                }
              },
            },
            React.createElement(Sidebar$SidebarSubOption, {
              name: name,
              isSectionExpanded: props.isSectionExpanded,
              isSelected: isSelected,
              children: Caml_option.some(
                React.createElement(UIUtils.RenderIf.make, {
                  condition: Belt_Option.isSome(iconTag) && isSideBarExpanded,
                  children: React.createElement(
                    "div",
                    {
                      className: "pl-2",
                    },
                    React.createElement(Icon.make, {
                      name: Belt_Option.getWithDefault(iconTag, ""),
                      size: Belt_Option.getWithDefault(tabOption.iconSize, 26),
                      className: Belt_Option.getWithDefault(
                        tabOption.iconStyles,
                        "w-26 h-26",
                      ),
                    }),
                  ),
                }),
              ),
              isSideBarExpanded: isSideBarExpanded,
            }),
          ),
        }),
        sendMixpanelEvents: true,
      }),
    }),
  });
}

var NestedSidebarItem = {
  make: Sidebar$NestedSidebarItem,
};

function Sidebar$NestedSectionItem(props) {
  var isSideBarExpanded = props.isSideBarExpanded;
  var isSubLevelItemSelected = props.isSubLevelItemSelected;
  var isAnySubItemSelected = props.isAnySubItemSelected;
  var isSectionExpanded = props.isSectionExpanded;
  var section = props.section;
  var iconColor = isAnySubItemSelected ? "text-white" : "text-white opacity-60";
  var iconOuterClass = isSideBarExpanded ? "" : " rounded-sm p-4 rounded-lg";
  var bgColor =
    (isSideBarExpanded && isAnySubItemSelected && !isSectionExpanded, "");
  var sidebarNestedSectionRef = React.useRef(null);
  return React.createElement(AddDataAttributes.make, {
    attributes: [
      ["data-testid", section.name.replace(/\s/g, "").toLowerCase()],
    ],
    children: React.createElement(
      "div",
      {
        className: "transition duration-300",
      },
      React.createElement(
        "div",
        {
          ref: Caml_option.some(sidebarNestedSectionRef),
          className:
            "" +
            (isSideBarExpanded ? "mx-2" : "mx-1") +
            " text-sm " +
            props.textColor +
            " " +
            bgColor +
            " relative overflow-hidden flex flex-row items-center justify-between p-3 " +
            props.cursor +
            " " +
            (isSectionExpanded
              ? ""
              : "rounded-sm transition duration-[250ms] ease-in-out") +
            " border-l-2 " +
            (isAnySubItemSelected ? "border-white" : "border-transparent") +
            " hover:bg-light_white",
          onClick: props.toggleSectionExpansion,
        },
        React.createElement(
          "div",
          {
            className:
              "flex-row items-center select-none min-w-max flex  gap-5",
          },
          isSideBarExpanded
            ? React.createElement(
                "div",
                {
                  className: iconOuterClass,
                },
                React.createElement(Icon.make, {
                  name: section.icon,
                  size: getIconSize("medium"),
                  className: iconColor,
                }),
              )
            : React.createElement(Icon.make, {
                name: section.icon,
                size: getIconSize("small"),
                className: iconColor,
              }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: isSideBarExpanded,
            children: React.createElement(
              "div",
              {
                className:
                  "font-semibold text-sm " +
                  props.expandedTextColor +
                  " whitespace-nowrap",
              },
              section.name,
            ),
          }),
        ),
        React.createElement(UIUtils.RenderIf.make, {
          condition: isSideBarExpanded,
          children: React.createElement(Icon.make, {
            name: "Nested_arrow_down",
            size: 16,
            className: isSectionExpanded
              ? "-rotate-180 transition duration-[250ms] mr-2 text-white opacity-60"
              : "-rotate-0 transition duration-[250ms] mr-2 text-white opacity-60",
          }),
        }),
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition: props.isElementShown,
        children: section.links.map(function (subLevelItem, index) {
          var isSelected = Curry._1(isSubLevelItemSelected, subLevelItem);
          return JsxPPXReactSupport.createElementWithKey(
            index.toString(),
            Sidebar$NestedSidebarItem,
            {
              tabInfo: subLevelItem,
              isSelected: isSelected,
              isSideBarExpanded: isSideBarExpanded,
              isSectionExpanded: isSectionExpanded,
            },
          );
        }),
      }),
    ),
  });
}

var NestedSectionItem = {
  make: Sidebar$NestedSectionItem,
};

function Sidebar$SidebarNestedSection(props) {
  var isSectionAutoCollapseEnabled = props.isSectionAutoCollapseEnabled;
  var setOpenItem = props.setOpenItem;
  var openItem = props.openItem;
  var setIsSidebarExpanded = props.setIsSidebarExpanded;
  var isSideBarExpanded = props.isSideBarExpanded;
  var firstPart = props.firstPart;
  var linkSelectionCheck = props.linkSelectionCheck;
  var section = props.section;
  var openItem$1 = openItem !== undefined ? openItem : "";
  var setOpenItem$1 =
    setOpenItem !== undefined ? setOpenItem : function (param) {};
  var isSectionAutoCollapseEnabled$1 =
    isSectionAutoCollapseEnabled !== undefined
      ? isSectionAutoCollapseEnabled
      : false;
  var isSubLevelItemSelected = function (tabInfo) {
    return Curry._2(linkSelectionCheck, firstPart, tabInfo._0.link);
  };
  var match = React.useState(function () {
    return false;
  });
  var setIsSectionExpanded = match[1];
  var isSectionExpanded = match[0];
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsElementShown = match$1[1];
  var isElementShown = match$1[0];
  var isAnySubItemSelected = Core__Option.isSome(
    section.links.find(isSubLevelItemSelected),
  );
  React.useEffect(
    function () {
      if (isSectionExpanded) {
        Curry._1(setIsElementShown, function (param) {
          return true;
        });
      } else if (isElementShown) {
        setTimeout(function (param) {
          Curry._1(setIsElementShown, function (param) {
            return false;
          });
        }, 200);
      }
    },
    [isSectionExpanded, isSideBarExpanded],
  );
  React.useEffect(
    function () {
      if (isSideBarExpanded) {
        Curry._1(setIsSectionExpanded, function (param) {
          return isAnySubItemSelected;
        });
      } else {
        Curry._1(setIsSectionExpanded, function (param) {
          return false;
        });
      }
    },
    [isSideBarExpanded, isAnySubItemSelected],
  );
  var toggleSectionExpansion = React.useCallback(
    function (_ev) {
      if (isSideBarExpanded) {
        if (isAnySubItemSelected) {
          return Curry._1(setIsSectionExpanded, function (param) {
            return true;
          });
        } else {
          return Curry._1(setIsSectionExpanded, function (p) {
            return !p;
          });
        }
      } else {
        Curry._1(setIsSidebarExpanded, function (param) {
          return true;
        });
        setTimeout(function (param) {
          Curry._1(setIsSectionExpanded, function (param) {
            return true;
          });
        }, 200);
        return;
      }
    },
    [
      setIsSectionExpanded,
      isSideBarExpanded,
      setIsSidebarExpanded,
      isAnySubItemSelected,
    ],
  );
  var textColor = isSideBarExpanded
    ? isAnySubItemSelected
      ? "text-gray-900"
      : "text-unselected_white"
    : isAnySubItemSelected
      ? "text-white"
      : "text-unselected_white";
  var cursor =
    isAnySubItemSelected && isSideBarExpanded
      ? "cursor-default rounded-lg rounded-sm"
      : "cursor-pointer rounded-lg rounded-sm";
  var expandedTextColor = isAnySubItemSelected
    ? "text-white"
    : "!text-offset_white !opacity-60";
  var areAllSubLevelsHidden = Core__Array.reduce(
    section.links,
    true,
    function (acc, subLevelItem) {
      if (acc) {
        return subLevelItem._0.access === /* NoAccess */ 0;
      } else {
        return false;
      }
    },
  );
  var isSectionExpanded$1 = isSectionAutoCollapseEnabled$1
    ? openItem$1 === section.name || isAnySubItemSelected
    : isSectionExpanded;
  var toggleSectionExpansion$1 = isSectionAutoCollapseEnabled$1
    ? function (param) {
        Curry._1(setOpenItem$1, function (prev) {
          if (prev === section.name) {
            return "";
          } else {
            return section.name;
          }
        });
      }
    : toggleSectionExpansion;
  var isElementShown$1 = isSectionAutoCollapseEnabled$1
    ? openItem$1 === section.name || isAnySubItemSelected
    : isElementShown;
  return React.createElement(UIUtils.RenderIf.make, {
    condition: !areAllSubLevelsHidden,
    children: React.createElement(Sidebar$NestedSectionItem, {
      section: section,
      isSectionExpanded: isSectionExpanded$1,
      isAnySubItemSelected: isAnySubItemSelected,
      textColor: textColor,
      cursor: cursor,
      toggleSectionExpansion: toggleSectionExpansion$1,
      expandedTextColor: expandedTextColor,
      isElementShown: isElementShown$1,
      isSubLevelItemSelected: isSubLevelItemSelected,
      isSideBarExpanded: isSideBarExpanded,
    }),
  });
}

var SidebarNestedSection = {
  make: Sidebar$SidebarNestedSection,
};

function Sidebar$PinIconComponentStates(props) {
  var setIsSidebarExpanded = props.setIsSidebarExpanded;
  var isHSSidebarPinned = props.isHSSidebarPinned;
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var match = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarDetails = match.setIsSidebarDetails;
  var toggleExpand = React.useCallback(function (param) {
    Curry._1(setIsSidebarExpanded, function (x) {
      return !x;
    });
  }, []);
  var onClick = function (ev) {
    ev.preventDefault();
    ev.stopPropagation();
    Curry._1(toggleExpand, ev);
    Curry._2(setIsSidebarDetails, "isPinned", !isHSSidebarPinned);
  };
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(UIUtils.RenderIf.make, {
      condition: props.isSidebarExpanded && !isHSSidebarPinned && !isMobileView,
      children: React.createElement(Icon.make, {
        name: "sidebar-pin-default",
        size: 35,
        className: "cursor-pointer",
        onClick: onClick,
      }),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: isHSSidebarPinned && !isMobileView,
      children: React.createElement(Icon.make, {
        name: "sidebar-pin-pinned",
        size: 35,
        className: "cursor-pointer",
        onClick: onClick,
      }),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: isMobileView,
      children: React.createElement(
        "div",
        {
          className:
            "flex align-center mt-4 pl-3 mb-6 pr-4 ml-1 gap-5 cursor-default",
        },
        React.createElement(Icon.make, {
          name: "collapse-cross",
          size: 20,
          className: "mr-1",
          onClick: function (param) {
            Curry._1(setIsSidebarExpanded, function (param) {
              return false;
            });
          },
          customIconColor: "#FEFEFE",
        }),
      ),
    }),
  );
}

var PinIconComponentStates = {
  make: Sidebar$PinIconComponentStates,
};

function Sidebar(props) {
  var verticalOffset = props.verticalOffset;
  var linkSelectionCheck = props.linkSelectionCheck;
  var linkSelectionCheck$1 =
    linkSelectionCheck !== undefined
      ? linkSelectionCheck
      : defaultLinkSelectionCheck;
  var verticalOffset$1 =
    verticalOffset !== undefined ? verticalOffset : "120px";
  var match = React.useContext(ConfigContext.configContext);
  var backgroundColor = match.globalUIConfig.sidebarColor.backgroundColor;
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var sideBarRef = React.useRef(null);
  var email = HSLocalStorage.getFromMerchantDetails("email");
  var match$1 = React.useState(function () {
    return "";
  });
  var setOpenItem = match$1[1];
  var openItem = match$1[0];
  var match$2 = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match$2[1];
  var match$3 = React.useContext(SidebarProvider.defaultContext);
  var match$4 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarExpanded = match$4.setIsSidebarExpanded;
  var isSidebarExpanded = match$4.isSidebarExpanded;
  var match$5 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarDetails = match$5.setIsSidebarDetails;
  var minWidthForPinnedState = MatchMedia.useMatchMedia("(min-width: 1280px)");
  var clearRecoilValue = ClearRecoilValueHook.useClearRecoilValue(undefined);
  React.useEffect(
    function () {
      if (minWidthForPinnedState) {
        Curry._2(setIsSidebarDetails, "isPinned", true);
        Curry._1(setIsSidebarExpanded, function (param) {
          return true;
        });
      } else {
        Curry._2(setIsSidebarDetails, "isPinned", false);
        Curry._1(setIsSidebarExpanded, function (param) {
          return false;
        });
      }
    },
    [minWidthForPinnedState],
  );
  var isHSSidebarPinned = Curry._1(match$3.getFromSidebarDetails, "isPinned");
  var isExpanded = isSidebarExpanded || isHSSidebarPinned;
  var sidebarWidth = isExpanded ? (isMobileView ? "100%" : "270px") : "55px";
  var x = Core__List.head(props.path);
  var firstPart = x !== undefined ? "/" + x + "" : "/";
  var expansionClass = isExpanded ? "" : "-translate-x-full";
  var sidebarClass = "shadow-md";
  var sidebarMaxWidth = isMobileView ? "w-screen" : "w-max";
  var sidebarContainerClassWidth = isMobileView
    ? "0px"
    : isHSSidebarPinned
      ? "270px"
      : "50px";
  var handleLogout = function (param) {
    APIUtils.handleLogout(
      fetchApi,
      setAuthStatus,
      setIsSidebarExpanded,
      clearRecoilValue,
    );
  };
  return React.createElement(
    "div",
    {
      className:
        "" +
        backgroundColor.primaryNormal +
        " flex group border-r border-jp-gray-500 relative",
    },
    React.createElement("div", {
      ref: Caml_option.some(sideBarRef),
      className:
        "flex h-full flex-col transition-all duration-100 " +
        sidebarClass +
        " relative inset-0",
      style: {
        width: sidebarContainerClassWidth,
      },
    }),
    React.createElement(
      "div",
      {
        className:
          "absolute z-40 h-screen flex transform md:translate-x-0 transition duration-300 ease-in-out " +
          sidebarMaxWidth +
          " " +
          expansionClass +
          "",
        onMouseLeave: function (param) {
          if (!isHSSidebarPinned) {
            return Curry._1(setIsSidebarExpanded, function (param) {
              return false;
            });
          }
        },
        onMouseOver: function (param) {
          if (!isHSSidebarPinned) {
            return Curry._1(setIsSidebarExpanded, function (param) {
              return true;
            });
          }
        },
      },
      React.createElement(
        "div",
        {
          ref: Caml_option.some(sideBarRef),
          className:
            "" +
            backgroundColor.primaryNormal +
            " flex h-full flex-col transition-all duration-100 " +
            sidebarClass +
            " relative inset-0",
          style: {
            width: sidebarWidth,
          },
        },
        React.createElement(
          "div",
          {
            className: "flex items-center justify-between p-1 mr-2",
          },
          React.createElement(
            "div",
            {
              className:
                "flex align-center mt-4 pl-3 mb-6 pr-4 ml-1 gap-5 cursor-default",
              onClick: function (ev) {
                ev.preventDefault();
                ev.stopPropagation();
              },
            },
            React.createElement(Icon.make, {
              name: "hamburger-new",
              size: 20,
            }),
          ),
          React.createElement(Sidebar$PinIconComponentStates, {
            isHSSidebarPinned: isHSSidebarPinned,
            setIsSidebarExpanded: setIsSidebarExpanded,
            isSidebarExpanded: isSidebarExpanded,
          }),
        ),
        React.createElement(
          "div",
          {
            className:
              "h-full overflow-y-scroll transition-transform duration-1000 overflow-x-hidden show-scrollbar",
            style: {
              height: "calc(100vh - " + verticalOffset$1 + ")",
            },
          },
          props.sidebars.map(function (tabInfo, index) {
            switch (tabInfo.TAG | 0) {
              case /* CustomComponent */ 0:
                return JsxPPXReactSupport.createElementWithKey(
                  index.toString(),
                  UIUtils.RenderIf.make,
                  {
                    condition: isExpanded,
                    children: tabInfo._0.component,
                  },
                );
              case /* Heading */ 1:
                return React.createElement(
                  "div",
                  {
                    key: index.toString(),
                    className:
                      "text-xs font-semibold leading-5 text-[#5B6376] overflow-hidden border-l-2 rounded-sm border-transparent px-3 " +
                      (isExpanded ? "mx-2" : "mx-1") +
                      " mt-5 mb-3",
                  },
                  isExpanded ? tabInfo._0.name : "",
                );
              case /* RemoteLink */ 2:
              case /* Link */ 3:
                break;
              case /* LinkWithTag */ 4:
                var isSelected = Curry._2(
                  linkSelectionCheck$1,
                  firstPart,
                  tabInfo._0.link,
                );
                return JsxPPXReactSupport.createElementWithKey(
                  index.toString(),
                  Sidebar$SidebarItem,
                  {
                    tabInfo: tabInfo,
                    isSelected: isSelected,
                    isExpanded: isExpanded,
                  },
                );
              case /* Section */ 5:
                var section = tabInfo._0;
                return JsxPPXReactSupport.createElementWithKey(
                  index.toString(),
                  UIUtils.RenderIf.make,
                  {
                    condition: section.showSection,
                    children: JsxPPXReactSupport.createElementWithKey(
                      index.toString(),
                      Sidebar$SidebarNestedSection,
                      {
                        section: section,
                        linkSelectionCheck: linkSelectionCheck$1,
                        firstPart: firstPart,
                        isSideBarExpanded: isExpanded,
                        setIsSidebarExpanded: setIsSidebarExpanded,
                        openItem: openItem,
                        setOpenItem: setOpenItem,
                        isSectionAutoCollapseEnabled: true,
                      },
                    ),
                  },
                );
            }
            var isSelected$1 = Curry._2(
              linkSelectionCheck$1,
              firstPart,
              tabInfo._0.link,
            );
            return JsxPPXReactSupport.createElementWithKey(
              index.toString(),
              Sidebar$SidebarItem,
              {
                tabInfo: tabInfo,
                isSelected: isSelected$1,
                isExpanded: isExpanded,
                setOpenItem: setOpenItem,
              },
            );
          }),
        ),
        React.createElement(
          "div",
          {
            className:
              "flex items-center justify-between mb-5 mt-2 mx-2 mr-2 hover:bg-[#334264]",
          },
          React.createElement(UIUtils.RenderIf.make, {
            condition: isExpanded,
            children: React.createElement(React$1.Popover, {
              className: "relative inline-block text-left",
              children: function (popoverProps) {
                var openClasses = popoverProps.open
                  ? "group pl-3 border py-2 rounded-md inline-flex items-center text-base font-medium hover:text-opacity-100 focus:outline-none"
                  : "text-opacity-90 group pl-3 border py-2 rounded-md inline-flex items-center text-base font-medium hover:text-opacity-100 focus:outline-none";
                return React.createElement(
                  React.Fragment,
                  undefined,
                  React.createElement(React$1.Popover.Button, {
                    className: "" + openClasses + " border-none",
                    children: function (buttonProps) {
                      return React.createElement(
                        React.Fragment,
                        undefined,
                        React.createElement(
                          "div",
                          {
                            className: "flex items-center",
                          },
                          React.createElement(
                            "div",
                            {
                              className:
                                "inline-block text-offset_white bg-profile-sidebar-blue text-center w-10 h-10 leading-10 rounded-full mr-4",
                            },
                            email.charAt(0).toUpperCase(),
                          ),
                          React.createElement(ToolTip.make, {
                            description: email,
                            toolTipFor: Caml_option.some(
                              React.createElement(UIUtils.RenderIf.make, {
                                condition: isExpanded,
                                children: React.createElement(
                                  "div",
                                  {
                                    className:
                                      "w-[145px] text-sm font-medium text-gray-400 dark:text-gray-600 text-ellipsis overflow-hidden",
                                  },
                                  email,
                                ),
                              }),
                            ),
                            tooltipWidthClass: "!w-fit !z-50",
                            toolTipPosition: /* Top */ 0,
                          }),
                        ),
                        React.createElement(
                          "div",
                          {
                            className:
                              "flex flex-row border-transparent dark:border-transparent rounded-2xl p-2 border-2",
                          },
                          React.createElement(Icon.make, {
                            name: "dropdown-menu",
                            className: "cursor-pointer",
                          }),
                        ),
                      );
                    },
                  }),
                  React.createElement(React$1.Transition, {
                    as: "span",
                    enter: "transition ease-out duration-200",
                    enterFrom: "opacity-0 translate-y-1",
                    enterTo: "opacity-100 translate-y-0",
                    leave: "transition ease-in duration-150",
                    leaveFrom: "opacity-100 translate-y-0",
                    leaveTo: "opacity-0 translate-y-1",
                    children: Caml_option.some(
                      React.createElement(React$1.Popover.Panel, {
                        className: "absolute !z-30 bottom-[100%] right-2",
                        children: function (panelProps) {
                          return React.createElement(
                            "div",
                            {
                              className:
                                "relative flex flex-col py-3 rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 w-60 bg-popover-background",
                              id: "neglectTopbarTheme",
                            },
                            React.createElement(Sidebar$MenuOption, {
                              text: "Profile",
                              onClick: function (param) {
                                Curry._1(panelProps.close, undefined);
                                RescriptReactRouter.replace(
                                  HSwitchGlobalVars.appendDashboardPath(
                                    "/account-settings/profile",
                                  ),
                                );
                              },
                            }),
                            React.createElement(Sidebar$MenuOption, {
                              text: "Sign out",
                              onClick: handleLogout,
                            }),
                          );
                        },
                      }),
                    ),
                  }),
                );
              },
            }),
          }),
        ),
      ),
    ),
  );
}

var make = Sidebar;

export {
  defaultLinkSelectionCheck,
  getIconSize,
  MenuOption,
  SidebarOption,
  SidebarSubOption,
  SidebarItem,
  NestedSidebarItem,
  NestedSectionItem,
  SidebarNestedSection,
  PinIconComponentStates,
  make,
};
/* Icon Not a pure module */
