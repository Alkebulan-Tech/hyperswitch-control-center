// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderHooks from "../Order/OrderHooks.bs.js";
import * as OrderUtils from "../../components/OrderUtils.bs.js";
import * as RefundHook from "./RefundHook.bs.js";
import * as RefundLogs from "../Analytics/Logs/RefundLogs/RefundLogs.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as LogsWrapper from "../Analytics/Logs/LogUtils/LogsWrapper.bs.js";
import * as OrderEntity from "../Order/OrderEntity.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as OrderUIUtils from "../Order/OrderUIUtils.bs.js";
import * as RefundEntity from "./RefundEntity.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as DefaultLandingPage from "../Utils/DefaultLandingPage.bs.js";
import * as BreadCrumbNavigation from "../../genericUtils/BreadCrumbNavigation.bs.js";

function ShowRefund$RefundInfo$Details(props) {
  var children = props.children;
  var bgColor = props.bgColor;
  var widthClass = props.widthClass;
  var justifyClassName = props.justifyClassName;
  var excludeColKeys = props.excludeColKeys;
  var getCell = props.getCell;
  var getHeading = props.getHeading;
  var data = props.data;
  var excludeColKeys$1 = excludeColKeys !== undefined ? excludeColKeys : [];
  var justifyClassName$1 =
    justifyClassName !== undefined ? justifyClassName : "justify-start";
  var widthClass$1 = widthClass !== undefined ? widthClass : "w-1/4";
  var bgColor$1 =
    bgColor !== undefined
      ? bgColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  return React.createElement(
    OrderUtils.Section.make,
    {
      children: null,
      customCssClass:
        "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 " +
        bgColor$1 +
        " rounded-md p-5",
    },
    React.createElement(
      "div",
      {
        className: "flex items-center",
      },
      React.createElement(
        "div",
        {
          className: "font-bold text-4xl m-3",
        },
        "" + (data.amount / 100.0).toString() + " " + data.currency + " ",
      ),
      RefundEntity.useGetStatus(data),
    ),
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-wrap " +
            justifyClassName$1 +
            " dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
        },
        props.detailsFields.map(function (colType, i) {
          if (excludeColKeys$1.includes(colType)) {
            return null;
          } else {
            return React.createElement(
              "div",
              {
                key: i.toString(),
                className: "flex " + widthClass$1 + " items-center",
              },
              React.createElement(OrderUtils.DisplayKeyValueParams.make, {
                heading: Curry._1(getHeading, colType),
                value: Curry._2(getCell, data, colType),
                customMoneyStyle: "!font-normal !text-sm",
                labelMargin: "!py-0 mt-2",
                textColor: "!font-normal !text-jp-gray-700",
                overiddingHeadingStyles: "text-black text-sm font-medium",
              }),
            );
          }
        }),
      ),
    }),
    children !== undefined ? Caml_option.valFromOption(children) : null,
  );
}

var Details = {
  make: ShowRefund$RefundInfo$Details,
};

function ShowRefund$RefundInfo(props) {
  var refundData = RefundEntity.itemToObjMapper(props.orderDict);
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "div",
      {
        className:
          "font-bold text-fs-16 dark:text-white dark:text-opacity-75 mt-4 mb-4",
      },
      "Summary",
    ),
    React.createElement(ShowRefund$RefundInfo$Details, {
      data: refundData,
      getHeading: RefundEntity.getHeading,
      getCell: RefundEntity.getCell,
      excludeColKeys: [/* RefundStatus */ 8, /* Amount */ 0],
      detailsFields: RefundEntity.allColumns,
    }),
  );
}

var RefundInfo = {
  Details: Details,
  make: ShowRefund$RefundInfo,
};

function ShowRefund(props) {
  var id = props.id;
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var match$1 = React.useState(function () {
    return /* Loading */ 0;
  });
  var match$2 = React.useState(function () {
    return 0;
  });
  var match$3 = React.useState(function () {
    return [];
  });
  var setOrdersData = match$3[1];
  var refundData = RefundHook.useGetRefundData(id, match[1]);
  var paymentId = LogicUtils.getString(
    LogicUtils.getDictFromJsonObject(refundData),
    "payment_id",
    "",
  );
  var orderDataForPaymentId = OrderHooks.useGetOrdersData(
    paymentId,
    0,
    match$1[1],
  );
  React.useEffect(
    function () {
      var jsonArray = [orderDataForPaymentId];
      var paymentArray = LogicUtils.getArrayDataFromJson(
        jsonArray,
        OrderEntity.itemToObjMapper,
      );
      Curry._1(setOrdersData, function (param) {
        return paymentArray.map(function (prim) {
          return prim;
        });
      });
    },
    [orderDataForPaymentId],
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col overflow-scroll",
    },
    React.createElement(
      "div",
      {
        className: "mb-4 flex justify-between",
      },
      React.createElement(
        "div",
        {
          className: "flex items-center",
        },
        React.createElement(
          "div",
          undefined,
          React.createElement(PageUtils.PageHeading.make, {
            title: "Refunds",
          }),
          React.createElement(BreadCrumbNavigation.make, {
            path: [
              {
                title: "Refunds",
                link: "/refunds",
              },
            ],
            currentPageTitle: id,
            cursorStyle: "cursor-pointer",
          }),
        ),
        React.createElement("div", undefined),
      ),
    ),
    React.createElement(
      PageLoaderWrapper.make,
      {
        children: Caml_option.some(null),
        screenState: match[0],
        customUI: Caml_option.some(
          React.createElement(DefaultLandingPage.make, {
            height: "90vh",
            title: "Something Went Wrong!",
            overriddingStylesTitle: "text-3xl font-semibold",
          }),
        ),
      },
      React.createElement(ShowRefund$RefundInfo, {
        orderDict: LogicUtils.getDictFromJsonObject(refundData),
      }),
      React.createElement(UIUtils.RenderIf.make, {
        condition: userPermissionJson.operationsView !== /* NoAccess */ 0,
        children: React.createElement(LoadedTable.make, {
          title: "Payment",
          showSerialNumber: true,
          actualData: match$3[0],
          totalResults: 1,
          resultsPerPage: 1,
          offset: match$2[0],
          setOffset: match$2[1],
          entity: OrderEntity.orderEntity,
          currrentFetchCount: 1,
        }),
      }),
      React.createElement("div", {
        className: "mt-5",
      }),
      React.createElement(UIUtils.RenderIf.make, {
        condition: featureFlagDetails.auditTrail,
        children: React.createElement(OrderUIUtils.RenderAccordian.make, {
          accordion: [
            {
              title: "Events and logs",
              renderContent: function (param) {
                return React.createElement(LogsWrapper.make, {
                  wrapperFor: "REFUND",
                  children: React.createElement(RefundLogs.make, {
                    refundId: id,
                    paymentId: paymentId,
                  }),
                });
              },
              renderContentOnTop: undefined,
            },
          ],
        }),
      }),
    ),
  );
}

var make = ShowRefund;

export { RefundInfo, make };
/* react Not a pure module */
