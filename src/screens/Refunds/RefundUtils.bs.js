// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as RefundEntity from "./RefundEntity.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";

async function getRefundsList(
  filterValueJson,
  updateDetails,
  setRefundsData,
  setScreenState,
  offset,
  setTotalCount,
  setOffset,
) {
  Curry._1(setScreenState, function (param) {
    return /* Loading */ 0;
  });
  try {
    var refundsUrl = APIUtils.getURL(
      /* REFUNDS */ 4,
      /* Post */ 2,
      "refund-post",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var res = await Curry._7(
      updateDetails,
      refundsUrl,
      filterValueJson,
      /* Post */ 2,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var data = LogicUtils.getArrayFromDict(
      LogicUtils.getDictFromJsonObject(res),
      "data",
      [],
    );
    var total = LogicUtils.getInt(
      LogicUtils.getDictFromJsonObject(res),
      "total_count",
      0,
    );
    var arr = Core__Array.make(offset, {});
    if (total <= offset) {
      Curry._1(setOffset, function (param) {
        return 0;
      });
    }
    if (total <= 0) {
      return Curry._1(setScreenState, function (param) {
        return /* Custom */ 2;
      });
    }
    var refundDataDictArr = Belt_Array.keepMap(data, Core__JSON.Decode.object);
    var refundData = arr
      .concat(refundDataDictArr)
      .map(RefundEntity.itemToObjMapper);
    var list = refundData.map(function (prim) {
      return prim;
    });
    Curry._1(setRefundsData, function (param) {
      return list;
    });
    Curry._1(setTotalCount, function (param) {
      return total;
    });
    return Curry._1(setScreenState, function (param) {
      return /* Success */ 1;
    });
  } catch (exn) {
    return Curry._1(setScreenState, function (param) {
      return /* Error */ {
        _0: "Failed to fetch",
      };
    });
  }
}

var customUI = React.createElement(HelperComponents.BluredTableComponent.make, {
  infoText:
    "No refund records as of now. Try initiating a refund for a successful payment.",
  buttonText: "Take me to payments",
  onClickUrl: "payments",
  moduleName: "",
});

var startTimeFilterKey = "start_time";

var endTimeFilterKey = "end_time";

function filterByData(txnArr, value) {
  var searchText = LogicUtils.getStringFromJson(value, "");
  return Belt_Array.keepMap(
    Belt_Array.keepMap(txnArr, function (prim) {
      if (prim == null) {
        return;
      } else {
        return Caml_option.some(prim);
      }
    }),
    function (data) {
      var valueArr = Core__Array.reduce(
        Object.entries(data).map(function (item) {
          return LogicUtils.getStringFromJson(item[1], "")
            .toLowerCase()
            .includes(searchText);
        }),
        false,
        function (acc, item) {
          if (item) {
            return true;
          } else {
            return acc;
          }
        },
      );
      if (valueArr) {
        return Caml_option.some(data);
      }
    },
  );
}

function initialFixedFilter(param) {
  return [
    {
      field: FormRenderer.makeMultiInputFieldInfo(
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        false,
        InputFields.dateRangeField(
          startTimeFilterKey,
          endTimeFilterKey,
          "YYYY-MM-DDTHH:mm:ss[Z]",
          false,
          true,
          false,
          [
            /* Today */ 0,
            /* Yesterday */ 2,
            {
              TAG: /* Day */ 1,
              _0: 2.0,
            },
            {
              TAG: /* Day */ 1,
              _0: 7.0,
            },
            {
              TAG: /* Day */ 1,
              _0: 30.0,
            },
            /* ThisMonth */ 3,
            /* LastMonth */ 4,
          ],
          false,
          2,
          60,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        [],
        undefined,
      ),
      localFilter: undefined,
    },
  ];
}

function initialFilters(json) {
  var filterDict = LogicUtils.getDictFromJsonObject(json);
  return Object.keys(filterDict)
    .filter(function (_item, index) {
      return index <= 2;
    })
    .map(function (key) {
      var title = "Select " + LogicUtils.snakeToTitle(key) + "";
      var values = LogicUtils.getStrArrayFromJsonArray(
        LogicUtils.getArrayFromDict(filterDict, key, []),
      );
      var arg = SelectBox.makeOptions(values);
      return {
        field: FormRenderer.makeFieldInfo(
          "",
          undefined,
          key,
          function (param) {
            var func = Curry._3(
              InputFields.multiSelectInput,
              param,
              arg,
              undefined,
            );
            return function (param) {
              return Curry.app(func, [
                param,
                title,
                undefined,
                undefined,
                false,
                undefined,
                undefined,
                true,
                undefined,
                undefined,
                undefined,
                undefined,
                "bg-none",
                undefined,
                undefined,
                true,
                true,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ]);
            };
          },
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        localFilter: filterByData,
      };
    });
}

export {
  getRefundsList,
  customUI,
  startTimeFilterKey,
  endTimeFilterKey,
  filterByData,
  initialFixedFilter,
  initialFilters,
};
/* customUI Not a pure module */
