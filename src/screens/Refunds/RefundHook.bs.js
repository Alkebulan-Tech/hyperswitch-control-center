// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function useGetRefundData(refundId, setScreenState) {
  var match = React.useState(function () {
    return null;
  });
  var setRefundData = match[1];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var accountUrl = APIUtils.getURL(
    /* REFUNDS */ 4,
    /* Get */ 0,
    Caml_option.some(refundId),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  var setLoadDataForRefunds = async function (param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      if (refundId.length === 0) {
        return;
      }
      var refundDataResponse = await Curry._1(fetchDetails, accountUrl);
      Curry._1(setRefundData, function (param) {
        return refundDataResponse;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(
    function () {
      setLoadDataForRefunds(undefined);
    },
    [refundId],
  );
  return match[0];
}

export { useGetRefundData };
/* react Not a pure module */
