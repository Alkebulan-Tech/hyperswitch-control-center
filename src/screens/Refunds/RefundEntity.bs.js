// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderEntity from "../Order/OrderEntity.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as HSwitchOrderUtils from "../Order/HSwitchOrderUtils.bs.js";

var defaultColumns = [
  /* RefundId */ 7, /* Amount */ 0, /* RefundStatus */ 8, /* PaymentId */ 5,
  /* Created */ 1,
];

var allColumns = [
  /* Amount */ 0, /* ConnectorName */ 11, /* Created */ 1, /* Currency */ 2,
  /* ErrorCode */ 3, /* ErrorMessage */ 4, /* LastUpdated */ 9,
  /* MetaData */ 10, /* PaymentId */ 5, /* RefundId */ 7, /* RefundReason */ 6,
  /* RefundStatus */ 8,
];

function useGetStatus(order) {
  var match = React.useContext(ConfigContext.configContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var orderStatusLabel = order.status.toUpperCase();
  var fixedCss = "text-sm text-white font-bold p-1.5 rounded-lg";
  var match$1 = HSwitchOrderUtils.statusVariantMapper(order.status);
  var exit = 0;
  switch (match$1) {
    case /* Succeeded */ 0:
      return React.createElement(
        "div",
        {
          className: "" + fixedCss + " bg-hyperswitch_green dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
    case /* Failed */ 1:
    case /* Cancelled */ 2:
      exit = 2;
      break;
    case /* Processing */ 3:
    case /* RequiresCustomerAction */ 4:
    case /* RequiresPaymentMethod */ 5:
      exit = 3;
      break;
    case /* RequiresConfirmation */ 6:
    case /* PartiallyCaptured */ 7:
    case /* None */ 8:
      exit = 1;
      break;
  }
  switch (exit) {
    case 2:
      return React.createElement(
        "div",
        {
          className: "" + fixedCss + " bg-red-960 dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
    case 1:
    case 3:
      return React.createElement(
        "div",
        {
          className: "" + fixedCss + " " + backgroundColor + " bg-opacity-50",
        },
        orderStatusLabel,
      );
  }
}

function getHeading(colType) {
  switch (colType) {
    case /* Amount */ 0:
      return Table.makeHeaderInfo(
        "amount",
        "Amount",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Created */ 1:
      return Table.makeHeaderInfo(
        "created",
        "Created",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Currency */ 2:
      return Table.makeHeaderInfo(
        "currency",
        "Currency",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ErrorCode */ 3:
      return Table.makeHeaderInfo(
        "error_code",
        "Error Code",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ErrorMessage */ 4:
      return Table.makeHeaderInfo(
        "error_message",
        "Error Message",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentId */ 5:
      return Table.makeHeaderInfo(
        "payment_id",
        "Payment ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundReason */ 6:
      return Table.makeHeaderInfo(
        "reason",
        "Refund Reason",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundId */ 7:
      return Table.makeHeaderInfo(
        "refund_id",
        "Refund ID",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundStatus */ 8:
      return Table.makeHeaderInfo(
        "status",
        "Refund Status",
        /* DropDown */ 5,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* LastUpdated */ 9:
      return Table.makeHeaderInfo(
        "last_updated",
        "Last Updated",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* MetaData */ 10:
      return Table.makeHeaderInfo(
        "metaData",
        "MetaData",
        /* DropDown */ 5,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorName */ 11:
      return Table.makeHeaderInfo(
        "connector",
        "Connector",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCell(refundData, colType) {
  switch (colType) {
    case /* Amount */ 0:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (refundData.amount / 100.0).toString(),
          currency: refundData.currency,
        }),
        _1: "",
      };
    case /* Created */ 1:
      return {
        TAG: /* Date */ 4,
        _0: refundData.created_at,
      };
    case /* Currency */ 2:
      return {
        TAG: /* Text */ 1,
        _0: refundData.currency,
      };
    case /* ErrorCode */ 3:
      return {
        TAG: /* Text */ 1,
        _0: refundData.error_code,
      };
    case /* ErrorMessage */ 4:
      return {
        TAG: /* Text */ 1,
        _0: refundData.error_message,
      };
    case /* PaymentId */ 5:
      return {
        TAG: /* DisplayCopyCell */ 11,
        _0: refundData.payment_id,
      };
    case /* RefundReason */ 6:
      return {
        TAG: /* Text */ 1,
        _0: refundData.reason,
      };
    case /* RefundId */ 7:
      return {
        TAG: /* DisplayCopyCell */ 11,
        _0: refundData.refund_id,
      };
    case /* RefundStatus */ 8:
      var match = HSwitchOrderUtils.statusVariantMapper(refundData.status);
      var tmp;
      switch (match) {
        case /* Succeeded */ 0:
          tmp = /* LabelGreen */ 0;
          break;
        case /* Failed */ 1:
        case /* Cancelled */ 2:
          tmp = /* LabelRed */ 1;
          break;
        case /* Processing */ 3:
          tmp = /* LabelOrange */ 4;
          break;
        case /* RequiresCustomerAction */ 4:
        case /* RequiresPaymentMethod */ 5:
        case /* RequiresConfirmation */ 6:
          tmp = /* LabelWhite */ 10;
          break;
        case /* PartiallyCaptured */ 7:
        case /* None */ 8:
          tmp = /* LabelLightBlue */ 9;
          break;
      }
      return {
        TAG: /* Label */ 0,
        _0: {
          title: refundData.status.toUpperCase(),
          color: tmp,
        },
      };
    case /* LastUpdated */ 9:
      return {
        TAG: /* Date */ 4,
        _0: refundData.updated_at,
      };
    case /* MetaData */ 10:
      return {
        TAG: /* Text */ 1,
        _0: refundData.metadata,
      };
    case /* ConnectorName */ 11:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: refundData.connector,
        }),
        _1: "",
      };
  }
}

function itemToObjMapper(dict) {
  return {
    refund_id: LogicUtils.getString(dict, "refund_id", ""),
    payment_id: LogicUtils.getString(dict, "payment_id", ""),
    amount: LogicUtils.getFloat(dict, "amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", ""),
    reason: LogicUtils.getString(dict, "reason", ""),
    status: LogicUtils.getString(dict, "status", ""),
    metadata: LogicUtils.getString(dict, "metadata", ""),
    updated_at: LogicUtils.getString(dict, "updated_at", ""),
    created_at: LogicUtils.getString(dict, "created_at", ""),
    error_message: LogicUtils.getString(dict, "error_message", ""),
    error_code: LogicUtils.getString(dict, "error_code", ""),
    connector: LogicUtils.getString(dict, "connector", ""),
  };
}

function getRefunds(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapper);
}

var refundEntity = EntityType.makeEntity(
  "",
  getRefunds,
  defaultColumns,
  allColumns,
  getHeading,
  getCell,
  "",
  undefined,
  undefined,
  undefined,
  undefined,
  function (refundData) {
    return HSwitchGlobalVars.appendDashboardPath(
      "/refunds/" + refundData.refund_id + "",
    );
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  defaultColumns,
  allColumns,
  useGetStatus,
  getHeading,
  getCell,
  itemToObjMapper,
  getRefunds,
  refundEntity,
};
/* refundEntity Not a pure module */
