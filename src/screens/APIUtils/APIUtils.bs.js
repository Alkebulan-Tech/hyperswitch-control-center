// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.bs.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as AuthHooks from "../../hooks/AuthHooks.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as SidebarProvider from "../Sidebar/SidebarProvider.bs.js";
import * as AuthInfoProvider from "../../context/AuthInfoProvider.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ClearRecoilValueHook from "../Hooks/ClearRecoilValueHook.bs.js";

var JsonException = /* @__PURE__ */ Caml_exceptions.create(
  "APIUtils.JsonException",
);

function getURL(
  entityName,
  methodType,
  idOpt,
  connectorOpt,
  userTypeOpt,
  userRoleTypesOpt,
  reconTypeOpt,
  queryParamertersOpt,
  param,
) {
  var id = idOpt !== undefined ? Caml_option.valFromOption(idOpt) : undefined;
  var connector =
    connectorOpt !== undefined
      ? Caml_option.valFromOption(connectorOpt)
      : undefined;
  var userType = userTypeOpt !== undefined ? userTypeOpt : "NONE";
  var userRoleTypes =
    userRoleTypesOpt !== undefined ? userRoleTypesOpt : /* NONE */ 3;
  var reconType = reconTypeOpt !== undefined ? reconTypeOpt : "NONE";
  var queryParamerters =
    queryParamertersOpt !== undefined
      ? Caml_option.valFromOption(queryParamertersOpt)
      : undefined;
  var merchantId = HSLocalStorage.getFromMerchantDetails("merchant_id");
  var connectorBaseURL = "account/" + merchantId + "/connectors";
  var endpoint;
  var exit = 0;
  switch (entityName) {
    case /* ROUTING */ 1:
      var exit$1 = 0;
      if (typeof methodType === "number") {
        switch (methodType) {
          case /* Post */ 2:
            endpoint =
              id !== undefined ? "routing/" + id + "/activate" : "routing";
            break;
          case /* Get */ 0:
          case /* Put */ 3:
            exit$1 = 3;
            break;
          case /* Head */ 1:
          case /* Delete */ 4:
          case /* Connect */ 5:
          case /* Options */ 6:
          case /* Trace */ 7:
          case /* Patch */ 8:
            endpoint = "";
            break;
        }
      } else {
        endpoint = "";
      }
      if (exit$1 === 3) {
        endpoint = id !== undefined ? "routing/" + id + "" : "routing";
      }
      break;
    case /* MERCHANT_ACCOUNT */ 2:
      endpoint = "accounts/" + merchantId + "";
      break;
    case /* REFUNDS */ 4:
      if (typeof methodType === "number" && methodType < 3) {
        switch (methodType) {
          case /* Get */ 0:
            endpoint = id !== undefined ? "refunds/" + id + "" : "";
            break;
          case /* Head */ 1:
            endpoint = "";
            break;
          case /* Post */ 2:
            endpoint = id !== undefined ? "refunds/list" : "refunds";
            break;
        }
      } else {
        endpoint = "";
      }
      break;
    case /* DISPUTES */ 5:
      endpoint =
        methodType === 0
          ? id !== undefined
            ? "disputes/" + id + ""
            : "disputes/list?limit=10000"
          : "";
      break;
    case /* PAYMENT */ 3:
    case /* SETTINGS */ 10:
      endpoint = "";
      break;
    case /* ONBOARDING */ 11:
      endpoint = "onboarding";
      break;
    case /* API_KEYS */ 12:
      if (typeof methodType === "number") {
        switch (methodType) {
          case /* Get */ 0:
            endpoint = "api_keys/" + merchantId + "/list";
            break;
          case /* Post */ 2:
            endpoint =
              id !== undefined
                ? "api_keys/" + merchantId + "/" + id + ""
                : "api_keys/" + merchantId + "";
            break;
          case /* Delete */ 4:
            endpoint =
              "api_keys/" + merchantId + "/" + Core__Option.getOr(id, "") + "";
            break;
          case /* Head */ 1:
          case /* Put */ 3:
          case /* Connect */ 5:
          case /* Options */ 6:
          case /* Trace */ 7:
          case /* Patch */ 8:
            endpoint = "";
            break;
        }
      } else {
        endpoint = "";
      }
      break;
    case /* ORDERS */ 13:
      if (typeof methodType === "number" && methodType < 3) {
        switch (methodType) {
          case /* Get */ 0:
            endpoint =
              id !== undefined
                ? queryParamerters !== undefined
                  ? "payments/" + id + "?" + queryParamerters + ""
                  : "payments/" + id + ""
                : queryParamerters !== undefined
                  ? "payments/list?" + queryParamerters + ""
                  : "payments/list?limit=100";
            break;
          case /* Head */ 1:
            endpoint = "";
            break;
          case /* Post */ 2:
            endpoint = "payments/list";
            break;
        }
      } else {
        endpoint = "";
      }
      break;
    case /* DEFAULT_FALLBACK */ 14:
      endpoint = "routing/default";
      break;
    case /* CHANGE_PASSWORD */ 15:
      endpoint = "user/change_password";
      break;
    case /* ANALYTICS_PAYMENTS */ 6:
    case /* ANALYTICS_DISPUTES */ 7:
    case /* ANALYTICS_USER_JOURNEY */ 8:
    case /* ANALYTICS_REFUNDS */ 9:
    case /* ANALYTICS_SYSTEM_METRICS */ 16:
      exit = 2;
      break;
    case /* PAYMENT_LOGS */ 17:
      endpoint =
        methodType === 0
          ? id !== undefined
            ? "analytics/v1/api_event_logs?type=Payment&payment_id=" + id + ""
            : "analytics/v1/event-logs"
          : "";
      break;
    case /* SDK_EVENT_LOGS */ 18:
      endpoint = "analytics/v1/sdk_event_logs";
      break;
    case /* WEBHOOKS_EVENT_LOGS */ 19:
      endpoint =
        id !== undefined
          ? "analytics/v1/outgoing_webhook_event_logs?payment_id=" + id + ""
          : "";
      break;
    case /* CONNECTOR_EVENT_LOGS */ 20:
      endpoint =
        id !== undefined
          ? "analytics/v1/connector_event_logs?type=Payment&payment_id=" +
            id +
            ""
          : "";
      break;
    case /* GENERATE_SAMPLE_DATA */ 21:
      endpoint = "user/sample_data";
      break;
    case /* USERS */ 22:
      var userUrl = "user";
      endpoint =
        userType === "VERIFY_EMAILV2"
          ? "" + userUrl + "/v2/verify_email"
          : userType === "MERCHANT_DATA"
            ? "" + userUrl + "/data"
            : userType === "RESEND_INVITE" || userType === "INVITE_MULTIPLE"
              ? "" + userUrl + "/user/" + userType.toLowerCase() + ""
              : userType === "USER_DELETE"
                ? "" + userUrl + "/user/delete"
                : userType === "SIGNINV2"
                  ? "" + userUrl + "/v2/signin"
                  : userType === "ACCEPT_INVITE"
                    ? "" + userUrl + "/user/invite/accept"
                    : userType === "USER_DATA"
                      ? "" + userUrl + "/data"
                      : userType === "USER_UPDATE"
                        ? "" + userUrl + "/update"
                        : userType === "CREATE_CUSTOM_ROLE" ||
                            userType === "GET_PERMISSIONS"
                          ? "" + userUrl + "/role"
                          : userType === "SWITCH_MERCHANT"
                            ? methodType === 0
                              ? "" + userUrl + "/switch/list"
                              : "" + userUrl + "/" + userType.toLowerCase() + ""
                            : userType === "CONNECT_ACCOUNT"
                              ? "" + userUrl + "/connect_account"
                              : userType === "UPDATE_ROLE"
                                ? "" +
                                  userUrl +
                                  "/user/" +
                                  userType.toLowerCase() +
                                  ""
                                : userType === "NONE"
                                  ? ""
                                  : "" +
                                    userUrl +
                                    "/" +
                                    userType.toLowerCase() +
                                    "";
      break;
    case /* RECON */ 23:
      endpoint = "recon/" + reconType.toLowerCase() + "";
      break;
    case /* INTEGRATION_DETAILS */ 24:
      endpoint = "user/get_sandbox_integration_details";
      break;
    case /* CONNECTOR */ 0:
    case /* FRAUD_RISK_MANAGEMENT */ 25:
      exit = 1;
      break;
    case /* USER_MANAGEMENT */ 26:
      var userUrl$1 = "user";
      switch (userRoleTypes) {
        case /* USER_LIST */ 0:
          endpoint = "" + userUrl$1 + "/user/list";
          break;
        case /* ROLE_LIST */ 1:
          endpoint = "" + userUrl$1 + "/role/list";
          break;
        case /* ROLE_ID */ 2:
          endpoint =
            id !== undefined ? "" + userUrl$1 + "/role/" + id + "" : "";
          break;
        case /* NONE */ 3:
          endpoint = "";
          break;
      }
      break;
    case /* TEST_LIVE_PAYMENT */ 27:
      endpoint = "test_payment";
      break;
    case /* THREE_DS */ 28:
      endpoint = "routing/decision";
      break;
    case /* BUSINESS_PROFILE */ 29:
      endpoint =
        id !== undefined
          ? "account/" + merchantId + "/business_profile/" + id + ""
          : "account/" + merchantId + "/business_profile";
      break;
    case /* VERIFY_APPLE_PAY */ 30:
      endpoint = "verify/apple_pay";
      break;
    case /* PAYMENT_REPORT */ 31:
      endpoint = "analytics/v1/report/payments";
      break;
    case /* REFUND_REPORT */ 32:
      endpoint = "analytics/v1/report/refunds";
      break;
    case /* DISPUTE_REPORT */ 33:
      endpoint = "analytics/v1/report/dispute";
      break;
    case /* PAYPAL_ONBOARDING */ 34:
      endpoint = "connector_onboarding";
      break;
    case /* SURCHARGE */ 35:
      endpoint = "routing/decision/surcharge";
      break;
    case /* CUSTOMERS */ 36:
      endpoint =
        methodType === 0
          ? id !== undefined
            ? "customers/" + id + ""
            : "customers/list?limit=10000"
          : "";
      break;
    case /* ACCEPT_DISPUTE */ 37:
      endpoint = id !== undefined ? "disputes/accept/" + id + "" : "disputes";
      break;
    case /* DISPUTES_ATTACH_EVIDENCE */ 38:
      endpoint =
        id !== undefined ? "disputes/evidence/" + id + "" : "disputes/evidence";
      break;
    case /* PAYOUT_DEFAULT_FALLBACK */ 39:
      endpoint = "routing/payouts/default";
      break;
    case /* PAYOUT_ROUTING */ 40:
      var exit$2 = 0;
      if (typeof methodType === "number") {
        switch (methodType) {
          case /* Post */ 2:
            endpoint =
              id !== undefined
                ? "routing/payouts/" + id + "/activate"
                : "routing/payouts";
            break;
          case /* Get */ 0:
          case /* Put */ 3:
            exit$2 = 3;
            break;
          case /* Head */ 1:
          case /* Delete */ 4:
          case /* Connect */ 5:
          case /* Options */ 6:
          case /* Trace */ 7:
          case /* Patch */ 8:
            endpoint = "";
            break;
        }
      } else {
        endpoint = "";
      }
      if (exit$2 === 3) {
        endpoint = id !== undefined ? "routing/" + id + "" : "routing/payouts";
      }
      break;
    case /* GLOBAL_SEARCH */ 41:
      endpoint =
        methodType === 2
          ? id !== undefined
            ? "analytics/v1/search/" + id + ""
            : "analytics/v1/search"
          : "";
      break;
    case /* PAYMENT_METHOD_CONFIG */ 42:
      endpoint = "payment_methods/filter";
      break;
  }
  switch (exit) {
    case 1:
      var exit$3 = 0;
      if (typeof methodType === "number") {
        switch (methodType) {
          case /* Get */ 0:
            endpoint =
              id !== undefined
                ? "" + connectorBaseURL + "/" + id + ""
                : connectorBaseURL;
            break;
          case /* Post */ 2:
          case /* Delete */ 4:
            exit$3 = 3;
            break;
          case /* Head */ 1:
          case /* Put */ 3:
          case /* Connect */ 5:
          case /* Options */ 6:
          case /* Trace */ 7:
          case /* Patch */ 8:
            endpoint = "";
            break;
        }
      } else {
        endpoint = "";
      }
      if (exit$3 === 3) {
        endpoint =
          connector !== undefined
            ? "account/connectors/verify"
            : id !== undefined
              ? "" + connectorBaseURL + "/" + id + ""
              : connectorBaseURL;
      }
      break;
    case 2:
      endpoint =
        methodType === 0 && id !== undefined
          ? "analytics/v1/" + id + "/info"
          : "";
      break;
  }
  return "" + window._env_.apiBaseUrl + "/" + endpoint + "";
}

var sessionExpired = {
  contents: false,
};

async function handleLogout(
  fetchApi,
  setAuthStatus,
  setIsSidebarExpanded,
  clearRecoilValue,
) {
  try {
    Curry._1(setAuthStatus, /* LoggedOut */ 0);
    Curry._1(setIsSidebarExpanded, function (param) {
      return false;
    });
    Curry._1(clearRecoilValue, undefined);
    RescriptReactRouter.push(HSwitchGlobalVars.appendDashboardPath("/login"));
    var logoutUrl = getURL(
      /* USERS */ 22,
      /* Post */ 2,
      undefined,
      undefined,
      "SIGNOUT",
      undefined,
      undefined,
      undefined,
      undefined,
    );
    await Curry._8(
      fetchApi,
      logoutUrl,
      undefined,
      undefined,
      undefined,
      /* Post */ 2,
      undefined,
      undefined,
      undefined,
    );
    localStorage.clear();
    return;
  } catch (exn) {
    localStorage.clear();
    return;
  }
}

async function responseHandler(
  res,
  showToast,
  showErrorToast,
  showPopUp,
  isPlayground,
  popUpCallBack,
) {
  var json;
  try {
    json = await Fetch.$$Response.json(res);
  } catch (exn) {
    json = null;
  }
  var responseStatus = res.status;
  if (responseStatus === 200) {
    return json;
  }
  var errorDict = LogicUtils.getObj(
    LogicUtils.getDictFromJsonObject(json),
    "error",
    {},
  );
  var errorStringifiedJson = JSON.stringify(errorDict);
  if (isPlayground && responseStatus === 403) {
    Curry._1(popUpCallBack, undefined);
  } else if (showErrorToast) {
    var exit = 0;
    switch (responseStatus) {
      case 401:
        if (!sessionExpired.contents) {
          Curry._8(
            showToast,
            "Session Expired",
            /* ToastWarning */ 1,
            undefined,
            false,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          RescriptReactRouter.push(
            HSwitchGlobalVars.appendDashboardPath("/login"),
          );
          sessionExpired.contents = true;
        }
        break;
      case 402:
        exit = 1;
        break;
      case 403:
        Curry._1(showPopUp, {
          heading: "Access Forbidden",
          description: HSwitchUtils.noAccessControlText,
          popUpType: [/* Warning */ 4, /* WithIcon */ 0],
          handleConfirm: {
            text: "Close",
            onClick: function (param) {},
          },
        });
        break;
      default:
        exit = 1;
    }
    if (exit === 1) {
      Curry._8(
        showToast,
        LogicUtils.getString(errorDict, "message", "Error Occured"),
        /* ToastError */ 0,
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  }
  return Js_exn.raiseError(errorStringifiedJson);
}

function catchHandler(
  err,
  showErrorToast,
  showToast,
  isPlayground,
  popUpCallBack,
) {
  var msg = err.message;
  if (msg !== undefined) {
    return Js_exn.raiseError(msg);
  } else {
    if (isPlayground) {
      Curry._1(popUpCallBack, undefined);
    } else if (showErrorToast) {
      Curry._8(
        showToast,
        "Something Went Wrong",
        /* ToastError */ 0,
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return Js_exn.raiseError("Failed to Fetch");
  }
}

function useGetMethod(showErrorToastOpt, param) {
  var showErrorToast =
    showErrorToastOpt !== undefined ? showErrorToastOpt : true;
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var showToast = ToastState.useShowToast(undefined);
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match[1];
  var match$1 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarExpanded = match$1.setIsSidebarExpanded;
  var isPlayground = HSLocalStorage.getIsPlaygroundFromLocalStorage(undefined);
  var clearRecoilValue = ClearRecoilValueHook.useClearRecoilValue(undefined);
  var popUpCallBack = function (param) {
    Curry._1(showPopUp, {
      heading: "Sign Up to Access All Features!",
      description:
        "To unlock the potential and experience the full range of capabilities, simply sign up today. Join our community of explorers and gain access to an enhanced world of possibilities",
      popUpType: [/* Warning */ 4, /* WithIcon */ 0],
      handleConfirm: {
        text: "Sign up Now",
        onClick: function (param) {
          handleLogout(
            fetchApi,
            setAuthStatus,
            setIsSidebarExpanded,
            clearRecoilValue,
          );
        },
      },
    });
  };
  return async function (url) {
    try {
      var res = await Curry._8(
        fetchApi,
        url,
        undefined,
        undefined,
        undefined,
        /* Get */ 0,
        undefined,
        undefined,
        undefined,
      );
      return await responseHandler(
        res,
        showToast,
        showErrorToast,
        showPopUp,
        isPlayground,
        popUpCallBack,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Curry._2(
          catchHandler(
            e._1,
            showErrorToast,
            showToast,
            isPlayground,
            popUpCallBack,
          ),
          /* Get */ 0,
          showPopUp,
        );
      } else {
        return Js_exn.raiseError("Something went wrong");
      }
    }
  };
}

function useUpdateMethod(showErrorToastOpt, param) {
  var showErrorToast =
    showErrorToastOpt !== undefined ? showErrorToastOpt : true;
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var showToast = ToastState.useShowToast(undefined);
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match[1];
  var isPlayground = HSLocalStorage.getIsPlaygroundFromLocalStorage(undefined);
  var match$1 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarExpanded = match$1.setIsSidebarExpanded;
  var clearRecoilValue = ClearRecoilValueHook.useClearRecoilValue(undefined);
  var popUpCallBack = function (param) {
    Curry._1(showPopUp, {
      heading: "Sign Up to Access All Features!",
      description:
        "To unlock the potential and experience the full range of capabilities, simply sign up today. Join our community of explorers and gain access to an enhanced world of possibilities",
      popUpType: [/* Warning */ 4, /* WithIcon */ 0],
      handleConfirm: {
        text: "Sign up Now",
        onClick: function (param) {
          handleLogout(
            fetchApi,
            setAuthStatus,
            setIsSidebarExpanded,
            clearRecoilValue,
          );
        },
      },
    });
  };
  return async function (
    url,
    body,
    method,
    bodyFormData,
    headersOpt,
    contentTypeOpt,
    param,
  ) {
    var headers =
      headersOpt !== undefined ? Caml_option.valFromOption(headersOpt) : {};
    var contentType =
      contentTypeOpt !== undefined
        ? contentTypeOpt
        : /* Headers */ {
            _0: "application/json",
          };
    try {
      var res = await Curry._8(
        fetchApi,
        url,
        JSON.stringify(body),
        Caml_option.some(bodyFormData),
        Caml_option.some(headers),
        method,
        undefined,
        contentType,
        undefined,
      );
      return await responseHandler(
        res,
        showToast,
        showErrorToast,
        showPopUp,
        isPlayground,
        popUpCallBack,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Curry._1(
          catchHandler(
            e._1,
            showErrorToast,
            showToast,
            isPlayground,
            popUpCallBack,
          ),
          method,
        );
      } else {
        return Js_exn.raiseError("Something went wrong");
      }
    }
  };
}

export {
  JsonException,
  getURL,
  sessionExpired,
  handleLogout,
  responseHandler,
  catchHandler,
  useGetMethod,
  useUpdateMethod,
};
/* react Not a pure module */
