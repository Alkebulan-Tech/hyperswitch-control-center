// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderUtils from "../../components/OrderUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as CustomersEntity from "./CustomersEntity.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as BreadCrumbNavigation from "../../genericUtils/BreadCrumbNavigation.bs.js";

function ShowCustomers$CustomerInfo$Details(props) {
  var children = props.children;
  var bgColor = props.bgColor;
  var widthClass = props.widthClass;
  var justifyClassName = props.justifyClassName;
  var excludeColKeys = props.excludeColKeys;
  var getCell = props.getCell;
  var getHeading = props.getHeading;
  var data = props.data;
  var excludeColKeys$1 = excludeColKeys !== undefined ? excludeColKeys : [];
  var justifyClassName$1 =
    justifyClassName !== undefined ? justifyClassName : "justify-start";
  var widthClass$1 = widthClass !== undefined ? widthClass : "w-1/4";
  var bgColor$1 =
    bgColor !== undefined
      ? bgColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  return React.createElement(
    OrderUtils.Section.make,
    {
      children: null,
      customCssClass:
        "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 " +
        bgColor$1 +
        " rounded-md p-5",
    },
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-wrap " +
            justifyClassName$1 +
            " dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
        },
        props.detailsFields.map(function (colType, i) {
          return React.createElement(UIUtils.RenderIf.make, {
            condition: !excludeColKeys$1.includes(colType),
            children: React.createElement(
              "div",
              {
                key: i.toString(),
                className: "flex " + widthClass$1 + " items-center",
              },
              React.createElement(OrderUtils.DisplayKeyValueParams.make, {
                heading: Curry._1(getHeading, colType),
                value: Curry._2(getCell, data, colType),
                customMoneyStyle: "!font-normal !text-sm",
                labelMargin: "!py-0 mt-2",
                textColor: "!font-normal !text-jp-gray-700",
                overiddingHeadingStyles: "text-black text-sm font-medium",
              }),
            ),
          });
        }),
      ),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: Core__Option.isSome(children),
      children: Core__Option.getOr(children, null),
    }),
  );
}

var Details = {
  make: ShowCustomers$CustomerInfo$Details,
};

function ShowCustomers$CustomerInfo(props) {
  var customerData = CustomersEntity.itemToObjMapper(props.dict);
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "div",
      {
        className:
          "font-bold text-fs-16 dark:text-white dark:text-opacity-75 mt-4 mb-4",
      },
      "Summary",
    ),
    React.createElement(ShowCustomers$CustomerInfo$Details, {
      data: customerData,
      getHeading: CustomersEntity.getHeading,
      getCell: CustomersEntity.getCell,
      detailsFields: CustomersEntity.allColumns,
    }),
  );
}

var CustomerInfo = {
  Details: Details,
  make: ShowCustomers$CustomerInfo,
};

function ShowCustomers(props) {
  var id = props.id;
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return null;
  });
  var setCustomersData = match$1[1];
  var fetchCustomersData = async function (param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var customersUrl = APIUtils.getURL(
        /* CUSTOMERS */ 36,
        /* Get */ 0,
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await Curry._1(fetchDetails, customersUrl);
      Curry._1(setCustomersData, function (param) {
        return response;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    fetchCustomersData(undefined);
  }, []);
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col overflow-scroll",
        },
        React.createElement(
          "div",
          {
            className: "mb-4 flex justify-between",
          },
          React.createElement(
            "div",
            {
              className: "flex items-center",
            },
            React.createElement(
              "div",
              undefined,
              React.createElement(PageUtils.PageHeading.make, {
                title: "Customers",
              }),
              React.createElement(BreadCrumbNavigation.make, {
                path: [
                  {
                    title: "Customers",
                    link: "/customers",
                  },
                ],
                currentPageTitle: id,
                cursorStyle: "cursor-pointer",
              }),
            ),
            React.createElement("div", undefined),
          ),
        ),
        React.createElement(ShowCustomers$CustomerInfo, {
          dict: LogicUtils.getDictFromJsonObject(match$1[0]),
        }),
      ),
    ),
    screenState: match[0],
  });
}

var make = ShowCustomers;

export { CustomerInfo, make };
/* react Not a pure module */
