// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Navbar from "../../components/Navbar.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InviteUsers from "./InviteUsers.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as ProviderHelper from "../../entryPoints/Provider/ProviderHelper.bs.js";
import * as UserRoleEntity from "./UserRoleEntity.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as React$1 from "@headlessui/react";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as DefaultLandingPage from "../Utils/DefaultLandingPage.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as UserManagementUtils from "./UserManagementUtils.bs.js";
import * as BreadCrumbNavigation from "../../genericUtils/BreadCrumbNavigation.bs.js";

function ShowUserData$UserUtilsPopover(props) {
  var setIsUpdateRoleSelected = props.setIsUpdateRoleSelected;
  var infoValue = props.infoValue;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var merchantEmail = HSLocalStorage.getFromMerchantDetails("email");
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var deleteUser = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "USER_DELETE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["email", infoValue.email],
      ]);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Delete */ 4,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "User has been successfully deleted.",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/users"),
      );
    } catch (exn) {
      return;
    }
  };
  return React.createElement(UIUtils.RenderIf.make, {
    condition: infoValue.email !== merchantEmail,
    children: React.createElement(React$1.Popover, {
      className: "relative inline-block text-left",
      children: function (popoverProps) {
        var openClasses = popoverProps.open
          ? "group border py-2 rounded-md inline-flex items-center text-base font-medium hover:text-opacity-100 focus:outline-none"
          : "text-opacity-90 group border py-2 rounded-md inline-flex items-center text-base font-medium hover:text-opacity-100 focus:outline-none";
        return React.createElement(
          React.Fragment,
          undefined,
          React.createElement(React$1.Popover.Button, {
            className: "" + openClasses + " border-none",
            children: function (buttonProps) {
              return React.createElement(Icon.make, {
                name: "menu-option",
                size: 28,
              });
            },
          }),
          React.createElement(React$1.Transition, {
            as: "span",
            enter: "transition ease-out duration-200",
            enterFrom: "opacity-0 translate-y-1",
            enterTo: "opacity-100 translate-y-0",
            leave: "transition ease-in duration-150",
            leaveFrom: "opacity-100 translate-y-0",
            leaveTo: "opacity-0 translate-y-1",
            children: Caml_option.some(
              React.createElement(React$1.Popover.Panel, {
                className: "absolute !z-30 right-2",
                children: function (panelProps) {
                  return React.createElement(
                    "div",
                    {
                      className:
                        "relative flex flex-col py-3 rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 w-40",
                    },
                    React.createElement(Navbar.MenuOption.make, {
                      text: "Update role",
                      onClick: function (param) {
                        Curry._1(panelProps.close, undefined);
                        Curry._1(setIsUpdateRoleSelected, function (param) {
                          return true;
                        });
                      },
                    }),
                    React.createElement(UIUtils.RenderIf.make, {
                      condition: infoValue.role_id !== "org_admin",
                      children: React.createElement(Navbar.MenuOption.make, {
                        text: "Delete user",
                        onClick: function (param) {
                          Curry._1(panelProps.close, undefined);
                          Curry._1(showPopUp, {
                            heading:
                              "Are you sure you want to delete this user?",
                            description:
                              "This action cannot be undone. Deleting the user will permanently remove all associated data from this account. Press Confirm to delete.",
                            popUpType: [/* Warning */ 4, /* WithIcon */ 0],
                            handleCancel: {
                              text: "Back",
                            },
                            handleConfirm: {
                              text: "Confirm",
                              onClick: function (param) {
                                deleteUser(undefined);
                              },
                            },
                          });
                        },
                      }),
                    }),
                  );
                },
              }),
            ),
          }),
        );
      },
    }),
  });
}

var UserUtilsPopover = {
  make: ShowUserData$UserUtilsPopover,
};

function ShowUserData$UserHeading(props) {
  var newRoleSelected = props.newRoleSelected;
  var setIsUpdateRoleSelected = props.setIsUpdateRoleSelected;
  var isUpdateRoleSelected = props.isUpdateRoleSelected;
  var infoValue = props.infoValue;
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var status = UserRoleEntity.statusToVariantMapper(infoValue.status);
  var match = React.useState(function () {
    return /* Normal */ 0;
  });
  var setButtonState = match[1];
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setPermissionInfo = match$1.setPermissionInfo;
  var permissionInfo = match$1.permissionInfo;
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var resendInvite = async function (param) {
    try {
      Curry._1(setButtonState, function (param) {
        return /* Loading */ 1;
      });
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "RESEND_INVITE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = Object.fromEntries([["email", infoValue.email]]);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Invite resend. Please check your email.",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    } catch (exn) {
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  var updatePermissionInfoOnBack = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* USER_MANAGEMENT */ 26,
        /* Get */ 0,
        Caml_option.some(infoValue.role_id),
        undefined,
        undefined,
        /* ROLE_ID */ 2,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._1(fetchDetails, url);
      var defaultList =
        UserManagementUtils.defaultPresentInInfoList(permissionInfo);
      Curry._1(setPermissionInfo, function (param) {
        return defaultList;
      });
      var updatedPermissionListForGivenRole =
        UserManagementUtils.updatePresentInInfoList(
          defaultList,
          UserManagementUtils.getArrayOfPermissionData(res),
        );
      Curry._1(setPermissionInfo, function (param) {
        return updatedPermissionListForGivenRole;
      });
      return Curry._1(setIsUpdateRoleSelected, function (param) {
        return false;
      });
    } catch (exn) {
      return RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/users"),
      );
    }
  };
  var updateRole = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "UPDATE_ROLE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["email", infoValue.email],
        ["role_id", newRoleSelected],
      ]);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Role successfully updated!",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/users"),
      );
    } catch (exn) {
      return;
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex justify-between flex-wrap",
    },
    React.createElement(PageUtils.PageHeading.make, {
      title: infoValue.name,
      subTitle: infoValue.email,
      customTitleStyle: "!p-0",
      isTag: true,
      tagText: infoValue.role_name.toUpperCase(),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: isUpdateRoleSelected,
      children: React.createElement(
        "div",
        {
          className: "flex items-center gap-2",
        },
        React.createElement(Button.make, {
          text: "Back",
          buttonType: /* Secondary */ 1,
          onClick: function (param) {
            if (newRoleSelected === infoValue.role_id) {
              return Curry._1(setIsUpdateRoleSelected, function (param) {
                return false;
              });
            } else {
              updatePermissionInfoOnBack(undefined);
              return;
            }
          },
          customButtonStyle: "!p-3",
        }),
        React.createElement(Button.make, {
          text: "Update role",
          buttonType: /* Primary */ 0,
          onClick: function (param) {
            updateRole(undefined);
          },
          customButtonStyle: "!p-3",
        }),
      ),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: !isUpdateRoleSelected,
      children: React.createElement(
        "div",
        {
          className: "flex items-center gap-4",
        },
        React.createElement(
          "div",
          {
            className: "font-semibold text-green-700",
          },
          status !== 1
            ? infoValue.status.toUpperCase()
            : "INVITE SENT".toUpperCase(),
        ),
        React.createElement(UIUtils.RenderIf.make, {
          condition: userPermissionJson.usersManage === /* Access */ 1,
          children: React.createElement(
            "div",
            {
              className: "flex items-center gap-2",
            },
            React.createElement(UIUtils.RenderIf.make, {
              condition: status !== /* Active */ 0,
              children: React.createElement(Button.make, {
                buttonState: match[0],
                text: "Resend Invite",
                buttonType: /* Primary */ 0,
                onClick: function (param) {
                  resendInvite(undefined);
                },
                customButtonStyle: "!px-2",
              }),
            }),
            React.createElement(ShowUserData$UserUtilsPopover, {
              infoValue: infoValue,
              setIsUpdateRoleSelected: setIsUpdateRoleSelected,
            }),
          ),
        }),
      ),
    }),
  );
}

var UserHeading = {
  make: ShowUserData$UserHeading,
};

function ShowUserData(props) {
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
    return null;
  });
  var setRoleData = match[1];
  var roleData = match[0];
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setPermissionInfo = match$1.setPermissionInfo;
  var permissionInfo = match$1.permissionInfo;
  var match$2 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$2[1];
  var match$3 = React.useState(function () {
    return false;
  });
  var isUpdateRoleSelected = match$3[0];
  var match$4 = React.useState(function () {
    return "";
  });
  var match$5 = React.useState(function () {
    return UserRoleEntity.itemToObjMapperForUser({});
  });
  var setCurrentSelectedUser = match$5[1];
  var currentSelectedUser = match$5[0];
  var getRoleForUser = async function (role_id) {
    try {
      var url = APIUtils.getURL(
        /* USER_MANAGEMENT */ 26,
        /* Get */ 0,
        Caml_option.some(role_id),
        undefined,
        undefined,
        /* ROLE_ID */ 2,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._1(fetchDetails, "" + url + "?groups=true");
      Curry._1(setRoleData, function (param) {
        return res;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var getPermissionInfo = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Get */ 0,
        undefined,
        undefined,
        "PERMISSION_INFO",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._1(fetchDetails, "" + url + "?groups=true");
      var permissionInfoValue = LogicUtils.getArrayDataFromJson(
        res,
        ProviderHelper.itemToObjMapperForGetInfo,
      );
      return Curry._1(setPermissionInfo, function (param) {
        return permissionInfoValue;
      });
    } catch (exn) {
      return;
    }
  };
  var getUserData = async function (param) {
    try {
      var userDataURL = APIUtils.getURL(
        /* USER_MANAGEMENT */ 26,
        /* Get */ 0,
        undefined,
        undefined,
        undefined,
        /* USER_LIST */ 0,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._1(fetchDetails, userDataURL);
      var userData = LogicUtils.getArrayDataFromJson(
        res,
        UserRoleEntity.itemToObjMapperForUser,
      );
      var localCurrentSelectedUser = Core__Array.reduce(
        userData.map(function (prim) {
          return prim;
        }),
        UserRoleEntity.itemToObjMapperForUser({}),
        function (acc, ele) {
          if (
            Core__Option.getOr(
              LogicUtils.getDictFromUrlSearchParams(url.search)["email"],
              "",
            ).includes(ele.email)
          ) {
            return ele;
          } else {
            return acc;
          }
        },
      );
      Curry._1(setCurrentSelectedUser, function (param) {
        return localCurrentSelectedUser;
      });
      if (LogicUtils.isNonEmptyString(localCurrentSelectedUser.role_id)) {
        getRoleForUser(localCurrentSelectedUser.role_id);
        return;
      } else {
        return Curry._1(setScreenState, function (param) {
          return /* Custom */ 2;
        });
      }
    } catch (exn) {
      return;
    }
  };
  React.useEffect(function () {
    getUserData(undefined);
    if (permissionInfo.length === 0) {
      getPermissionInfo(undefined);
    }
  }, []);
  React.useEffect(
    function () {
      var defaultList =
        UserManagementUtils.defaultPresentInInfoList(permissionInfo);
      Curry._1(setPermissionInfo, function (param) {
        return defaultList;
      });
      var updatedPermissionListForGivenRole =
        UserManagementUtils.updatePresentInInfoList(
          defaultList,
          UserManagementUtils.getArrayOfPermissionData(roleData),
        );
      Curry._1(setPermissionInfo, function (param) {
        return updatedPermissionListForGivenRole;
      });
    },
    [roleData],
  );
  var customUrlErrorScreen = React.createElement(DefaultLandingPage.make, {
    title: "Oops, we hit a little bump on the road!",
    subtitle:
      "We apologize for the inconvenience, but it seems like we encountered a hiccup while processing your request.",
    customStyle: "py-16 !m-0 h-80-vh",
    isButton: true,
    buttonText: "Back",
    onClickHandler: function (param) {
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/users"),
      );
    },
    overriddingStylesTitle: "text-2xl font-semibold",
    overriddingStylesSubtitle: "!text-sm text-grey-700 opacity-50 !w-3/4",
  });
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "h-full",
        },
        React.createElement(BreadCrumbNavigation.make, {
          path: [
            {
              title: "Users",
              link: "/users",
            },
          ],
          currentPageTitle: currentSelectedUser.name,
        }),
        React.createElement(
          "div",
          {
            className: "h-4/5 bg-white mt-5 p-10 relative flex flex-col gap-8",
          },
          React.createElement(ShowUserData$UserHeading, {
            infoValue: currentSelectedUser,
            isUpdateRoleSelected: isUpdateRoleSelected,
            setIsUpdateRoleSelected: match$3[1],
            newRoleSelected: match$4[0],
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: !isUpdateRoleSelected,
            children: React.createElement(
              "div",
              {
                className:
                  "flex flex-col justify-between gap-12 show-scrollbar overflow-scroll",
              },
              permissionInfo.map(function (ele, index) {
                return JsxPPXReactSupport.createElementWithKey(
                  String(index),
                  UserManagementUtils.RolePermissionValueRenderer.make,
                  {
                    heading:
                      "" + LogicUtils.snakeToTitle(ele.module_) + " module",
                    description: ele.description,
                    isPermissionAllowed: ele.isPermissionAllowed,
                  },
                );
              }),
            ),
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: isUpdateRoleSelected,
            children: React.createElement(InviteUsers.make, {
              isInviteUserFlow: false,
              setNewRoleSelected: match$4[1],
              currentRole: currentSelectedUser.role_id,
            }),
          }),
        ),
      ),
    ),
    screenState: match$2[0],
    customUI: Caml_option.some(customUrlErrorScreen),
  });
}

var make = ShowUserData;

export { UserUtilsPopover, UserHeading, make };
/* Icon Not a pure module */
