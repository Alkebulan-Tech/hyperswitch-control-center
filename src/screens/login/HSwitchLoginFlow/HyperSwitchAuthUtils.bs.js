// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as LocalStorage from "../../../libraries/LocalStorage.bs.js";
import * as ConfigContext from "../../../context/ConfigContext.bs.js";
import * as FramerMotion from "framer-motion";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../../Settings/MerchantAccountUtils.bs.js";

function HyperSwitchAuthUtils$TermsAndCondition(props) {
  return React.createElement(
    "div",
    {
      className: "text-center text-sm text-gray-300",
      id: "tc-text",
    },
    "By continuing, you agree to our ",
    React.createElement(
      "a",
      {
        className: "underline cursor-pointer",
        href: "https://hyperswitch.io/terms-of-services",
        target: "__blank",
      },
      "Terms of Service",
    ),
    " & ",
    React.createElement(
      "a",
      {
        className: "underline cursor-pointer",
        href: "https://hyperswitch.io/privacyPolicy",
        target: "__blank",
      },
      "Privacy Policy",
    ),
  );
}

var TermsAndCondition = {
  make: HyperSwitchAuthUtils$TermsAndCondition,
};

function flowTypeStrToVariantMapper(val) {
  if (val === undefined) {
    return /* ERROR */ 2;
  }
  switch (val) {
    case "dashboard_entry":
      return /* DASHBOARD_ENTRY */ 1;
    case "merchant_select":
      return /* MERCHANT_SELECT */ 0;
    default:
      return /* ERROR */ 2;
  }
}

var emailField = FormRenderer.makeFieldInfo(
  "Email",
  undefined,
  "email",
  function (input, param) {
    return InputFields.textInput(
      {
        name: input.name,
        onBlur: input.onBlur,
        onChange: function ($$event) {
          Curry._1(input.onChange, $$event.target.value.trim());
        },
        onFocus: input.onFocus,
        value: input.value,
        checked: input.checked,
      },
      "Enter your Email",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      "off",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter your Email",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  false,
  undefined,
  undefined,
  undefined,
);

var arg = Caml_option.some(
  React.createElement(Icon.make, {
    name: "password-lock",
    size: 13,
  }),
);

var createPasswordField = FormRenderer.makeFieldInfo(
  "Password",
  undefined,
  "create_password",
  function (param) {
    return function (param$1) {
      var param$2;
      return InputFields.passwordMatchField(param, param$1, arg, param$2);
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter your Password",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  "password",
  false,
  undefined,
  undefined,
  undefined,
);

var arg$1 = Caml_option.some(
  React.createElement(Icon.make, {
    name: "password-lock",
    size: 13,
  }),
);

var confirmPasswordField = FormRenderer.makeFieldInfo(
  "Confirm Password",
  undefined,
  "comfirm_password",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5 = "password";
      var param$6;
      var param$7;
      var param$8 = "off";
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        arg$1,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Re-enter your Password",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  "password",
  false,
  undefined,
  undefined,
  undefined,
);

var arg$2 = Caml_option.some(
  React.createElement(Icon.make, {
    name: "password-lock",
    size: 13,
  }),
);

var passwordField = FormRenderer.makeFieldInfo(
  "Password",
  undefined,
  "password",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5 = "password";
      var param$6;
      var param$7;
      var param$8 = "off";
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        arg$2,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter your Password",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  "password",
  false,
  undefined,
  undefined,
  undefined,
);

function getResetpasswordBodyJson(password, token) {
  return Object.fromEntries([
    ["password", password],
    ["token", token],
  ]);
}

function getEmailPasswordBody(email, password, country) {
  return Object.fromEntries([
    ["email", email],
    ["password", password],
    ["country", country],
  ]);
}

function getEmailBody(email, country, param) {
  var fields = [["email", email]];
  if (country !== undefined) {
    fields.push(["country", country]);
  }
  return Object.fromEntries(fields);
}

function parseResponseJson(json, email) {
  var valuesDict = Core__Option.getOr(Core__JSON.Decode.object(json), {});
  var verificationValue = Core__Option.getOr(
    LogicUtils.getOptionInt(valuesDict, "verification_days_left"),
    -1,
  );
  var flowType = LogicUtils.getOptionString(valuesDict, "flow_type");
  var flowTypeVal = flowType !== undefined ? flowType : null;
  if (
    Core__Option.isSome(flowType) &&
    flowTypeStrToVariantMapper(flowType) === /* MERCHANT_SELECT */ 0
  ) {
    LocalStorage.setItem(
      "accept_invite_data",
      Core__Option.getOr(
        JSON.stringify(
          LogicUtils.getArrayFromDict(valuesDict, "merchants", []),
        ),
        "",
      ),
    );
  }
  HSwitchUtils.setUserDetails("flow_type", flowTypeVal);
  HSwitchUtils.setMerchantDetails(
    "merchant_id",
    LogicUtils.getString(valuesDict, "merchant_id", ""),
  );
  HSwitchUtils.setMerchantDetails("email", email);
  HSwitchUtils.setMerchantDetails("verification", verificationValue.toString());
  HSwitchUtils.setUserDetails(
    "name",
    LogicUtils.getString(valuesDict, "name", ""),
  );
  HSwitchUtils.setUserDetails(
    "user_role",
    LogicUtils.getString(valuesDict, "user_role", ""),
  );
  return LogicUtils.getString(valuesDict, "token", "");
}

function validateForm(values, keys) {
  var valuesDict = LogicUtils.getDictFromJsonObject(values);
  var errors = {};
  keys.forEach(function (key) {
    var value = LogicUtils.getString(valuesDict, key, "");
    if (LogicUtils.isEmptyString(value)) {
      switch (key) {
        case "comfirm_password":
          errors[key] = "Please enter your Password Once Again";
          break;
        case "email":
          errors[key] = "Please enter your Email ID";
          break;
        case "create_password":
        case "password":
          errors[key] = "Please enter your Password";
          break;
        default:
          errors[key] =
            "" + LogicUtils.capitalizeString(key) + " cannot be empty";
      }
    }
    if (
      LogicUtils.isNonEmptyString(value) &&
      key === "email" &&
      HSwitchUtils.isValidEmail(value)
    ) {
      errors[key] = "Please enter valid Email ID";
    }
    MerchantAccountUtils.passwordKeyValidation(
      value,
      key,
      "create_password",
      errors,
    );
    MerchantAccountUtils.confirmPasswordCheck(
      value,
      key,
      "comfirm_password",
      "create_password",
      valuesDict,
      errors,
    );
  });
  return errors;
}

function useNote(authType, setAuthType, isMagicLinkEnabled) {
  var match = React.useContext(ConfigContext.configContext);
  var textColor = match.globalUIConfig.font.textColor;
  var getFooterLinkComponent = function (btnText, authType, path) {
    return React.createElement(
      "div",
      {
        className:
          "text-sm text-center " +
          textColor.primaryNormal +
          " cursor-pointer hover:underline underline-offset-2",
        onClick: function (param) {
          Curry._1(setAuthType, function (param) {
            return authType;
          });
          RescriptReactRouter.push(HSwitchGlobalVars.appendDashboardPath(path));
        },
      },
      btnText,
    );
  };
  var tmp;
  var exit = 0;
  switch (authType) {
    case /* LoginWithPassword */ 0:
      tmp = React.createElement(UIUtils.RenderIf.make, {
        condition: isMagicLinkEnabled,
        children: getFooterLinkComponent(
          "or sign in with an email",
          /* LoginWithEmail */ 1,
          "/login",
        ),
      });
      break;
    case /* LoginWithEmail */ 1:
      tmp = getFooterLinkComponent(
        "or sign in using password",
        /* LoginWithPassword */ 0,
        "/login",
      );
      break;
    case /* SignUP */ 2:
      tmp = React.createElement(UIUtils.RenderIf.make, {
        condition: isMagicLinkEnabled,
        children: React.createElement(
          "p",
          {
            className: "text-center text-sm",
          },
          "We'll be emailing you a magic link for a password-free experience, you can always choose to setup a password later.",
        ),
      });
      break;
    case /* ForgetPassword */ 5:
    case /* ForgetPasswordEmailSent */ 6:
    case /* ResendVerifyEmailSent */ 7:
    case /* MagicLinkEmailSent */ 8:
      exit = 1;
      break;
    case /* EmailVerify */ 3:
    case /* MagicLinkVerify */ 4:
    case /* ResetPassword */ 9:
    case /* ResendVerifyEmail */ 10:
    case /* LiveMode */ 11:
    case /* ActivateFromEmail */ 12:
      tmp = null;
      break;
  }
  if (exit === 1) {
    tmp = React.createElement(
      "div",
      {
        className: "w-full flex justify-center",
      },
      React.createElement(
        "div",
        {
          className:
            "text-sm text-center " +
            textColor.primaryNormal +
            " hover:underline underline-offset-2 cursor-pointer w-fit",
          onClick: function (param) {
            var backState;
            switch (authType) {
              case /* ForgetPasswordEmailSent */ 6:
                backState = /* ForgetPassword */ 5;
                break;
              case /* ResendVerifyEmailSent */ 7:
                backState = /* ResendVerifyEmail */ 10;
                break;
              case /* MagicLinkEmailSent */ 8:
                backState = /* SignUP */ 2;
                break;
              case /* LoginWithPassword */ 0:
              case /* LoginWithEmail */ 1:
              case /* SignUP */ 2:
              case /* EmailVerify */ 3:
              case /* MagicLinkVerify */ 4:
              case /* ForgetPassword */ 5:
              case /* ResetPassword */ 9:
              case /* ResendVerifyEmail */ 10:
              case /* LiveMode */ 11:
              case /* ActivateFromEmail */ 12:
                backState = /* LoginWithPassword */ 0;
                break;
            }
            Curry._1(setAuthType, function (param) {
              return backState;
            });
          },
        },
        "Cancel",
      ),
    );
  }
  return React.createElement(
    "div",
    {
      className: "w-96",
    },
    tmp,
  );
}

function HyperSwitchAuthUtils$PageFooterSection(props) {
  return React.createElement(
    "div",
    {
      className:
        "justify-center text-base flex flex-col md:flex-row md:gap-3 items-center py-5 md:py-7",
    },
    React.createElement(
      "div",
      {
        className: "flex items-center gap-2",
        id: "footer",
      },
      "An open-source initiative by ",
      React.createElement(
        "a",
        {
          href: "https://juspay.in/",
          target: "__blank",
        },
        React.createElement("img", {
          className: "h-3",
          src: "/icons/juspay-logo-dark.svg",
        }),
      ),
    ),
  );
}

var PageFooterSection = {
  make: HyperSwitchAuthUtils$PageFooterSection,
};

function HyperSwitchAuthUtils$ToggleLiveTestMode(props) {
  var customClass = props.customClass;
  var setAuthType = props.setAuthType;
  var setMode = props.setMode;
  var mode = props.mode;
  var authType = props.authType;
  var customClass$1 = customClass !== undefined ? customClass : "";
  var tmp;
  var exit = 0;
  if (authType !== 11 && authType >= 2) {
    tmp = null;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    var selectedtStyle = "border-b-2 inline-block relative -bottom-px py-2";
    var testModeStyles = mode === /* TestButtonMode */ 0 ? selectedtStyle : "";
    var liveModeStyles = mode === /* LiveButtonMode */ 1 ? selectedtStyle : "";
    tmp = React.createElement(FramerMotion.motion.div, {
      className: "w-full",
      layoutId: "toggle",
      transition: {
        duration: 0.3,
      },
      children: Caml_option.some(
        React.createElement(
          "div",
          {
            className: "w-full p-2 " + customClass$1 + " ",
          },
          React.createElement(
            "div",
            {
              className:
                "flex items-center border-b-1 border-grey-600 border-opacity-50 gap-4",
            },
            React.createElement(
              "div",
              {
                className:
                  "!shadow-none text-white text-start text-fs-16 font-semibold cursor-pointer flex justify-center",
                onClick: function (param) {
                  Curry._1(setMode, function (param) {
                    return /* TestButtonMode */ 0;
                  });
                  Curry._1(setAuthType, function (param) {
                    return /* LoginWithEmail */ 1;
                  });
                  window.location.replace(
                    HSwitchGlobalVars.getHostUrlWithBasePath,
                  );
                },
              },
              React.createElement(
                "span",
                {
                  className: "" + testModeStyles + "",
                },
                "Test Mode",
              ),
            ),
            React.createElement(
              "div",
              {
                className:
                  "!shadow-none text-white text-start text-fs-16 font-semibold cursor-pointer flex justify-center",
                onClick: function (param) {
                  Curry._1(setMode, function (param) {
                    return /* LiveButtonMode */ 1;
                  });
                  Curry._1(setAuthType, function (param) {
                    return /* LoginWithEmail */ 1;
                  });
                  window.location.replace(
                    HSwitchGlobalVars.getHostUrlWithBasePath,
                  );
                },
              },
              React.createElement(
                "span",
                {
                  className: "" + liveModeStyles + "",
                },
                "Live Mode",
              ),
            ),
          ),
        ),
      ),
    });
  }
  return React.createElement(React.Fragment, undefined, tmp);
}

var ToggleLiveTestMode = {
  make: HyperSwitchAuthUtils$ToggleLiveTestMode,
};

function HyperSwitchAuthUtils$Header(props) {
  var email = props.email;
  var setAuthType = props.setAuthType;
  var authType = props.authType;
  var match = React.useContext(ConfigContext.configContext);
  var textColor = match.globalUIConfig.font.textColor;
  var form = ReactFinalForm.useForm();
  var match$1 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var headerStyle =
    authType > 8 || authType < 5
      ? "flex flex-col"
      : "flex flex-col justify-center items-center";
  var cardHeaderText;
  switch (authType) {
    case /* LoginWithPassword */ 0:
    case /* LoginWithEmail */ 1:
      cardHeaderText = "Hey there, Welcome back!";
      break;
    case /* SignUP */ 2:
      cardHeaderText = "Welcome to Hyperswitch";
      break;
    case /* ForgetPassword */ 5:
      cardHeaderText = "Forgot Password?";
      break;
    case /* ForgetPasswordEmailSent */ 6:
    case /* ResendVerifyEmailSent */ 7:
    case /* MagicLinkEmailSent */ 8:
      cardHeaderText = "Please check your inbox";
      break;
    case /* ResetPassword */ 9:
      cardHeaderText = "Reset Password";
      break;
    case /* ResendVerifyEmail */ 10:
      cardHeaderText = "Resend Verify Email";
      break;
    case /* EmailVerify */ 3:
    case /* MagicLinkVerify */ 4:
    case /* LiveMode */ 11:
    case /* ActivateFromEmail */ 12:
      cardHeaderText = "";
      break;
  }
  var getNoteUI = function (info) {
    return React.createElement(
      "div",
      {
        className: "flex-col items-center justify-center",
      },
      React.createElement("div", undefined, info),
      React.createElement(
        "div",
        {
          className: "w-full flex justify-center text-center font-bold",
        },
        email,
      ),
    );
  };
  var getHeaderLink = function (prefix, authType, path, sufix) {
    return React.createElement(
      "div",
      {
        className: "flex text-sm items-center gap-2",
      },
      React.createElement(
        "div",
        {
          className: "text-grey-650",
        },
        prefix,
      ),
      React.createElement(
        "div",
        {
          className:
            "font-semibold " + textColor.primaryNormal + " cursor-pointer",
          id: "card-subtitle",
          onClick: function (param) {
            Curry._1(form.resetFieldState, "email");
            Curry._1(form.reset, {});
            Curry._1(setAuthType, function (param) {
              return authType;
            });
            RescriptReactRouter.push(
              HSwitchGlobalVars.appendDashboardPath(path),
            );
          },
        },
        sufix,
      ),
    );
  };
  var showInfoIcon = authType >= 9 ? authType === 10 : authType >= 5;
  var tmp;
  var exit = 0;
  switch (authType) {
    case /* LoginWithPassword */ 0:
    case /* LoginWithEmail */ 1:
      exit = 1;
      break;
    case /* SignUP */ 2:
      tmp = getHeaderLink(
        "Already using Hyperswitch?",
        match$1.email ? /* LoginWithEmail */ 1 : /* LoginWithPassword */ 0,
        "/login",
        "Sign in",
      );
      break;
    case /* ForgetPassword */ 5:
      tmp = React.createElement(
        "div",
        {
          className: "text-md text-center text-grey-650 w-full max-w-md",
        },
        "Enter your email address associated with your account, and we'll send you a link to reset your password.",
      );
      break;
    case /* ForgetPasswordEmailSent */ 6:
      tmp = getNoteUI("A reset password link has been sent to ");
      break;
    case /* ResendVerifyEmailSent */ 7:
      tmp = getNoteUI("A verify email link has been sent to ");
      break;
    case /* MagicLinkEmailSent */ 8:
      tmp = getNoteUI("A magic link has been sent to ");
      break;
    case /* EmailVerify */ 3:
    case /* MagicLinkVerify */ 4:
    case /* ResetPassword */ 9:
    case /* ResendVerifyEmail */ 10:
    case /* LiveMode */ 11:
    case /* ActivateFromEmail */ 12:
      tmp = null;
      break;
  }
  if (exit === 1) {
    tmp = match$1.isLiveMode
      ? null
      : getHeaderLink(
          "New to Hyperswitch?",
          /* SignUP */ 2,
          "/register",
          "Sign up",
        );
  }
  return React.createElement(
    "div",
    {
      className: "" + headerStyle + " gap-2 h-fit mb-7 w-96",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: showInfoIcon,
      children: React.createElement(
        "div",
        {
          className: "flex justify-center my-5",
        },
        authType >= 6
          ? authType >= 9
            ? null
            : React.createElement("img", {
                className: "w-48",
                src: "/assets/mail.svg",
              })
          : authType >= 5
            ? React.createElement("img", {
                className: "w-24",
                src: "/assets/key-password.svg",
              })
            : null,
      ),
    }),
    React.createElement(
      "h1",
      {
        className: "font-semibold text-xl md:text-2xl",
        id: "card-header",
      },
      cardHeaderText,
    ),
    tmp,
  );
}

var Header = {
  make: HyperSwitchAuthUtils$Header,
};

function errorMapper(dict) {
  return {
    code: LogicUtils.getString(dict, "code", "UR_00"),
    message: LogicUtils.getString(dict, "message", "something went wrong"),
    type_: LogicUtils.getString(dict, "message", "something went wrong"),
  };
}

function parseErrorMessage(errorMessage) {
  var msg = errorMessage.message;
  var parsedValue = msg !== undefined ? LogicUtils.safeParse(msg) : null;
  var obj = Core__JSON.Classify.classify(parsedValue);
  if (typeof obj === "number") {
    return errorMapper({});
  }
  switch (obj.TAG | 0) {
    case /* String */ 1:
      return errorMapper({});
    case /* Object */ 3:
      return errorMapper(obj._0);
    default:
      return errorMapper({});
  }
}

function errorSubCodeMapper(subCode) {
  switch (subCode) {
    case "UR_01":
      return /* UR_01 */ 1;
    case "UR_03":
      return /* UR_03 */ 2;
    case "UR_05":
      return /* UR_05 */ 3;
    case "UR_16":
      return /* UR_16 */ 4;
    default:
      return /* UR_00 */ 0;
  }
}

function generateBodyForEmailRedirection(token) {
  return LogicUtils.getJsonFromArrayOfJson([["token", token]]);
}

export {
  TermsAndCondition,
  flowTypeStrToVariantMapper,
  emailField,
  createPasswordField,
  confirmPasswordField,
  passwordField,
  getResetpasswordBodyJson,
  getEmailPasswordBody,
  getEmailBody,
  parseResponseJson,
  validateForm,
  useNote,
  PageFooterSection,
  ToggleLiveTestMode,
  Header,
  errorMapper,
  parseErrorMessage,
  errorSubCodeMapper,
  generateBodyForEmailRedirection,
};
/* emailField Not a pure module */
