// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as SidebarProvider from "../../Sidebar/SidebarProvider.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchAuthTypes from "./HyperSwitchAuthTypes.bs.js";
import * as HyperSwitchAuthUtils from "./HyperSwitchAuthUtils.bs.js";

function HSAcceptInviteFromEmail(props) {
  var setAuthStatus = props.setAuthStatus;
  var setAuthType = props.setAuthType;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return "";
  });
  var setErrorMessage = match[1];
  var match$1 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarDetails = match$1.setIsSidebarDetails;
  var acceptInviteFormEmail = async function (body) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "ACCEPT_INVITE_FROM_EMAIL",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var email = LogicUtils.getString(
        Core__Option.getOr(Core__JSON.Decode.object(res), {}),
        "email",
        "",
      );
      var token = HyperSwitchAuthUtils.parseResponseJson(res, email);
      if (
        !LogicUtils.isEmptyString(token) &&
        !LogicUtils.isEmptyString(email)
      ) {
        Curry._1(
          setAuthStatus,
          /* LoggedIn */ {
            _0: HyperSwitchAuthTypes.getDummyAuthInfoForToken(token),
          },
        );
        Curry._2(setIsSidebarDetails, "isPinned", false);
        return RescriptReactRouter.replace(
          HSwitchGlobalVars.appendDashboardPath("/home"),
        );
      } else {
        Curry._1(setAuthStatus, /* LoggedOut */ 0);
        return RescriptReactRouter.replace(
          HSwitchGlobalVars.appendDashboardPath("/login"),
        );
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Verification Failed");
        Curry._1(setErrorMessage, function (param) {
          return err;
        });
        return Curry._1(setAuthStatus, /* LoggedOut */ 0);
      }
      throw e;
    }
  };
  React.useEffect(function () {
    var tokenFromUrl = LogicUtils.getDictFromUrlSearchParams(url.search)[
      "token"
    ];
    if (tokenFromUrl !== undefined) {
      acceptInviteFormEmail(
        HyperSwitchAuthUtils.generateBodyForEmailRedirection(tokenFromUrl),
      );
    } else {
      Curry._1(setErrorMessage, function (param) {
        return "Token not received";
      });
    }
  }, []);
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(
      match[0].length !== 0
        ? React.createElement(
            "div",
            {
              className:
                "flex flex-col justify-between gap-32 flex items-center justify-center h-2/3",
            },
            React.createElement(Icon.make, {
              name: "hyperswitch-text-icon",
              size: 40,
              className: "cursor-pointer w-60",
              parentClass: "flex flex-col justify-center items-center bg-white",
            }),
            React.createElement(
              "div",
              {
                className: "flex flex-col justify-between items-center gap-12 ",
              },
              React.createElement("img", {
                src: "/assets/WorkInProgress.svg",
              }),
              React.createElement(
                "div",
                {
                  className:
                    "leading-4 ml-1 mt-2 text-center flex items-center flex-col gap-6 w-full md:w-133 flex-wrap",
                },
                React.createElement(
                  "div",
                  {
                    className: "flex gap-2.5 items-center",
                  },
                  React.createElement(Icon.make, {
                    name: "exclamation-circle",
                    size: 22,
                    className: "fill-red-500 mr-1.5",
                  }),
                  React.createElement(
                    "p",
                    {
                      className: "text-fs-20 font-bold text-white",
                    },
                    "Invalid Link or session expired",
                  ),
                ),
                React.createElement(
                  "p",
                  {
                    className:
                      "text-fs-14 text-white opacity-60 font-semibold ",
                  },
                  "It appears that the link you were trying to access has expired or is no longer valid. Please try again .",
                ),
              ),
              React.createElement(Button.make, {
                text: "Go back to login",
                buttonType: /* Primary */ 0,
                buttonSize: /* Small */ 2,
                onClick: function (param) {
                  RescriptReactRouter.replace(
                    HSwitchGlobalVars.appendDashboardPath("/login"),
                  );
                  Curry._1(setAuthType, function (param) {
                    return /* LoginWithEmail */ 1;
                  });
                },
                customButtonStyle:
                  "cursor-pointer cursor-pointer w-5 rounded-md",
              }),
            ),
          )
        : React.createElement(
            "div",
            {
              className:
                "h-full w-full flex justify-center items-center text-white opacity-50",
            },
            "Accepting invite... You will be redirecting to the Dashboard..",
          ),
    ),
    customPageCss: "font-semibold md:text-3xl p-16",
  });
}

var make = HSAcceptInviteFromEmail;

export { make };
/* Icon Not a pure module */
