// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as FramerMotion from "framer-motion";
import * as HyperSwitchAuth from "./HyperSwitchAuth.bs.js";
import * as HyperSwitchLogo from "../../../components/HyperSwitchLogo.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchAuthUtils from "./HyperSwitchAuthUtils.bs.js";
import * as HSAcceptInviteFromEmail from "./HSAcceptInviteFromEmail.bs.js";
import * as HyperSwitchEmailVerifyScreen from "./HyperSwitchEmailVerifyScreen.bs.js";

function HyperSwitchAuthScreen$AuthPage(props) {
  var setAuthType = props.setAuthType;
  var authType = props.authType;
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var branding = match.branding;
  var match$1 = window._env_.logoUrl;
  var match$2 =
    match$1 !== undefined
      ? [/* IconWithURL */ 3, match$1]
      : [/* IconWithText */ 2, undefined];
  var screen = React.createElement(
    "div",
    {
      className:
        "h-full flex flex-col items-center justify-between overflow-scoll text-grey-0 w-full mobile:w-30-rem",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col items-center gap-6 flex-1 mt-4 mobile:my-20",
      },
      React.createElement(UIUtils.RenderIf.make, {
        condition: match.testLiveToggle,
        children: React.createElement(
          HyperSwitchAuthUtils.ToggleLiveTestMode.make,
          {
            authType: authType,
            mode: props.mode,
            setMode: props.setMode,
            setAuthType: setAuthType,
          },
        ),
      }),
      React.createElement(
        FramerMotion.motion.div,
        {
          className: "bg-white w-full text-black mobile:border rounded-lg",
          layoutId: "form",
          children: Caml_option.some(null),
        },
        React.createElement(
          "div",
          {
            className: "px-7 py-6",
          },
          React.createElement(FramerMotion.motion.div, {
            layoutId: "logo",
            children: Caml_option.some(
              React.createElement(HyperSwitchLogo.make, {
                logoVariant: match$2[0],
                logoHeight: "h-8",
                theme: /* Dark */ 1,
                iconUrl: Caml_option.some(match$2[1]),
              }),
            ),
          }),
        ),
        React.createElement(FramerMotion.motion.div, {
          className: "border-b w-full",
          layoutId: "border",
        }),
        React.createElement(
          "div",
          {
            className: "p-7",
          },
          React.createElement(HyperSwitchAuth.make, {
            setAuthStatus: props.setAuthStatus,
            authType: authType,
            setAuthType: setAuthType,
          }),
        ),
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition: !branding,
        children: React.createElement(FramerMotion.motion.div, {
          className:
            "justify-center text-sm mobile:text-base flex flex-col mobile:flex-row mobile:gap-3 items-center w-full max-w-xl text-center",
          layoutId: "footer-links",
          children: Caml_option.some(
            React.createElement(
              HyperSwitchAuthUtils.TermsAndCondition.make,
              {},
            ),
          ),
        }),
      }),
    ),
    React.createElement(UIUtils.RenderIf.make, {
      condition: !branding,
      children: React.createElement(
        HyperSwitchAuthUtils.PageFooterSection.make,
        {},
      ),
    }),
  );
  return React.createElement(HSwitchUtils.BackgroundImageWrapper.make, {
    children: Caml_option.some(screen),
    customPageCss: "flex flex-col items-center justify-center overflow-scroll",
  });
}

var AuthPage = {
  make: HyperSwitchAuthScreen$AuthPage,
};

function HyperSwitchAuthScreen(props) {
  var setAuthStatus = props.setAuthStatus;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
    return /* TestButtonMode */ 0;
  });
  var setMode = match[1];
  var match$1 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var isLiveMode = match$1.isLiveMode;
  var isMagicLinkEnabled = match$1.email;
  var authInitState = isMagicLinkEnabled
    ? /* LoginWithEmail */ 1
    : /* LoginWithPassword */ 0;
  var match$2 = React.useState(function () {
    return authInitState;
  });
  var setAuthType = match$2[1];
  var authType = match$2[0];
  var match$3 = React.useState(function () {
    return authInitState;
  });
  var setActualAuthType = match$3[1];
  var actualAuthType = match$3[0];
  React.useEffect(
    function () {
      if (isLiveMode) {
        Curry._1(setMode, function (param) {
          return /* LiveButtonMode */ 1;
        });
      } else {
        Curry._1(setMode, function (param) {
          return /* TestButtonMode */ 0;
        });
      }
      var match = url.path;
      if (match) {
        switch (match.hd) {
          case "forget-password":
            if (match.tl) {
            } else {
              Curry._1(setActualAuthType, function (param) {
                return /* ForgetPassword */ 5;
              });
            }
            break;
          case "login":
            if (match.tl) {
            } else {
              Curry._1(setActualAuthType, function (param) {
                if (isMagicLinkEnabled) {
                  return /* LoginWithEmail */ 1;
                } else {
                  return /* LoginWithPassword */ 0;
                }
              });
            }
            break;
          case "register":
            if (match.tl) {
            } else if (isLiveMode) {
              RescriptReactRouter.push(
                HSwitchGlobalVars.appendDashboardPath("/login"),
              );
            } else {
              Curry._1(setActualAuthType, function (param) {
                return /* SignUP */ 2;
              });
            }
            break;
          case "user":
            var match$1 = match.tl;
            if (match$1) {
              switch (match$1.hd) {
                case "accept_invite_from_email":
                  if (match$1.tl) {
                  } else {
                    Curry._1(setActualAuthType, function (param) {
                      return /* ActivateFromEmail */ 12;
                    });
                  }
                  break;
                case "set_password":
                  if (match$1.tl) {
                  } else {
                    Curry._1(setActualAuthType, function (param) {
                      return /* ResetPassword */ 9;
                    });
                  }
                  break;
                case "verify_email":
                  if (match$1.tl) {
                  } else {
                    Curry._1(setActualAuthType, function (param) {
                      return /* EmailVerify */ 3;
                    });
                  }
                  break;
                default:
              }
            }
            break;
          default:
        }
      }
    },
    [url.path],
  );
  React.useEffect(
    function () {
      if (authType !== actualAuthType) {
        Curry._1(setAuthType, function (param) {
          return actualAuthType;
        });
      }
    },
    [actualAuthType],
  );
  React.useEffect(
    function () {
      var match = url.path;
      var exit = 0;
      switch (authType) {
        case /* LoginWithPassword */ 0:
        case /* LoginWithEmail */ 1:
          exit = 1;
          break;
        case /* SignUP */ 2:
          if (!(match && match.hd === "register")) {
            RescriptReactRouter.push(
              HSwitchGlobalVars.appendDashboardPath("/register"),
            );
          }
          break;
        case /* ForgetPassword */ 5:
        case /* ForgetPasswordEmailSent */ 6:
          exit = 2;
          break;
        case /* ResendVerifyEmailSent */ 7:
        case /* ResendVerifyEmail */ 10:
          exit = 3;
          break;
        case /* EmailVerify */ 3:
        case /* MagicLinkVerify */ 4:
        case /* MagicLinkEmailSent */ 8:
        case /* ResetPassword */ 9:
        case /* LiveMode */ 11:
        case /* ActivateFromEmail */ 12:
          break;
      }
      switch (exit) {
        case 1:
          if (match) {
            switch (match.hd) {
              case "register":
                break;
              case "user":
                var match$1 = match.tl;
                if (match$1) {
                  var exit$1 = 0;
                  switch (match$1.hd) {
                    case "accept_invite_from_email":
                    case "login":
                    case "set_password":
                    case "verify_email":
                      exit$1 = 4;
                      break;
                    default:
                      RescriptReactRouter.replace(
                        HSwitchGlobalVars.appendDashboardPath("/login"),
                      );
                  }
                  if (exit$1 === 4) {
                    if (match$1.tl) {
                      RescriptReactRouter.replace(
                        HSwitchGlobalVars.appendDashboardPath("/login"),
                      );
                    }
                  }
                } else {
                  RescriptReactRouter.replace(
                    HSwitchGlobalVars.appendDashboardPath("/login"),
                  );
                }
                break;
              default:
                RescriptReactRouter.replace(
                  HSwitchGlobalVars.appendDashboardPath("/login"),
                );
            }
          } else {
            RescriptReactRouter.replace(
              HSwitchGlobalVars.appendDashboardPath("/login"),
            );
          }
          break;
        case 2:
          if (!(match && match.hd === "forget-password")) {
            RescriptReactRouter.push(
              HSwitchGlobalVars.appendDashboardPath("/forget-password"),
            );
          }
          break;
        case 3:
          if (!(match && match.hd === "resend-mail")) {
            RescriptReactRouter.push(
              HSwitchGlobalVars.appendDashboardPath("/resend-mail"),
            );
          }
          break;
      }
    },
    [authType],
  );
  if (authType >= 5) {
    if (authType >= 12) {
      return React.createElement(HSAcceptInviteFromEmail.make, {
        setAuthType: setAuthType,
        setAuthStatus: setAuthStatus,
      });
    }
  } else if (authType >= 3) {
    return React.createElement(HyperSwitchEmailVerifyScreen.make, {
      setAuthType: setAuthType,
      setAuthStatus: setAuthStatus,
    });
  }
  return React.createElement(HyperSwitchAuthScreen$AuthPage, {
    authType: authType,
    setAuthType: setAuthType,
    setAuthStatus: setAuthStatus,
    mode: match[0],
    setMode: setMode,
  });
}

var make = HyperSwitchAuthScreen;

export { AuthPage, make };
/* react Not a pure module */
