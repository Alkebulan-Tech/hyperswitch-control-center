// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as ResendBtn from "../ResendBtn.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as CountryUtils from "../../Utils/CountryUtils.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as MixpanelHook from "../../MixpanelHook.bs.js";
import * as HSLocalStorage from "../../HSLocalStorage.bs.js";
import * as ReactFinalForm from "../../../libraries/ReactFinalForm.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as AddDataAttributes from "../../../components/AddDataAttributes.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as HyperSwitchAuthForm from "./HyperSwitchAuthForm.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchAuthTypes from "./HyperSwitchAuthTypes.bs.js";
import * as HyperSwitchAuthUtils from "./HyperSwitchAuthUtils.bs.js";

function HyperSwitchAuth(props) {
  var setAuthType = props.setAuthType;
  var authType = props.authType;
  var setAuthStatus = props.setAuthStatus;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var initialValues = {};
  var clientCountry = HSwitchUtils.getBrowswerDetails(undefined).clientCountry;
  var country = CountryUtils.getCountryCodeStringFromVarient(
    clientCountry.isoAlpha2,
  );
  var showToast = ToastState.useShowToast(undefined);
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useState(function () {
    return "";
  });
  var setEmail = match[1];
  var email = match[0];
  var featureFlagValues = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var handleAuthError = function (e) {
    var error = HyperSwitchAuthUtils.parseErrorMessage(e);
    var match = HyperSwitchAuthUtils.errorSubCodeMapper(error.code);
    switch (match) {
      case /* UR_00 */ 0:
        return "Register failed, Try again";
      case /* UR_01 */ 1:
        return "Incorrect email or password";
      case /* UR_03 */ 2:
        return "An account already exists with this email";
      case /* UR_05 */ 3:
        Curry._1(setAuthType, function (param) {
          return /* ResendVerifyEmail */ 10;
        });
        return "Kindly verify your account";
      case /* UR_16 */ 4:
        return "Please use a valid email";
    }
  };
  var getUserWithEmail = async function (body) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "CONNECT_ACCOUNT",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var valuesDict = LogicUtils.getDictFromJsonObject(res);
      var magicLinkSent = LogicUtils.getBool(
        valuesDict,
        "is_email_sent",
        false,
      );
      if (magicLinkSent) {
        Curry._1(setAuthType, function (param) {
          return /* MagicLinkEmailSent */ 8;
        });
      } else {
        Curry._8(
          showToast,
          "Failed to send an email, Try again",
          /* ToastError */ 0,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        Curry._8(
          showToast,
          handleAuthError(e._1),
          /* ToastError */ 0,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      } else {
        throw e;
      }
    }
    return null;
  };
  var getUserWithEmailPassword = async function (body, email, userType) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        userType,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var token = HyperSwitchAuthUtils.parseResponseJson(res, email);
      if (LogicUtils.isEmptyString(token)) {
        Curry._8(
          showToast,
          "Failed to sign in, Try again",
          /* ToastError */ 0,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        Curry._1(setAuthStatus, /* LoggedOut */ 0);
      } else {
        Curry._1(
          setAuthStatus,
          /* LoggedIn */ {
            _0: HyperSwitchAuthTypes.getDummyAuthInfoForToken(token),
          },
        );
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        Curry._8(
          showToast,
          handleAuthError(e._1),
          /* ToastError */ 0,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      } else {
        throw e;
      }
    }
    return null;
  };
  var openPlayground = function (param) {
    var body = HyperSwitchAuthUtils.getEmailPasswordBody(
      HSwitchGlobalVars.playgroundUserEmail,
      HSwitchGlobalVars.playgroundUserPassword,
      country,
    );
    getUserWithEmailPassword(
      body,
      HSwitchGlobalVars.playgroundUserEmail,
      "SIGNINV2",
    );
    HSLocalStorage.setIsPlaygroundInLocalStorage(true);
  };
  var setResetPassword = async function (body) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "RESET_PASSWORD",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      localStorage.clear();
      Curry._8(
        showToast,
        "Password Changed Successfully",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setAuthType, function (param) {
        return /* LoginWithEmail */ 1;
      });
    } catch (exn) {
      Curry._8(
        showToast,
        "Password Reset Failed, Try again",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var setForgetPassword = async function (body) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "FORGOT_PASSWORD",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setAuthType, function (param) {
        return /* ForgetPasswordEmailSent */ 6;
      });
      Curry._8(
        showToast,
        "Please check your registered e-mail",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      Curry._8(
        showToast,
        "Forgot Password Failed, Try again",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var resendVerifyEmail = async function (body) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "VERIFY_EMAIL_REQUEST",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setAuthType, function (param) {
        return /* ResendVerifyEmailSent */ 7;
      });
      Curry._8(
        showToast,
        "Please check your registered e-mail",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      Curry._8(
        showToast,
        "Resend mail failed, Try again",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var logMixpanelEvents = function (email) {
    if (authType >= 3) {
      return;
    }
    switch (authType) {
      case /* LoginWithPassword */ 0:
        return Curry._4(
          mixpanelEvent,
          "signin_using_email&password",
          email,
          undefined,
          undefined,
        );
      case /* LoginWithEmail */ 1:
        return Curry._4(
          mixpanelEvent,
          "signin_using_magic_link",
          email,
          undefined,
          undefined,
        );
      case /* SignUP */ 2:
        return Curry._4(
          mixpanelEvent,
          "signup_using_magic_link",
          email,
          undefined,
          undefined,
        );
    }
  };
  var onSubmit = async function (values, param) {
    try {
      var valuesDict = LogicUtils.getDictFromJsonObject(values);
      var email = LogicUtils.getString(valuesDict, "email", "");
      Curry._1(setEmail, function (param) {
        return email;
      });
      logMixpanelEvents(email);
      var match = featureFlagValues.email;
      var tmp;
      var exit = 0;
      if (match) {
        switch (authType) {
          case /* LoginWithEmail */ 1:
          case /* SignUP */ 2:
            tmp = getUserWithEmail(
              HyperSwitchAuthUtils.getEmailBody(email, country, undefined),
            );
            break;
          case /* LoginWithPassword */ 0:
          case /* ResetPassword */ 9:
            exit = 1;
            break;
          case /* ResendVerifyEmail */ 10:
            tmp = resendVerifyEmail(
              HyperSwitchAuthUtils.getEmailBody(email, undefined, undefined),
            );
            break;
          case /* EmailVerify */ 3:
          case /* MagicLinkVerify */ 4:
          case /* ForgetPassword */ 5:
          case /* ForgetPasswordEmailSent */ 6:
          case /* ResendVerifyEmailSent */ 7:
          case /* MagicLinkEmailSent */ 8:
          case /* LiveMode */ 11:
          case /* ActivateFromEmail */ 12:
            exit = 2;
            break;
        }
      } else if (authType !== 9) {
        if (authType >= 3) {
          exit = 2;
        } else {
          switch (authType) {
            case /* LoginWithPassword */ 0:
              exit = 1;
              break;
            case /* LoginWithEmail */ 1:
              exit = 2;
              break;
            case /* SignUP */ 2:
              var password = LogicUtils.getString(valuesDict, "password", "");
              var body = HyperSwitchAuthUtils.getEmailPasswordBody(
                email,
                password,
                country,
              );
              tmp = getUserWithEmailPassword(body, email, "SIGNUP");
              break;
          }
        }
      } else {
        exit = 1;
      }
      switch (exit) {
        case 1:
          if (authType >= 9) {
            var queryDict = LogicUtils.getDictFromUrlSearchParams(url.search);
            var password_reset_token = Core__Option.getOr(
              queryDict["token"],
              "",
            );
            var password$1 = LogicUtils.getString(
              valuesDict,
              "create_password",
              "",
            );
            tmp = setResetPassword(
              HyperSwitchAuthUtils.getResetpasswordBodyJson(
                password$1,
                password_reset_token,
              ),
            );
          } else {
            var password$2 = LogicUtils.getString(valuesDict, "password", "");
            var body$1 = HyperSwitchAuthUtils.getEmailPasswordBody(
              email,
              password$2,
              country,
            );
            tmp = getUserWithEmailPassword(body$1, email, "SIGNINV2");
          }
          break;
        case 2:
          var match$1 = featureFlagValues.email;
          var exit$1 = 0;
          if (match$1 && authType === 5) {
            tmp = setForgetPassword(
              HyperSwitchAuthUtils.getEmailBody(email, undefined, undefined),
            );
          } else {
            exit$1 = 3;
          }
          if (exit$1 === 3) {
            tmp = new Promise(function (resolve, param) {
              resolve(null);
            });
          }
          break;
      }
      await tmp;
    } catch (exn) {
      Curry._8(
        showToast,
        "Something went wrong, Try again",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var resendEmail = function (param) {
    var body = HyperSwitchAuthUtils.getEmailBody(email, undefined, undefined);
    if (authType < 6) {
      return;
    }
    switch (authType) {
      case /* ForgetPasswordEmailSent */ 6:
        setForgetPassword(body);
        return;
      case /* ResendVerifyEmailSent */ 7:
        resendVerifyEmail(body);
        return;
      case /* MagicLinkEmailSent */ 8:
        getUserWithEmail(body);
        return;
      case /* ResetPassword */ 9:
      case /* ResendVerifyEmail */ 10:
      case /* LiveMode */ 11:
      case /* ActivateFromEmail */ 12:
        return;
    }
  };
  var submitBtnText;
  switch (authType) {
    case /* LoginWithPassword */ 0:
    case /* LoginWithEmail */ 1:
      submitBtnText = "Continue";
      break;
    case /* ForgetPassword */ 5:
      submitBtnText = "Reset password";
      break;
    case /* ResetPassword */ 9:
      submitBtnText = "Confirm";
      break;
    case /* ResendVerifyEmail */ 10:
      submitBtnText = "Send mail";
      break;
    case /* SignUP */ 2:
    case /* EmailVerify */ 3:
    case /* MagicLinkVerify */ 4:
    case /* ForgetPasswordEmailSent */ 6:
    case /* ResendVerifyEmailSent */ 7:
    case /* MagicLinkEmailSent */ 8:
    case /* LiveMode */ 11:
    case /* ActivateFromEmail */ 12:
      submitBtnText = "Get started, for free!";
      break;
  }
  var validateKeys;
  switch (authType) {
    case /* LoginWithPassword */ 0:
      validateKeys = ["email", "password"];
      break;
    case /* ResetPassword */ 9:
      validateKeys = ["create_password", "comfirm_password"];
      break;
    case /* LoginWithEmail */ 1:
    case /* SignUP */ 2:
    case /* ForgetPassword */ 5:
    case /* ResendVerifyEmail */ 10:
      validateKeys = ["email"];
      break;
    case /* EmailVerify */ 3:
    case /* MagicLinkVerify */ 4:
    case /* ForgetPasswordEmailSent */ 6:
    case /* ResendVerifyEmailSent */ 7:
    case /* MagicLinkEmailSent */ 8:
    case /* LiveMode */ 11:
    case /* ActivateFromEmail */ 12:
      validateKeys = [];
      break;
  }
  React.useEffect(function () {
    if (url.hash === "playground") {
      openPlayground(undefined);
    }
  }, []);
  var note = HyperSwitchAuthUtils.useNote(
    authType,
    setAuthType,
    featureFlagValues.email,
  );
  return JsxPPXReactSupport.createElementWithKey(
    "auth",
    ReactFinalForm$1.Form,
    {
      initialValues: Caml_option.some(initialValues),
      onSubmit: onSubmit,
      render: function (param) {
        var tmp;
        var exit = 0;
        switch (authType) {
          case /* LoginWithPassword */ 0:
            tmp = React.createElement(
              HyperSwitchAuthForm.EmailPasswordForm.make,
              {
                setAuthType: setAuthType,
              },
            );
            break;
          case /* ForgetPassword */ 5:
            tmp = React.createElement(UIUtils.RenderIf.make, {
              condition: featureFlagValues.email,
              children: React.createElement(
                HyperSwitchAuthForm.EmailForm.make,
                {},
              ),
            });
            break;
          case /* ForgetPasswordEmailSent */ 6:
          case /* ResendVerifyEmailSent */ 7:
          case /* MagicLinkEmailSent */ 8:
            tmp = React.createElement(ResendBtn.make, {
              callBackFun: resendEmail,
            });
            break;
          case /* ResetPassword */ 9:
            tmp = React.createElement(
              HyperSwitchAuthForm.ResetPasswordForm.make,
              {},
            );
            break;
          case /* LoginWithEmail */ 1:
          case /* SignUP */ 2:
          case /* ResendVerifyEmail */ 10:
            exit = 1;
            break;
          case /* EmailVerify */ 3:
          case /* MagicLinkVerify */ 4:
          case /* LiveMode */ 11:
          case /* ActivateFromEmail */ 12:
            tmp = null;
            break;
        }
        if (exit === 1) {
          tmp = featureFlagValues.email
            ? React.createElement(HyperSwitchAuthForm.EmailForm.make, {})
            : React.createElement(HyperSwitchAuthForm.EmailPasswordForm.make, {
                setAuthType: setAuthType,
              });
        }
        var tmp$1;
        var exit$1 = 0;
        if (authType >= 3) {
          switch (authType) {
            case /* ForgetPassword */ 5:
            case /* ResetPassword */ 9:
            case /* ResendVerifyEmail */ 10:
              exit$1 = 1;
              break;
            case /* EmailVerify */ 3:
            case /* MagicLinkVerify */ 4:
            case /* ForgetPasswordEmailSent */ 6:
            case /* ResendVerifyEmailSent */ 7:
            case /* MagicLinkEmailSent */ 8:
            case /* LiveMode */ 11:
            case /* ActivateFromEmail */ 12:
              tmp$1 = null;
              break;
          }
        } else {
          exit$1 = 1;
        }
        if (exit$1 === 1) {
          tmp$1 = React.createElement(FormRenderer.SubmitButton.make, {
            text: submitBtnText,
            customSumbitButtonStyle: "!w-full !rounded",
            showToolTip: false,
            loadingText: "Loading...",
            userInteractionRequired: true,
          });
        }
        return React.createElement(
          React.Fragment,
          undefined,
          React.createElement(HyperSwitchAuthUtils.Header.make, {
            authType: authType,
            setAuthType: setAuthType,
            email: email,
          }),
          React.createElement(
            "form",
            {
              className:
                "flex flex-col justify-evenly gap-5 h-full w-full !overflow-visible text-grey-600",
              onSubmit: param.handleSubmit,
            },
            tmp,
            React.createElement(
              "div",
              {
                className: "flex flex-col gap-2",
                id: "auth-submit-btn",
              },
              tmp$1,
            ),
            React.createElement(AddDataAttributes.make, {
              attributes: [["data-testid", "card-foot-text"]],
              children: React.createElement("div", undefined, note),
            }),
          ),
        );
      },
      subscription: ReactFinalForm.subscribeToValues,
      validate: function (values) {
        return HyperSwitchAuthUtils.validateForm(values, validateKeys);
      },
    },
  );
}

var make = HyperSwitchAuth;

export { make };
/* react Not a pure module */
