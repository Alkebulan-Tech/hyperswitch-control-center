// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Loader from "../../components/Loader.bs.js";
import * as AuthHooks from "../../hooks/AuthHooks.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as HyperSwitchUtils from "../../utils/HyperSwitchUtils.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ReactHyperJs from "@juspay-tech/react-hyper-js";

function WebSDK$CheckoutForm(props) {
  var setClientSecret = props.setClientSecret;
  var isSpaceAccordion = props.isSpaceAccordion;
  var publishableKey = props.publishableKey;
  var saveViewToSdk = props.saveViewToSdk;
  var returnUrl = props.returnUrl;
  var methodsOrder = props.methodsOrder;
  var layout = props.layout;
  var fontSizeBase = props.fontSizeBase;
  var fontFamily = props.fontFamily;
  var bgColor = props.bgColor;
  var primaryColor = props.primaryColor;
  var theme = props.theme;
  var paymentElementOptions = props.paymentElementOptions;
  var setPaymentStatus = props.setPaymentStatus;
  var paymentStatus = props.paymentStatus;
  var clientSecret = props.clientSecret;
  var theme$1 = theme !== undefined ? theme : "";
  var primaryColor$1 = primaryColor !== undefined ? primaryColor : "";
  var bgColor$1 = bgColor !== undefined ? bgColor : "";
  var fontFamily$1 = fontFamily !== undefined ? fontFamily : "";
  var fontSizeBase$1 = fontSizeBase !== undefined ? fontSizeBase : "";
  var layout$1 = layout !== undefined ? layout : "";
  var methodsOrder$1 = methodsOrder !== undefined ? methodsOrder : [];
  var saveViewToSdk$1 = saveViewToSdk !== undefined ? saveViewToSdk : false;
  var isSpaceAccordion$1 =
    isSpaceAccordion !== undefined ? isSpaceAccordion : false;
  var match = React.useState(function () {});
  var setError = match[1];
  var error = match[0];
  var match$1 = React.useState(function () {
    return /* Normal */ 0;
  });
  var setBtnState = match$1[1];
  var hyper = ReactHyperJs.useHyper();
  var elements = ReactHyperJs.useElements();
  var match$2 = React.useState(function () {
    return null;
  });
  var setAppearanceElem = match$2[1];
  var appearanceElem = match$2[0];
  var match$3 = React.useState(function () {
    return null;
  });
  var setPaymentElem = match$3[1];
  var paymentElem = match$3[0];
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  React.useEffect(
    function () {
      var val_config = Core__Option.getOr(
        JSON.stringify({
          appearanceElement: appearanceElem,
          paymentElement: paymentElem,
        }),
        "",
      );
      var val = {
        publishableKey: publishableKey,
        config: val_config,
      };
      Curry._1(setError, function (param) {});
      if (saveViewToSdk$1) {
        Core__Promise.$$catch(
          Curry._8(
            fetchApi,
            "https://4gla4dnvbg.execute-api.ap-south-1.amazonaws.com/default/hyperConfig",
            Core__Option.getOr(JSON.stringify(val), ""),
            undefined,
            Caml_option.some(
              Object.fromEntries([["Access-Control-Allow-Origin", "*"]]),
            ),
            /* Post */ 2,
            undefined,
            undefined,
            undefined,
          )
            .then(Fetch.$$Response.json)
            .then(function (json) {
              return Promise.resolve(json);
            }),
          function (_e) {
            return Promise.resolve({});
          },
        );
      }
    },
    [saveViewToSdk$1, clientSecret],
  );
  React.useEffect(
    function () {
      var appearanceVal = {
        appearance: {
          theme: theme$1,
          variables: {
            fontFamily: fontFamily$1,
            colorPrimary: primaryColor$1,
            fontSizeBase: fontSizeBase$1,
            colorBackground: bgColor$1,
          },
          rules: {
            ".Tab": {
              borderRadius: "0px",
              display: "flex",
              gap: "8px",
              height: "52px",
              flexDirection: "row",
              justifyContent: "center",
              borderRadius: "5px",
              alignItems: "center",
              fontSize: "100%",
            },
            ".Tab--selected": {
              display: "flex",
              gap: "8px",
              flexDirection: "row",
              justifyContent: "center",
              alignItems: "center",
              padding: "15px 32px",
              borderRadius: "5px",
              fontWeight: "700",
            },
            ".TabLabel": {
              overflowWrap: "break-word",
            },
            ".Tab--selected:hover": {
              display: "flex",
              gap: "8px",
              flexDirection: "row",
              justifyContent: "center",
              alignItems: "center",
              padding: "15px 32px",
              borderRadius: "5px",
              fontWeight: "700",
            },
            ".Tab:hover": {
              display: "flex",
              gap: "8px",
              flexDirection: "row",
              justifyContent: "center",
              alignItems: "center",
              padding: "15px 32px",
              borderRadius: "5px",
              fontWeight: "700",
            },
          },
        },
      };
      Curry._1(setAppearanceElem, function (param) {
        return appearanceVal;
      });
      Curry._1(elements.update, appearanceVal);
    },
    [
      elements,
      theme$1,
      primaryColor$1,
      bgColor$1,
      fontFamily$1,
      fontSizeBase$1,
    ],
  );
  React.useEffect(
    function () {
      var paymentElement = Curry._1(elements.getElement, "payment");
      if (!(paymentElement == null)) {
        var paymentVal = {
          layout: {
            type: layout$1 === "spaced Accordion" ? "accordion" : layout$1,
            defaultCollapsed:
              layout$1 === "spaced Accordion" || layout$1 === "accordion",
            radios: true,
            spacedAccordionItems: isSpaceAccordion$1,
          },
          paymentMethodOrder: methodsOrder$1,
        };
        Curry._1(setPaymentElem, function (param) {
          return paymentVal;
        });
        Curry._1(paymentElement.update, paymentVal);
      }
    },
    [layout$1, elements, methodsOrder$1],
  );
  var handleSubmit = async function (param) {
    try {
      var confirmParams = LogicUtils.getJsonFromArrayOfJson([
        [
          "confirmParams",
          Object.fromEntries([
            ["return_url", returnUrl],
            ["redirect", "always"],
          ]),
        ],
      ]);
      var res = await Curry._1(hyper.confirmPayment, confirmParams);
      var status = LogicUtils.getOptionString(
        LogicUtils.getDictFromJsonObject(res),
        "status",
      );
      if (status !== undefined) {
        switch (status) {
          case "failed":
            Curry._1(setPaymentStatus, function (param) {
              return /* FAILED */ {
                _0: "Failed",
              };
            });
            break;
          case "succeeded":
            Curry._1(setPaymentStatus, function (param) {
              return /* SUCCESS */ 0;
            });
            break;
          default:
            Curry._1(setPaymentStatus, function (param) {
              return /* CUSTOMSTATE */ 5;
            });
        }
      } else {
        Curry._1(setPaymentStatus, function (param) {
          return /* CUSTOMSTATE */ 5;
        });
      }
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        var str = err.replace('"', "").replace('"', "");
        if (str === "Something went wrong") {
          Curry._1(setPaymentStatus, function (param) {
            return /* CUSTOMSTATE */ 5;
          });
          Curry._1(setError, function (param) {});
        } else {
          Curry._1(setPaymentStatus, function (param) {
            return /* FAILED */ {
              _0: err,
            };
          });
          Curry._1(setError, function (param) {
            return err;
          });
        }
      } else {
        throw e;
      }
    }
    Curry._1(setClientSecret, function (param) {});
    return Curry._1(setBtnState, function (param) {
      return /* Normal */ 0;
    });
  };
  React.useEffect(
    function () {
      Curry._1(hyper.retrievePaymentIntent, clientSecret).then(
        function (param) {
          return Promise.resolve(undefined);
        },
      );
    },
    [hyper],
  );
  var tmp;
  if (typeof paymentStatus === "number" && paymentStatus < 3) {
    switch (paymentStatus) {
      case /* SUCCESS */ 0:
        tmp = null;
        break;
      case /* INCOMPLETE */ 1:
        tmp = React.createElement(
          "div",
          {
            className: "grid grid-row-2 gap-5",
          },
          React.createElement(
            "div",
            {
              className: "row-span-1 bg-white rounded-lg py-6 px-10 flex-1",
            },
            props.sdkType
              ? React.createElement(ReactHyperJs.CardWidget, {
                  id: "card-widget",
                  options: paymentElementOptions,
                })
              : React.createElement(ReactHyperJs.PaymentElement, {
                  id: "payment-element",
                  options: paymentElementOptions,
                }),
            React.createElement(Button.make, {
              loadingText: "Please wait...",
              buttonState: match$1[0],
              text:
                "Pay " +
                props.currency +
                " " +
                (props.amount / 100.0).toString() +
                "",
              buttonType: /* Primary */ 0,
              onClick: function (param) {
                Curry._1(setBtnState, function (param) {
                  return /* Loading */ 1;
                });
                handleSubmit(undefined);
              },
              customButtonStyle:
                "p-1 mt-2 w-full rounded-md " + primaryColor$1 + "",
            }),
          ),
          error !== undefined
            ? React.createElement(
                "div",
                {
                  className: "text-red-500",
                },
                Core__Option.getOr(JSON.stringify(error), "")
                  .replace('"', "")
                  .replace('"', ""),
              )
            : null,
        );
        break;
      case /* LOADING */ 2:
        tmp = React.createElement(Loader.make, {});
        break;
    }
  } else {
    tmp = null;
  }
  return React.createElement("div", undefined, tmp);
}

var CheckoutForm = {
  make: WebSDK$CheckoutForm,
};

function WebSDK(props) {
  var amount = props.amount;
  var isSpaceAccordion = props.isSpaceAccordion;
  var saveViewToSdk = props.saveViewToSdk;
  var methodsOrder = props.methodsOrder;
  var layout = props.layout;
  var fontSizeBase = props.fontSizeBase;
  var fontFamily = props.fontFamily;
  var bgColor = props.bgColor;
  var primaryColor = props.primaryColor;
  var theme = props.theme;
  var publishableKey = props.publishableKey;
  var theme$1 = theme !== undefined ? theme : "";
  var primaryColor$1 = primaryColor !== undefined ? primaryColor : "";
  var bgColor$1 = bgColor !== undefined ? bgColor : "";
  var fontFamily$1 = fontFamily !== undefined ? fontFamily : "";
  var fontSizeBase$1 = fontSizeBase !== undefined ? fontSizeBase : "";
  var layout$1 = layout !== undefined ? layout : "";
  var methodsOrder$1 = methodsOrder !== undefined ? methodsOrder : [];
  var saveViewToSdk$1 = saveViewToSdk !== undefined ? saveViewToSdk : false;
  var isSpaceAccordion$1 =
    isSpaceAccordion !== undefined ? isSpaceAccordion : false;
  var amount$1 = amount !== undefined ? amount : 65400.0;
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match[1];
  var loadDOM = async function (param) {
    try {
      var url = window._env_.sdkBaseUrl;
      if (url === undefined) {
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: "URL Not Configured",
          };
        });
      }
      var script = document.createElement("script");
      script.setAttribute("src", url);
      document.body.appendChild(script);
      await HyperSwitchUtils.delay(1000);
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "",
        };
      });
    }
  };
  React.useEffect(function () {
    loadDOM(undefined);
  }, []);
  var hyperPromise = React.useCallback(
    async function (param) {
      return window.Hyper(publishableKey);
    },
    [publishableKey],
  );
  var match$1 = window.Hyper;
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        undefined,
        match$1 !== undefined
          ? React.createElement(ReactHyperJs.Elements, {
              options: props.elementOptions,
              stripe: Curry._1(hyperPromise, undefined),
              children: React.createElement(WebSDK$CheckoutForm, {
                clientSecret: props.clientSecret,
                sdkType: props.sdkType,
                paymentStatus: props.paymentStatus,
                currency: props.currency,
                setPaymentStatus: props.setPaymentStatus,
                paymentElementOptions: props.paymentElementOptions,
                theme: theme$1,
                primaryColor: primaryColor$1,
                bgColor: bgColor$1,
                fontFamily: fontFamily$1,
                fontSizeBase: fontSizeBase$1,
                layout: layout$1,
                methodsOrder: methodsOrder$1,
                returnUrl: props.returnUrl,
                saveViewToSdk: saveViewToSdk$1,
                publishableKey: publishableKey,
                isSpaceAccordion: isSpaceAccordion$1,
                amount: amount$1,
                setClientSecret: props.setClientSecret,
              }),
            })
          : null,
      ),
    ),
    screenState: match[0],
    sectionHeight: "!h-screen",
    customLoader: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "mt-60 w-scrren flex flex-col justify-center items-center",
        },
        React.createElement(
          "div",
          {
            className: "animate-spin mb-1",
          },
          React.createElement(Icon.make, {
            name: "spinner",
            size: 20,
          }),
        ),
      ),
    ),
  });
}

var make = WebSDK;

export { CheckoutForm, make };
/* Icon Not a pure module */
