// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as HomeUtils from "../Home/HomeUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as TestPayment from "./TestPayment.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as SDKPaymentUtils from "./SDKPaymentUtils.bs.js";
import * as TestCredentials from "./TestCredentials.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BreadCrumbNavigation from "../../genericUtils/BreadCrumbNavigation.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";

var h3Leading2Style = HSwitchUtils.getTextClass([
  /* H3 */ 2, /* Leading_2 */ 3,
]);

function SDKPage$SDKConfiguarationFields(props) {
  var initialValues = props.initialValues;
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var disableSelectionForProfile =
    HomeUtils.isDefaultBusinessProfile(businessProfiles);
  var dropDownOptions = HomeUtils.countries.map(function (item) {
    return {
      label: "" + item.countryName + " (" + item.currency + ")",
      value: "" + item.countryName + "-" + item.currency + "",
    };
  });
  var arg =
    MerchantAccountUtils.businessProfileNameDropDownOption(businessProfiles);
  var arg$1 = disableSelectionForProfile;
  var selectProfileField = FormRenderer.makeFieldInfo(
    "Profile",
    undefined,
    "profile_id",
    function (param) {
      return function (param$1) {
        var param$2 = "Select Profile";
        var param$3 = true;
        var param$4;
        var param$5 = true;
        var param$6;
        var param$7;
        var param$8;
        var param$9;
        var param$10;
        var param$11;
        var param$12;
        var param$13;
        var param$14;
        var param$15;
        var param$16;
        var param$17;
        var param$18;
        var param$19;
        var param$20;
        var param$21;
        var param$22;
        var param$23;
        var param$24;
        var param$25;
        var param$26;
        var param$27;
        var param$28;
        var param$29;
        return InputFields.selectInput(
          param,
          arg,
          param$1,
          param$2,
          param$3,
          param$4,
          arg$1,
          param$5,
          param$6,
          param$7,
          param$8,
          param$9,
          param$10,
          param$11,
          param$12,
          param$13,
          param$14,
          param$15,
          param$16,
          param$17,
          param$18,
          param$19,
          param$20,
          param$21,
          param$22,
          param$23,
          param$24,
          param$25,
          param$26,
          param$27,
          param$28,
          param$29,
        );
      };
    },
    undefined,
    undefined,
    undefined,
    undefined,
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  var selectCurrencyField = FormRenderer.makeFieldInfo(
    "Currency",
    undefined,
    "currency",
    function (param) {
      return function (param$1) {
        var param$2 = "Select Currency";
        var param$3 = true;
        var param$4;
        var param$5;
        var param$6 = true;
        var param$7;
        var param$8;
        var param$9;
        var param$10;
        var param$11;
        var param$12;
        var param$13;
        var param$14;
        var param$15;
        var param$16;
        var param$17;
        var param$18;
        var param$19;
        var param$20;
        var param$21;
        var param$22;
        var param$23;
        var param$24;
        var param$25;
        var param$26;
        var param$27;
        var param$28;
        var param$29;
        var param$30;
        return InputFields.selectInput(
          param,
          dropDownOptions,
          param$1,
          param$2,
          param$3,
          param$4,
          param$5,
          param$6,
          param$7,
          param$8,
          param$9,
          param$10,
          param$11,
          param$12,
          param$13,
          param$14,
          param$15,
          param$16,
          param$17,
          param$18,
          param$19,
          param$20,
          param$21,
          param$22,
          param$23,
          param$24,
          param$25,
          param$26,
          param$27,
          param$28,
          param$29,
          param$30,
        );
      };
    },
    undefined,
    undefined,
    undefined,
    undefined,
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  var enterAmountField = FormRenderer.makeFieldInfo(
    "Enter amount",
    undefined,
    "amount",
    function (input, param) {
      return InputFields.numericTextInput(
        {
          name: input.name,
          onBlur: input.onBlur,
          onChange: function (ev) {
            var eventValueToFloat = LogicUtils.getFloatFromString(ev, 0.0);
            Curry._1(input.onChange, (eventValueToFloat * 100.0).toString());
          },
          onFocus: input.onFocus,
          value: (initialValues.amount / 100.0).toString(),
          checked: input.checked,
        },
        "Enter amount",
        false,
        "w-full",
        undefined,
        2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  return React.createElement(
    "div",
    {
      className: "w-full",
    },
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: selectProfileField,
      fieldWrapperClass: "!w-full",
    }),
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: selectCurrencyField,
      fieldWrapperClass: "!w-full",
    }),
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: enterAmountField,
      fieldWrapperClass: "!w-full",
    }),
    React.createElement(FormRenderer.SubmitButton.make, {
      text: "Show preview",
      disabledParamter: !LogicUtils.isNonEmptyString(initialValues.profile_id),
      customSumbitButtonStyle: "!mt-5",
    }),
  );
}

var SDKConfiguarationFields = {
  make: SDKPage$SDKConfiguarationFields,
};

function SDKPage(props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var filtersFromUrl = LogicUtils.getDictFromUrlSearchParams(url.search);
  var match = React.useState(function () {
    return false;
  });
  var setIsSDKOpen = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setKey = match$1[1];
  var key = match$1[0];
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var match$2 = React.useState(function () {
    return SDKPaymentUtils.initialValueForForm(defaultBusinessProfile);
  });
  var setInitialValues = match$2[1];
  var initialValues = match$2[0];
  React.useEffect(
    function () {
      var paymentIntentOptional =
        filtersFromUrl["payment_intent_client_secret"];
      if (Core__Option.isSome(paymentIntentOptional)) {
        Curry._1(setIsSDKOpen, function (param) {
          return true;
        });
      }
    },
    [filtersFromUrl],
  );
  React.useEffect(
    function () {
      Curry._1(setInitialValues, function (param) {
        return SDKPaymentUtils.initialValueForForm(defaultBusinessProfile);
      });
    },
    [defaultBusinessProfile.profile_id.length],
  );
  var onProceed = async function (paymentId) {
    if (paymentId !== undefined) {
      return RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/payments/" + paymentId + ""),
      );
    }
  };
  var onSubmit = function (values, param) {
    Curry._1(setKey, function (param) {
      return Date.now().toString();
    });
    Curry._1(setInitialValues, function (param) {
      return SDKPaymentUtils.getTypedValueForPayment(values);
    });
    Curry._1(setIsSDKOpen, function (param) {
      return true;
    });
    RescriptReactRouter.push(HSwitchGlobalVars.appendDashboardPath("/sdk"));
    return Promise.resolve(null);
  };
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(BreadCrumbNavigation.make, {
      path: [
        {
          title: "Home",
          link: "/home",
        },
      ],
      currentPageTitle: "Explore Demo Checkout Experience",
    }),
    React.createElement(
      "div",
      {
        className: "w-full flex border rounded-md bg-white",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col w-1/2 border",
        },
        React.createElement(
          "div",
          {
            className: "p-6 border-b-1 border-[#E6E6E6]",
          },
          React.createElement(
            "p",
            {
              className: h3Leading2Style,
            },
            "Setup test checkout",
          ),
        ),
        React.createElement(
          "div",
          {
            className: "p-7 flex flex-col gap-16",
          },
          React.createElement(Form.make, {
            children: React.createElement(SDKPage$SDKConfiguarationFields, {
              initialValues: initialValues,
            }),
            onSubmit: onSubmit,
            initialValues: Caml_option.some(initialValues),
            formClass: "grid grid-cols-2 gap-x-8 gap-y-4",
          }),
          React.createElement(TestCredentials.make, {}),
        ),
      ),
      React.createElement(
        "div",
        {
          className: "flex flex-col flex-1",
        },
        React.createElement(
          "div",
          {
            className: "p-6 border-l-1 border-b-1 border-[#E6E6E6]",
          },
          React.createElement(
            "p",
            {
              className: h3Leading2Style,
            },
            "Preview",
          ),
        ),
        match[0]
          ? React.createElement(
              "div",
              {
                className: "p-7 h-full bg-sidebar-blue",
              },
              JsxPPXReactSupport.createElementWithKey(key, TestPayment.make, {
                returnUrl:
                  "" + HSwitchGlobalVars.getHostUrlWithBasePath + "/sdk",
                onProceed: onProceed,
                sdkWidth: "!w-[100%]",
                isTestCredsNeeded: false,
                customWidth: "!w-full !h-full",
                paymentStatusStyles: "",
                successButtonText: "Go to Payment",
                keyValue: key,
                initialValues: initialValues,
              }),
            )
          : React.createElement(
              "div",
              {
                className:
                  "bg-sidebar-blue flex items-center justify-center h-full",
              },
              React.createElement("img", {
                src: "/assets/BlurrySDK.svg",
              }),
            ),
      ),
    ),
  );
}

var make = SDKPage;

export { h3Leading2Style, SDKConfiguarationFields, make };
/* h3Leading2Style Not a pure module */
