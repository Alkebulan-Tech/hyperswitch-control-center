// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as WebSDK from "./WebSDK.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as CheckoutHelper from "../SelfServe/HSwitchProdOnboarding/CheckoutHelper.bs.js";
import * as SDKPaymentUtils from "./SDKPaymentUtils.bs.js";
import * as TestCredentials from "./TestCredentials.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ProdOnboardingUIUtils from "../SelfServe/HSwitchProdOnboarding/ProdOnboardingUIUtils.bs.js";

function TestPayment(props) {
  var initialValues = props.initialValues;
  var keyValue = props.keyValue;
  var successButtonText = props.successButtonText;
  var paymentStatusStyles = props.paymentStatusStyles;
  var customWidth = props.customWidth;
  var isTestCredsNeeded = props.isTestCredsNeeded;
  var sdkWidth = props.sdkWidth;
  var onProceed = props.onProceed;
  var returnUrl = props.returnUrl;
  var sdkWidth$1 = sdkWidth !== undefined ? sdkWidth : "w-[60%]";
  var isTestCredsNeeded$1 =
    isTestCredsNeeded !== undefined ? isTestCredsNeeded : true;
  var customWidth$1 =
    customWidth !== undefined ? customWidth : "w-full md:w-1/2";
  var paymentStatusStyles$1 =
    paymentStatusStyles !== undefined ? paymentStatusStyles : "p-11";
  var successButtonText$1 =
    successButtonText !== undefined ? successButtonText : "Proceed";
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var match = React.useState(function () {});
  var setClientSecret = match[1];
  var clientSecret = match[0];
  var match$1 = React.useState(function () {
    return /* INCOMPLETE */ 1;
  });
  var setPaymentStatus = match$1[1];
  var paymentStatus = match$1[0];
  var match$2 = React.useState(function () {});
  var setPaymentId = match$2[1];
  var paymentId = match$2[0];
  var merchantDetailsValue = HSwitchUtils.useMerchantDetailsValue(undefined);
  var publishableKey = merchantDetailsValue.publishable_key;
  var paymentElementOptions = CheckoutHelper.getOptionReturnUrl(returnUrl);
  var elementOptions = CheckoutHelper.getOption(clientSecret);
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var searchParams = url.search;
  var filtersFromUrl = LogicUtils.getDictFromUrlSearchParams(searchParams);
  var getClientSecretFromPaymentId = function (paymentIntentClientSecret) {
    if (paymentIntentClientSecret === undefined) {
      return;
    }
    var paymentClientSecretSplitArray = paymentIntentClientSecret.split("_");
    return (
      "" +
      LogicUtils.getValueFromArray(paymentClientSecretSplitArray, 0, "") +
      "_" +
      LogicUtils.getValueFromArray(paymentClientSecretSplitArray, 1, "") +
      ""
    );
  };
  var getClientSecret = async function (param) {
    try {
      var url = "" + window._env_.apiBaseUrl + "/payments";
      var paymentData = SDKPaymentUtils.getTypedValueForPayment(
        LogicUtils.safeParse(JSON.stringify(initialValues)),
      );
      paymentData.currency = SDKPaymentUtils.getCurrencyValue(
        paymentData.currency,
      );
      var response = await Curry._7(
        updateDetails,
        url,
        paymentData,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var clientSecret = LogicUtils.getOptionString(
        LogicUtils.getDictFromJsonObject(response),
        "client_secret",
      );
      Curry._1(setPaymentId, function (param) {
        return LogicUtils.getOptionString(
          LogicUtils.getDictFromJsonObject(response),
          "payment_id",
        );
      });
      Curry._1(setClientSecret, function (param) {
        return clientSecret;
      });
      return Curry._1(setPaymentStatus, function (param) {
        return /* INCOMPLETE */ 1;
      });
    } catch (exn) {
      return Curry._1(setPaymentStatus, function (param) {
        return /* FAILED */ {
          _0: "",
        };
      });
    }
  };
  React.useEffect(
    function () {
      var status = Core__Option.getOr(
        filtersFromUrl["status"],
        "",
      ).toLowerCase();
      var paymentIdFromPaymemtIntentClientSecret = getClientSecretFromPaymentId(
        LogicUtils.getDictFromUrlSearchParams(url.search)[
          "payment_intent_client_secret"
        ],
      );
      if (status === "succeeded") {
        Curry._1(setPaymentStatus, function (param) {
          return /* SUCCESS */ 0;
        });
      } else if (status === "failed") {
        Curry._1(setPaymentStatus, function (param) {
          return /* FAILED */ {
            _0: "",
          };
        });
      } else if (status === "processing") {
        Curry._1(setPaymentStatus, function (param) {
          return /* PROCESSING */ 3;
        });
      } else {
        Curry._1(setPaymentStatus, function (param) {
          return /* INCOMPLETE */ 1;
        });
      }
      Curry._1(setPaymentId, function (param) {
        return paymentIdFromPaymemtIntentClientSecret;
      });
      if (status.length <= 0 && LogicUtils.isNonEmptyString(keyValue)) {
        getClientSecret(undefined);
      }
    },
    [keyValue],
  );
  var tmp;
  if (typeof paymentStatus === "number") {
    switch (paymentStatus) {
      case /* SUCCESS */ 0:
        tmp = React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "account-setup-completed",
            statusText: "Payment Successful",
            buttonText: successButtonText$1,
            buttonOnClick: function (param) {
              Curry._1(onProceed, paymentId);
            },
            customWidth: customWidth$1,
            bgColor: "bg-green-success_page_bg",
            isButtonVisible: Core__Option.isSome(paymentId),
          },
        );
        break;
      case /* PROCESSING */ 3:
        tmp = React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "processing",
            statusText: "Payment Pending",
            buttonText: successButtonText$1,
            buttonOnClick: function (param) {
              Curry._1(onProceed, paymentId);
            },
            customWidth: customWidth$1,
            bgColor: "bg-yellow-pending_page_bg",
            isButtonVisible: Core__Option.isSome(paymentId),
          },
        );
        break;
      case /* CHECKCONFIGURATION */ 4:
        tmp = React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "processing",
            statusText: "Check your Configurations",
            buttonText: successButtonText$1,
            buttonOnClick: function (param) {
              Curry._1(onProceed, paymentId);
            },
            customWidth: customWidth$1,
            bgColor: "bg-yellow-pending_page_bg",
            isButtonVisible: Core__Option.isSome(paymentId),
          },
        );
        break;
      case /* INCOMPLETE */ 1:
      case /* LOADING */ 2:
      case /* CUSTOMSTATE */ 5:
        tmp = null;
        break;
    }
  } else {
    tmp = React.createElement(
      ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
      {
        iconName: "account-setup-failed",
        statusText: "Payment Failed",
        buttonText: successButtonText$1,
        buttonOnClick: function (param) {
          Curry._1(onProceed, paymentId);
        },
        customWidth: customWidth$1,
        bgColor: "bg-red-failed_page_bg",
        isButtonVisible: Core__Option.isSome(paymentId),
      },
    );
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12 h-full " + paymentStatusStyles$1 + "",
    },
    tmp,
    clientSecret !== undefined
      ? isTestCredsNeeded$1
        ? React.createElement(
            "div",
            {
              className: "flex gap-8",
            },
            React.createElement(
              "div",
              {
                className: sdkWidth$1,
              },
              React.createElement(WebSDK.make, {
                clientSecret: clientSecret,
                publishableKey: publishableKey,
                sdkType: /* ELEMENT */ 0,
                paymentStatus: paymentStatus,
                currency: SDKPaymentUtils.getCurrencyValue(
                  initialValues.currency,
                ),
                setPaymentStatus: setPaymentStatus,
                elementOptions: elementOptions,
                paymentElementOptions: paymentElementOptions,
                returnUrl: returnUrl,
                amount: initialValues.amount,
                setClientSecret: setClientSecret,
              }),
            ),
            React.createElement(TestCredentials.make, {}),
          )
        : React.createElement(WebSDK.make, {
            clientSecret: clientSecret,
            publishableKey: publishableKey,
            sdkType: /* ELEMENT */ 0,
            paymentStatus: paymentStatus,
            currency: SDKPaymentUtils.getCurrencyValue(initialValues.currency),
            setPaymentStatus: setPaymentStatus,
            elementOptions: elementOptions,
            paymentElementOptions: paymentElementOptions,
            returnUrl: returnUrl,
            amount: initialValues.amount,
            setClientSecret: setClientSecret,
          })
      : null,
  );
}

var make = TestPayment;

export { make };
/* react Not a pure module */
