// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as ReactDebounce from "../../components/ReactDebounce.bs.js";
import * as ConnectorUtils from "./ConnectorUtils.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ProcessorCards from "../Processors/ProcessorCards.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as ConnectorListHook from "../Hooks/ConnectorListHook.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as TableSearchFilter from "../Utils/TableSearchFilter.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as ConnectorTableUtils from "./ConnectorTableUtils.bs.js";
import * as DummyProcessorModal from "../Processors/DummyProcessorModal.bs.js";
import * as HSwitchFeedBackModal from "../../components/HSwitchFeedBackModal.bs.js";

function ConnectorList(props) {
  var isPayoutFlow = props.isPayoutFlow;
  var isPayoutFlow$1 = isPayoutFlow !== undefined ? isPayoutFlow : false;
  var match = React.useContext(GlobalProvider.defaultContext);
  var showFeedbackModal = match.showFeedbackModal;
  var match$1 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$1[1];
  var match$2 = React.useState(function () {
    return [];
  });
  var setConfiguredConnectors = match$2[1];
  var configuredConnectors = match$2[0];
  var match$3 = React.useState(function () {
    return [];
  });
  var setPreviouslyConnectedData = match$3[1];
  var match$4 = React.useState(function () {
    return [];
  });
  var setFilteredConnectorData = match$4[1];
  var filteredConnectorData = match$4[0];
  var match$5 = React.useState(function () {
    return 0;
  });
  var match$6 = React.useState(function () {
    return "";
  });
  var match$7 = React.useState(function () {
    return false;
  });
  var setProcessorModal = match$7[1];
  var processorModal = match$7[0];
  var fetchConnectorListResponse =
    ConnectorListHook.useFetchConnectorList(undefined);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var textStyle = HSwitchUtils.getTextClass([/* H2 */ 1, /* Optional */ 4]);
  var subtextStyle =
    "" +
    HSwitchUtils.getTextClass([/* P1 */ 3, /* Regular */ 0]) +
    " text-grey-700 opacity-50";
  var getConnectorListAndUpdateState = async function (param) {
    try {
      var response = await Curry._1(fetchConnectorListResponse, undefined);
      var removeFromList = isPayoutFlow$1
        ? /* PayoutConnector */ 2
        : /* FRMPlayer */ 0;
      var connectorsList = ConnectorUtils.getProcessorsListFromJson(
        ConnectorListMapper.getArrayOfConnectorListPayloadType(response),
        removeFromList,
        undefined,
      );
      connectorsList.reverse();
      Curry._1(setFilteredConnectorData, function (param) {
        return connectorsList.map(function (prim) {
          return prim;
        });
      });
      Curry._1(setPreviouslyConnectedData, function (param) {
        return connectorsList.map(function (prim) {
          return prim;
        });
      });
      Curry._1(setConfiguredConnectors, function (param) {
        return ConnectorUtils.getConnectorTypeArrayFromListConnectors(
          undefined,
          connectorsList,
        );
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "Failed to fetch",
        };
      });
    }
  };
  React.useEffect(
    function () {
      getConnectorListAndUpdateState(undefined);
    },
    [isPayoutFlow$1],
  );
  var filterLogic = ReactDebounce.useDebounced(200, function (ob) {
    var arr = ob[1];
    var searchText = ob[0];
    var filteredList = LogicUtils.isNonEmptyString(searchText)
      ? arr.filter(function (obj) {
          if (obj == null) {
            return false;
          } else if (
            LogicUtils.isContainingStringLowercase(
              obj.connector_name,
              searchText,
            )
          ) {
            return true;
          } else {
            return LogicUtils.isContainingStringLowercase(
              obj.profile_id,
              searchText,
            );
          }
        })
      : arr;
    Curry._1(setFilteredConnectorData, function (param) {
      return filteredList;
    });
  });
  var entityPrefix = isPayoutFlow$1 ? "payout" : "";
  var urlPrefix = isPayoutFlow$1 ? "payoutconnectors/new" : "connectors/new";
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var connectorsAvailableForIntegration = featureFlagDetails.isLiveMode
    ? ConnectorUtils.connectorListForLive
    : isPayoutFlow$1
      ? ConnectorUtils.payoutConnectorList
      : ConnectorUtils.connectorList;
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      PageLoaderWrapper.make,
      {
        children: Caml_option.some(null),
        screenState: match$1[0],
      },
      React.createElement(UIUtils.RenderIf.make, {
        condition:
          !featureFlagDetails.isLiveMode &&
          configuredConnectors.length === 0 &&
          urlPrefix === "connectors/new",
        children: React.createElement(
          "div",
          {
            className:
              "flex flex-col md:flex-row border rounded-md bg-white gap-4 shadow-generic_shadow mb-12",
          },
          React.createElement(
            "div",
            {
              className:
                "flex flex-col justify-evenly gap-6 pl-14 pb-14 pt-14 pr-2 md:pr-0",
            },
            React.createElement(
              "div",
              {
                className: "flex flex-col gap-2.5",
              },
              React.createElement(
                "div",
                undefined,
                React.createElement(
                  "p",
                  {
                    className: textStyle,
                  },
                  "No Test Credentials?",
                ),
                React.createElement(
                  "p",
                  {
                    className: textStyle,
                  },
                  "Connect a Dummy Processor",
                ),
              ),
              React.createElement(
                "p",
                {
                  className: subtextStyle,
                },
                "Start simulating payments and refunds with a dummy processor setup.",
              ),
            ),
            React.createElement(Button.make, {
              text: "Connect Now",
              buttonType: /* Primary */ 0,
              rightIcon: {
                TAG: /* CustomIcon */ 1,
                _0: React.createElement(Icon.make, {
                  name: "thin-right-arrow",
                  size: 20,
                  className: "cursor-pointer",
                }),
              },
              onClick: function (param) {
                Curry._1(setProcessorModal, function (param) {
                  return true;
                });
              },
              customButtonStyle: "group w-1/5",
            }),
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: !isMobileView,
            children: React.createElement(
              "div",
              {
                className:
                  "h-30 md:w-[37rem] flex justify-end hidden laptop:block",
              },
              React.createElement("img", {
                src: "/assets/DummyConnectorImage.svg",
              }),
            ),
          }),
        ),
      }),
      React.createElement(PageUtils.PageHeading.make, {
        title: isPayoutFlow$1 ? "Payout Processors" : "Payment Processors",
        subTitle: isPayoutFlow$1
          ? "Connect and manage payout processors for disbursements and settlements"
          : "Connect a test processor and get started with testing your payments",
        customHeadingStyle: "mb-10",
      }),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-14",
        },
        React.createElement(UIUtils.RenderIf.make, {
          condition: showFeedbackModal,
          children: React.createElement(HSwitchFeedBackModal.make, {
            modalHeading: "Tell us about your integration experience",
            setShowModal: match.setShowFeedbackModal,
            showModal: showFeedbackModal,
            feedbackVia: "connected_a_connector",
          }),
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition: configuredConnectors.length > 0,
          children: React.createElement(LoadedTable.make, {
            title: "Connected Processors",
            actualData: filteredConnectorData,
            totalResults: filteredConnectorData.length,
            resultsPerPage: 20,
            offset: match$5[0],
            setOffset: match$5[1],
            entity: ConnectorTableUtils.connectorEntity(
              "" + entityPrefix + "connectors",
              userPermissionJson.connectorsManage,
            ),
            currrentFetchCount: filteredConnectorData.length,
            filters: Caml_option.some(
              React.createElement(TableSearchFilter.make, {
                data: match$3[0],
                filterLogic: filterLogic,
                placeholder: "Search Processor or Country or Business Label",
                searchVal: match$6[0],
                setSearchVal: match$6[1],
                customSearchBarWrapperWidth: "w-full lg:w-1/3",
                customInputBoxWidth: "w-full",
              }),
            ),
            collapseTableRow: false,
          }),
        }),
        React.createElement(ProcessorCards.make, {
          connectorsAvailableForIntegration: connectorsAvailableForIntegration,
          configuredConnectors: configuredConnectors,
          urlPrefix: urlPrefix,
          setProcessorModal: setProcessorModal,
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition: processorModal,
          children: React.createElement(DummyProcessorModal.make, {
            processorModal: processorModal,
            setProcessorModal: setProcessorModal,
            urlPrefix: urlPrefix,
            configuredConnectors: configuredConnectors,
            connectorsAvailableForIntegration:
              connectorsAvailableForIntegration,
          }),
        }),
      ),
    ),
  );
}

var make = ConnectorList;

export { make };
/* Icon Not a pure module */
