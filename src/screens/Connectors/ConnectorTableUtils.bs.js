// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as PermissionUtils from "../UserManagement/PermissionUtils.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";

var defaultColumns = [
  /* Name */ 0, /* ProfileId */ 5, /* ProfileName */ 6, /* ConnectorLabel */ 7,
  /* Status */ 2, /* Disabled */ 3, /* TestMode */ 1, /* Actions */ 4,
  /* PaymentMethods */ 8,
];

function getConnectorObjectFromListViaId(connectorList, mca_id) {
  return Core__Option.getOr(
    connectorList.find(function (ele) {
      return ele.merchant_connector_id === mca_id;
    }),
    ConnectorListMapper.getProcessorPayloadType({}),
  );
}

function getAllPaymentMethods(paymentMethodsArray) {
  return Core__Array.reduce(paymentMethodsArray, [], function (acc, item) {
    return acc.concat([LogicUtils.capitalizeString(item.payment_method)]);
  });
}

function getHeading(colType) {
  switch (colType) {
    case /* Name */ 0:
      return Table.makeHeaderInfo(
        "connector_name",
        "Processor",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* TestMode */ 1:
      return Table.makeHeaderInfo(
        "test_mode",
        "Test Mode",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Status */ 2:
      return Table.makeHeaderInfo(
        "status",
        "Integration status",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Disabled */ 3:
      return Table.makeHeaderInfo(
        "disabled",
        "Disabled",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Actions */ 4:
      return Table.makeHeaderInfo(
        "actions",
        "",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ProfileId */ 5:
      return Table.makeHeaderInfo(
        "profile_id",
        "Profile Id",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ProfileName */ 6:
      return Table.makeHeaderInfo(
        "profile_name",
        "Profile Name",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorLabel */ 7:
      return Table.makeHeaderInfo(
        "connector_label",
        "Connector Label",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentMethods */ 8:
      return Table.makeHeaderInfo(
        "payment_methods",
        "Payment Methods",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function connectorStatusStyle(connectorStatus) {
  var match = connectorStatus.toLowerCase();
  if (match === "active") {
    return "text-green-700";
  } else {
    return "text-grey-800 opacity-50";
  }
}

function getCell(connector, colType) {
  switch (colType) {
    case /* Name */ 0:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: connector.connector_name,
        }),
        _1: "",
      };
    case /* TestMode */ 1:
      return {
        TAG: /* Text */ 1,
        _0: connector.test_mode ? "True" : "False",
      };
    case /* Status */ 2:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(
          "div",
          {
            className:
              "font-semibold " + connectorStatusStyle(connector.status) + "",
          },
          connector.status.toUpperCase(),
        ),
        _1: "",
      };
    case /* Disabled */ 3:
      return {
        TAG: /* Label */ 0,
        _0: {
          title: connector.disabled ? "DISABLED" : "ENABLED",
          color: connector.disabled ? /* LabelRed */ 1 : /* LabelGreen */ 0,
        },
      };
    case /* Actions */ 4:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement("div", undefined),
        _1: "",
      };
    case /* ProfileId */ 5:
      return {
        TAG: /* DisplayCopyCell */ 11,
        _0: connector.profile_id,
      };
    case /* ProfileName */ 6:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(
          HelperComponents.BusinessProfileComponent.make,
          {
            profile_id: connector.profile_id,
          },
        ),
        _1: "",
      };
    case /* ConnectorLabel */ 7:
      return {
        TAG: /* Text */ 1,
        _0: connector.connector_label,
      };
    case /* PaymentMethods */ 8:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(
          "div",
          undefined,
          getAllPaymentMethods(connector.payment_methods_enabled).join(", "),
        ),
        _1: "",
      };
  }
}

function comparatorFunction(connector1, connector2) {
  return connector1.connector_name.localeCompare(connector2.connector_name);
}

function sortPreviouslyConnectedList(arr) {
  return arr.toSorted(comparatorFunction);
}

function getPreviouslyConnectedList(json) {
  return LogicUtils.getArrayDataFromJson(
    json,
    ConnectorListMapper.getProcessorPayloadType,
  );
}

function connectorEntity(path, permission) {
  return EntityType.makeEntity(
    "",
    getPreviouslyConnectedList,
    defaultColumns,
    undefined,
    getHeading,
    getCell,
    "",
    undefined,
    undefined,
    undefined,
    undefined,
    function (connec) {
      return PermissionUtils.linkForGetShowLinkViaAccess(
        permission,
        HSwitchGlobalVars.appendDashboardPath(
          "/" +
            path +
            "/" +
            connec.merchant_connector_id +
            "?name=" +
            connec.connector_name +
            "",
        ),
      );
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

export {
  defaultColumns,
  getConnectorObjectFromListViaId,
  getAllPaymentMethods,
  getHeading,
  connectorStatusStyle,
  getCell,
  comparatorFunction,
  sortPreviouslyConnectedList,
  getPreviouslyConnectedList,
  connectorEntity,
};
/* Table Not a pure module */
