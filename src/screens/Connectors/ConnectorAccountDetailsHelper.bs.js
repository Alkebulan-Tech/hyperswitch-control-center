// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Tabs from "../../components/Tabs.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as CheckBoxIcon from "../../components/custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as CurrencyUtils from "../Utils/CurrencyUtils.bs.js";
import * as ConnectorUtils from "./ConnectorUtils.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as ReactFinalForm from "../../libraries/ReactFinalForm.bs.js";
import * as BusinessProfile from "../Settings/BusinessMapping/BusinessProfile.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";

var metaDataInputKeysToIgnore = ["google_pay", "apple_pay", "zen_apple_pay"];

var connectorsWithIntegrationSteps = [
  {
    TAG: /* Processors */ 0,
    _0: /* ADYEN */ 0,
  },
  {
    TAG: /* Processors */ 0,
    _0: /* CHECKOUT */ 1,
  },
  {
    TAG: /* Processors */ 0,
    _0: /* STRIPE */ 6,
  },
  {
    TAG: /* Processors */ 0,
    _0: /* PAYPAL */ 26,
  },
];

function getCurrencyOption(currencyType) {
  return {
    label: CurrencyUtils.getCurrencyCodeStringFromVariant(currencyType),
    value: CurrencyUtils.getCurrencyCodeStringFromVariant(currencyType),
  };
}

function currencyField(
  name,
  optionsOpt,
  disableSelectOpt,
  toolTipTextOpt,
  param,
) {
  var options =
    optionsOpt !== undefined ? optionsOpt : CurrencyUtils.currencyList;
  var disableSelect = disableSelectOpt !== undefined ? disableSelectOpt : false;
  var toolTipText = toolTipTextOpt !== undefined ? toolTipTextOpt : "";
  var arg = options.map(getCurrencyOption);
  var arg$1 = disableSelect;
  return FormRenderer.makeFieldInfo(
    "Currency",
    undefined,
    name,
    function (param) {
      return function (param$1) {
        var param$2 = "Select Currency";
        var param$3 = true;
        var param$4;
        var param$5;
        var param$6;
        var param$7;
        var param$8;
        var param$9 = "max-h-48";
        var param$10;
        var param$11;
        var param$12;
        var param$13;
        var param$14;
        var param$15;
        var param$16;
        var param$17;
        var param$18;
        var param$19;
        var param$20;
        var param$21;
        var param$22;
        var param$23;
        var param$24;
        var param$25;
        var param$26;
        var param$27;
        var param$28;
        var param$29;
        return InputFields.selectInput(
          param,
          arg,
          param$1,
          param$2,
          param$3,
          param$4,
          arg$1,
          param$5,
          param$6,
          param$7,
          param$8,
          param$9,
          param$10,
          param$11,
          param$12,
          param$13,
          param$14,
          param$15,
          param$16,
          param$17,
          param$18,
          param$19,
          param$20,
          param$21,
          param$22,
          param$23,
          param$24,
          param$25,
          param$26,
          param$27,
          param$28,
          param$29,
        );
      };
    },
    toolTipText,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    true,
    undefined,
    undefined,
    undefined,
  );
}

function toggleField(name) {
  var partial_arg = "rounded-lg";
  var func = function (param, param$1, param$2) {
    return InputFields.boolInput(
      false,
      undefined,
      partial_arg,
      param,
      param$1,
      param$2,
    );
  };
  return FormRenderer.makeFieldInfo(
    "Pull Mechanism Enabled",
    undefined,
    name,
    function (param) {
      var func$1 = Curry._1(func, param);
      return function (param) {
        return Curry._2(func$1, param, undefined);
      };
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

function inputField(
  name,
  field,
  label,
  connector,
  getPlaceholder,
  checkRequiredFields,
  disabled,
  description,
  toolTipPositionOpt,
  param,
) {
  var toolTipPosition =
    toolTipPositionOpt !== undefined ? toolTipPositionOpt : /* Right */ 3;
  var arg = disabled;
  return FormRenderer.makeFieldInfo(
    label,
    undefined,
    name,
    function (param) {
      return function (param$1) {
        var param$2;
        var param$3;
        var param$4;
        var param$5;
        var param$6;
        var param$7;
        var param$8;
        var param$9;
        var param$10;
        var param$11;
        var param$12;
        var param$13;
        var param$14;
        var param$15;
        var param$16;
        var param$17;
        var param$18;
        var param$19;
        var param$20;
        var param$21;
        var param$22;
        var param$23;
        var param$24;
        var param$25;
        var param$26;
        return InputFields.textInput(
          param,
          param$1,
          param$2,
          arg,
          param$3,
          param$4,
          param$5,
          param$6,
          param$7,
          param$8,
          param$9,
          param$10,
          param$11,
          param$12,
          param$13,
          param$14,
          param$15,
          param$16,
          param$17,
          param$18,
          param$19,
          param$20,
          param$21,
          param$22,
          param$23,
          param$24,
          param$25,
          param$26,
        );
      };
    },
    description,
    toolTipPosition,
    undefined,
    undefined,
    getPlaceholder !== undefined
      ? Curry._3(getPlaceholder, connector, field, label)
      : "Enter " + LogicUtils.snakeToTitle(label) + "",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    checkRequiredFields !== undefined
      ? Curry._2(checkRequiredFields, connector, field)
      : true,
    undefined,
    undefined,
    undefined,
  );
}

function ConnectorAccountDetailsHelper$ErrorValidation(props) {
  var fieldName = props.fieldName;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var appPrefix = LogicUtils.useUrlPrefix(undefined);
  var errorDict = LogicUtils.getDictFromJsonObject(
    Curry._1(props.validate, formState.values),
  );
  var match = ReactFinalForm$1.useField(fieldName).meta;
  var err = match.touched ? errorDict[fieldName] : undefined;
  return React.createElement(UIUtils.RenderIf.make, {
    condition: Core__Option.isSome(err),
    children: React.createElement(
      "div",
      {
        className:
          "flex flex-row items-center text-orange-950 dark:text-orange-400 pt-2 text-base font-medium text-start ml-1",
      },
      React.createElement(
        "div",
        {
          className: "flex mr-2",
        },
        React.createElement("img", {
          className: "w-4 h-4 my-auto border-gray-100",
          alt: "warning",
          src: "" + appPrefix + "/icons/warning.svg",
        }),
      ),
      LogicUtils.getStringFromJson(Core__Option.getOr(err, ""), ""),
    ),
  });
}

var ErrorValidation = {
  make: ConnectorAccountDetailsHelper$ErrorValidation,
};

function ConnectorAccountDetailsHelper$RenderConnectorInputFields(props) {
  var description = props.description;
  var disabled = props.disabled;
  var isLabelNested = props.isLabelNested;
  var getPlaceholder = props.getPlaceholder;
  var checkRequiredFields = props.checkRequiredFields;
  var keysToIgnore = props.keysToIgnore;
  var name = props.name;
  var details = props.details;
  var selectedConnector = props.selectedConnector;
  var connector = props.connector;
  var keysToIgnore$1 = keysToIgnore !== undefined ? keysToIgnore : [];
  var isLabelNested$1 = isLabelNested !== undefined ? isLabelNested : true;
  var disabled$1 = disabled !== undefined ? disabled : false;
  var description$1 = description !== undefined ? description : "";
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var keys = Object.keys(details).filter(function (ele) {
    return !keysToIgnore$1.includes(ele);
  });
  return keys.map(function (field, i) {
    var label =
      field === "pull_mechanism_for_external_3ds_enabled"
        ? "Pull Mechanism Enabled"
        : LogicUtils.getString(details, field, "");
    var formName = isLabelNested$1 ? "" + name + "." + field + "" : name;
    var tmp;
    var exit = 0;
    switch (connector.TAG | 0) {
      case /* Processors */ 0:
        if (connector._0 !== 2 || field !== "merchant_config_currency") {
          exit = 1;
        } else {
          tmp = currencyField(
            formName,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        }
        break;
      case /* ThreeDsAuthenticator */ 1:
        if (
          connector._0 ||
          field !== "pull_mechanism_for_external_3ds_enabled"
        ) {
          exit = 1;
        } else {
          tmp = toggleField(formName);
        }
        break;
      case /* UnknownConnector */ 2:
        exit = 1;
        break;
    }
    if (exit === 1) {
      tmp = inputField(
        formName,
        field,
        label,
        connector,
        getPlaceholder,
        checkRequiredFields,
        disabled$1,
        description$1,
        undefined,
        undefined,
      );
    }
    var arg = featureFlagDetails.isLiveMode;
    return JsxPPXReactSupport.createElementWithKey(
      i.toString(),
      UIUtils.RenderIf.make,
      {
        condition: LogicUtils.isNonEmptyString(label),
        children: React.createElement(AddDataAttributes.make, {
          attributes: [
            ["data-testid", LogicUtils.titleToSnake(label).toLowerCase()],
          ],
          children: React.createElement(
            "div",
            {
              key: label,
            },
            React.createElement(FormRenderer.FieldRenderer.make, {
              field: tmp,
              labelClass: "font-semibold !text-hyperswitch_black",
            }),
            React.createElement(ConnectorAccountDetailsHelper$ErrorValidation, {
              fieldName: formName,
              validate: function (param) {
                return ConnectorUtils.validate(
                  param,
                  selectedConnector,
                  details,
                  formName,
                  arg,
                );
              },
            }),
          ),
        }),
      },
    );
  });
}

var RenderConnectorInputFields = {
  make: ConnectorAccountDetailsHelper$RenderConnectorInputFields,
};

function ConnectorAccountDetailsHelper$CashToCodeSelectBox(props) {
  var selectedCashToCodeMthd = props.selectedCashToCodeMthd;
  var dict = props.dict;
  var match = React.useContext(ConfigContext.configContext);
  var p2RegularTextStyle =
    "" +
    HSwitchUtils.getTextClass([/* P2 */ 4, /* Medium */ 1]) +
    " text-grey-700 opacity-50";
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowWalletConfigurationModal = match$1[1];
  var showWalletConfigurationModal = match$1[0];
  var match$2 = React.useState(function () {
    return "";
  });
  var setSelectedCountry = match$2[1];
  var country = match$2[0];
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var isSelected = function (country) {
    var formValues = LogicUtils.getDictfromDict(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(
          LogicUtils.getDictFromJsonObject(formState.values),
          "connector_account_details",
        ),
        "auth_key_map",
      ),
      country,
    );
    var wasmValues = Object.keys(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictfromDict(dict, country),
        selectedCashToCodeMthd.toLowerCase(),
      ),
    );
    return Core__Option.isNone(
      wasmValues.find(function (ele) {
        return LogicUtils.getString(formValues, ele, "").length <= 0;
      }),
    );
  };
  return React.createElement(
    "div",
    undefined,
    props.opts.map(function (country) {
      return React.createElement(
        "div",
        {
          className: "flex items-center gap-2 break-words p-2",
        },
        React.createElement(
          "div",
          {
            onClick: function (_e) {
              Curry._1(setShowWalletConfigurationModal, function (param) {
                return !showWalletConfigurationModal;
              });
              Curry._1(setSelectedCountry, function (param) {
                return country;
              });
            },
          },
          React.createElement(CheckBoxIcon.make, {
            isSelected: isSelected(country),
          }),
        ),
        React.createElement(
          "p",
          {
            className: p2RegularTextStyle,
          },
          LogicUtils.snakeToTitle(country),
        ),
      );
    }),
    React.createElement(Modal.make, {
      showModal: showWalletConfigurationModal,
      setShowModal: setShowWalletConfigurationModal,
      children: React.createElement(
        "div",
        undefined,
        React.createElement(
          ConnectorAccountDetailsHelper$RenderConnectorInputFields,
          {
            connector: props.connector,
            selectedConnector: props.selectedConnector,
            details: LogicUtils.getDictfromDict(
              LogicUtils.getDictfromDict(dict, country),
              selectedCashToCodeMthd.toLowerCase(),
            ),
            name: "connector_account_details.auth_key_map." + country + "",
          },
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col justify-center mt-4",
          },
          React.createElement(Button.make, {
            text: "Proceed",
            buttonType: /* Primary */ 0,
            onClick: function (param) {
              Curry._1(setShowWalletConfigurationModal, function (param) {
                return false;
              });
            },
          }),
        ),
      ),
      modalHeading: "Additional Details to enable",
      modalClass:
        "w-full p-4 md:w-1/3 !h-full overflow-y-scroll !overflow-x-hidden rounded-none text-jp-gray-900",
      childClass: "",
      paddingClass: "",
      headerTextClass:
        "" +
        match.globalUIConfig.font.textColor.primaryNormal +
        " font-bold text-xl",
      revealFrom: /* Right */ 1,
    }),
  );
}

var CashToCodeSelectBox = {
  make: ConnectorAccountDetailsHelper$CashToCodeSelectBox,
};

function ConnectorAccountDetailsHelper$CashToCodeMethods(props) {
  var connector = props.connector;
  var selectedConnector = props.selectedConnector;
  var dict = ConnectorUtils.getAuthKeyMapFromConnectorAccountFields(
    props.connectorAccountFields,
  );
  var match = React.useState(function () {
    return "Classic";
  });
  var setCashToCodeMthd = match[1];
  var selectedCashToCodeMthd = match[0];
  var tabs = ["Classic", "Evoucher"];
  var tabList = tabs.map(function (tab) {
    return {
      title: tab,
      renderContent: function (param) {
        return React.createElement(
          ConnectorAccountDetailsHelper$CashToCodeSelectBox,
          {
            opts: Object.keys(dict),
            dict: dict,
            selectedCashToCodeMthd: selectedCashToCodeMthd,
            connector: connector,
            selectedConnector: selectedConnector,
          },
        );
      },
    };
  });
  return React.createElement(Tabs.make, {
    tabs: tabList,
    onTitleClick: function (tabIndex) {
      Curry._1(setCashToCodeMthd, function (param) {
        return LogicUtils.getValueFromArray(tabs, tabIndex, "Classic");
      });
    },
    disableIndicationArrow: true,
    lightThemeColor: "black",
    defaultClasses:
      "font-ibm-plex w-max flex flex-auto flex-row items-center justify-center px-6 font-semibold text-body",
    showBorder: false,
    includeMargin: false,
  });
}

var CashToCodeMethods = {
  make: ConnectorAccountDetailsHelper$CashToCodeMethods,
};

function ConnectorAccountDetailsHelper$ConnectorConfigurationFields(props) {
  var selectedConnector = props.selectedConnector;
  var connector = props.connector;
  var connectorAccountFields = props.connectorAccountFields;
  var tmp;
  var exit = 0;
  switch (connector.TAG | 0) {
    case /* Processors */ 0:
      if (connector._0 !== 38) {
        exit = 1;
      } else {
        tmp = React.createElement(
          ConnectorAccountDetailsHelper$CashToCodeMethods,
          {
            connectorAccountFields: connectorAccountFields,
            selectedConnector: selectedConnector,
            connector: connector,
          },
        );
      }
      break;
    case /* ThreeDsAuthenticator */ 1:
    case /* UnknownConnector */ 2:
      exit = 1;
      break;
  }
  if (exit === 1) {
    tmp = React.createElement(
      ConnectorAccountDetailsHelper$RenderConnectorInputFields,
      {
        connector: connector,
        selectedConnector: selectedConnector,
        details: connectorAccountFields,
        name: "connector_account_details",
        getPlaceholder: ConnectorUtils.getPlaceHolder,
      },
    );
  }
  return React.createElement(
    "div",
    {
      className: "flex flex-col",
    },
    tmp,
    React.createElement(
      ConnectorAccountDetailsHelper$RenderConnectorInputFields,
      {
        connector: connector,
        selectedConnector: selectedConnector,
        details: props.connectorLabelDetailField,
        name: "connector_label",
        keysToIgnore: metaDataInputKeysToIgnore,
        checkRequiredFields: ConnectorUtils.getMetaDataRequiredFields,
        isLabelNested: false,
        description:
          "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports. Eg: if your profile label is 'default', connector label can be 'stripe_default'",
      },
    ),
    React.createElement(
      ConnectorAccountDetailsHelper$RenderConnectorInputFields,
      {
        connector: connector,
        selectedConnector: selectedConnector,
        details: props.connectorMetaDataFields,
        name: "metadata",
        keysToIgnore: metaDataInputKeysToIgnore,
        checkRequiredFields: ConnectorUtils.getMetaDataRequiredFields,
      },
    ),
    React.createElement(
      ConnectorAccountDetailsHelper$RenderConnectorInputFields,
      {
        connector: connector,
        selectedConnector: selectedConnector,
        details: props.connectorWebHookDetails,
        name: "connector_webhook_details",
        checkRequiredFields: ConnectorUtils.getWebHookRequiredFields,
      },
    ),
  );
}

var ConnectorConfigurationFields = {
  make: ConnectorAccountDetailsHelper$ConnectorConfigurationFields,
};

function ConnectorAccountDetailsHelper$BusinessProfileRender(props) {
  var selectedConnector = props.selectedConnector;
  var isUpdateFlow = props.isUpdateFlow;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match$1.setDashboardPageState;
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var connectorLabelOnChange =
    ReactFinalForm$1.useField("connector_label").input.onChange;
  var match$2 = React.useState(function () {
    return false;
  });
  var hereTextStyle = isUpdateFlow
    ? "text-grey-700 opacity-50 cursor-not-allowed"
    : "" +
      match.globalUIConfig.font.textColor.primaryNormal +
      "  cursor-pointer";
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: FormRenderer.makeFieldInfo(
        "Profile",
        undefined,
        "profile_id",
        function (input, param) {
          return InputFields.selectInput(
            {
              name: input.name,
              onBlur: input.onBlur,
              onChange: function (ev) {
                var profileName = Core__Option.getOr(
                  businessProfiles.find(function (ele) {
                    return ele.profile_id === ev;
                  }),
                  defaultBusinessProfile,
                ).profile_name;
                Curry._1(
                  connectorLabelOnChange,
                  "" + selectedConnector + "_" + profileName + "",
                );
                Curry._1(input.onChange, ev);
              },
              onFocus: input.onFocus,
              value: input.value,
              checked: input.checked,
            },
            MerchantAccountUtils.businessProfileNameDropDownOption(
              businessProfiles,
            ),
            "",
            "Select Profile",
            true,
            undefined,
            isUpdateFlow,
            undefined,
            undefined,
            undefined,
            undefined,
            "max-h-48",
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
        },
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        true,
        undefined,
        undefined,
        undefined,
      ),
      labelClass: "font-semibold !text-black",
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: !isUpdateFlow,
      children: React.createElement(
        "div",
        {
          className: "text-gray-400 text-sm mt-3",
        },
        React.createElement("span", undefined, "Manage your list of profiles."),
        React.createElement(
          "span",
          {
            className: "ml-1 " + hereTextStyle + "",
            onClick: function (param) {
              Curry._1(setDashboardPageState, function (param) {
                return "HOME";
              });
              RescriptReactRouter.push(
                HSwitchGlobalVars.appendDashboardPath("/business-profiles"),
              );
            },
          },
          "here.",
        ),
      ),
    }),
    React.createElement(BusinessProfile.make, {
      isFromSettings: false,
      showModalFromOtherScreen: match$2[0],
      setShowModalFromOtherScreen: match$2[1],
    }),
  );
}

var BusinessProfileRender = {
  make: ConnectorAccountDetailsHelper$BusinessProfileRender,
};

function ConnectorAccountDetailsHelper$VerifyConnectorModal(props) {
  var setVerifyDone = props.setVerifyDone;
  var setShowVerifyModal = props.setShowVerifyModal;
  return React.createElement(Modal.make, {
    showModal: props.showVerifyModal,
    setShowModal: setShowVerifyModal,
    children: React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className: "flex flex-col mb-2 p-2 m-2",
        },
        React.createElement(
          "div",
          {
            className: "flex p-3",
          },
          React.createElement("img", {
            className: "h-12 my-auto border-gray-100 w-fit mt-0",
            alt: "warning",
            src: "/icons/warning.svg",
          }),
          React.createElement(
            "div",
            {
              className: "text-jp-gray-900",
            },
            React.createElement(
              "div",
              {
                className:
                  "font-semibold ml-4 text-xl px-2 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
              },
              "Are you sure you want to proceed?",
            ),
            React.createElement(
              "div",
              {
                className:
                  "whitespace-pre-line break-all flex flex-col gap-1  p-2 ml-4 text-base dark:text-jp-gray-text_darktheme dark:text-opacity-50 font-medium leading-7 opacity-50",
              },
              "Received the following error from " +
                LogicUtils.snakeToTitle(props.connector) +
                ":",
            ),
            React.createElement(
              "div",
              {
                className:
                  "whitespace-pre-line break-all flex flex-col gap-1 p-4 ml-6 text-base dark:text-jp-gray-text_darktheme dark:text-opacity-50 bg-red-100 rounded-md font-semibold",
              },
              "" + Core__Option.getOr(props.verifyErrorMessage, "") + "",
            ),
            React.createElement(UIUtils.RenderIf.make, {
              condition: props.suggestedActionExists,
              children: props.suggestedAction,
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-row justify-end gap-5 mt-4 mb-2 p-3",
          },
          React.createElement(FormRenderer.SubmitButton.make, {
            text: "Proceed Anyway",
            buttonType: /* Secondary */ 1,
            loadingText: "Processing...",
          }),
          React.createElement(Button.make, {
            text: "Cancel",
            buttonType: /* Primary */ 0,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              Curry._1(setVerifyDone, function (param) {
                return /* NoAttempt */ 2;
              });
              Curry._1(setShowVerifyModal, function (param) {
                return false;
              });
            },
          }),
        ),
      ),
    ),
    modalHeading: " ",
    modalClass: "w-full md:w-5/12 mx-auto top-1/3 relative",
    childClass: "p-0 m-0 -mt-8",
    headingClass: "h-2 bg-orange-960 rounded-t-xl",
    showCloseIcon: false,
    onCloseClickCustomFun: function (param) {
      Curry._1(setVerifyDone, function (param) {
        return /* NoAttempt */ 2;
      });
      Curry._1(setShowVerifyModal, function (param) {
        return false;
      });
    },
    customHeight: "border-0 h-fit",
  });
}

var VerifyConnectorModal = {
  make: ConnectorAccountDetailsHelper$VerifyConnectorModal,
};

function ConnectorAccountDetailsHelper$ConnectorHeaderWrapper(props) {
  var connectorType = props.connectorType;
  var conditionForIntegrationSteps = props.conditionForIntegrationSteps;
  var handleShowModal = props.handleShowModal;
  var connector = props.connector;
  var conditionForIntegrationSteps$1 =
    conditionForIntegrationSteps !== undefined
      ? conditionForIntegrationSteps
      : true;
  var connectorType$1 =
    connectorType !== undefined ? connectorType : /* Processor */ 1;
  var match = React.useContext(ConfigContext.configContext);
  var connectorNameFromType = ConnectorUtils.getConnectorNameTypeFromString(
    connector,
    undefined,
    undefined,
  );
  var setShowModalFunction =
    handleShowModal !== undefined ? handleShowModal : function (param) {};
  var tmp;
  switch (connectorNameFromType.TAG | 0) {
    case /* Processors */ 0:
      tmp = connectorNameFromType._0 === 2;
      break;
    case /* ThreeDsAuthenticator */ 1:
    case /* UnknownConnector */ 2:
      tmp = false;
      break;
  }
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "div",
      {
        className:
          "flex items-center justify-between border-b p-2 md:px-10 md:py-6",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-2 items-center",
        },
        React.createElement(GatewayIcon.make, {
          gateway: connector.toUpperCase(),
        }),
        React.createElement(
          "h2",
          {
            className: "text-xl font-semibold",
          },
          ConnectorUtils.getDisplayNameForConnector(connectorType$1, connector),
        ),
      ),
      React.createElement(
        "div",
        {
          className: "flex flex-row mt-6 md:mt-0 md:justify-self-end h-min",
        },
        React.createElement(UIUtils.RenderIf.make, {
          condition:
            connectorsWithIntegrationSteps.includes(connectorNameFromType) &&
            conditionForIntegrationSteps$1,
          children: React.createElement(
            "a",
            {
              className:
                "cursor-pointer px-4 py-3 flex text-sm " +
                match.globalUIConfig.font.textColor.primaryNormal +
                " items-center mx-4",
              target: "_blank",
              onClick: function (param) {
                Curry._1(setShowModalFunction, undefined);
              },
            },
            "View integration steps",
            React.createElement(Icon.make, {
              name: "external-link-alt",
              size: 14,
              className: "ml-2",
            }),
          ),
        }),
        props.headerButton,
      ),
    ),
    React.createElement(UIUtils.RenderIf.make, {
      condition: tmp,
      children: React.createElement(
        "div",
        {
          className: "flex flex-col gap-2 p-2 md:p-10",
        },
        React.createElement(
          "h1",
          {
            className:
              "flex items-center mx-12 leading-6 text-orange-950 bg-orange-100 border w-fit p-2 rounded-md ",
          },
          React.createElement(
            "div",
            {
              className:
                "flex items-center text-orange-950 font-bold text-fs-14 mx-2",
            },
            React.createElement(Icon.make, {
              name: "hswitch-warning",
              size: 18,
              className: "mr-2",
            }),
            "Disclaimer:",
          ),
          React.createElement(
            "div",
            undefined,
            "Please ensure the payment currency matches the Braintree-configured currency for the given Merchant Account ID.",
          ),
        ),
      ),
    }),
    props.children,
  );
}

var ConnectorHeaderWrapper = {
  make: ConnectorAccountDetailsHelper$ConnectorHeaderWrapper,
};

export {
  metaDataInputKeysToIgnore,
  connectorsWithIntegrationSteps,
  getCurrencyOption,
  currencyField,
  toggleField,
  inputField,
  ErrorValidation,
  RenderConnectorInputFields,
  CashToCodeSelectBox,
  CashToCodeMethods,
  ConnectorConfigurationFields,
  BusinessProfileRender,
  VerifyConnectorModal,
  ConnectorHeaderWrapper,
};
/* Icon Not a pure module */
