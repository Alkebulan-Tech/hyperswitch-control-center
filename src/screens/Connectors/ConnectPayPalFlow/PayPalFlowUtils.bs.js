// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConnectorUtils from "../ConnectorUtils.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var listChoices = [
  {
    displayText: "No, I don't",
    choiceDescription:
      "Don't worry, easily create & activate your PayPal account in minutes.",
    variantType: /* Automatic */ 1,
  },
  {
    displayText: "Yes, I have",
    choiceDescription:
      "Simply login to your PayPal account and leave the rest to us. Or enter credentials manually.",
    variantType: /* Manual */ 0,
  },
];

function getPageDetailsForAutomatic(setupAccountStatus) {
  switch (setupAccountStatus) {
    case /* Account_not_found */ 3:
      return {
        headerText: "No account found for this email",
        subText: "No account found for this email.",
      };
    case /* Payments_not_receivable */ 4:
      return {
        headerText:
          "You currently cannot receive payments due to restriction on your PayPal account",
        subText:
          "An email has been sent to you explaining the issue. Please reach out to PayPal Customer Support for more information.",
      };
    case /* Ppcp_custom_denied */ 5:
      return {
        headerText: "Your application has been denied by PayPal",
        subText:
          "PayPal denied your application to use Advanced Credit and Debit Card Payments.",
      };
    case /* More_permissions_needed */ 6:
      return {
        headerText: "PayPal requires you to grant all permissions",
        subText:
          "You need to grant all the permissions to create and receive payments. Please click on the Signup to PayPal button and grant the permissions.",
        buttonText: "Complete Signing up",
      };
    case /* Email_not_verified */ 7:
      return {
        headerText: "Your email is yet to be confirmed!",
        subText:
          "Please confirm your email address on https://www.paypal.com/businessprofile/settings in order to receive payments.",
      };
    case /* Connect_paypal_landing */ 0:
    case /* Redirecting_to_paypal */ 1:
    case /* Manual_setup_flow */ 2:
    case /* Connector_integrated */ 8:
      return {
        headerText: "",
        subText: "",
      };
  }
}

function stringToVariantMapper(strValue) {
  switch (strValue) {
    case "account_not_found":
      return /* Account_not_found */ 3;
    case "connector_integrated":
      return /* Connector_integrated */ 8;
    case "email_not_verified":
      return /* Email_not_verified */ 7;
    case "more_permissions_needed":
      return /* More_permissions_needed */ 6;
    case "payments_not_receivable":
      return /* Payments_not_receivable */ 4;
    case "ppcp_custom_denied":
      return /* Ppcp_custom_denied */ 5;
    default:
      return /* Account_not_found */ 3;
  }
}

function handleObjectResponse(
  dict,
  setInitialValues,
  connector,
  handleStateToNextPage,
) {
  var values = LogicUtils.getJsonObjectFromDict(dict, "connector_integrated");
  var bodyTypeValue = LogicUtils.getString(
    LogicUtils.getDictfromDict(
      LogicUtils.getDictFromJsonObject(values),
      "connector_account_details",
    ),
    "auth_type",
    "",
  );
  var body = ConnectorUtils.generateInitialValuesDict(
    values,
    connector,
    bodyTypeValue,
    false,
    undefined,
    undefined,
    undefined,
  );
  Curry._1(setInitialValues, function (param) {
    return body;
  });
  return Curry._1(handleStateToNextPage, undefined);
}

function getBodyType(isUpdateFlow, configuartionType) {
  if (isUpdateFlow) {
    if (configuartionType !== 0) {
      return "SignatureKey";
    } else {
      return "BodyKey";
    }
  } else {
    return "TemporaryAuth";
  }
}

function generateConnectorPayloadPayPal(
  profileId,
  connectorId,
  connector,
  bodyType,
  connectorLabel,
  disabled,
  status,
) {
  var initialValues = LogicUtils.getJsonFromArrayOfJson([
    ["profile_id", profileId],
    ["connector_name", connector.toLowerCase()],
    ["connector_type", "payment_processor"],
    ["disabled", disabled],
    ["test_mode", true],
    ["status", status],
    ["connector_label", connectorLabel],
  ]);
  return ConnectorUtils.ignoreFields(
    ConnectorUtils.generateInitialValuesDict(
      initialValues,
      connector,
      bodyType,
      false,
      undefined,
      undefined,
      undefined,
    ),
    connectorId,
    ConnectorUtils.connectorIgnoredField,
  );
}

function generatePayPalBody(returnUrlOpt, connectorId, profileIdOpt, param) {
  var returnUrl =
    returnUrlOpt !== undefined
      ? Caml_option.valFromOption(returnUrlOpt)
      : undefined;
  var profileId =
    profileIdOpt !== undefined
      ? Caml_option.valFromOption(profileIdOpt)
      : undefined;
  if (returnUrl !== undefined) {
    return LogicUtils.getJsonFromArrayOfJson([
      ["connector", "paypal"],
      ["return_url", returnUrl],
      ["connector_id", connectorId],
    ]);
  } else {
    return LogicUtils.getJsonFromArrayOfJson([
      ["connector", "paypal"],
      ["connector_id", connectorId],
      ["profile_id", Core__Option.getOr(profileId, "")],
    ]);
  }
}

var conditionForIntegrationSteps = [
  /* Account_not_found */ 3, /* Redirecting_to_paypal */ 1,
];

function useDeleteTrackingDetails(param) {
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  return async function (connectorId, connector) {
    try {
      var url =
        "" +
        APIUtils.getURL(
          /* PAYPAL_ONBOARDING */ 34,
          /* Post */ 2,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ) +
        "/reset_tracking_id";
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["connector_id", connectorId],
        ["connector", connector],
      ]);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
}

function useDeleteConnectorAccountDetails(param) {
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  return async function (
    initialValues,
    connectorId,
    connector,
    isUpdateFlow,
    disabled,
    status,
  ) {
    try {
      var dictOfJson = LogicUtils.getDictFromJsonObject(initialValues);
      var profileIdValue = LogicUtils.getString(dictOfJson, "profile_id", "");
      var body = generateConnectorPayloadPayPal(
        profileIdValue,
        connectorId,
        connector,
        "TemporaryAuth",
        LogicUtils.getString(dictOfJson, "connector_label", ""),
        disabled,
        status,
      );
      var url = APIUtils.getURL(
        /* CONNECTOR */ 0,
        /* Post */ 2,
        Caml_option.some(isUpdateFlow ? connectorId : undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to Fetch!"),
        );
      }
      throw e;
    }
  };
}

function getAuthTypeFromConnectorDetails(json) {
  return ConnectorUtils.mapAuthType(
    LogicUtils.getString(
      LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(json),
        "connector_account_details",
      ),
      "auth_type",
      "",
    ).toLowerCase(),
  );
}

async function payPalPageState(
  setScreenState,
  url,
  setSetupAccountStatus,
  getPayPalStatus,
  setCurrentStep,
  isUpdateFlow,
) {
  try {
    var isSimplifiedPayPalFlow = LogicUtils.getBoolFromString(
      Core__Option.getOr(
        LogicUtils.getDictFromUrlSearchParams(url.search)[
          "is_simplified_paypal"
        ],
        "false",
      ),
      false,
    );
    var isRedirectedFromPaypalModal = LogicUtils.getBoolFromString(
      Core__Option.getOr(
        LogicUtils.getDictFromUrlSearchParams(url.search)["is_back"],
        "false",
      ),
      false,
    );
    setSetupAccountStatus(function (param) {
      return /* Connect_paypal_landing */ 0;
    });
    if (isRedirectedFromPaypalModal) {
      return await Curry._1(getPayPalStatus, undefined);
    } else if (
      isUpdateFlow &&
      !(isSimplifiedPayPalFlow && isRedirectedFromPaypalModal)
    ) {
      Curry._1(setCurrentStep, function (param) {
        return /* Preview */ 3;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } else {
      Curry._1(setCurrentStep, function (param) {
        return /* AutomaticFlow */ 4;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    }
  } catch (raw_e) {
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID !== Js_exn.$$Error) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "Something went wrong",
        };
      });
    }
    var err = Core__Option.getOr(e._1.message, "Something went wrong");
    return Curry._1(setScreenState, function (param) {
      return /* Error */ {
        _0: err,
      };
    });
  }
}

export {
  listChoices,
  getPageDetailsForAutomatic,
  stringToVariantMapper,
  handleObjectResponse,
  getBodyType,
  generateConnectorPayloadPayPal,
  generatePayPalBody,
  conditionForIntegrationSteps,
  useDeleteTrackingDetails,
  useDeleteConnectorAccountDetails,
  getAuthTypeFromConnectorDetails,
  payPalPageState,
};
/* APIUtils Not a pure module */
