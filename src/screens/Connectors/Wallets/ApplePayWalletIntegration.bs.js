// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../genericUtils/Form.bs.js";
import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as AuthHooks from "../../../hooks/AuthHooks.bs.js";
import * as SelectBox from "../../../components/SelectBox.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as WalletHelper from "./WalletHelper.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DownloadUtils from "../../../utils/DownloadUtils.bs.js";
import * as FormValuesSpy from "../../../components/form/FormValuesSpy.bs.js";
import * as ReactFinalForm from "../../../libraries/ReactFinalForm.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../../Utils/PageLoaderWrapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ApplePayWalletIntegrationUtils from "./ApplePayWalletIntegrationUtils.bs.js";

function ApplePayWalletIntegration$HostURL(props) {
  var prefix = props.prefix;
  var prefix$1 = prefix !== undefined ? prefix : "";
  var fieldInputVal = ReactFinalForm$1.useField("" + prefix$1 + "").input;
  var val = Core__JSON.Decode.string(fieldInputVal.value);
  var fieldInput =
    val !== undefined && LogicUtils.isNonEmptyString(val) ? val : "domain_name";
  return React.createElement(
    "p",
    {
      className: "mt-2",
    },
    "" +
      fieldInput +
      "/.well-known/apple-developer-merchantid-domain-association",
  );
}

var HostURL = {
  make: ApplePayWalletIntegration$HostURL,
};

function ApplePayWalletIntegration$MerchantBussinessCountry(props) {
  var defaultInput_input = ReactFinalForm.makeInputRecord("", function (_e) {});
  var defaultInput_meta = ReactFinalForm.makeCustomError(undefined);
  var defaultInput = {
    input: defaultInput_input,
    meta: defaultInput_meta,
  };
  var operator = Core__Option.getOr(props.fieldsArray[0], defaultInput).input;
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    Curry._1(operator.onChange, ev);
  };
  var input_onFocus = function (_ev) {};
  var input_value = operator.value;
  var input = {
    name: "string",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: true,
  };
  return React.createElement(SelectBox.BaseDropdown.make, {
    buttonText: "Select Country",
    allowMultiSelect: false,
    input: input,
    options: props.options,
    hideMultiSelectButtons: true,
    fullLength: true,
    customButtonStyle: "w-full",
  });
}

var MerchantBussinessCountry = {
  make: ApplePayWalletIntegration$MerchantBussinessCountry,
};

function renderCountryInp(options, fieldsArray) {
  return React.createElement(
    ApplePayWalletIntegration$MerchantBussinessCountry,
    {
      fieldsArray: fieldsArray,
      options: options,
    },
  );
}

function countryInput(id, options) {
  return FormRenderer.makeMultiInputFieldInfoOld(
    "Merchant Business Country",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    true,
    function (param) {
      return renderCountryInp(options, param);
    },
    [
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
      FormRenderer.makeInputFieldInfo(
        undefined,
        "" + id + ".default",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    ],
    undefined,
  );
}

function ApplePayWalletIntegration$Simplified(props) {
  var setVefifiedDomainList = props.setVefifiedDomainList;
  var setApplePayIntegrationSteps = props.setApplePayIntegrationSteps;
  var update = props.update;
  var metadataInputs = props.metadataInputs;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var updateAPIHook = APIUtils.useUpdateMethod(false, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var connectorID = HSwitchUtils.getConnectorIDFromUrl(
    Core__List.toArray(url.path),
    "",
  );
  var merchantDetailsValue = HSwitchUtils.useMerchantDetailsValue(undefined);
  var merchantId = merchantDetailsValue.merchant_id;
  var namePrefix = "apple_pay_combined.simplified.session_token_data";
  var inputField = [
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: FormRenderer.makeFieldInfo(
        "Domain Name",
        undefined,
        "" + namePrefix + ".initiative_context",
        function (param) {
          return function (param$1) {
            var param$2;
            var param$3;
            var param$4 = true;
            var param$5;
            var param$6;
            var param$7;
            var param$8 = "off";
            var param$9;
            var param$10;
            var param$11;
            var param$12;
            var param$13;
            var param$14 = "w-64";
            var param$15;
            var param$16;
            var param$17;
            var param$18;
            var param$19;
            var param$20;
            var param$21;
            var param$22;
            var param$23;
            var param$24;
            var param$25;
            var param$26;
            var param$27;
            return InputFields.textInput(
              param,
              param$1,
              param$2,
              param$3,
              param$4,
              param$5,
              param$6,
              param$7,
              param$8,
              param$9,
              param$10,
              param$11,
              param$12,
              param$13,
              param$14,
              param$15,
              param$16,
              param$17,
              param$18,
              param$19,
              param$20,
              param$21,
              param$22,
              param$23,
              param$24,
              param$25,
              param$26,
              param$27,
            );
          };
        },
        undefined,
        undefined,
        undefined,
        undefined,
        "eg. example.com",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        true,
        undefined,
        undefined,
        undefined,
      ),
      labelClass: "font-semibold !text-hyperswitch_black",
    }),
    React.createElement(FormRenderer.FieldRenderer.make, {
      field: countryInput(
        "" + namePrefix + ".merchant_business_country",
        props.merchantBusinessCountry,
      ),
      labelClass: "font-semibold !text-hyperswitch_black",
    }),
  ];
  var downloadAPIKey = React.createElement(
    "div",
    {
      className: "mt-4",
    },
    React.createElement(Button.make, {
      buttonState: /* Normal */ 0,
      text: "Download File",
      buttonType: /* Primary */ 0,
      buttonSize: /* Small */ 2,
      onClick: function (param) {
        Core__Promise.$$catch(
          Curry._8(
            fetchApi,
            HSwitchGlobalVars.urlToDownloadApplePayCertificate,
            undefined,
            undefined,
            undefined,
            /* Get */ 0,
            undefined,
            undefined,
            undefined,
          )
            .then(Fetch.$$Response.blob)
            .then(function (content) {
              DownloadUtils.download(
                "apple-developer-merchantid-domain-association",
                content,
                "text/plain",
              );
              Curry._8(
                showToast,
                "File download complete",
                /* ToastSuccess */ 3,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              );
              return Promise.resolve(undefined);
            }),
          function (param) {
            Curry._8(
              showToast,
              "Oops, something went wrong with the download. Please try again.",
              /* ToastError */ 0,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return Promise.resolve(undefined);
          },
        );
      },
      customButtonStyle: "!px-2 rounded-lg",
    }),
  );
  var onSubmit = async function (values, param) {
    try {
      var match = ApplePayWalletIntegrationUtils.constructVerifyApplePayReq(
        values,
        connectorID,
      );
      var domainName = match[1];
      var verifyAppleUrl = APIUtils.getURL(
        /* VERIFY_APPLE_PAY */ 30,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateAPIHook,
        "" + verifyAppleUrl + "/" + merchantId + "",
        match[0],
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var updatedValue =
        ApplePayWalletIntegrationUtils.constructApplePayMetadata(
          values,
          metadataInputs,
          "simplified",
        );
      Curry._1(update, updatedValue);
      Curry._1(setVefifiedDomainList, function (param) {
        return [domainName];
      });
      Curry._1(setApplePayIntegrationSteps, function (param) {
        return /* Verify */ 2;
      });
    } catch (exn) {
      Curry._8(
        showToast,
        "Failed to Verify",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  return React.createElement(
    Form.make,
    {
      children: null,
      onSubmit: onSubmit,
      initialValues: Caml_option.some(props.metaData),
      validate: function (values) {
        return ApplePayWalletIntegrationUtils.validate(
          values,
          ["initiative_context", "merchant_business_country"],
          "simplified",
        );
      },
    },
    React.createElement(WalletHelper.SimplifiedHelper.make, {
      customElement: Caml_option.some(inputField),
      heading:
        "Provide your sandbox domain where the verification file will be hosted",
      stepNumber: "1",
      subText:
        "Input the top-level domain (example.com) or sub-domain (checkout.example.com) where you wish to enable Apple Pay",
    }),
    React.createElement("hr", {
      className: "w-full",
    }),
    React.createElement(WalletHelper.SimplifiedHelper.make, {
      customElement: Caml_option.some(downloadAPIKey),
      heading: "Download domain verification file",
      stepNumber: "2",
    }),
    React.createElement("hr", {
      className: "w-full",
    }),
    React.createElement(WalletHelper.SimplifiedHelper.make, {
      customElement: Caml_option.some(
        React.createElement(ApplePayWalletIntegration$HostURL, {
          prefix: "" + namePrefix + ".initiative_context",
        }),
      ),
      heading: "Host sandbox domain association file",
      stepNumber: "3",
      subText:
        "Host the downloaded verification file at your sandbox domain in the following location :-",
    }),
    React.createElement(
      "div",
      {
        className: "w-full flex gap-2 justify-end p-6",
      },
      React.createElement(Button.make, {
        text: "Go Back",
        buttonType: /* Secondary */ 1,
        onClick: function (_ev) {
          Curry._1(setApplePayIntegrationSteps, function (param) {
            return /* Landing */ 0;
          });
        },
      }),
      React.createElement(FormRenderer.SubmitButton.make, {
        text: "Verify & Enable",
        buttonSize: /* Medium */ 1,
      }),
    ),
    React.createElement(FormValuesSpy.make, {}),
  );
}

var Simplified = {
  make: ApplePayWalletIntegration$Simplified,
};

function ApplePayWalletIntegration$Manual(props) {
  var merchantBusinessCountry = props.merchantBusinessCountry;
  var setVefifiedDomainList = props.setVefifiedDomainList;
  var setApplePayIntegrationSteps = props.setApplePayIntegrationSteps;
  var update = props.update;
  var metadataInputs = props.metadataInputs;
  var configurationFields = LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(metadataInputs, "apple_pay"),
    "session_token_data",
  );
  var namePrefix = "apple_pay_combined.manual.session_token_data";
  var fields = Object.keys(configurationFields).map(function (field, index) {
    var match = ApplePayWalletIntegrationUtils.customApplePlayFields(field);
    if (match === "merchant_business_country") {
      return React.createElement(FormRenderer.FieldRenderer.make, {
        field: countryInput(
          "" + namePrefix + "." + field + "",
          merchantBusinessCountry,
        ),
        labelClass: "font-semibold !text-hyperswitch_black",
      });
    }
    var label = LogicUtils.getString(configurationFields, field, "");
    return React.createElement(
      "div",
      {
        key: index.toString(),
      },
      React.createElement(FormRenderer.FieldRenderer.make, {
        field: FormRenderer.makeFieldInfo(
          label,
          undefined,
          "" + namePrefix + "." + field + "",
          function (param) {
            return function (param$1) {
              var param$2;
              var param$3;
              var param$4;
              var param$5;
              var param$6;
              var param$7;
              var param$8;
              var param$9;
              var param$10;
              var param$11;
              var param$12;
              var param$13;
              var param$14;
              var param$15;
              var param$16;
              var param$17;
              var param$18;
              var param$19;
              var param$20;
              var param$21;
              var param$22;
              var param$23;
              var param$24;
              var param$25;
              var param$26;
              var param$27;
              return InputFields.textInput(
                param,
                param$1,
                param$2,
                param$3,
                param$4,
                param$5,
                param$6,
                param$7,
                param$8,
                param$9,
                param$10,
                param$11,
                param$12,
                param$13,
                param$14,
                param$15,
                param$16,
                param$17,
                param$18,
                param$19,
                param$20,
                param$21,
                param$22,
                param$23,
                param$24,
                param$25,
                param$26,
                param$27,
              );
            };
          },
          undefined,
          undefined,
          undefined,
          undefined,
          "Enter " + LogicUtils.snakeToTitle(label) + "",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          true,
          undefined,
          undefined,
          undefined,
        ),
        labelClass: "font-semibold !text-hyperswitch_black",
      }),
    );
  });
  var onSubmit = function (values, param) {
    var domainName = LogicUtils.getString(
      ApplePayWalletIntegrationUtils.getSessionTokenDict(values, "manual"),
      "initiative_context",
      "",
    );
    var updatedValue = ApplePayWalletIntegrationUtils.constructApplePayMetadata(
      values,
      metadataInputs,
      "manual",
    );
    Curry._1(update, updatedValue);
    Curry._1(setVefifiedDomainList, function (param) {
      return [domainName];
    });
    Curry._1(setApplePayIntegrationSteps, function (param) {
      return /* Verify */ 2;
    });
    return Promise.resolve(null);
  };
  return React.createElement(
    "div",
    {
      className: "p-6 m-2",
    },
    React.createElement(WalletHelper.InfoCard.make, {
      children: React.createElement(
        "p",
        {
          className: "text-base	font-normal	",
        },
        "Follow our",
        React.createElement(
          "a",
          {
            className:
              "text-base	font-normal	 text-status-blue ml-1 underline underline-offset-4",
            href: "https://hyperswitch.io/docs/paymentMethods/wallets#apple-pay",
            target: "_blank",
          },
          " Apple Pay Setup Guide ",
        ),
        "to get help with filling the details below",
      ),
      customInfoStyle: "mb-4 mr-4",
    }),
    React.createElement(
      Form.make,
      {
        children: null,
        onSubmit: onSubmit,
        initialValues: Caml_option.some(props.metaData),
        validate: function (values) {
          return ApplePayWalletIntegrationUtils.validate(
            values,
            LogicUtils.getUniqueArray(Object.keys(configurationFields)),
            "manual",
          );
        },
      },
      fields,
      React.createElement(
        "div",
        {
          className: "flex gap-2 justify-end mt-4",
        },
        React.createElement(Button.make, {
          text: "Go Back",
          buttonType: /* Secondary */ 1,
          onClick: function (_ev) {
            Curry._1(setApplePayIntegrationSteps, function (param) {
              return /* Landing */ 0;
            });
          },
        }),
        React.createElement(FormRenderer.SubmitButton.make, {
          text: "Enable",
          buttonSize: /* Medium */ 1,
        }),
      ),
      React.createElement(FormValuesSpy.make, {}),
    ),
  );
}

var Manual = {
  make: ApplePayWalletIntegration$Manual,
};

function ApplePayWalletIntegration$Landing(props) {
  var setApplePayIntegrationSteps = props.setApplePayIntegrationSteps;
  var setShowWalletConfigurationModal = props.setShowWalletConfigurationModal;
  var appleIntegrationType = props.appleIntegrationType;
  var setApplePayIntegrationType = props.setApplePayIntegrationType;
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "div",
      {
        className: "p-6 m-2 cursor-pointer",
        onClick: function (_e) {
          Curry._1(setApplePayIntegrationType, function (param) {
            return "simplified";
          });
        },
      },
      React.createElement(
        WalletHelper.Card.make,
        {
          heading: "Web Domain",
          isSelected: appleIntegrationType === "simplified",
          children: null,
        },
        React.createElement(
          "div",
          {
            className:
              " mt-2 text-base text-hyperswitch_black opacity-50 font-normal",
          },
          "Get Apple Pay enabled on your web domains by hosting a verification file, that’s it.",
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-2 mt-4",
          },
          React.createElement(WalletHelper.CustomTag.make, {
            tagText: "Faster Configuration",
            tagSize: 4,
            tagLeftIcon: "ellipse-green",
          }),
          React.createElement(WalletHelper.CustomTag.make, {
            tagText: "Recommended",
            tagSize: 4,
            tagLeftIcon: "ellipse-green",
          }),
        ),
      ),
    ),
    React.createElement(
      "div",
      {
        className: "p-6 m-2 cursor-pointer",
        onClick: function (_e) {
          Curry._1(setApplePayIntegrationType, function (param) {
            return "manual";
          });
        },
      },
      React.createElement(
        WalletHelper.Card.make,
        {
          heading: "iOS Certificate",
          isSelected: appleIntegrationType === "manual",
          children: null,
        },
        React.createElement(
          "div",
          {
            className:
              " mt-2 text-base text-hyperswitch_black opacity-50 font-normal",
          },
          React.createElement(WalletHelper.CustomSubText.make, {}),
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-2 mt-4",
          },
          React.createElement(WalletHelper.CustomTag.make, {
            tagText: "For Web & Mobile",
            tagSize: 4,
            tagLeftIcon: "ellipse-green",
          }),
          React.createElement(WalletHelper.CustomTag.make, {
            tagText: "Additional Details Required",
            tagSize: 4,
            tagLeftIcon: "ellipse-green",
          }),
        ),
      ),
    ),
    React.createElement(
      "div",
      {
        className: "flex gap-2 justify-end m-2 p-6",
      },
      React.createElement(Button.make, {
        text: "Cancel",
        buttonType: /* Secondary */ 1,
        onClick: function (_ev) {
          Curry._1(setShowWalletConfigurationModal, function (param) {
            return false;
          });
        },
      }),
      React.createElement(Button.make, {
        text: "Continue",
        buttonType: /* Primary */ 0,
        onClick: function (_ev) {
          Curry._1(setApplePayIntegrationSteps, function (param) {
            return /* Configure */ 1;
          });
        },
      }),
    ),
  );
}

var Landing = {
  make: ApplePayWalletIntegration$Landing,
};

function ApplePayWalletIntegration$Verified(props) {
  var setShowWalletConfigurationModal = props.setShowWalletConfigurationModal;
  var setApplePayIntegrationSteps = props.setApplePayIntegrationSteps;
  var appleIntegrationType = props.appleIntegrationType;
  var setApplePayIntegrationType = props.setApplePayIntegrationType;
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "div",
      {
        className: "p-6 m-2 cursor-pointer",
      },
      React.createElement(
        "p",
        {
          className: "text-xs	font-medium	mt-4",
        },
        " Web Domains",
      ),
      props.verifiedDomainList.map(function (domainUrl, index) {
        return React.createElement(
          "div",
          {
            key: index.toString(),
            className: "mt-4 cursor-pointer",
            onClick: function (_e) {
              Curry._1(setApplePayIntegrationType, function (param) {
                return "manual";
              });
            },
          },
          React.createElement(
            "div",
            {
              className:
                "relative w-full  p-6 rounded flex flex-col justify-between border ",
            },
            React.createElement(
              "div",
              {
                className: "flex justify-between",
              },
              React.createElement(
                "div",
                {
                  className: "font-medium text-base text-hyperswitch_black ",
                },
                domainUrl,
              ),
              React.createElement(
                "div",
                undefined,
                appleIntegrationType === "manual"
                  ? React.createElement(Icon.make, {
                      name: "arrow-right",
                      size: 15,
                      onClick: function (_ev) {
                        Curry._1(setApplePayIntegrationSteps, function (param) {
                          return /* Configure */ 1;
                        });
                      },
                    })
                  : React.createElement(WalletHelper.CustomTag.make, {
                      tagText: "Verified",
                      tagSize: 4,
                      tagLeftIcon: "ellipse-green",
                      tagCustomStyle: "bg-hyperswitch_green_trans",
                    }),
              ),
            ),
          ),
        );
      }),
      React.createElement(
        "div",
        {
          className: "flex gap-2 justify-end mt-4",
        },
        React.createElement(Button.make, {
          text: "Reconfigure",
          buttonType: /* Secondary */ 1,
          onClick: function (_ev) {
            Curry._1(setApplePayIntegrationSteps, function (param) {
              return /* Landing */ 0;
            });
          },
        }),
        React.createElement(Button.make, {
          text: "Proceed",
          buttonType: /* Primary */ 0,
          onClick: function (_ev) {
            Curry._1(setShowWalletConfigurationModal, function (param) {
              return false;
            });
          },
        }),
      ),
    ),
  );
}

var Verified = {
  make: ApplePayWalletIntegration$Verified,
};

function ApplePayWalletIntegration(props) {
  var connector = props.connector;
  var setShowWalletConfigurationModal = props.setShowWalletConfigurationModal;
  var metaData = props.metaData;
  var update = props.update;
  var metadataInputs = props.metadataInputs;
  var match = React.useState(function () {
    return "simplified";
  });
  var setApplePayIntegrationType = match[1];
  var appleIntegrationType = match[0];
  var match$1 = React.useState(function () {
    return /* Landing */ 0;
  });
  var setApplePayIntegrationSteps = match$1[1];
  var match$2 = React.useState(function () {
    return [];
  });
  var setVefifiedDomainList = match$2[1];
  var match$3 = React.useState(function () {
    return [];
  });
  var setMerchantBusinessCountry = match$3[1];
  var merchantBusinessCountry = match$3[0];
  var match$4 = React.useState(function () {
    return /* Success */ 1;
  });
  var setScreenState = match$4[1];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var getProcessorDetails = async function (param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var paymentMethoConfigUrl = APIUtils.getURL(
        /* PAYMENT_METHOD_CONFIG */ 42,
        /* Get */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._1(
        fetchDetails,
        "" +
          paymentMethoConfigUrl +
          "?connector=" +
          connector +
          "&paymentMethodType=apple_pay",
      );
      var countries = LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(res),
        "countries",
        [],
      ).map(function (item) {
        var dict = LogicUtils.getDictFromJsonObject(item);
        return {
          label: LogicUtils.getString(dict, "name", ""),
          value: LogicUtils.getString(dict, "code", ""),
        };
      });
      Curry._1(setMerchantBusinessCountry, function (param) {
        return countries;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    }
  };
  React.useEffect(function () {
    getProcessorDetails(undefined);
  }, []);
  var tmp;
  switch (match$1[0]) {
    case /* Landing */ 0:
      tmp = React.createElement(ApplePayWalletIntegration$Landing, {
        setApplePayIntegrationType: setApplePayIntegrationType,
        appleIntegrationType: appleIntegrationType,
        setShowWalletConfigurationModal: setShowWalletConfigurationModal,
        setApplePayIntegrationSteps: setApplePayIntegrationSteps,
      });
      break;
    case /* Configure */ 1:
      tmp =
        appleIntegrationType === "manual"
          ? React.createElement(ApplePayWalletIntegration$Manual, {
              metadataInputs: metadataInputs,
              metaData: metaData,
              update: update,
              setApplePayIntegrationSteps: setApplePayIntegrationSteps,
              setVefifiedDomainList: setVefifiedDomainList,
              merchantBusinessCountry: merchantBusinessCountry,
            })
          : React.createElement(ApplePayWalletIntegration$Simplified, {
              metaData: metaData,
              metadataInputs: metadataInputs,
              update: update,
              setApplePayIntegrationSteps: setApplePayIntegrationSteps,
              setVefifiedDomainList: setVefifiedDomainList,
              merchantBusinessCountry: merchantBusinessCountry,
            });
      break;
    case /* Verify */ 2:
      tmp = React.createElement(ApplePayWalletIntegration$Verified, {
        verifiedDomainList: match$2[0],
        setApplePayIntegrationType: setApplePayIntegrationType,
        appleIntegrationType: appleIntegrationType,
        setApplePayIntegrationSteps: setApplePayIntegrationSteps,
        setShowWalletConfigurationModal: setShowWalletConfigurationModal,
      });
      break;
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        undefined,
        React.createElement(WalletHelper.Heading.make, {}),
        tmp,
      ),
    ),
    screenState: match$4[0],
    sectionHeight: "!h-screen",
    customLoader: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "mt-60 w-scrren flex flex-col justify-center items-center",
        },
        React.createElement(
          "div",
          {
            className: "animate-spin mb-1",
          },
          React.createElement(Icon.make, {
            name: "spinner",
            size: 20,
          }),
        ),
      ),
    ),
  });
}

var make = ApplePayWalletIntegration;

export {
  HostURL,
  MerchantBussinessCountry,
  renderCountryInp,
  countryInput,
  Simplified,
  Manual,
  Landing,
  Verified,
  make,
};
/* Form Not a pure module */
