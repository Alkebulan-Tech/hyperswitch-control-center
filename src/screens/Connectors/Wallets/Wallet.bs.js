// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as UrlUtils from "../../../utils/UrlUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as FormValuesSpy from "../../../components/form/FormValuesSpy.bs.js";
import * as ConnectorUtils from "../ConnectorUtils.bs.js";
import * as ApplePayWalletIntegration from "./ApplePayWalletIntegration.bs.js";

function getConfigurationFields(metadataInputs, method, connector) {
  var match = ConnectorUtils.getPaymentMethodTypeFromString(method);
  if (typeof match !== "number") {
    return {};
  }
  if (match === 2) {
    return LogicUtils.getDictfromDict(metadataInputs, "google_pay");
  }
  if (match < 3) {
    return {};
  }
  var match$1 = ConnectorUtils.getConnectorNameTypeFromString(
    connector,
    undefined,
    undefined,
  );
  switch (match$1.TAG | 0) {
    case /* Processors */ 0:
      if (match$1._0 === 25) {
        return LogicUtils.getDictfromDict(metadataInputs, "apple_pay");
      }
      break;
    case /* ThreeDsAuthenticator */ 1:
    case /* UnknownConnector */ 2:
      break;
  }
  return LogicUtils.getDictfromDict(
    LogicUtils.getDictfromDict(metadataInputs, "apple_pay"),
    "session_token_data",
  );
}

function Wallet$Wallets(props) {
  var paymentMethod = props.paymentMethod;
  var paymentMethodsEnabled = props.paymentMethodsEnabled;
  var updateDetails = props.updateDetails;
  var setShowWalletConfigurationModal = props.setShowWalletConfigurationModal;
  var setMetaData = props.setMetaData;
  var metaData = props.metaData;
  var method = props.method;
  var connector = LogicUtils.getString(
    UrlUtils.useGetFilterDictFromUrl(""),
    "name",
    "",
  );
  var metadataInputs = React.useMemo(
    function () {
      try {
        return LogicUtils.getDictfromDict(
          LogicUtils.getDictFromJsonObject(
            window.getConnectorConfig(connector),
          ),
          "metadata",
        );
      } catch (_error) {
        return {};
      }
    },
    [connector],
  );
  var update = function (json) {
    Curry._1(setMetaData, function (param) {
      return json;
    });
    Curry._1(
      updateDetails,
      ConnectorUtils.addMethod(paymentMethodsEnabled, paymentMethod, method),
    );
  };
  var onSubmit = function (values, param) {
    var match = ConnectorUtils.getPaymentMethodTypeFromString(
      method.payment_method_type,
    );
    var json;
    if (typeof match === "number") {
      if (match !== 2) {
        if (match >= 3) {
          var match$1 = ConnectorUtils.getConnectorNameTypeFromString(
            connector,
            undefined,
            undefined,
          );
          var exit = 0;
          switch (match$1.TAG | 0) {
            case /* Processors */ 0:
              if (match$1._0 !== 25) {
                exit = 1;
              } else {
                json = values;
              }
              break;
            case /* ThreeDsAuthenticator */ 1:
            case /* UnknownConnector */ 2:
              exit = 1;
              break;
          }
          if (exit === 1) {
            var paymentRequestData = LogicUtils.getDictfromDict(
              LogicUtils.getDictfromDict(metadataInputs, "apple_pay"),
              "payment_request_data",
            );
            LogicUtils.getDictfromDict(
              LogicUtils.getDictFromJsonObject(values),
              "apple_pay",
            )["payment_request_data"] = paymentRequestData;
            json = values;
          }
        } else {
          json = {};
        }
      } else {
        json = values;
      }
    } else {
      json = {};
    }
    update(json);
    Curry._1(setShowWalletConfigurationModal, function (param) {
      return false;
    });
    return Promise.resolve(null);
  };
  var configurationFields = getConfigurationFields(
    metadataInputs,
    method.payment_method_type,
    connector,
  );
  var validate = function (values) {
    var dict = getConfigurationFields(
      LogicUtils.getDictFromJsonObject(values),
      method.payment_method_type,
      connector,
    );
    var mandateKyes = LogicUtils.getUniqueArray(
      Object.keys(configurationFields),
    );
    var errorDict = {};
    mandateKyes.forEach(function (key) {
      if (LogicUtils.isEmptyString(LogicUtils.getString(dict, key, ""))) {
        errorDict[key] = "" + key + " cannot be empty!";
        return;
      }
    });
    return errorDict;
  };
  var match = ConnectorUtils.getPaymentMethodTypeFromString(
    method.payment_method_type,
  );
  var name;
  if (typeof match === "number") {
    if (match !== 2) {
      if (match >= 3) {
        var match$1 = ConnectorUtils.getConnectorNameTypeFromString(
          connector,
          undefined,
          undefined,
        );
        switch (match$1.TAG | 0) {
          case /* Processors */ 0:
            name =
              match$1._0 !== 25 ? "apple_pay.session_token_data" : "apple_pay";
            break;
          case /* ThreeDsAuthenticator */ 1:
          case /* UnknownConnector */ 2:
            name = "apple_pay.session_token_data";
            break;
        }
      } else {
        name = "";
      }
    } else {
      name = "google_pay";
    }
  } else {
    name = "";
  }
  var fields = Object.keys(configurationFields).map(function (field, index) {
    var label = LogicUtils.getString(configurationFields, field, "");
    return React.createElement(
      "div",
      {
        key: index.toString(),
      },
      React.createElement(FormRenderer.FieldRenderer.make, {
        field: FormRenderer.makeFieldInfo(
          label,
          undefined,
          "" + name + "." + field + "",
          function (param) {
            return function (param$1) {
              var param$2;
              var param$3;
              var param$4;
              var param$5;
              var param$6;
              var param$7;
              var param$8;
              var param$9;
              var param$10;
              var param$11;
              var param$12;
              var param$13;
              var param$14;
              var param$15;
              var param$16;
              var param$17;
              var param$18;
              var param$19;
              var param$20;
              var param$21;
              var param$22;
              var param$23;
              var param$24;
              var param$25;
              var param$26;
              var param$27;
              return InputFields.textInput(
                param,
                param$1,
                param$2,
                param$3,
                param$4,
                param$5,
                param$6,
                param$7,
                param$8,
                param$9,
                param$10,
                param$11,
                param$12,
                param$13,
                param$14,
                param$15,
                param$16,
                param$17,
                param$18,
                param$19,
                param$20,
                param$21,
                param$22,
                param$23,
                param$24,
                param$25,
                param$26,
                param$27,
              );
            };
          },
          undefined,
          undefined,
          undefined,
          undefined,
          "Enter " + LogicUtils.snakeToTitle(label) + "",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          true,
          undefined,
          undefined,
          undefined,
        ),
        labelClass: "font-semibold !text-hyperswitch_black",
      }),
    );
  });
  console.log(Object.keys(configurationFields));
  var match$2 = ConnectorUtils.getPaymentMethodTypeFromString(
    method.payment_method_type,
  );
  var match$3 = ConnectorUtils.getConnectorNameTypeFromString(
    connector,
    undefined,
    undefined,
  );
  var tmp;
  var exit = 0;
  if (typeof match$2 === "number" && match$2 >= 3) {
    switch (match$3.TAG | 0) {
      case /* Processors */ 0:
        var match$4 = match$3._0;
        exit =
          match$4 > 6 || match$4 < 3
            ? match$4 !== 12
              ? 1
              : 2
            : match$4 === 5 || match$4 === 4
              ? 1
              : 2;
        break;
      case /* ThreeDsAuthenticator */ 1:
      case /* UnknownConnector */ 2:
        exit = 1;
        break;
    }
  } else {
    exit = 1;
  }
  switch (exit) {
    case 1:
      tmp = React.createElement(UIUtils.RenderIf.make, {
        condition: Object.keys(configurationFields).length > 0,
        children: React.createElement(
          Form.make,
          {
            children: null,
            onSubmit: onSubmit,
            initialValues: Caml_option.some(metaData),
            validate: validate,
          },
          fields,
          React.createElement(FormRenderer.SubmitButton.make, {
            text: "Proceed",
            customSumbitButtonStyle: "w-full",
            showToolTip: true,
            buttonSize: /* Large */ 0,
          }),
          React.createElement(FormValuesSpy.make, {}),
        ),
      });
      break;
    case 2:
      tmp = React.createElement(ApplePayWalletIntegration.make, {
        metadataInputs: metadataInputs,
        update: update,
        metaData: metaData,
        setShowWalletConfigurationModal: setShowWalletConfigurationModal,
        connector: connector,
      });
      break;
  }
  return React.createElement("div", undefined, tmp);
}

var Wallets = {
  make: Wallet$Wallets,
};

export { getConfigurationFields, Wallets };
/* Form Not a pure module */
