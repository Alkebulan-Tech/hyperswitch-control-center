// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as RoutingUtils from "./RoutingUtils.bs.js";
import * as PermissionUtils from "../UserManagement/PermissionUtils.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";

var allColumns = [
  /* Name */ 0, /* Type */ 1, /* ProfileId */ 2, /* ProfileName */ 3,
  /* Description */ 4, /* Created */ 5, /* LastUpdated */ 6, /* Status */ 7,
];

function itemToObjMapper(dict) {
  return {
    id: LogicUtils.getString(dict, "id", ""),
    name: LogicUtils.getString(dict, "name", ""),
    profile_id: LogicUtils.getString(dict, "profile_id", ""),
    kind: LogicUtils.getString(dict, "kind", ""),
    description: LogicUtils.getString(dict, "description", ""),
    modified_at: LogicUtils.getString(dict, "modified_at", ""),
    created_at: LogicUtils.getString(dict, "created_at", ""),
  };
}

var defaultColumns = [
  /* Name */ 0, /* ProfileId */ 2, /* ProfileName */ 3, /* Type */ 1,
  /* Description */ 4, /* Status */ 7,
];

function getHeading(colType) {
  switch (colType) {
    case /* Name */ 0:
      return Table.makeHeaderInfo(
        "name",
        "Name of Control",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Type */ 1:
      return Table.makeHeaderInfo(
        "kind",
        "Type of Control",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ProfileId */ 2:
      return Table.makeHeaderInfo(
        "profile_id",
        "Profile ID",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ProfileName */ 3:
      return Table.makeHeaderInfo(
        "profile_name",
        "Profile Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Description */ 4:
      return Table.makeHeaderInfo(
        "description",
        "Description",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Created */ 5:
      return Table.makeHeaderInfo(
        "created_at",
        "Created",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* LastUpdated */ 6:
      return Table.makeHeaderInfo(
        "modified_at",
        "Last Updated",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Status */ 7:
      return Table.makeHeaderInfo(
        "status",
        "Status",
        /* DropDown */ 5,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getTableCell(activeRoutingIds) {
  return function (historyData, colType) {
    switch (colType) {
      case /* Name */ 0:
        return {
          TAG: /* Text */ 1,
          _0: historyData.name,
        };
      case /* Type */ 1:
        return {
          TAG: /* Text */ 1,
          _0:
            "" +
            LogicUtils.capitalizeString(
              RoutingUtils.routingTypeName(
                RoutingUtils.routingTypeMapper(historyData.kind),
              ),
            ) +
            " Based",
        };
      case /* ProfileId */ 2:
        return {
          TAG: /* Text */ 1,
          _0: historyData.profile_id,
        };
      case /* ProfileName */ 3:
        return {
          TAG: /* CustomCell */ 10,
          _0: React.createElement(
            HelperComponents.BusinessProfileComponent.make,
            {
              profile_id: historyData.profile_id,
            },
          ),
          _1: "",
        };
      case /* Description */ 4:
        return {
          TAG: /* Text */ 1,
          _0: historyData.description,
        };
      case /* Created */ 5:
        return {
          TAG: /* Text */ 1,
          _0: historyData.created_at,
        };
      case /* LastUpdated */ 6:
        return {
          TAG: /* Text */ 1,
          _0: historyData.modified_at,
        };
      case /* Status */ 7:
        return {
          TAG: /* Label */ 0,
          _0: {
            title: activeRoutingIds.includes(historyData.id)
              ? "ACTIVE"
              : "INACTIVE".toUpperCase(),
            color: activeRoutingIds.includes(historyData.id)
              ? /* LabelGreen */ 0
              : /* LabelWhite */ 10,
          },
        };
    }
  };
}

function getHistoryRules(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapper);
}

function historyEntity(activeRoutingIds, permission) {
  return EntityType.makeEntity(
    "",
    getHistoryRules,
    defaultColumns,
    allColumns,
    getHeading,
    getTableCell(activeRoutingIds),
    "records",
    undefined,
    undefined,
    undefined,
    undefined,
    function (value) {
      return PermissionUtils.linkForGetShowLinkViaAccess(
        permission,
        HSwitchGlobalVars.appendDashboardPath(
          "/routing/" +
            RoutingUtils.routingTypeName(
              RoutingUtils.routingTypeMapper(value.kind),
            ) +
            "?id=" +
            value.id +
            "" +
            (activeRoutingIds.includes(value.id) ? "&isActive=true" : "") +
            "",
        ),
      );
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

export {
  allColumns,
  itemToObjMapper,
  defaultColumns,
  getHeading,
  getTableCell,
  getHistoryRules,
  historyEntity,
};
/* Table Not a pure module */
