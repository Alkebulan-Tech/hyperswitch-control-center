// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as CustomModal from "./CustomModal.bs.js";
import * as NoDataFound from "../../components/NoDataFound.bs.js";
import * as AddPLGateway from "../../components/priority-logics/AddPLGateway.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as RoutingUtils from "./RoutingUtils.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as BasicDetailsForm from "../RoutingRevamp/BasicDetailsForm.bs.js";
import * as RoutingPreviewer from "./AdvancedRouting/RoutingPreviewer.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as AdvancedRoutingUIUtils from "../RoutingRevamp/AdvancedRoutingUIUtils.bs.js";

function VolumeSplitRouting$VolumeRoutingView(props) {
  var baseUrlForRedirection = props.baseUrlForRedirection;
  var connectorList = props.connectorList;
  var urlEntityName = props.urlEntityName;
  var setFormState = props.setFormState;
  var profile = props.profile;
  var isActive = props.isActive;
  var connectors = props.connectors;
  var setPageState = props.setPageState;
  var routingId = props.routingId;
  var setScreenState = props.setScreenState;
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var listLength = connectors.length;
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var gateways = LogicUtils.getArrayFromDict(
    LogicUtils.getDictFromJsonObject(
      LogicUtils.getJsonObjectFromDict(props.initialValues, "algorithm"),
    ),
    "data",
    [],
  );
  var handleActivateConfiguration = async function (activatingId) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var activateRuleURL = APIUtils.getURL(
        urlEntityName,
        /* Post */ 2,
        Caml_option.some(activatingId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        activateRuleURL,
        {},
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Successfully Activated !",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("" + baseUrlForRedirection + "?"),
      );
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          if (message.includes("IR_16")) {
            Curry._8(
              showToast,
              "Algorithm is activated!",
              /* ToastSuccess */ 3,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            RescriptReactRouter.replace(
              HSwitchGlobalVars.appendDashboardPath(baseUrlForRedirection),
            );
            return Curry._1(setScreenState, function (param) {
              return /* Success */ 1;
            });
          } else {
            Curry._8(
              showToast,
              "Failed to Activate the Configuration!",
              /* ToastError */ 0,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
            return Curry._1(setScreenState, function (param) {
              return /* Error */ {
                _0: message,
              };
            });
          }
        } else {
          return Curry._1(setScreenState, function (param) {
            return /* Error */ {
              _0: "Something went wrong",
            };
          });
        }
      }
      throw e;
    }
  };
  var handleDeactivateConfiguration = async function (param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var deactivateRoutingURL =
        "" +
        APIUtils.getURL(
          urlEntityName,
          /* Post */ 2,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ) +
        "/deactivate";
      var body = Object.fromEntries([["profile_id", profile]]);
      await Curry._7(
        updateDetails,
        deactivateRoutingURL,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Successfully Deactivated !",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("" + baseUrlForRedirection + "?"),
      );
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          Curry._8(
            showToast,
            "Failed to Deactivate the Configuration!",
            /* ToastError */ 0,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          );
          return Curry._1(setScreenState, function (param) {
            return /* Error */ {
              _0: message,
            };
          });
        } else {
          return Curry._1(setScreenState, function (param) {
            return /* Error */ {
              _0: "Something went wrong",
            };
          });
        }
      }
      throw e;
    }
  };
  var connectorOptions = React.useMemo(
    function () {
      return connectors
        .filter(function (item) {
          return item.profile_id === profile;
        })
        .map(function (item) {
          return {
            label: item.connector_label,
            value: item.merchant_connector_id,
          };
        });
    },
    [profile],
  );
  var tmp;
  switch (props.pageState) {
    case /* Preview */ 0:
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col w-full gap-3",
        },
        React.createElement(
          "div",
          {
            className:
              "flex flex-col gap-4 p-6 my-2 bg-white rounded-md border border-jp-gray-600 ",
          },
          React.createElement(RoutingPreviewer.GatewayView.make, {
            gateways: RoutingUtils.getGatewayTypes(gateways),
            connectorList: connectorList,
          }),
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-col md:flex-row gap-4",
          },
          React.createElement(Button.make, {
            text: "Duplicate & Edit Configuration",
            buttonType: /* Secondary */ 1,
            onClick: function (param) {
              Curry._1(setFormState, function (param) {
                return /* EditConfig */ 1;
              });
              Curry._1(setPageState, function (param) {
                return /* Create */ 1;
              });
            },
            customButtonStyle: "w-1/5 rounded-sm",
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: !isActive,
            children: React.createElement(Button.make, {
              buttonState: /* Normal */ 0,
              text: "Activate Configuration",
              buttonType: /* Primary */ 0,
              onClick: function (param) {
                handleActivateConfiguration(routingId);
              },
              customButtonStyle: "w-1/5 rounded-sm",
            }),
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: isActive,
            children: React.createElement(Button.make, {
              buttonState: /* Normal */ 0,
              text: "Deactivate Configuration",
              buttonType: /* Primary */ 0,
              onClick: function (param) {
                handleDeactivateConfiguration(undefined);
              },
              customButtonStyle: "w-1/5 rounded-sm",
            }),
          }),
        ),
      );
      break;
    case /* Create */ 1:
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-4",
        },
        listLength > 0
          ? React.createElement(
              React.Fragment,
              undefined,
              React.createElement(AddPLGateway.make, {
                id: "algorithm.data",
                gatewayOptions: connectorOptions,
                isFirst: true,
                isExpanded: true,
                showPriorityIcon: false,
                showDistributionIcon: false,
                showFallbackIcon: false,
                dropDownButtonText: "Add Processors",
                connectorList: connectorList,
              }),
              React.createElement(RoutingUtils.ConfigureRuleButton.make, {
                setShowModal: setShowModal,
              }),
              React.createElement(CustomModal.RoutingCustomModal.make, {
                showModal: match[0],
                setShowModal: setShowModal,
                cancelButton: React.createElement(
                  FormRenderer.SubmitButton.make,
                  {
                    text: "Save Rule",
                    customSumbitButtonStyle: "w-1/5 rounded-lg",
                    buttonType: /* Secondary */ 1,
                    buttonSize: /* Small */ 2,
                    tooltipWidthClass: "w-48",
                  },
                ),
                submitButton: React.createElement(
                  AdvancedRoutingUIUtils.SaveAndActivateButton.make,
                  {
                    onSubmit: props.onSubmit,
                    handleActivateConfiguration: handleActivateConfiguration,
                  },
                ),
                headingText: "Activate Current Configuration?",
                subHeadingText:
                  "Activating the current configuration will override the current active configuration. Alternatively, save this configuration to access / activate it later from the configuration history. Please confirm.",
                leftIcon: "hswitch-warning",
              }),
            )
          : React.createElement(NoDataFound.make, {
              message: "Please configure atleast 1 connector",
              renderType: /* InfoBox */ 0,
            }),
      );
      break;
    case /* Edit */ 2:
      tmp = null;
      break;
  }
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-4 p-6 my-2 bg-white dark:bg-jp-gray-lightgray_background rounded-md border border-jp-gray-600 dark:border-jp-gray-850",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col lg:flex-row  ",
        },
        React.createElement(
          "div",
          undefined,
          React.createElement(
            "div",
            {
              className: "font-bold mb-1",
            },
            "Volume Based Configuration",
          ),
          React.createElement(
            "div",
            {
              className: "text-jp-gray-800 dark:text-jp-gray-700 text-sm",
            },
            "Volume Based Configuration is helpful when you want a specific traffic distribution for each of the configured connectors. For eg: Stripe (70%), Adyen (20%), Checkout (10%).",
          ),
        ),
      ),
    ),
    React.createElement(
      "div",
      {
        className: "flex w-full flex-start",
      },
      tmp,
    ),
  );
}

var VolumeRoutingView = {
  make: VolumeSplitRouting$VolumeRoutingView,
};

function VolumeSplitRouting(props) {
  var urlEntityName = props.urlEntityName;
  var connectorList = props.connectorList;
  var routingRuleId = props.routingRuleId;
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var match = React.useState(function () {
    return defaultBusinessProfile.profile_id;
  });
  var setProfile = match[1];
  var profile = match[0];
  var match$1 = React.useState(function () {
    return /* EditReplica */ 2;
  });
  var setFormState = match$1[1];
  var formState = match$1[0];
  var match$2 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$2[1];
  var initialValues = match$2[0];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match$3 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {
    return /* Create */ 1;
  });
  var setPageState = match$4[1];
  var match$5 = React.useState(function () {
    return [];
  });
  var setConnectors = match$5[1];
  var currentTabName = Recoil.useRecoilValue(
    HyperswitchAtom.currentTabNameRecoilAtom,
  );
  var showToast = ToastState.useShowToast(undefined);
  var activeRoutingDetails = async function (param) {
    var routingUrl = APIUtils.getURL(
      urlEntityName,
      /* Get */ 0,
      Caml_option.some(routingRuleId),
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
    );
    var routingJson = await Curry._1(fetchDetails, routingUrl);
    var routingJsonToDict = LogicUtils.getDictFromJsonObject(routingJson);
    Curry._1(setFormState, function (param) {
      return /* ViewConfig */ 3;
    });
    Curry._1(setInitialValues, function (param) {
      return routingJsonToDict;
    });
    return Curry._1(setProfile, function (param) {
      return LogicUtils.getString(
        routingJsonToDict,
        "profile_id",
        defaultBusinessProfile.profile_id,
      );
    });
  };
  var getDetails = async function (param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      Curry._1(setConnectors, function (param) {
        return connectorList;
      });
      if (routingRuleId !== undefined) {
        await activeRoutingDetails(undefined);
        Curry._1(setPageState, function (param) {
          return /* Preview */ 0;
        });
      } else {
        Curry._1(setInitialValues, function (param) {
          var dict = RoutingUtils.constructNameDescription(
            /* VOLUME_SPLIT */ 1,
          );
          dict["profile_id"] = profile;
          dict["algorithm"] = {
            type: "volume_split",
          };
          return dict;
        });
        Curry._1(setPageState, function (param) {
          return /* Create */ 1;
        });
      }
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong");
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  var validate = function (values) {
    var errors = {};
    var dict = LogicUtils.getDictFromJsonObject(values);
    var validateGateways = function (dict) {
      var gateways = LogicUtils.getArrayFromDict(dict, "data", []);
      if (gateways.length === 0) {
        return "Need atleast 1 Gateway";
      }
      var distributionPercentages = Belt_Array.keepMap(
        gateways,
        function (json) {
          return Core__Option.flatMap(
            Core__JSON.Decode.object(json),
            function (__x) {
              return LogicUtils.getOptionFloat(__x, "split");
            },
          );
        },
      );
      var distributionPercentageSum = Core__Array.reduce(
        distributionPercentages,
        0,
        function (sum, distribution) {
          return sum + distribution;
        },
      );
      var hasZero = distributionPercentages.some(function (ele) {
        return ele === 0;
      });
      var isDistributeChecked = !distributionPercentages.some(function (ele) {
        return ele === 100.0;
      });
      var isNotValid =
        isDistributeChecked &&
        (distributionPercentageSum > 100 ||
          hasZero ||
          distributionPercentageSum !== 100);
      if (isNotValid) {
        return "Distribution Percent not correct";
      }
    };
    var volumeBasedDistributionDict = LogicUtils.getObj(dict, "algorithm", {});
    var error = validateGateways(volumeBasedDistributionDict);
    if (error !== undefined) {
      errors["Volume Based Distribution"] = error;
    }
    return errors;
  };
  var onSubmit = async function (values, isSaveRule) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var updateUrl = APIUtils.getURL(
        urlEntityName,
        /* Post */ 2,
        Caml_option.some(undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._7(
        updateDetails,
        updateUrl,
        values,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Successfully Created a new Configuration !",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
      if (isSaveRule) {
        RescriptReactRouter.replace(
          HSwitchGlobalVars.appendDashboardPath("/routing"),
        );
      }
      return res;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Something went wrong!");
        Curry._8(
          showToast,
          "Failed to Save the Configuration !",
          /* ToastError */ 0,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
        Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
        return Js_exn.raiseError(err);
      }
      throw e;
    }
  };
  React.useEffect(
    function () {
      getDetails(undefined);
    },
    [routingRuleId],
  );
  return React.createElement(
    "div",
    {
      className: "my-6",
    },
    React.createElement(PageLoaderWrapper.make, {
      children: Caml_option.some(
        React.createElement(
          Form.make,
          {
            children: null,
            onSubmit: function (values, param) {
              return onSubmit(values, true);
            },
            initialValues: Caml_option.some(initialValues),
            validate: validate,
          },
          React.createElement(
            "div",
            {
              className: "w-full flex justify-between",
            },
            React.createElement(
              "div",
              {
                className: "w-full",
              },
              React.createElement(BasicDetailsForm.make, {
                currentTabName: currentTabName,
                formState: formState,
                setInitialValues: setInitialValues,
                profile: profile,
                setProfile: setProfile,
                routingType: /* VOLUME_SPLIT */ 1,
              }),
            ),
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: formState !== /* CreateConfig */ 0,
            children: React.createElement(
              VolumeSplitRouting$VolumeRoutingView,
              {
                setScreenState: setScreenState,
                routingId: routingRuleId,
                pageState: match$4[0],
                setPageState: setPageState,
                connectors: match$5[0],
                isActive: props.isActive,
                profile: profile,
                setFormState: setFormState,
                initialValues: initialValues,
                onSubmit: onSubmit,
                urlEntityName: urlEntityName,
                connectorList: connectorList,
                baseUrlForRedirection: props.baseUrlForRedirection,
              },
            ),
          }),
          React.createElement(FormValuesSpy.make, {}),
        ),
      ),
      screenState: match$3[0],
    }),
  );
}

var make = VolumeSplitRouting;

export { VolumeRoutingView, make };
/* Form Not a pure module */
