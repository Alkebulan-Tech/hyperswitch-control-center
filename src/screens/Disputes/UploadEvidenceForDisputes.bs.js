// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Core__Dict from "@rescript/core/src/Core__Dict.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as PromiseUtils from "../../utils/PromiseUtils.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as DisputesUtils from "./DisputesUtils.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as DictionaryUtils from "../../utils/DictionaryUtils.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

var h3Leading2Text = HSwitchUtils.getTextClass([/* H3 */ 2, /* Leading_2 */ 3]);

var p1RegularText = HSwitchUtils.getTextClass([/* P1 */ 3, /* Regular */ 0]);

var p1MediumText = HSwitchUtils.getTextClass([/* P1 */ 3, /* Medium */ 1]);

var p2RegularText = HSwitchUtils.getTextClass([/* P2 */ 4, /* Regular */ 0]);

var p3RegularText = HSwitchUtils.getTextClass([/* P3 */ 5, /* Regular */ 0]);

function UploadEvidenceForDisputes$EvidenceUploadForm(props) {
  var setFileUploadedDict = props.setFileUploadedDict;
  var fileUploadedDict = props.fileUploadedDict;
  var index = props.index;
  var uploadEvidenceType = props.uploadEvidenceType;
  var match = React.useContext(ConfigContext.configContext);
  var tmp;
  if (Core__Option.isNone(fileUploadedDict[uploadEvidenceType])) {
    tmp = React.createElement(
      "label",
      undefined,
      React.createElement(
        "p",
        {
          className:
            "" +
            match.globalUIConfig.font.textColor.primaryNormal +
            " underline cursor-pointer",
        },
        "Upload",
        React.createElement("input", {
          key: index.toString(),
          hidden: true,
          accept: ".pdf,.csv,.img,.jpeg",
          type: "file",
          onChange: function (ev) {
            var target = ev.target;
            var fileDict = LogicUtils.getJsonFromArrayOfJson([
              ["uploadedFile", target.files[0]],
              ["fileName", target.files[0].name],
            ]);
            Curry._1(setFileUploadedDict, function (prev) {
              var arr = Object.entries(prev);
              return Object.fromEntries(
                [[uploadEvidenceType, fileDict]].concat(arr),
              );
            });
          },
        }),
      ),
    );
  } else {
    var fileName = LogicUtils.getString(
      LogicUtils.getDictfromDict(fileUploadedDict, uploadEvidenceType),
      "fileName",
      "",
    );
    var truncatedFileName = LogicUtils.truncateFileNameWithEllipses(
      fileName,
      10,
    );
    tmp = React.createElement(
      "div",
      {
        className: "flex gap-4 items-center ",
      },
      React.createElement(
        "p",
        {
          className: "" + p1RegularText + " text-grey-700",
        },
        truncatedFileName,
      ),
      React.createElement(Icon.make, {
        name: "cross-skeleton",
        size: 12,
        className: "cursor-pointer",
        onClick: function (param) {
          Curry._1(setFileUploadedDict, function (prev) {
            var prevCopy = Object.assign({}, prev);
            Core__Dict.$$delete(prevCopy, uploadEvidenceType);
            return prevCopy;
          });
        },
      }),
    );
  }
  return React.createElement(
    "div",
    {
      key: index.toString(),
      className: "flex justify-between items-center",
    },
    React.createElement(
      "div",
      {
        className: "flex gap-2",
      },
      React.createElement(Icon.make, {
        name: "file-icon",
        size: 22,
      }),
      React.createElement(
        "p",
        undefined,
        LogicUtils.capitalizeString(
          LogicUtils.stringReplaceAll(uploadEvidenceType, "_", " "),
        ),
      ),
    ),
    tmp,
  );
}

var EvidenceUploadForm = {
  make: UploadEvidenceForDisputes$EvidenceUploadForm,
};

function UploadEvidenceForDisputes$UploadDisputeEvidenceModal(props) {
  var setFileUploadedDict = props.setFileUploadedDict;
  var fileUploadedDict = props.fileUploadedDict;
  var setDisputeEvidenceStatus = props.setDisputeEvidenceStatus;
  var disputeId = props.disputeId;
  var setUploadEvidenceModal = props.setUploadEvidenceModal;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var onAttachEvidence = async function (param) {
    var keyFromDictArray = Object.keys(fileUploadedDict);
    var dictToIterate = keyFromDictArray.filter(function (ele) {
      var keyObject = LogicUtils.getDictfromDict(fileUploadedDict, ele);
      return Core__Option.isNone(keyObject["fileId"]);
    });
    var promisesOfAttachEvidence = dictToIterate.map(function (ele) {
      var jsonObject = Core__Option.getOr(fileUploadedDict[ele], null);
      var fileValue = LogicUtils.getJsonObjectFromDict(
        LogicUtils.getDictFromJsonObject(jsonObject),
        "uploadedFile",
      );
      var url = APIUtils.getURL(
        /* DISPUTES_ATTACH_EVIDENCE */ 38,
        /* Put */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var formData = new FormData();
      formData.append("dispute_id", disputeId);
      formData.append("evidence_type", ele);
      formData.append("file", fileValue);
      return Curry._7(
        updateDetails,
        url,
        {},
        /* Put */ 3,
        Caml_option.some(formData),
        {},
        /* Unknown */ 0,
        undefined,
      );
    });
    var response = await PromiseUtils.allSettledPolyfill(
      promisesOfAttachEvidence,
    );
    var copyFileUploadedDict = Object.assign({}, fileUploadedDict);
    response.forEach(function (ele, index) {
      var keyValue = Core__Option.getOr(keyFromDictArray[index], "");
      var dictValue = LogicUtils.getDictfromDict(fileUploadedDict, keyValue);
      var jsonDict = Core__JSON.Classify.classify(ele);
      if (typeof jsonDict === "number") {
        return Core__Dict.$$delete(copyFileUploadedDict, keyValue);
      }
      if (jsonDict.TAG !== /* Object */ 3) {
        return Core__Dict.$$delete(copyFileUploadedDict, keyValue);
      }
      var fileId = LogicUtils.getString(jsonDict._0, "file_id", "");
      dictValue["fileId"] = fileId;
      copyFileUploadedDict[keyValue] = dictValue;
    });
    Curry._1(setUploadEvidenceModal, function (param) {
      return false;
    });
    if (Object.keys(copyFileUploadedDict).length > 0) {
      Curry._1(setDisputeEvidenceStatus, function (param) {
        return /* EvidencePresent */ 1;
      });
    }
    return Curry._1(setFileUploadedDict, function (param) {
      return copyFileUploadedDict;
    });
  };
  return React.createElement(
    Modal.make,
    {
      showModal: props.uploadEvidenceModal,
      setShowModal: setUploadEvidenceModal,
      children: null,
      modalHeading: "Attach supporting evidence",
      modalClass:
        "w-full max-w-xl mx-auto my-8 dark:!bg-jp-gray-lightgray_background pb-3",
      childClass: "!p-0 !m-0",
      headingClass: "!bg-transparent dark:!bg-jp-gray-lightgray_background",
      closeOnOutsideClick: true,
      borderBottom: true,
      showModalHeadingIconName: "attach-file-icon",
      modalHeadingClass: "!text-lg",
      modalHeaderIconSize: 24,
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col p-6 gap-8",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-2",
        },
        React.createElement(
          "p",
          {
            className: p1RegularText,
          },
          "Upload evidence that is most relevant to this dispute",
        ),
        React.createElement(
          "p",
          {
            className: "" + p2RegularText + " text-grey-800 opacity-50",
          },
          "The evidence can be ANY ONE or MORE of the following:",
        ),
      ),
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-4",
        },
        DisputesUtils.evidenceList.map(function (value, index) {
          var uploadEvidenceType = LogicUtils.titleToSnake(value.toLowerCase());
          return JsxPPXReactSupport.createElementWithKey(
            index.toString(),
            UploadEvidenceForDisputes$EvidenceUploadForm,
            {
              uploadEvidenceType: uploadEvidenceType,
              index: index,
              fileUploadedDict: fileUploadedDict,
              setFileUploadedDict: setFileUploadedDict,
            },
          );
        }),
      ),
    ),
    React.createElement("div", {
      className: "h-px w-full bg-grey-900 opacity-20",
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-1 justify-end gap-4 pt-5 pb-3 px-6",
      },
      React.createElement(Button.make, {
        buttonState:
          Object.keys(fileUploadedDict).length > 0
            ? /* Normal */ 0
            : /* Disabled */ 2,
        text: "Attach Evidence",
        buttonType: /* Primary */ 0,
        buttonSize: /* Small */ 2,
        onClick: function (param) {
          onAttachEvidence(undefined);
        },
        customButtonStyle: "!py-3 !px-2.5",
      }),
    ),
  );
}

var UploadDisputeEvidenceModal = {
  make: UploadEvidenceForDisputes$UploadDisputeEvidenceModal,
};

function UploadEvidenceForDisputes$DisputesInfoBarComponent(props) {
  var setDisputeData = props.setDisputeData;
  var setFileUploadedDict = props.setFileUploadedDict;
  var disputeStatus = props.disputeStatus;
  var setUploadEvidenceModal = props.setUploadEvidenceModal;
  var setDisputeEvidenceStatus = props.setDisputeEvidenceStatus;
  var disputeId = props.disputeId;
  var fileUploadedDict = props.fileUploadedDict;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var textColor = match$1.font.textColor;
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var match$2 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$2[1];
  var onEvidenceSubmit = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* DISPUTES_ATTACH_EVIDENCE */ 38,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = DisputesUtils.constructDisputesBody(
        fileUploadedDict,
        disputeId,
      );
      var response = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setDisputeData, function (param) {
        return response;
      });
      return Curry._1(setDisputeEvidenceStatus, function (param) {
        return /* EvidencePresent */ 1;
      });
    } catch (exn) {
      return Curry._8(
        showToast,
        "Failed to submit the evidence. Try again !",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  var retrieveEvidence = async function (param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var url = APIUtils.getURL(
        /* DISPUTES_ATTACH_EVIDENCE */ 38,
        /* Get */ 0,
        Caml_option.some(disputeId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await Curry._1(fetchDetails, url);
      var reponseArray = LogicUtils.getArrayFromJson(response, []);
      if (reponseArray.length > 0) {
        Curry._1(setFileUploadedDict, function (param) {
          return DictionaryUtils.mergeDicts([
            fileUploadedDict,
            DisputesUtils.getDictFromFilesAvailable(reponseArray),
          ]);
        });
        Curry._1(setDisputeEvidenceStatus, function (param) {
          return /* EvidencePresent */ 1;
        });
      }
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      return Curry._8(
        showToast,
        "Failed to retrieve evidence for the dispute !",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  React.useEffect(function () {
    retrieveEvidence(undefined);
  }, []);
  var tmp;
  if (typeof disputeStatus === "number") {
    switch (disputeStatus) {
      case /* DisputeOpened */ 0:
        tmp = props.disputeEvidenceStatus
          ? React.createElement(
              "div",
              {
                className: "flex flex-col gap-8",
              },
              React.createElement(
                "div",
                {
                  className: "flex flex-col gap-2",
                },
                React.createElement(
                  "p",
                  {
                    className: h3Leading2Text,
                  },
                  "Your dispute evidence has been attached",
                ),
                React.createElement(
                  "div",
                  {
                    className: "flex gap-4 flex-wrap",
                  },
                  Object.keys(fileUploadedDict).map(function (value) {
                    var fileName = LogicUtils.getString(
                      LogicUtils.getDictfromDict(fileUploadedDict, value),
                      "fileName",
                      "",
                    );
                    var match = DisputesUtils.getFileTypeFromFileName(fileName);
                    var iconName;
                    switch (match) {
                      case "jpeg":
                      case "jpg":
                      case "png":
                        iconName = "image-icon";
                        break;
                      default:
                        iconName =
                          "" +
                          DisputesUtils.getFileTypeFromFileName(fileName) +
                          "-icon";
                    }
                    return React.createElement(
                      "div",
                      {
                        className:
                          "p-2 border rounded-md bg-white w-fit flex gap-2 items-center border-grey-200",
                      },
                      React.createElement(Icon.make, {
                        name: iconName,
                        size: 16,
                      }),
                      React.createElement(
                        "p",
                        {
                          className: "" + p3RegularText + " text-grey-700 ",
                        },
                        fileName,
                      ),
                    );
                  }),
                ),
              ),
              React.createElement(
                "div",
                {
                  className: "flex gap-4",
                },
                React.createElement(Button.make, {
                  text: "Submit your evidence",
                  buttonType: /* Primary */ 0,
                  buttonSize: /* Small */ 2,
                  onClick: function (param) {
                    onEvidenceSubmit(undefined);
                  },
                }),
                React.createElement(Button.make, {
                  text: "Attach More",
                  buttonType: /* Secondary */ 1,
                  buttonSize: /* Small */ 2,
                  leftIcon: {
                    TAG: /* FontAwesome */ 0,
                    _0: "paper-clip",
                  },
                  onClick: function (param) {
                    Curry._1(setUploadEvidenceModal, function (param) {
                      return true;
                    });
                  },
                  customButtonStyle: "!bg-white",
                }),
              ),
            )
          : React.createElement(
              "div",
              {
                className: "flex flex-col gap-6",
              },
              React.createElement(
                "div",
                {
                  className: "flex flex-col gap-2",
                },
                React.createElement(
                  "p",
                  {
                    className: h3Leading2Text,
                  },
                  "Why was the dispute raised?",
                ),
                React.createElement(
                  "p",
                  {
                    className: "" + p1RegularText + " opacity-60",
                  },
                  "The customer claims that they did not authorise this purchase.",
                ),
              ),
              React.createElement(
                "div",
                {
                  className: "flex gap-2 group items-center cursor-pointer",
                  onClick: function (param) {
                    window.open(
                      "https://docs.hyperswitch.io/features/merchant-controls/disputes",
                    );
                  },
                },
                React.createElement(
                  "p",
                  {
                    className:
                      "" + p1MediumText + "  " + textColor.primaryNormal + "",
                  },
                  "Learn how to respond",
                ),
                React.createElement(Icon.make, {
                  name: "thin-right-arrow",
                  size: 20,
                  className:
                    "group-hover:scale-125 transition duration-200 ease-in-out",
                  customIconColor: textColor.primaryNormal,
                }),
              ),
            );
        break;
      case /* DisputeAccepted */ 2:
        tmp = React.createElement(
          "div",
          {
            className: "flex flex-col gap-2",
          },
          React.createElement(
            "p",
            {
              className: h3Leading2Text,
            },
            "You accepted this dispute",
          ),
          React.createElement(
            "p",
            {
              className: "" + p1RegularText + " opacity-60",
            },
            "A refund is issued for the customer. No further action is required from you.",
          ),
        );
        break;
      case /* DisputeChallenged */ 4:
        tmp = React.createElement(
          "div",
          {
            className: "flex flex-col gap-4",
          },
          React.createElement(
            "p",
            {
              className: h3Leading2Text,
            },
            "These are the attachments you have provided as evidence.",
          ),
          React.createElement(
            "div",
            {
              className: "flex gap-4 flex-wrap",
            },
            Object.keys(fileUploadedDict).map(function (eachFileValue) {
              var jsonObject = Core__Option.getOr(
                fileUploadedDict[eachFileValue],
                null,
              );
              var fileName = LogicUtils.getString(
                LogicUtils.getDictFromJsonObject(jsonObject),
                "fileName",
                "",
              );
              return React.createElement(
                "div",
                {
                  className:
                    "p-2 border rounded-md bg-white w-fit flex gap-6 items-center border-grey-200 border-opacity-50",
                },
                React.createElement(
                  "div",
                  {
                    className: "flex gap-2 items-center",
                  },
                  React.createElement(Icon.make, {
                    name: "pdf-icon",
                    size: 20,
                  }),
                  React.createElement(
                    "p",
                    {
                      className: "" + p2RegularText + " text-grey-700",
                    },
                    fileName,
                  ),
                ),
                React.createElement(Icon.make, {
                  name: "cross-skeleton",
                  size: 12,
                }),
              );
            }),
          ),
        );
        break;
      case /* DisputeExpired */ 1:
      case /* DisputeCancelled */ 3:
      case /* DisputeWon */ 5:
      case /* DisputeLost */ 6:
        tmp = null;
        break;
    }
  } else {
    tmp = null;
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "" +
            match$1.border.borderColor.primaryNormal +
            " w-full rounded-md  border-opacity-40 bg-blue-info_blue_background p-6 flex gap-6",
        },
        React.createElement(
          "div",
          {
            className: "flex gap-3 items-start justify-start",
          },
          React.createElement(Icon.make, {
            name: "note-icon",
            size: 22,
          }),
          tmp,
        ),
      ),
    ),
    screenState: match$2[0],
  });
}

var DisputesInfoBarComponent = {
  make: UploadEvidenceForDisputes$DisputesInfoBarComponent,
};

function UploadEvidenceForDisputes(props) {
  var setDisputeData = props.setDisputeData;
  var setUploadEvidenceModal = props.setUploadEvidenceModal;
  var disputeID = props.disputeID;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var showToast = ToastState.useShowToast(undefined);
  var handleAcceptDispute = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* ACCEPT_DISPUTE */ 37,
        /* Post */ 2,
        Caml_option.some(disputeID),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await Curry._7(
        updateDetails,
        url,
        {},
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setDisputeData, function (param) {
        return response;
      });
    } catch (exn) {
      return Curry._8(
        showToast,
        "Something went wrong. Please try again",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex gap-2",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: DisputesUtils.connectorsSupportAcceptDispute.includes(
        ConnectorUtils.getConnectorNameTypeFromString(
          props.connector,
          undefined,
          undefined,
        ),
      ),
      children: React.createElement(Button.make, {
        text: "Accept Dispute",
        buttonType: /* Secondary */ 1,
        buttonSize: /* Small */ 2,
        onClick: function (param) {
          Curry._1(showPopUp, {
            heading: "Accept this dispute?",
            description:
              "By accepting you will lose this dispute and will have to refund the amount to the user. You won’t be able to submit evidence once you accept",
            popUpType: [/* Warning */ 4, /* WithIcon */ 0],
            handleCancel: {
              text: "Cancel",
            },
            handleConfirm: {
              text: "Proceed",
              onClick: function (param) {
                handleAcceptDispute(undefined);
              },
            },
          });
        },
        customButtonStyle: "!py-3 !px-2.5",
      }),
    }),
    React.createElement(Button.make, {
      text: "Counter Dispute",
      buttonType: /* Primary */ 0,
      buttonSize: /* Small */ 2,
      onClick: function (param) {
        Curry._1(setUploadEvidenceModal, function (param) {
          return true;
        });
      },
      customButtonStyle: "!py-3 !px-2.5",
    }),
  );
}

var make = UploadEvidenceForDisputes;

export {
  h3Leading2Text,
  p1RegularText,
  p1MediumText,
  p2RegularText,
  p3RegularText,
  EvidenceUploadForm,
  UploadDisputeEvidenceModal,
  DisputesInfoBarComponent,
  make,
};
/* h3Leading2Text Not a pure module */
