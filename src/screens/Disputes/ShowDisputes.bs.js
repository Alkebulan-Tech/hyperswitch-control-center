// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as OrderUtils from "../../components/OrderUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as DisputeLogs from "../Analytics/Logs/DisputeLogs/DisputeLogs.bs.js";
import * as LogsWrapper from "../Analytics/Logs/LogUtils/LogsWrapper.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as OrderUIUtils from "../Order/OrderUIUtils.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as DateTimeUtils from "../../utils/DateTimeUtils.bs.js";
import * as DisputesUtils from "./DisputesUtils.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as DisputesEntity from "./DisputesEntity.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as BreadCrumbNavigation from "../../genericUtils/BreadCrumbNavigation.bs.js";
import * as UploadEvidenceForDisputes from "./UploadEvidenceForDisputes.bs.js";

function ShowDisputes$DisputesNoteComponent(props) {
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var connectorTypeFromName = ConnectorUtils.getConnectorNameTypeFromString(
    props.disputesData.connector,
    undefined,
    undefined,
  );
  var dashboardLink;
  var exit = 0;
  switch (connectorTypeFromName.TAG | 0) {
    case /* Processors */ 0:
      var match$2 = connectorTypeFromName._0;
      exit = match$2 !== 6 && match$2 !== 9 ? 1 : 2;
      break;
    case /* ThreeDsAuthenticator */ 1:
    case /* UnknownConnector */ 2:
      exit = 1;
      break;
  }
  switch (exit) {
    case 1:
      dashboardLink = React.createElement("span", undefined, "dashboard.");
      break;
    case 2:
      dashboardLink = React.createElement(
        "span",
        {
          className: "underline underline-offset-2 cursor-pointer",
          onClick: function (param) {
            var link;
            switch (connectorTypeFromName.TAG | 0) {
              case /* Processors */ 0:
                var match = connectorTypeFromName._0;
                link =
                  match !== 6 && match === 9
                    ? "https://cp.bluesnap.com/jsp/developer_login.jsp"
                    : " https://dashboard.stripe.com/disputes";
                break;
              case /* ThreeDsAuthenticator */ 1:
              case /* UnknownConnector */ 2:
                link = " https://dashboard.stripe.com/disputes";
                break;
            }
            window.open(link);
          },
        },
        "dashboard.",
      );
      break;
  }
  return React.createElement(
    "div",
    {
      className:
        "" +
        match$1.border.borderColor.primaryNormal +
        " flex  items-start  text-sm rounded-md gap-2 px-4 py-3 mt-5",
    },
    React.createElement(Icon.make, {
      name: "info-vacent",
      size: 18,
      className: "" + match$1.font.textColor.primaryNormal + " mt-1",
    }),
    React.createElement(
      "span",
      undefined,
      "Coming soon! You would soon be able to upload evidences against disputes directly from your Hyperswitch dashboard. Until then, please use Hyperswitch dashboard to track any changes in dispute status while uploading evidences from your relevant connector ",
      dashboardLink,
    ),
  );
}

var DisputesNoteComponent = {
  make: ShowDisputes$DisputesNoteComponent,
};

function ShowDisputes$Details(props) {
  var setDisputeData = props.setDisputeData;
  var children = props.children;
  var bgColor = props.bgColor;
  var widthClass = props.widthClass;
  var justifyClassName = props.justifyClassName;
  var excludeColKeys = props.excludeColKeys;
  var getCell = props.getCell;
  var getHeading = props.getHeading;
  var data = props.data;
  var excludeColKeys$1 = excludeColKeys !== undefined ? excludeColKeys : [];
  var justifyClassName$1 =
    justifyClassName !== undefined ? justifyClassName : "justify-start";
  var widthClass$1 = widthClass !== undefined ? widthClass : "w-1/4";
  var bgColor$1 =
    bgColor !== undefined
      ? bgColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  var connectorTypeFromName = ConnectorUtils.getConnectorNameTypeFromString(
    data.connector,
    undefined,
    undefined,
  );
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var disputeEvidenceUpload = match.disputeEvidenceUpload;
  var match$1 = React.useState(function () {
    return false;
  });
  var setUploadEvidenceModal = match$1[1];
  var match$2 = React.useState(function () {
    return {};
  });
  var setFileUploadedDict = match$2[1];
  var fileUploadedDict = match$2[0];
  var match$3 = React.useState(function () {
    return /* Landing */ 0;
  });
  var setDisputeEvidenceStatus = match$3[1];
  var disputeEvidenceStatus = match$3[0];
  var daysToRespond = LogicUtils.getDaysDiffForDates(
    Date.now(),
    DateTimeUtils.parseAsFloat(data.challenge_required_by),
  );
  return React.createElement(
    OrderUtils.Section.make,
    {
      children: null,
      customCssClass:
        "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 " +
        bgColor$1 +
        " rounded-md p-6 flex flex-col gap-6",
    },
    React.createElement(
      "div",
      {
        className: "flex items-center justify-between",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-2 items-center",
        },
        React.createElement(
          "p",
          {
            className: "flex font-bold text-3xl gap-2",
          },
          DisputesEntity.amountValue(data.amount, data.currency.toUpperCase()),
        ),
        DisputesEntity.useGetStatus(data),
        React.createElement(UIUtils.RenderIf.make, {
          condition:
            DisputesUtils.disputeStatusVariantMapper(data.dispute_status) ===
              /* DisputeOpened */ 0 &&
            LogicUtils.isNonEmptyString(data.challenge_required_by),
          children: React.createElement(
            "div",
            {
              className:
                "border text-orange-950 bg-orange-100 text-sm px-2 py-1 rounded-md font-semibold",
            },
            "" + daysToRespond.toString() + " days to respond",
          ),
        }),
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition:
          disputeEvidenceUpload &&
          ConnectorUtils.existsInArray(
            connectorTypeFromName,
            DisputesUtils.connectorSupportCounterDispute,
          ) &&
          DisputesUtils.disputeStatusVariantMapper(data.dispute_status) ===
            /* DisputeOpened */ 0 &&
          disputeEvidenceStatus === /* Landing */ 0,
        children: React.createElement(UploadEvidenceForDisputes.make, {
          disputeID: data.dispute_id,
          setUploadEvidenceModal: setUploadEvidenceModal,
          setDisputeData: setDisputeData,
          connector: data.connector,
        }),
      }),
    ),
    React.createElement("div", {
      className: "h-px w-full bg-grey-200 opacity-30",
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition:
        disputeEvidenceUpload &&
        ConnectorUtils.existsInArray(
          connectorTypeFromName,
          DisputesUtils.connectorSupportCounterDispute,
        ) &&
        DisputesUtils.showDisputeInfoStatus.includes(
          DisputesUtils.disputeStatusVariantMapper(data.dispute_status),
        ),
      children: React.createElement(
        UploadEvidenceForDisputes.DisputesInfoBarComponent.make,
        {
          disputeEvidenceStatus: disputeEvidenceStatus,
          fileUploadedDict: fileUploadedDict,
          disputeId: data.dispute_id,
          setDisputeEvidenceStatus: setDisputeEvidenceStatus,
          setUploadEvidenceModal: setUploadEvidenceModal,
          disputeStatus: DisputesUtils.disputeStatusVariantMapper(
            data.dispute_status,
          ),
          setFileUploadedDict: setFileUploadedDict,
          setDisputeData: setDisputeData,
        },
      ),
    }),
    React.createElement(
      UploadEvidenceForDisputes.UploadDisputeEvidenceModal.make,
      {
        uploadEvidenceModal: match$1[0],
        setUploadEvidenceModal: setUploadEvidenceModal,
        disputeId: data.dispute_id,
        setDisputeEvidenceStatus: setDisputeEvidenceStatus,
        fileUploadedDict: fileUploadedDict,
        setFileUploadedDict: setFileUploadedDict,
      },
    ),
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className:
            "flex flex-wrap " +
            justifyClassName$1 +
            " dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
        },
        props.detailsFields.map(function (colType, i) {
          return JsxPPXReactSupport.createElementWithKey(
            i.toString(),
            UIUtils.RenderIf.make,
            {
              condition: !excludeColKeys$1.includes(colType),
              children: React.createElement(
                "div",
                {
                  className: "flex " + widthClass$1 + " items-center",
                },
                React.createElement(OrderUtils.DisplayKeyValueParams.make, {
                  heading: Curry._1(getHeading, colType),
                  value: Curry._2(getCell, data, colType),
                  customMoneyStyle: "!font-normal !text-sm",
                  labelMargin: "!py-0 mt-2",
                  textColor: "!font-normal !text-jp-gray-700",
                  overiddingHeadingStyles: "text-black text-sm font-medium",
                }),
              ),
            },
          );
        }),
      ),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: Core__Option.isSome(children),
      children: Core__Option.getOr(children, null),
    }),
  );
}

var Details = {
  make: ShowDisputes$Details,
};

function ShowDisputes$DisputesInfo(props) {
  var disputesData = DisputesEntity.itemToObjMapper(props.orderDict);
  var connectorName = ConnectorUtils.getConnectorNameTypeFromString(
    disputesData.connector,
    undefined,
    undefined,
  );
  var showNoteComponentCondition = ConnectorUtils.existsInArray(
    connectorName,
    DisputesUtils.connectorsSupportEvidenceUpload,
  );
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "div",
      {
        className:
          "font-bold text-fs-16 dark:text-white dark:text-opacity-75 mt-4 mb-4",
      },
      "Summary",
    ),
    React.createElement(ShowDisputes$Details, {
      data: disputesData,
      getHeading: DisputesEntity.getHeading,
      getCell: DisputesEntity.getCell,
      detailsFields: DisputesEntity.allColumns,
      setDisputeData: props.setDisputeData,
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: !showNoteComponentCondition,
      children: React.createElement(ShowDisputes$DisputesNoteComponent, {
        disputesData: disputesData,
      }),
    }),
  );
}

var DisputesInfo = {
  make: ShowDisputes$DisputesInfo,
};

function ShowDisputes(props) {
  var id = props.id;
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match[1];
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match$1 = React.useState(function () {
    return null;
  });
  var setDisputeData = match$1[1];
  var fetchDisputesData = async function (param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var disputesUrl = APIUtils.getURL(
        /* DISPUTES */ 5,
        /* Get */ 0,
        Caml_option.some(id),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await Curry._1(fetchDetails, disputesUrl);
      Curry._1(setDisputeData, function (param) {
        return response;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    fetchDisputesData(undefined);
  }, []);
  var data = LogicUtils.getDictFromJsonObject(match$1[0]);
  var paymentId = LogicUtils.getString(data, "payment_id", "");
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col overflow-scroll",
        },
        React.createElement(
          "div",
          {
            className: "mb-4 flex justify-between",
          },
          React.createElement(
            "div",
            {
              className: "flex items-center",
            },
            React.createElement(
              "div",
              undefined,
              React.createElement(PageUtils.PageHeading.make, {
                title: "Disputes",
              }),
              React.createElement(BreadCrumbNavigation.make, {
                path: [
                  {
                    title: "Disputes",
                    link: "/disputes",
                  },
                ],
                currentPageTitle: id,
                cursorStyle: "cursor-pointer",
              }),
            ),
            React.createElement("div", undefined),
          ),
        ),
        React.createElement(ShowDisputes$DisputesInfo, {
          orderDict: data,
          setDisputeData: setDisputeData,
        }),
        React.createElement("div", {
          className: "mt-5",
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition: featureFlagDetails.auditTrail,
          children: React.createElement(OrderUIUtils.RenderAccordian.make, {
            accordion: [
              {
                title: "Events and logs",
                renderContent: function (param) {
                  return React.createElement(LogsWrapper.make, {
                    wrapperFor: "DISPUTE",
                    children: React.createElement(DisputeLogs.make, {
                      paymentId: paymentId,
                      disputeId: id,
                    }),
                  });
                },
                renderContentOnTop: undefined,
              },
            ],
          }),
        }),
      ),
    ),
    screenState: match[0],
  });
}

var make = ShowDisputes;

export { DisputesNoteComponent, Details, DisputesInfo, make };
/* Icon Not a pure module */
