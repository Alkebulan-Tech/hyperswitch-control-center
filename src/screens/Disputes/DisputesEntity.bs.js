// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as DisputesUtils from "./DisputesUtils.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";

var defaultColumns = [
  /* DisputeId */ 0, /* Amount */ 3, /* DisputeStage */ 5,
  /* DisputeStatus */ 6, /* PaymentId */ 1, /* CreatedAt */ 15,
];

var columnsInPaymentPage = [
  /* DisputeId */ 0, /* DisputeStage */ 5, /* ConnectorReason */ 10,
  /* DisputeStatus */ 6, /* CreatedAt */ 15,
];

var allColumns = [
  /* Amount */ 3, /* AttemptId */ 2, /* ChallengeRequiredBy */ 12,
  /* Connector */ 7, /* ConnectorCreatedAt */ 13, /* ConnectorDisputeId */ 9,
  /* ConnectorReason */ 10, /* ConnectorReasonCode */ 11,
  /* ConnectorStatus */ 8, /* ConnectorUpdatedAt */ 14, /* CreatedAt */ 15,
  /* Currency */ 4, /* DisputeId */ 0, /* DisputeStage */ 5,
  /* DisputeStatus */ 6, /* PaymentId */ 1,
];

function useGetStatus(dispute) {
  var match = React.useContext(ConfigContext.configContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var orderStatusLabel = dispute.dispute_status.toUpperCase();
  var fixedCss = "text-sm text-white font-bold p-1.5 rounded-lg";
  var match$1 = DisputesUtils.disputeStatusVariantMapper(
    dispute.dispute_status,
  );
  var exit = 0;
  if (typeof match$1 !== "number") {
    return React.createElement(
      "div",
      {
        className: "" + fixedCss + " " + backgroundColor + " bg-opacity-50",
      },
      orderStatusLabel,
    );
  }
  switch (match$1) {
    case /* DisputeOpened */ 0:
    case /* DisputeCancelled */ 3:
    case /* DisputeChallenged */ 4:
      exit = 3;
      break;
    case /* DisputeAccepted */ 2:
    case /* DisputeWon */ 5:
      exit = 1;
      break;
    case /* DisputeExpired */ 1:
    case /* DisputeLost */ 6:
      exit = 2;
      break;
  }
  switch (exit) {
    case 1:
      return React.createElement(
        "div",
        {
          className: "" + fixedCss + " bg-hyperswitch_green dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
    case 2:
      return React.createElement(
        "div",
        {
          className: "" + fixedCss + " bg-red-960 dark:bg-opacity-50",
        },
        orderStatusLabel,
      );
    case 3:
      return React.createElement(
        "div",
        {
          className: "" + fixedCss + " " + backgroundColor + " bg-opacity-50",
        },
        orderStatusLabel,
      );
  }
}

function getHeading(colType) {
  switch (colType) {
    case /* DisputeId */ 0:
      return Table.makeHeaderInfo(
        "dispute_id",
        "Dispute Id",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentId */ 1:
      return Table.makeHeaderInfo(
        "payment_id",
        "Payment Id",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AttemptId */ 2:
      return Table.makeHeaderInfo(
        "attempt_id",
        "Attempt Id",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Amount */ 3:
      return Table.makeHeaderInfo(
        "amount",
        "Amount",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Currency */ 4:
      return Table.makeHeaderInfo(
        "currency",
        "Currency",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* DisputeStage */ 5:
      return Table.makeHeaderInfo(
        "dispute_stage",
        "Dispute Stage",
        /* DropDown */ 5,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* DisputeStatus */ 6:
      return Table.makeHeaderInfo(
        "dispute_status",
        "Dispute Status",
        /* DropDown */ 5,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Connector */ 7:
      return Table.makeHeaderInfo(
        "connector",
        "Connector",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorStatus */ 8:
      return Table.makeHeaderInfo(
        "connector_status",
        "Connector Status",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorDisputeId */ 9:
      return Table.makeHeaderInfo(
        "connector_dispute_id",
        "Connector Dispute Id",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorReason */ 10:
      return Table.makeHeaderInfo(
        "connector_reason",
        "Connector Reason",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorReasonCode */ 11:
      return Table.makeHeaderInfo(
        "connector_reason_code",
        "Connector Reason Code",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ChallengeRequiredBy */ 12:
      return Table.makeHeaderInfo(
        "connector_required_by",
        "Connector Required By",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorCreatedAt */ 13:
      return Table.makeHeaderInfo(
        "connector_created_at",
        "Connector Created ",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorUpdatedAt */ 14:
      return Table.makeHeaderInfo(
        "connector_updated_at",
        "Connector Updated ",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CreatedAt */ 15:
      return Table.makeHeaderInfo(
        "created_at",
        "Created",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function amountValue(amount, currency) {
  var amountInFloat = Number(amount) / 100.0;
  return "" + amountInFloat.toString() + " " + currency + "";
}

function getCell(disputesData, colType) {
  switch (colType) {
    case /* DisputeId */ 0:
      return {
        TAG: /* DisplayCopyCell */ 11,
        _0: disputesData.dispute_id,
      };
    case /* PaymentId */ 1:
      return {
        TAG: /* DisplayCopyCell */ 11,
        _0: disputesData.payment_id,
      };
    case /* AttemptId */ 2:
      return {
        TAG: /* DisplayCopyCell */ 11,
        _0: disputesData.attempt_id,
      };
    case /* Amount */ 3:
      return {
        TAG: /* Text */ 1,
        _0: amountValue(disputesData.amount, disputesData.currency),
      };
    case /* Currency */ 4:
      return {
        TAG: /* Text */ 1,
        _0: disputesData.currency,
      };
    case /* DisputeStage */ 5:
      var match = DisputesUtils.disputeStageVariantMapper(
        disputesData.dispute_stage,
      );
      var tmp;
      switch (match) {
        case /* PreDispute */ 0:
          tmp = /* LabelOrange */ 4;
          break;
        case /* Dispute */ 1:
          tmp = /* LabelGreen */ 0;
          break;
        case /* PreArbitration */ 2:
          tmp = /* LabelYellow */ 5;
          break;
        case /* NotFound */ 3:
          tmp = /* LabelWhite */ 10;
          break;
      }
      return {
        TAG: /* Label */ 0,
        _0: {
          title: disputesData.dispute_stage.toUpperCase(),
          color: tmp,
        },
      };
    case /* DisputeStatus */ 6:
      var match$1 = DisputesUtils.disputeStatusVariantMapper(
        disputesData.dispute_status,
      );
      var tmp$1;
      if (typeof match$1 === "number") {
        switch (match$1) {
          case /* DisputeOpened */ 0:
            tmp$1 = /* LabelLightBlue */ 9;
            break;
          case /* DisputeCancelled */ 3:
            tmp$1 = /* LabelOrange */ 4;
            break;
          case /* DisputeChallenged */ 4:
            tmp$1 = /* LabelYellow */ 5;
            break;
          case /* DisputeAccepted */ 2:
          case /* DisputeWon */ 5:
            tmp$1 = /* LabelGreen */ 0;
            break;
          case /* DisputeExpired */ 1:
          case /* DisputeLost */ 6:
            tmp$1 = /* LabelRed */ 1;
            break;
        }
      } else {
        tmp$1 = /* LabelWhite */ 10;
      }
      return {
        TAG: /* Label */ 0,
        _0: {
          title: disputesData.dispute_status.toUpperCase(),
          color: tmp$1,
        },
      };
    case /* Connector */ 7:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(HelperComponents.ConnectorCustomCell.make, {
          connectorName: disputesData.connector,
        }),
        _1: "",
      };
    case /* ConnectorStatus */ 8:
      return {
        TAG: /* Text */ 1,
        _0: disputesData.connector_status,
      };
    case /* ConnectorDisputeId */ 9:
      return {
        TAG: /* Text */ 1,
        _0: disputesData.connector_dispute_id,
      };
    case /* ConnectorReason */ 10:
      return {
        TAG: /* Text */ 1,
        _0: disputesData.connector_reason,
      };
    case /* ConnectorReasonCode */ 11:
      return {
        TAG: /* Text */ 1,
        _0: disputesData.connector_reason_code,
      };
    case /* ChallengeRequiredBy */ 12:
      return {
        TAG: /* Date */ 4,
        _0: disputesData.challenge_required_by,
      };
    case /* ConnectorCreatedAt */ 13:
      return {
        TAG: /* Date */ 4,
        _0: disputesData.connector_created_at,
      };
    case /* ConnectorUpdatedAt */ 14:
      return {
        TAG: /* Date */ 4,
        _0: disputesData.connector_updated_at,
      };
    case /* CreatedAt */ 15:
      return {
        TAG: /* Date */ 4,
        _0: disputesData.created_at,
      };
  }
}

function itemToObjMapper(dict) {
  return {
    dispute_id: LogicUtils.getString(dict, "dispute_id", ""),
    payment_id: LogicUtils.getString(dict, "payment_id", ""),
    attempt_id: LogicUtils.getString(dict, "attempt_id", ""),
    amount: LogicUtils.getString(dict, "amount", ""),
    currency: LogicUtils.getString(dict, "currency", ""),
    dispute_stage: LogicUtils.getString(dict, "dispute_stage", ""),
    dispute_status: LogicUtils.getString(dict, "dispute_status", ""),
    connector: LogicUtils.getString(dict, "connector", ""),
    connector_status: LogicUtils.getString(dict, "connector_status", ""),
    connector_dispute_id: LogicUtils.getString(
      dict,
      "connector_dispute_id",
      "",
    ),
    connector_reason: LogicUtils.getString(dict, "connector_reason", ""),
    connector_reason_code: LogicUtils.getString(
      dict,
      "connector_reason_code",
      "",
    ),
    challenge_required_by: LogicUtils.getString(
      dict,
      "challenge_required_by",
      "",
    ),
    connector_created_at: LogicUtils.getString(
      dict,
      "connector_created_at",
      "",
    ),
    connector_updated_at: LogicUtils.getString(
      dict,
      "connector_updated_at",
      "",
    ),
    created_at: LogicUtils.getString(dict, "created_at", ""),
  };
}

function getDisputes(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapper);
}

var disputesEntity = EntityType.makeEntity(
  "",
  getDisputes,
  defaultColumns,
  allColumns,
  getHeading,
  getCell,
  "",
  undefined,
  undefined,
  undefined,
  undefined,
  function (disputesData) {
    return HSwitchGlobalVars.appendDashboardPath(
      "/disputes/" + disputesData.dispute_id + "",
    );
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  defaultColumns,
  columnsInPaymentPage,
  allColumns,
  useGetStatus,
  getHeading,
  amountValue,
  getCell,
  itemToObjMapper,
  getDisputes,
  disputesEntity,
};
/* disputesEntity Not a pure module */
