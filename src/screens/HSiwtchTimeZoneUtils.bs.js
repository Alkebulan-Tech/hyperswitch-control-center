// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function getUserTimeZoneString(param) {
  return Core__Option.getOr(new Date().toTimeString().split(" ")[1], "");
}

function getUserTimeZone(param) {
  var userTimeZone = getUserTimeZoneString(undefined);
  switch (userTimeZone) {
    case "GMT+0000":
      return /* GMT */ 0;
    case "GMT+0100":
      return /* CET */ 2;
    case "GMT+0200":
      return /* CAT */ 4;
    case "GMT+0300":
      return /* EAT */ 1;
    case "GMT+0500":
      return /* PKT */ 27;
    case "GMT+0530":
      return /* IST */ 28;
    case "GMT+0700":
      return /* WIB */ 24;
    case "GMT+0800":
      return /* HKT */ 23;
    case "GMT+0900":
      return /* WIT */ 25;
    case "GMT+0930":
      return /* ACST */ 34;
    case "GMT+1000":
      return /* AEST */ 20;
    case "GMT+1200":
      return /* NZST */ 21;
    case "GMT-0230":
      return /* NDT */ 19;
    case "GMT-0300":
      return /* ADT */ 17;
    case "GMT-0400":
      return /* AST */ 10;
    case "GMT-0500":
      return /* EST */ 11;
    case "GMT-0600":
      return /* CST */ 13;
    case "GMT-0700":
      return /* MST */ 15;
    case "GMT-0800":
      return /* AKDT */ 9;
    case "GMT-0900":
      return /* HDT */ 8;
    case "GMT-1000":
      return /* HST */ 39;
    case "GMT-1100":
      return /* SST */ 40;
    default:
      return /* UTC */ 41;
  }
}

export { getUserTimeZoneString, getUserTimeZone };
/* No side effect */
