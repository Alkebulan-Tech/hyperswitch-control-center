// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as UrlUtils from "../../utils/UrlUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RemoteFilter from "../../components/RemoteFilter.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HyperSwitchUtils from "../../utils/HyperSwitchUtils.bs.js";
import * as ConnectorListHook from "../Hooks/ConnectorListHook.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as PaymentMethodEntity from "./PaymentMethodEntity.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as PaymentMethodConfigUtils from "./PaymentMethodConfigUtils.bs.js";

function PaymentMethodList(props) {
  var isPayoutFlow = props.isPayoutFlow;
  var isPayoutFlow$1 = isPayoutFlow !== undefined ? isPayoutFlow : false;
  var fetchConnectorListResponse =
    ConnectorListHook.useFetchConnectorList(undefined);
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return {};
  });
  var setConnectorResponse = match$1[1];
  var connectorResponse = match$1[0];
  var filters = UrlUtils.useGetFilterDictFromUrl("");
  var match$2 = React.useState(function () {
    return PaymentMethodEntity.getConnectedList({});
  });
  var setFiltersConnectors = match$2[1];
  var filteredConnectors = match$2[0];
  var match$3 = React.useState(function () {
    return PaymentMethodEntity.getConnectedList({});
  });
  var setConfiguredConnectors = match$3[1];
  var match$4 = React.useState(function () {
    return 0;
  });
  var allFilters = React.useMemo(
    function () {
      return PaymentMethodConfigUtils.pmtConfigFilter(filters);
    },
    [filters],
  );
  var getConnectorListAndUpdateState = React.useCallback(async function (
    param,
  ) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var response = await Curry._1(fetchConnectorListResponse, undefined);
      var configuredConnectors = PaymentMethodEntity.getConnectedList(response);
      var filterdValue = PaymentMethodEntity.getFilterdConnectorList(
        response,
        allFilters,
      );
      Curry._1(setFiltersConnectors, function (param) {
        return filterdValue;
      });
      Curry._1(setConnectorResponse, function (param) {
        return response;
      });
      Curry._1(setConfiguredConnectors, function (param) {
        return configuredConnectors;
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "Failed to fetch",
        };
      });
    }
  }, []);
  React.useEffect(
    function () {
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/configure-pmts"),
      );
      Curry._1(getConnectorListAndUpdateState, undefined);
    },
    [isPayoutFlow$1],
  );
  var applyFilter = async function (param) {
    Curry._1(setScreenState, function (param) {
      return /* Loading */ 0;
    });
    var res = PaymentMethodEntity.getFilterdConnectorList(
      connectorResponse,
      allFilters,
    );
    Curry._1(setFiltersConnectors, function (param) {
      return res;
    });
    await HyperSwitchUtils.delay(500);
    return Curry._1(setScreenState, function (param) {
      return /* Success */ 1;
    });
  };
  React.useEffect(
    function () {
      if (
        Core__Option.isSome(allFilters.connectorId) ||
        Core__Option.isSome(allFilters.profileId) ||
        Core__Option.isSome(allFilters.paymentMethod) ||
        Core__Option.isSome(allFilters.paymentMethodType)
      ) {
        applyFilter(undefined);
      }
    },
    [allFilters],
  );
  var handleClearFilter = async function (param) {
    Curry._1(setScreenState, function (param) {
      return /* Loading */ 0;
    });
    RescriptReactRouter.replace(
      HSwitchGlobalVars.appendDashboardPath("/configure-pmts"),
    );
    await HyperSwitchUtils.delay(500);
    var dict = PaymentMethodConfigUtils.pmtConfigFilter({});
    var res = PaymentMethodEntity.getFilterdConnectorList(
      connectorResponse,
      dict,
    );
    Curry._1(setFiltersConnectors, function (param) {
      return res;
    });
    return Curry._1(setScreenState, function (param) {
      return /* Success */ 1;
    });
  };
  return React.createElement(
    "div",
    undefined,
    React.createElement(PageUtils.PageHeading.make, {
      title: "Configure PMTs at Checkout",
      subTitle:
        "Control the visibility of your payment methods at the checkout",
    }),
    React.createElement(
      PageLoaderWrapper.make,
      {
        children: Caml_option.some(null),
        screenState: match[0],
      },
      React.createElement(
        "div",
        undefined,
        React.createElement(RemoteFilter.make, {
          defaultFilters: {},
          requiredSearchFieldsList: [],
          refreshFilters: false,
          remoteFilters: PaymentMethodConfigUtils.initialFilters(
            match$3[0],
            businessProfiles,
          ),
          remoteOptions: [],
          localOptions: [],
          localFilters: [],
          autoApply: false,
          clearFilters: function (param) {
            handleClearFilter(undefined);
          },
          hideFiltersDefaultValue: false,
        }),
      ),
      React.createElement(
        "div",
        undefined,
        React.createElement(LoadedTable.make, {
          title: " ",
          showSerialNumber: true,
          actualData: filteredConnectors.map(function (prim) {
            return prim;
          }),
          totalResults: filteredConnectors.length,
          resultsPerPage: 20,
          offset: match$4[0],
          setOffset: match$4[1],
          entity: PaymentMethodEntity.paymentMethodEntity(
            getConnectorListAndUpdateState,
          ),
          currrentFetchCount: filteredConnectors.length,
          collapseTableRow: false,
        }),
      ),
    ),
  );
}

var make = PaymentMethodList;

export { make };
/* react Not a pure module */
