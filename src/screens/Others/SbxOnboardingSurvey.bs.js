// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as Accordion from "../componentsDemo/Accordion.bs.js";
import * as TextInput from "../../components/form/TextInput.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CheckBoxIcon from "../../components/custom-icons/CheckBoxIcon.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as FormValuesSpy from "../../components/form/FormValuesSpy.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as SwitchMerchantListHook from "../SwitchMerchant/SwitchMerchantListHook.bs.js";
import * as OnboardingSurveyModalUtils from "./OnboardingSurveyModalUtils.bs.js";
import * as MerchantAccountDetailsMapper from "../../utils/Mappers/MerchantAccountDetailsMapper.bs.js";

function SbxOnboardingSurvey$OtherfieldRender(props) {
  var field_name = props.field_name;
  var valueField = ReactFinalForm.useField(field_name).input;
  var textField = ReactFinalForm.useField(
    "" + field_name + "_otherstring",
  ).input;
  var textInput_name = "" + field_name + "_otherstring";
  var textInput_onBlur = function (_ev) {
    var textFieldValue = LogicUtils.getStringFromJson(textField.value, "");
    var valueFieldValue = LogicUtils.getStrArrayFromJsonArray(
      LogicUtils.getArrayFromJson(valueField.value, []),
    );
    if (LogicUtils.isNonEmptyString(textFieldValue)) {
      valueFieldValue.push(textFieldValue);
    }
    Curry._1(valueField.onChange, valueFieldValue);
  };
  var textInput_onChange = function (ev) {
    var target = ev.target;
    Curry._1(textField.onChange, target.value);
  };
  var textInput_onFocus = function (_ev) {};
  var textInput_value = textField.value;
  var textInput = {
    name: textInput_name,
    onBlur: textInput_onBlur,
    onChange: textInput_onChange,
    onFocus: textInput_onFocus,
    value: textInput_value,
    checked: false,
  };
  return React.createElement(
    "div",
    {
      className: "flex gap-2 items-center",
    },
    JsxPPXReactSupport.createElementWithKey(
      "" + field_name + "_otherstring",
      CheckBoxIcon.make,
      {
        isSelected: LogicUtils.isNonEmptyString(
          LogicUtils.getStringFromJson(textField.value, ""),
        ),
      },
    ),
    React.createElement(TextInput.make, {
      input: textInput,
      placeholder: "Others",
    }),
  );
}

var OtherfieldRender = {
  make: SbxOnboardingSurvey$OtherfieldRender,
};

function SbxOnboardingSurvey(props) {
  var setShowModal = props.setShowModal;
  var showToast = ToastState.useShowToast(undefined);
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var merchantId = HSLocalStorage.getFromMerchantDetails("merchant_id");
  var userEmail = HSLocalStorage.getFromMerchantDetails("email");
  var setMerchantDetailsValue = Recoil.useSetRecoilState(
    HyperswitchAtom.merchantDetailsValueAtom,
  );
  var fetchSwitchMerchantList =
    SwitchMerchantListHook.useFetchSwitchMerchantList(undefined);
  var getMerchantNameFromJson = function (values) {
    return LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(values),
      "merchant_name",
      "",
    );
  };
  var updateUserName = async function (values) {
    try {
      var userName = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(values),
        "user_name",
        "",
      );
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "USER_UPDATE",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = OnboardingSurveyModalUtils.constructUserUpdateBody(values);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return HSwitchUtils.setUserDetails("name", userName);
    } catch (exn) {
      Curry._8(
        showToast,
        "Failed to update onboarding survey",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setShowModal, function (param) {
        return true;
      });
    }
  };
  var updateOnboardingSurveyDetails = async function (values) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var bodyValues =
        OnboardingSurveyModalUtils.constructOnboardingSurveyBody(values);
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["OnboardingSurvey", bodyValues],
      ]);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return;
    } catch (exn) {
      Curry._8(
        showToast,
        "Failed to update onboarding survey",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setShowModal, function (param) {
        return true;
      });
    }
  };
  var udpateMerchantDetails = async function (values) {
    try {
      var accountUrl = APIUtils.getURL(
        /* MERCHANT_ACCOUNT */ 2,
        /* Post */ 2,
        Caml_option.some(merchantId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["merchant_id", merchantId],
        ["merchant_name", getMerchantNameFromJson(values)],
      ]);
      var merchantDetails = await Curry._7(
        updateDetails,
        accountUrl,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(fetchSwitchMerchantList, undefined);
      return setMerchantDetailsValue(function (param) {
        return MerchantAccountDetailsMapper.getMerchantDetails(merchantDetails);
      });
    } catch (exn) {
      Curry._8(
        showToast,
        "Failed to update onboarding survey",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setShowModal, function (param) {
        return true;
      });
    }
  };
  var onSubmit = async function (values, param) {
    try {
      udpateMerchantDetails(values);
      updateOnboardingSurveyDetails(values);
      updateUserName(values);
      Curry._8(
        showToast,
        "Successfully updated onboarding survey",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setShowModal, function (param) {
        return false;
      });
    } catch (exn) {
      Curry._8(
        showToast,
        "Please try again!",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setShowModal, function (param) {
        return true;
      });
    }
    return null;
  };
  var validateForm = function (values) {
    var errors = {};
    var valueDict = LogicUtils.getDictFromJsonObject(values);
    var dictKeys = Object.keys(valueDict);
    var hyperswitchDict = LogicUtils.getDictfromDict(valueDict, "hyperswitch");
    if (dictKeys.length === 0 || Object.keys(hyperswitchDict).length === 0) {
      errors["Required"] = "Please fill the details";
    } else if (
      LogicUtils.isEmptyString(
        LogicUtils.getString(valueDict, "merchant_name", ""),
      )
    ) {
      errors["Required"] = "Business name required";
    } else if (
      LogicUtils.isEmptyString(LogicUtils.getString(valueDict, "user_name", ""))
    ) {
      errors["Required"] = "User name required";
    } else {
      OnboardingSurveyModalUtils.keysToValidateForHyperswitch.forEach(
        function (key) {
          var strValue = Core__JSON.Classify.classify(
            LogicUtils.getJsonObjectFromDict(hyperswitchDict, key),
          );
          if (typeof strValue === "number") {
            errors[key] = "Required";
            return;
          }
          switch (strValue.TAG | 0) {
            case /* String */ 1:
              if (LogicUtils.isEmptyString(strValue._0)) {
                errors[key] = "Required";
                return;
              } else {
                return;
              }
            case /* Array */ 4:
              if (strValue._0.length === 0) {
                errors[key] = "Required";
                return;
              } else {
                return;
              }
            default:
              errors[key] = "Required";
              return;
          }
        },
      );
    }
    return errors;
  };
  return React.createElement(Modal.make, {
    showModal: props.showModal,
    setShowModal: setShowModal,
    children: JsxPPXReactSupport.createElementWithKey(
      "merchant_name-validation",
      Form.make,
      {
        children: React.createElement(
          "div",
          {
            className: "flex flex-col gap-4 h-full w-full ",
          },
          React.createElement(
            "div",
            {
              className:
                "!max-h-96 !overflow-y-scroll flex flex-col gap-4 h-full",
            },
            React.createElement(Accordion.make, {
              accordion: [
                {
                  title: "User details ",
                  renderContent: function (param) {
                    return React.createElement(
                      "div",
                      undefined,
                      React.createElement(FormRenderer.DesktopRow.make, {
                        children: React.createElement(
                          FormRenderer.FieldRenderer.make,
                          {
                            field: OnboardingSurveyModalUtils.userName,
                            fieldWrapperClass: "w-full",
                            labelClass: "!text-black font-medium !-ml-[0.5px]",
                          },
                        ),
                      }),
                      React.createElement(FormRenderer.DesktopRow.make, {
                        children: React.createElement(
                          FormRenderer.FieldRenderer.make,
                          {
                            field: OnboardingSurveyModalUtils.designation,
                            fieldWrapperClass: "w-full",
                            labelClass: "!text-black font-medium !-ml-[0.5px]",
                          },
                        ),
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
                {
                  title: "Business details ",
                  renderContent: function (param) {
                    return React.createElement(
                      "div",
                      undefined,
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: OnboardingSurveyModalUtils.businessName,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: OnboardingSurveyModalUtils.businessWebsite,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: OnboardingSurveyModalUtils.aboutBusiness,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: OnboardingSurveyModalUtils.majorMarkets,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: OnboardingSurveyModalUtils.businessSize,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
                {
                  title: "Hyperswitch details ",
                  renderContent: function (param) {
                    return React.createElement(
                      "div",
                      undefined,
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: OnboardingSurveyModalUtils.hyperswitchUsage,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                      React.createElement(
                        "div",
                        undefined,
                        React.createElement(FormRenderer.FieldRenderer.make, {
                          field: OnboardingSurveyModalUtils.hyperswitchFeatures,
                          fieldWrapperClass: "w-full",
                          labelClass: "!text-black font-medium !-ml-[0.5px]",
                        }),
                        React.createElement(
                          SbxOnboardingSurvey$OtherfieldRender,
                          {
                            field_name: "hyperswitch.required_features",
                          },
                        ),
                      ),
                      React.createElement(
                        "div",
                        undefined,
                        React.createElement(FormRenderer.FieldRenderer.make, {
                          field: OnboardingSurveyModalUtils.processorRequired,
                          fieldWrapperClass: "w-full",
                          labelClass: "!text-black font-medium !-ml-[0.5px]",
                        }),
                        React.createElement(
                          SbxOnboardingSurvey$OtherfieldRender,
                          {
                            field_name: "hyperswitch.required_processors",
                          },
                        ),
                      ),
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field: OnboardingSurveyModalUtils.plannedGoLiveDate,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                      React.createElement(FormRenderer.FieldRenderer.make, {
                        field:
                          OnboardingSurveyModalUtils.miscellaneousTextField,
                        fieldWrapperClass: "w-full",
                        labelClass: "!text-black font-medium !-ml-[0.5px]",
                      }),
                    );
                  },
                  renderContentOnTop: undefined,
                },
              ],
              accordianTopContainerCss: "rounded-md",
              contentExpandCss: "p-4",
              initialExpandedArray: [0],
              gapClass: "flex flex-col gap-4",
              titleStyle: "font-semibold text-bold text-md",
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex justify-end w-full pr-5 pb-3",
            },
            React.createElement(FormRenderer.SubmitButton.make, {
              text: "Start Exploring",
              buttonSize: /* Small */ 2,
            }),
          ),
          React.createElement(FormValuesSpy.make, {}),
        ),
        onSubmit: onSubmit,
        initialValues: {},
        validate: validateForm,
      },
    ),
    modalHeading: "Welcome aboard! Let's get started",
    modalClass:
      "!w-1/3 !min-w-1/3 !bg-white m-auto dark:!bg-jp-gray-lightgray_background",
    paddingClass: "",
    modalHeadingDescription: userEmail,
    showCloseIcon: false,
  });
}

var make = SbxOnboardingSurvey;

export { OtherfieldRender, make };
/* Form Not a pure module */
