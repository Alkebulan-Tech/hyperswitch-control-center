// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as HyperSwitchAuthUtils from "../login/HSwitchLoginFlow/HyperSwitchAuthUtils.bs.js";

var make = React.memo(function (props) {
  var verificationDays = props.verificationDays;
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var email = HSLocalStorage.getFromMerchantDetails("email");
  var verificationMessage =
    "" +
    verificationDays.toString() +
    " " +
    (verificationDays === 1 ? "day" : "days") +
    " to go!";
  var resendEmailVerify = async function (param) {
    var body = HyperSwitchAuthUtils.getEmailBody(email, undefined, undefined);
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "VERIFY_EMAIL_REQUEST",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._8(
        showToast,
        "Email Send Successfully!",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      var heading = "Failed to send email";
      var description =
        "Please retry sending an email or try again after some time in case the issue persists!";
      var isApiFailed = true;
      var retryFunction = function (param) {
        resendEmailVerify(undefined);
      };
      return Curry._1(showPopUp, {
        heading: heading,
        description: description,
        popUpType: [/* Primary */ 1, /* WithIcon */ 0],
        handleConfirm: {
          text: isApiFailed ? "RETRY" : "OK",
          onClick: function (param) {
            if (isApiFailed) {
              return Curry._1(retryFunction, undefined);
            }
          },
        },
      });
    }
  };
  return React.createElement(
    "div",
    {
      className:
        "flex justify-center items-center text-lg bg-orange-100 dark:text-black rounded-bl-lg rounded-br-lg px-10 py-2 whitespace-nowrap",
    },
    React.createElement(
      "span",
      {
        className: "font-bold mr-1",
      },
      "" + verificationMessage + "",
    ),
    React.createElement(
      "span",
      {
        className:
          "hover:underline text-orange-900 cursor-pointer font-bold ml-1 underline underline-offset-2",
        onClick: function (param) {
          resendEmailVerify(undefined);
        },
      },
      "Verify",
    ),
    React.createElement(
      "span",
      {
        className: "ml-1 font-medium",
      },
      "your email address for uninterrupted access. ",
    ),
  );
});

export { make };
/* make Not a pure module */
