// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ACLDiv from "../../components/ACLDiv.bs.js";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as Shimmer from "../../libraries/Shimmer.bs.js";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as HomeUtils from "./HomeUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as EnumVariantHook from "../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PermissionUtils from "../UserManagement/PermissionUtils.bs.js";
import * as QuickStartUtils from "./QuickStart/QuickStartUtils.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HomePageOverviewComponent from "../Analytics/HomePageOverview/HomePageOverviewComponent.bs.js";

function HomeV2$HomePageHorizontalStepper(props) {
  var stepperItemsArray = props.stepperItemsArray;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var backgroundColor = match$1.backgroundColor;
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var typedValueOfEnum = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var step = LogicUtils.isNonEmptyString(
    typedValueOfEnum.testPayment.payment_id,
  )
    ? typedValueOfEnum.integrationCompleted
      ? 2
      : 1
    : 0;
  var getStepperStyle = function (index) {
    if (index < step) {
      return "bg-white border " + borderColor.primaryNormal + "";
    } else if (index === step) {
      return "" + backgroundColor + " text-white border-transparent";
    } else {
      return "border-gray-500 text-gray-500";
    }
  };
  var getProgressBarStyle = function (index) {
    if (index < step) {
      return "" + backgroundColor + "  w-full";
    } else {
      return "";
    }
  };
  var getTextStyle = HSwitchUtils.getTextClass([/* P2 */ 4, /* Medium */ 1]);
  return React.createElement(
    "div",
    {
      className: "flex w-full gap-2 justify-evenly",
    },
    stepperItemsArray.map(function (value, index) {
      return React.createElement(
        "div",
        {
          key: index.toString(),
          className: "flex flex-col gap-2.5 w-full",
        },
        React.createElement(
          "div",
          {
            className: "flex items-center gap-2",
          },
          React.createElement(
            "span",
            {
              className:
                "h-6 w-7 flex items-center justify-center rounded-md font-semibold " +
                getStepperStyle(index) +
                " " +
                getTextStyle +
                "",
            },
            React.createElement(UIUtils.RenderIf.make, {
              condition: index < step,
              children: React.createElement(Icon.make, {
                name: "check",
                size: 12,
                className: "text-blue-500",
              }),
            }),
            React.createElement(UIUtils.RenderIf.make, {
              condition: index >= step,
              children: ((index + 1) | 0).toString(),
            }),
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: index <= ((stepperItemsArray.length - 1) | 0),
            children: React.createElement(
              "div",
              {
                className: "relative w-full",
              },
              React.createElement("div", {
                className:
                  "absolute h-1 rounded-full z-1 " +
                  getProgressBarStyle(index) +
                  "",
              }),
              React.createElement(UIUtils.RenderIf.make, {
                condition: index !== ((stepperItemsArray.length - 1) | 0),
                children: React.createElement("div", {
                  className:
                    "w-full h-1 rounded-full bg-grey-700 bg-opacity-10",
                }),
              }),
            ),
          }),
        ),
        React.createElement("p", undefined, value),
      );
    }),
  );
}

var HomePageHorizontalStepper = {
  make: HomeV2$HomePageHorizontalStepper,
};

function HomeV2$QuickStart(props) {
  var match = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match.setQuickStartPageState;
  var setDashboardPageState = match.setDashboardPageState;
  var usePostEnumDetails = EnumVariantHook.usePostEnumDetails(undefined);
  var updateEnumInRecoil = EnumVariantHook.useUpdateEnumInRecoil(undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var match$1 = React.useState(function () {
    return /* Normal */ 0;
  });
  var setConfigureButtonState = match$1[1];
  var typedConnectorValue = Recoil.useRecoilValue(
    HyperswitchAtom.connectorListAtom,
  );
  var initalEnums = LogicUtils.safeParse(
    Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom),
  );
  var typedValueOfEnum = QuickStartUtils.getTypedValueFromDict(initalEnums);
  var setEnumsForPreviouslyConnectedConnectors = async function (param) {
    try {
      Curry._1(setConfigureButtonState, function (param) {
        return /* Loading */ 1;
      });
      if (
        typedValueOfEnum.configurationType.length === 0 &&
        typedValueOfEnum.firstProcessorConnected.processorID.length === 0 &&
        typedValueOfEnum.secondProcessorConnected.processorID.length === 0
      ) {
        if (typedConnectorValue.length >= 2) {
          var firstConnectorValue = Core__Option.getOr(
            typedConnectorValue[0],
            ConnectorListMapper.getProcessorPayloadType({}),
          );
          var secondConnectorValue = Core__Option.getOr(
            typedConnectorValue[1],
            ConnectorListMapper.getProcessorPayloadType({}),
          );
          var bodyOfFirstConnector_processorID =
            firstConnectorValue.merchant_connector_id;
          var bodyOfFirstConnector_processorName =
            firstConnectorValue.connector_name;
          var bodyOfFirstConnector = {
            processorID: bodyOfFirstConnector_processorID,
            processorName: bodyOfFirstConnector_processorName,
          };
          var bodyOfSecondConnector_processorID =
            secondConnectorValue.merchant_connector_id;
          var bodyOfSecondConnector_processorName =
            secondConnectorValue.connector_name;
          var bodyOfSecondConnector = {
            processorID: bodyOfSecondConnector_processorID,
            processorName: bodyOfSecondConnector_processorName,
          };
          await Curry._2(
            usePostEnumDetails,
            {
              TAG: /* StringEnumType */ 6,
              _0: QuickStartUtils.connectorChoiceVariantToString(
                "MultipleProcessorWithSmartRouting",
              ),
            },
            "ConfigurationType",
          );
          await Curry._2(
            usePostEnumDetails,
            {
              TAG: /* ProcesorType */ 0,
              _0: bodyOfFirstConnector,
            },
            "FirstProcessorConnected",
          );
          await Curry._2(
            usePostEnumDetails,
            {
              TAG: /* ProcesorType */ 0,
              _0: bodyOfSecondConnector,
            },
            "SecondProcessorConnected",
          );
          Curry._1(updateEnumInRecoil, [
            [
              {
                TAG: /* StringEnumType */ 6,
                _0: QuickStartUtils.connectorChoiceVariantToString(
                  "MultipleProcessorWithSmartRouting",
                ),
              },
              "ConfigurationType",
            ],
            [
              {
                TAG: /* ProcesorType */ 0,
                _0: bodyOfFirstConnector,
              },
              "FirstProcessorConnected",
            ],
            [
              {
                TAG: /* ProcesorType */ 0,
                _0: bodyOfSecondConnector,
              },
              "SecondProcessorConnected",
            ],
          ]);
          Curry._1(setQuickStartPageState, function (param) {
            return {
              TAG: /* ConnectProcessor */ 0,
              _0: /* CONFIGURE_SMART_ROUTING */ 2,
            };
          });
        } else if (typedConnectorValue.length === 1) {
          var firstConnectorValue$1 = Core__Option.getOr(
            typedConnectorValue[0],
            ConnectorListMapper.getProcessorPayloadType({}),
          );
          var bodyOfFirstConnector_processorID$1 =
            firstConnectorValue$1.merchant_connector_id;
          var bodyOfFirstConnector_processorName$1 =
            firstConnectorValue$1.connector_name;
          var bodyOfFirstConnector$1 = {
            processorID: bodyOfFirstConnector_processorID$1,
            processorName: bodyOfFirstConnector_processorName$1,
          };
          await Curry._2(
            usePostEnumDetails,
            {
              TAG: /* StringEnumType */ 6,
              _0: QuickStartUtils.connectorChoiceVariantToString(
                "MultipleProcessorWithSmartRouting",
              ),
            },
            "ConfigurationType",
          );
          await Curry._2(
            usePostEnumDetails,
            {
              TAG: /* ProcesorType */ 0,
              _0: bodyOfFirstConnector$1,
            },
            "FirstProcessorConnected",
          );
          Curry._1(updateEnumInRecoil, [
            [
              {
                TAG: /* StringEnumType */ 6,
                _0: QuickStartUtils.connectorChoiceVariantToString(
                  "MultipleProcessorWithSmartRouting",
                ),
              },
              "ConfigurationType",
            ],
            [
              {
                TAG: /* ProcesorType */ 0,
                _0: bodyOfFirstConnector$1,
              },
              "FirstProcessorConnected",
            ],
          ]);
          Curry._1(setQuickStartPageState, function (param) {
            return {
              TAG: /* ConnectProcessor */ 0,
              _0: /* CONFIGURE_SECONDARY */ 1,
            };
          });
        }
      } else {
        var pageStateToSet = QuickStartUtils.getCurrentStep(
          LogicUtils.getDictFromJsonObject(initalEnums),
        );
        Curry._1(setQuickStartPageState, function (param) {
          return QuickStartUtils.enumToVarinatMapper(pageStateToSet);
        });
      }
      Curry._1(setConfigureButtonState, function (param) {
        return /* Normal */ 0;
      });
      Curry._1(setDashboardPageState, function (param) {
        return "QUICK_START";
      });
      return RescriptReactRouter.push(
        HSwitchGlobalVars.appendDashboardPath("/quick-start"),
      );
    } catch (exn) {
      return Curry._1(setConfigureButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  var buttonText = LogicUtils.isNonEmptyString(
    typedValueOfEnum.testPayment.payment_id,
  )
    ? typedValueOfEnum.integrationCompleted
      ? "Get Production access"
      : "Start Integration on app"
    : "Get Started Now";
  var mixpanelEventForQuickStart = function (param) {
    if (LogicUtils.isNonEmptyString(typedValueOfEnum.testPayment.payment_id)) {
      if (typedValueOfEnum.integrationCompleted) {
        return Curry._4(
          mixpanelEvent,
          "quickstart_get_productuion_access",
          undefined,
          undefined,
          undefined,
        );
      } else {
        return Curry._4(
          mixpanelEvent,
          "quickstart_start_integration_on_app",
          undefined,
          undefined,
          undefined,
        );
      }
    } else {
      return Curry._4(
        mixpanelEvent,
        "quickstart_configure_test_mode",
        undefined,
        undefined,
        undefined,
      );
    }
  };
  return React.createElement(
    "div",
    {
      className:
        "flex flex-col md:flex-row pt-10 border rounded-md bg-white gap-4",
    },
    React.createElement(
      "div",
      {
        className:
          "flex flex-col justify-evenly gap-8 pl-10 pb-10 pr-2 md:pr-0",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-2",
        },
        React.createElement(
          "p",
          {
            className: HSwitchUtils.getTextClass([
              /* H2 */ 1, /* Optional */ 4,
            ]),
          },
          "Quick Start",
        ),
        React.createElement(
          "p",
          {
            className: HomeUtils.subtextStyle,
          },
          "Configure and start using Hyperswitch to get an overview of our offerings and how hyperswitch can help you control your payments",
        ),
      ),
      React.createElement(HomeV2$HomePageHorizontalStepper, {
        stepperItemsArray: HomeUtils.homepageStepperItems,
      }),
      React.createElement(Button.make, {
        buttonState: match$1[0],
        text: buttonText,
        buttonType: /* Primary */ 0,
        rightIcon: {
          TAG: /* CustomIcon */ 1,
          _0: React.createElement(Icon.make, {
            name: "thin-right-arrow",
            size: 20,
            className: "cursor-pointer",
          }),
        },
        onClick: function (param) {
          mixpanelEventForQuickStart(undefined);
          setEnumsForPreviouslyConnectedConnectors(undefined);
        },
        customButtonStyle: "group w-1/5",
      }),
    ),
    React.createElement(UIUtils.RenderIf.make, {
      condition: !props.isMobileView,
      children: React.createElement(
        "div",
        {
          className: "h-30 md:w-[43rem] flex justify-end",
        },
        React.createElement("img", {
          src: "/assets/QuickStartImage.svg",
        }),
      ),
    }),
  );
}

var QuickStart = {
  make: HomeV2$QuickStart,
};

function HomeV2$RecipesAndPlugins(props) {
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var enumDetails = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(
      Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom),
    ),
  );
  var isStripePlusPayPalCompleted =
    HSwitchUtils.checkStripePlusPayPal(enumDetails);
  var isWooCommercePalCompleted = HSwitchUtils.checkWooCommerce(enumDetails);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var blockConditionAccessVal =
    userPermissionJson.connectorsView === /* NoAccess */ 0 &&
    userPermissionJson.connectorsManage === /* NoAccess */ 0
      ? /* NoAccess */ 0
      : /* Access */ 1;
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-4",
    },
    React.createElement(
      "p",
      {
        className: HomeUtils.headingStyle,
      },
      "Recipes & Plugins",
    ),
    React.createElement(
      "div",
      {
        className: "grid grid-cols-1 md:grid-cols-2 w-full gap-4",
      },
      React.createElement(
        ACLDiv.make,
        {
          permission: blockConditionAccessVal,
          onClick: function (param) {
            Curry._4(
              mixpanelEvent,
              "stripe_plus_paypal",
              undefined,
              undefined,
              undefined,
            );
            RescriptReactRouter.push(
              HSwitchGlobalVars.appendDashboardPath("/stripe-plus-paypal"),
            );
          },
          children: null,
          className: HomeUtils.boxCssHover(
            !isStripePlusPayPalCompleted,
            undefined,
          ),
          noAccessDescription: HSwitchUtils.noAccessControlText,
        },
        React.createElement(
          "div",
          {
            className: "flex items-center gap-2",
          },
          React.createElement(
            "p",
            {
              className: HomeUtils.cardHeaderTextStyle,
            },
            "Use PayPal with Stripe",
          ),
          React.createElement(Icon.make, {
            name: "chevron-right",
            size: 12,
            className:
              "group-hover:scale-125 transition duration-200 ease-in-out",
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: isStripePlusPayPalCompleted,
            children: React.createElement(
              "div",
              {
                className: "flex ",
              },
              React.createElement(Icon.make, {
                name: "success-tag",
                size: 22,
                className: "!w-32",
              }),
            ),
          }),
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-2 h-full",
          },
          React.createElement(
            "p",
            {
              className: HomeUtils.paragraphTextVariant,
            },
            "Get the best of Stripe's developer experience and Paypal's user base",
          ),
          React.createElement("img", {
            className: HomeUtils.imageTransitionCss,
            src: "/assets/StripePlusPaypal.svg",
          }),
        ),
      ),
      React.createElement(
        ACLDiv.make,
        {
          permission: blockConditionAccessVal,
          onClick: function (param) {
            Curry._4(
              mixpanelEvent,
              "woocommerce",
              undefined,
              undefined,
              undefined,
            );
            RescriptReactRouter.push(
              HSwitchGlobalVars.appendDashboardPath("/woocommerce"),
            );
          },
          children: null,
          className: HomeUtils.boxCssHover(
            !isWooCommercePalCompleted,
            undefined,
          ),
          noAccessDescription: HSwitchUtils.noAccessControlText,
        },
        React.createElement(
          "div",
          {
            className: "flex items-center gap-2",
          },
          React.createElement(
            "p",
            {
              className: HomeUtils.cardHeaderTextStyle,
            },
            "WooCommerce plugin",
          ),
          React.createElement(Icon.make, {
            name: "chevron-right",
            size: 12,
            className:
              "group-hover:scale-125 transition duration-200 ease-in-out",
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: isWooCommercePalCompleted,
            children: React.createElement(
              "div",
              {
                className: "flex ",
              },
              React.createElement(Icon.make, {
                name: "success-tag",
                size: 22,
                className: "!w-32",
              }),
            ),
          }),
        ),
        React.createElement(
          "div",
          {
            className: "flex gap-2 h-full",
          },
          React.createElement(
            "p",
            {
              className: HomeUtils.paragraphTextVariant,
            },
            "Give your shoppers a lightweight and embedded payment experience with our plugin",
          ),
          React.createElement("img", {
            className: HomeUtils.imageTransitionCss,
            src: "/assets/Woocommerce.svg",
          }),
        ),
      ),
    ),
  );
}

var RecipesAndPlugins = {
  make: HomeV2$RecipesAndPlugins,
};

function HomeV2$Resources(props) {
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var elements = [
    {
      icon: "docs.svg",
      headerText: "Try a test payment",
      subText:
        "Experience the Hyperswitch Unified checkout using test credentials",
      redirectLink: "",
      id: "tryTheDemo",
      access: userPermissionJson.operationsManage,
    },
    {
      icon: "blogs.svg",
      headerText: "Contribute in open source",
      subText:
        "We welcome all your suggestions, feedbacks, and queries. Hop on to the Open source rail!",
      redirectLink: "",
      id: "openSource",
      access: /* Access */ 1,
    },
    {
      icon: "connector.svg",
      headerText: "Developer docs",
      subText:
        "Everything you need to know to get to get the SDK up and running resides in here.",
      redirectLink: "",
      id: "developerdocs",
      access: /* Access */ 1,
    },
  ];
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-4",
      },
      React.createElement(
        "p",
        {
          className: HomeUtils.headingStyle,
        },
        "Resources",
      ),
      React.createElement(
        "div",
        {
          className: "grid grid-cols-1 md:grid-cols-3 gap-4",
        },
        elements.map(function (item, index) {
          var cursorStyles = PermissionUtils.cursorStyles(item.access);
          return JsxPPXReactSupport.createElementVariadicWithKey(
            index.toString(),
            ACLDiv.make,
            {
              permission: item.access,
              onClick: function (param) {
                if (item.id === "openSource") {
                  Curry._4(
                    mixpanelEvent,
                    "contribute_in_open_source",
                    undefined,
                    undefined,
                    undefined,
                  );
                  window.open("https://github.com/juspay/hyperswitch");
                  return;
                } else if (item.id === "developerdocs") {
                  Curry._4(
                    mixpanelEvent,
                    "dev_docs",
                    undefined,
                    undefined,
                    undefined,
                  );
                  window.open("https://hyperswitch.io/docs");
                  return;
                } else if (item.id === "tryTheDemo") {
                  Curry._4(
                    mixpanelEvent,
                    "test_payment",
                    undefined,
                    undefined,
                    undefined,
                  );
                  return RescriptReactRouter.replace(
                    HSwitchGlobalVars.appendDashboardPath("/sdk"),
                  );
                } else {
                  return;
                }
              },
              children: null,
              className:
                "!h-full group bg-white border rounded-md p-10 flex flex-col gap-4 group-hover:shadow hover:shadow-homePageBoxShadow " +
                cursorStyles +
                "",
              isRelative: false,
              contentAlign: /* Default */ 3,
              justifyClass: "",
              tooltipForWidthClass: "!h-full",
            },
            [
              React.createElement("img", {
                className: "h-6 w-6",
                src: "/icons/" + item.icon + "",
              }),
              React.createElement(
                "div",
                {
                  className: "flex items-center gap-2",
                },
                React.createElement(
                  "p",
                  {
                    className: HomeUtils.cardHeaderText,
                  },
                  item.headerText,
                ),
                React.createElement(Icon.make, {
                  name: "chevron-right",
                  size: 12,
                  className:
                    "group-hover:scale-125 transition duration-200 ease-in-out",
                }),
              ),
              React.createElement(
                "p",
                {
                  className: HomeUtils.paragraphTextVariant,
                },
                item.subText,
              ),
            ],
          );
        }),
      ),
    ),
  );
}

var Resources = {
  make: HomeV2$Resources,
};

function HomeV2$QuickStartModule(props) {
  var match = React.useContext(GlobalProvider.defaultContext);
  var isProdIntentCompleted = match.isProdIntentCompleted;
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var typedEnumValue = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  return React.createElement(
    "div",
    undefined,
    isProdIntentCompleted !== undefined
      ? [
          LogicUtils.isNonEmptyString(typedEnumValue.testPayment.payment_id),
          typedEnumValue.integrationCompleted,
          isProdIntentCompleted,
        ].includes(false)
        ? React.createElement(HomeV2$QuickStart, {
            isMobileView: isMobileView,
          })
        : React.createElement(HomePageOverviewComponent.make, {})
      : React.createElement(Shimmer.make, {
          styleClass: "w-2/3 h-64 dark:bg-black bg-white",
          shimmerType: /* Small */ 0,
        }),
  );
}

var QuickStartModule = {
  make: HomeV2$QuickStartModule,
};

function HomeV2(props) {
  var match = React.useContext(GlobalProvider.defaultContext);
  var isProdIntentCompleted = match.isProdIntentCompleted;
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var typedEnumValue = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var tmp;
  if (isProdIntentCompleted !== undefined) {
    var showRecipesAndPlugins = [
      typedEnumValue.integrationCompleted,
      isProdIntentCompleted,
    ].includes(false);
    tmp = React.createElement(UIUtils.RenderIf.make, {
      condition: !showRecipesAndPlugins,
      children: React.createElement(HomeV2$RecipesAndPlugins, {}),
    });
  } else {
    tmp = null;
  }
  return React.createElement(
    "div",
    {
      className: "w-full flex flex-col gap-6",
    },
    React.createElement(
      "div",
      {
        className: "w-full flex flex-col gap-7",
      },
      React.createElement(HomeV2$QuickStartModule, {}),
      React.createElement("div", undefined, tmp),
      React.createElement(HomeV2$Resources, {}),
    ),
  );
}

var make = HomeV2;

export {
  HomePageHorizontalStepper,
  QuickStart,
  RecipesAndPlugins,
  Resources,
  QuickStartModule,
  make,
};
/* Icon Not a pure module */
