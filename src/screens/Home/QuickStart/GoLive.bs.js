// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as MixpanelHook from "../../MixpanelHook.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as HSLocalStorage from "../../HSLocalStorage.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as QuickStartUIUtils from "./QuickStartUIUtils.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ProdVerifyModalUtils from "../ProdIntent/ProdVerifyModalUtils.bs.js";

function GoLive$ProdIntentForm(props) {
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12 h-full w-full",
    },
    React.createElement(FormRenderer.DesktopRow.make, {
      children: React.createElement(
        "div",
        {
          className: "grid grid-cols-2 gap-5",
        },
        ProdVerifyModalUtils.formFieldsForQuickStart.map(
          function (column, index) {
            return JsxPPXReactSupport.createElementWithKey(
              index.toString(),
              FormRenderer.FieldRenderer.make,
              {
                field: ProdVerifyModalUtils.getFormField(column),
                fieldWrapperClass: "w-full",
                labelClass: "!text-black font-medium !-ml-[0.5px]",
                errorClass: ProdVerifyModalUtils.errorClass,
              },
            );
          },
        ),
      ),
    }),
  );
}

var ProdIntentForm = {
  make: GoLive$ProdIntentForm,
};

function GoLive(props) {
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var email = HSLocalStorage.getFromMerchantDetails("email");
  var match = React.useState(function () {
    return {};
  });
  var setInitialValues = match[1];
  var match$1 = React.useContext(GlobalProvider.defaultContext);
  var match$2 = React.useState(function () {
    return false;
  });
  var setIsSubmitBtnDisabled = match$2[1];
  var match$3 = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match$3.setQuickStartPageState;
  var setIsProdIntentCompleted = match$3.setIsProdIntentCompleted;
  var setDashboardPageState = match$3.setDashboardPageState;
  var getProdVerifyDetails = async function (param) {
    try {
      var url =
        "" +
        APIUtils.getURL(
          /* USERS */ 22,
          /* Get */ 0,
          undefined,
          undefined,
          "USER_DATA",
          undefined,
          undefined,
          undefined,
          undefined,
        ) +
        "?keys=ProdIntent";
      var res = await Curry._1(fetchDetails, url);
      var firstValueFromArray = LogicUtils.getValueFromArray(
        LogicUtils.getArrayFromJson(res, []),
        0,
        null,
      );
      var valueForProdIntent = LogicUtils.getDictfromDict(
        LogicUtils.getDictFromJsonObject(firstValueFromArray),
        "ProdIntent",
      );
      var hideHeader = LogicUtils.getOptionBool(
        valueForProdIntent,
        ProdVerifyModalUtils.getStringFromVariant(/* IsCompleted */ 1),
      );
      if (!Core__Option.getOr(hideHeader, false)) {
        valueForProdIntent[
          ProdVerifyModalUtils.getStringFromVariant(/* POCemail */ 0)
        ] = email;
      }
      Curry._1(setIsProdIntentCompleted, function (param) {
        return hideHeader;
      });
      Curry._1(setQuickStartPageState, function (param) {
        return /* FinalLandingPage */ 0;
      });
      return Curry._1(setInitialValues, function (param) {
        return valueForProdIntent;
      });
    } catch (exn) {
      return;
    }
  };
  var updateProdDetails = async function (values) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var bodyValues = ProdVerifyModalUtils.getBody(values);
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["ProdIntent", bodyValues],
      ]);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      getProdVerifyDetails(undefined);
    } catch (exn) {}
    return null;
  };
  var onSubmit = function (values, param) {
    Curry._4(
      mixpanelEvent,
      "quickstart_get_production_access_completed",
      undefined,
      undefined,
      undefined,
    );
    return updateProdDetails(values);
  };
  var landingButtonGroup = React.createElement(
    "div",
    {
      className: "flex flex-col gap-4 w-full",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: !Core__Option.getOr(match$1.isProdIntentCompleted, false),
      children: React.createElement(Button.make, {
        text: "Get Production Access",
        buttonType: /* Primary */ 0,
        onClick: function (param) {
          Curry._4(
            mixpanelEvent,
            "quickstart_get_production_access_landing",
            undefined,
            undefined,
            undefined,
          );
          Curry._1(setQuickStartPageState, function (param) {
            return {
              TAG: /* GoLive */ 2,
              _0: /* GO_LIVE */ 1,
            };
          });
        },
      }),
    }),
    React.createElement(Button.make, {
      text: "Go to Home",
      buttonType: /* Secondary */ 1,
      onClick: function (param) {
        Curry._1(setDashboardPageState, function (param) {
          return "HOME";
        });
        RescriptReactRouter.replace(
          HSwitchGlobalVars.appendDashboardPath("/home"),
        );
      },
    }),
  );
  return React.createElement(
    "div",
    {
      className: "w-full h-full flex ",
    },
    React.createElement(
      "div",
      {
        className: "w-full h-full flex items-center justify-center",
      },
      props.goLive
        ? JsxPPXReactSupport.createElementWithKey(
            "go-live-prod-intent-form",
            Form.make,
            {
              children: React.createElement(
                QuickStartUIUtils.BaseComponent.make,
                {
                  children: React.createElement(
                    "div",
                    {
                      className: "flex flex-col justify-center gap-8",
                    },
                    React.createElement(
                      "div",
                      {
                        className: "mx-4 text-grey-50 w-2/3 leading-6",
                      },
                      "We require some information to verify your business. Once verified, you'll be able to access production environment and go live!",
                    ),
                    React.createElement(GoLive$ProdIntentForm, {}),
                  ),
                  headerText: "Provide Business Details",
                  headerLeftIcon: "hyperswitch-logo-short",
                  nextButton: Caml_option.some(
                    React.createElement(FormRenderer.SubmitButton.make, {
                      text: "Submit",
                      disabledParamter: match$2[0],
                      buttonSize: /* Small */ 2,
                    }),
                  ),
                  backButton: Caml_option.some(
                    React.createElement(Button.make, {
                      text: "Exit to Homepage",
                      buttonType: /* PrimaryOutline */ 2,
                      buttonSize: /* Small */ 2,
                      onClick: function (param) {
                        Curry._1(setDashboardPageState, function (param) {
                          return "HOME";
                        });
                        RescriptReactRouter.replace(
                          HSwitchGlobalVars.appendDashboardPath("/home"),
                        );
                      },
                    }),
                  ),
                },
              ),
              onSubmit: onSubmit,
              initialValues: Caml_option.some(match[0]),
              validate: function (values) {
                return ProdVerifyModalUtils.validateForm(
                  values,
                  ProdVerifyModalUtils.formFields,
                  setIsSubmitBtnDisabled,
                );
              },
            },
          )
        : React.createElement(QuickStartUIUtils.StepCompletedPage.make, {
            buttonGroup: Caml_option.some(landingButtonGroup),
            headerText:
              "You have successfully completed Integration (Test Mode)",
          }),
    ),
  );
}

var make = GoLive;

export { ProdIntentForm, make };
/* Form Not a pure module */
