// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as HomeV2 from "../HomeV2.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as HomeUtils from "../HomeUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../../components/custom-icons/GatewayIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as ConfigContext from "../../../context/ConfigContext.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as AddDataAttributes from "../../../components/AddDataAttributes.bs.js";

function QuickStartUIUtils$BaseComponent(props) {
  var customCss = props.customCss;
  var customIcon = props.customIcon;
  var backButton = props.backButton;
  var nextButton = props.nextButton;
  var headerLeftIcon = props.headerLeftIcon;
  var showRightButtons = props.showRightButtons;
  var headerText = props.headerText;
  var headerText$1 = headerText !== undefined ? headerText : "";
  var showRightButtons$1 =
    showRightButtons !== undefined ? showRightButtons : true;
  var headerLeftIcon$1 = headerLeftIcon !== undefined ? headerLeftIcon : "";
  var nextButton$1 =
    nextButton !== undefined ? Caml_option.valFromOption(nextButton) : null;
  var backButton$1 =
    backButton !== undefined ? Caml_option.valFromOption(backButton) : null;
  var customCss$1 = customCss !== undefined ? customCss : "";
  var headerStyle = HSwitchUtils.getTextClass([/* H3 */ 2, /* Leading_1 */ 2]);
  return React.createElement(
    "div",
    {
      className:
        "w-standardPageWidth h-45-rem bg-white rounded-md flex flex-col gap-6 shadow-boxShadowMultiple overflow-scroll ",
    },
    React.createElement(
      "div",
      {
        className: "flex justify-between items-center px-10 pt-6",
      },
      React.createElement(
        "div",
        {
          className: "flex gap-2 items-center",
        },
        React.createElement(UIUtils.RenderIf.make, {
          condition:
            Core__Option.isNone(customIcon) &&
            LogicUtils.isNonEmptyString(headerLeftIcon$1),
          children: React.createElement(Icon.make, {
            name: headerLeftIcon$1,
            size: 25,
          }),
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition: Core__Option.isSome(customIcon),
          children: Core__Option.getOr(customIcon, null),
        }),
        React.createElement(
          "p",
          {
            className: headerStyle,
          },
          headerText$1,
        ),
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition: showRightButtons$1,
        children: React.createElement(
          "div",
          {
            className: "flex gap-4 items-center",
          },
          backButton$1,
          nextButton$1,
        ),
      }),
    ),
    React.createElement("div", {
      className: "h-px w-full border",
    }),
    React.createElement(
      "div",
      {
        className:
          "h-full px-10 pb-6 overflow-y-scroll " +
          customCss$1 +
          " overflow-x-hidden",
      },
      props.children,
    ),
  );
}

var BaseComponent = {
  make: QuickStartUIUtils$BaseComponent,
};

function QuickStartUIUtils$StepCompletedPage(props) {
  var headerText = props.headerText;
  var buttonGroup = props.buttonGroup;
  var buttonGroup$1 =
    buttonGroup !== undefined ? Caml_option.valFromOption(buttonGroup) : null;
  var headerText$1 = headerText !== undefined ? headerText : "";
  var textClass =
    "" +
    HSwitchUtils.getTextClass([/* H2 */ 1, /* Optional */ 4]) +
    " text-center";
  return React.createElement(
    "div",
    {
      className:
        "w-[40rem] p-16 flex flex-col gap-20 border rounded-md items-center bg-white shadow-boxShadowMultiple",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-10 items-center",
      },
      React.createElement(Icon.make, {
        name: "account-setup-completed",
        size: 120,
      }),
      React.createElement(
        "p",
        {
          className: textClass,
        },
        headerText$1,
      ),
    ),
    React.createElement(HomeV2.HomePageHorizontalStepper.make, {
      stepperItemsArray: HomeUtils.homepageStepperItems,
      className: "!w-full",
    }),
    buttonGroup$1,
  );
}

var StepCompletedPage = {
  make: QuickStartUIUtils$StepCompletedPage,
};

function QuickStartUIUtils$VerticalChoiceTile(props) {
  var setChoiceState = props.setChoiceState;
  var choiceState = props.choiceState;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var backgroundColor = match$1.backgroundColor;
  var textColor = match$1.font.textColor;
  var getBlockColor = function (value) {
    if (choiceState === value) {
      return (
        "" +
        borderColor.primaryNormal +
        " " +
        backgroundColor +
        " bg-opacity-10 "
      );
    } else {
      return "border";
    }
  };
  var headerTextStyle =
    "" +
    HSwitchUtils.getTextClass([/* P1 */ 3, /* Medium */ 1]) +
    " text-grey-700";
  var descriptionStyle =
    "" +
    HSwitchUtils.getTextClass([/* P2 */ 4, /* Medium */ 1]) +
    " text-grey-700 text-opacity-50";
  return React.createElement(
    "div",
    {
      className:
        "grid grid-cols-1 gap-4 md:grid-cols-3 md:gap-4 " +
        props.customLayoutCss +
        "",
    },
    props.listChoices.map(function (items, index) {
      return React.createElement(AddDataAttributes.make, {
        attributes: [["data-testid", items.variantType]],
        children: React.createElement(
          "div",
          {
            key: index.toString(),
            className:
              "p-6 flex flex-col gap-8 rounded-md cursor-pointer " +
              getBlockColor(items.variantType) +
              " rounded-md justify-between",
            onClick: function (param) {
              Curry._1(setChoiceState, function (param) {
                return items.variantType;
              });
            },
          },
          React.createElement(
            "div",
            {
              className: "flex justify-between items-center",
            },
            React.createElement(UIUtils.RenderIf.make, {
              condition: Core__Option.isSome(items.leftIcon),
              children: React.createElement(Icon.make, {
                name: Core__Option.getOr(items.leftIcon, "hyperswitch-short"),
                size: 40,
                className: "cursor-pointer",
              }),
            }),
            React.createElement(Icon.make, {
              name:
                choiceState === items.variantType ? "selected" : "nonselected",
              size: 20,
              className: "cursor-pointer !" + textColor.primaryNormal + "",
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-col gap-2",
            },
            React.createElement(
              "p",
              {
                className: headerTextStyle,
              },
              items.displayText,
            ),
            React.createElement(
              "p",
              {
                className: descriptionStyle,
              },
              items.description,
            ),
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: Core__Option.isSome(items.footerTags),
            children: React.createElement(
              "div",
              {
                className: "flex gap-2 mt-6",
              },
              Core__Option.getOr(items.footerTags, []).map(function (value) {
                return React.createElement(
                  "div",
                  {
                    className:
                      "p-2 text-xs border " +
                      borderColor.primaryNormal +
                      " border-opacity-30 " +
                      backgroundColor +
                      " bg-opacity-10 rounded-md",
                  },
                  value,
                );
              }),
            ),
          }),
        ),
      });
    }),
  );
}

var VerticalChoiceTile = {
  make: QuickStartUIUtils$VerticalChoiceTile,
};

function QuickStartUIUtils$HorizontalChoiceTile(props) {
  var setChoiceState = props.setChoiceState;
  var choiceState = props.choiceState;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var backgroundColor = match$1.backgroundColor;
  var textColor = match$1.font.textColor;
  var getBlockColor = function (value) {
    if (choiceState === value) {
      return (
        "" +
        borderColor.primaryNormal +
        " " +
        backgroundColor +
        " bg-opacity-10 "
      );
    } else {
      return "border";
    }
  };
  var headerTextStyle =
    "" +
    HSwitchUtils.getTextClass([/* P1 */ 3, /* Medium */ 1]) +
    " text-grey-700";
  var descriptionStyle =
    "" +
    HSwitchUtils.getTextClass([/* P2 */ 4, /* Medium */ 1]) +
    " text-grey-700 text-opacity-50";
  return React.createElement(
    "div",
    {
      className:
        "grid grid-cols-1 gap-4 md:grid-cols-2 md:gap-8 " +
        props.customLayoutCss +
        "",
    },
    props.listChoices.map(function (items, index) {
      return React.createElement(AddDataAttributes.make, {
        attributes: [["data-testid", items.variantType]],
        children: React.createElement(
          "div",
          {
            key: index.toString(),
            className:
              "p-6 flex flex-col gap-4 rounded-md cursor-pointer " +
              getBlockColor(items.variantType) +
              " rounded-md",
            onClick: function (param) {
              Curry._1(setChoiceState, function (param) {
                return items.variantType;
              });
            },
          },
          React.createElement(
            "div",
            {
              className: "flex justify-between items-center",
            },
            React.createElement(
              "div",
              {
                className: "flex gap-2 items-center ",
              },
              React.createElement(
                "p",
                {
                  className: headerTextStyle,
                },
                items.displayText,
              ),
            ),
            React.createElement(Icon.make, {
              name:
                choiceState === items.variantType ? "selected" : "nonselected",
              size: 20,
              className: "cursor-pointer !" + textColor.primaryNormal + "",
            }),
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              Core__Option.getOr(items.imageLink, ""),
            ),
            children: React.createElement("img", {
              alt: "",
              src: Core__Option.getOr(items.imageLink, ""),
            }),
          }),
          React.createElement(
            "div",
            {
              className: "flex gap-2 items-center ",
            },
            React.createElement(
              "p",
              {
                className: descriptionStyle,
              },
              items.description,
            ),
          ),
        ),
      });
    }),
  );
}

var HorizontalChoiceTile = {
  make: QuickStartUIUtils$HorizontalChoiceTile,
};

function QuickStartUIUtils$LandingPageChoice(props) {
  var customLayoutCss = props.customLayoutCss;
  var isVerticalTile = props.isVerticalTile;
  var customIcon = props.customIcon;
  var isHeaderLeftIcon = props.isHeaderLeftIcon;
  var backButton = props.backButton;
  var listChoices = props.listChoices;
  var setChoiceState = props.setChoiceState;
  var choiceState = props.choiceState;
  var backButton$1 =
    backButton !== undefined ? Caml_option.valFromOption(backButton) : null;
  var isHeaderLeftIcon$1 =
    isHeaderLeftIcon !== undefined ? isHeaderLeftIcon : true;
  var customIcon$1 =
    customIcon !== undefined ? Caml_option.valFromOption(customIcon) : null;
  var isVerticalTile$1 = isVerticalTile !== undefined ? isVerticalTile : false;
  var customLayoutCss$1 = customLayoutCss !== undefined ? customLayoutCss : "";
  React.useEffect(function () {
    Curry._1(setChoiceState, function (param) {
      return "NotSelected";
    });
  }, []);
  return React.createElement(QuickStartUIUtils$BaseComponent, {
    children: isVerticalTile$1
      ? React.createElement(QuickStartUIUtils$VerticalChoiceTile, {
          listChoices: listChoices,
          choiceState: choiceState,
          setChoiceState: setChoiceState,
          customLayoutCss: customLayoutCss$1,
        })
      : React.createElement(QuickStartUIUtils$HorizontalChoiceTile, {
          listChoices: listChoices,
          choiceState: choiceState,
          setChoiceState: setChoiceState,
          customLayoutCss: customLayoutCss$1,
        }),
    headerText: props.headerText,
    headerLeftIcon: isHeaderLeftIcon$1 ? "hyperswitch-logo-short" : "",
    nextButton: Caml_option.some(props.nextButton),
    backButton: Caml_option.some(backButton$1),
    customIcon: Caml_option.some(customIcon$1),
  });
}

var LandingPageChoice = {
  make: QuickStartUIUtils$LandingPageChoice,
};

function QuickStartUIUtils$SelectConnectorGrid(props) {
  var setSelectedConnector = props.setSelectedConnector;
  var selectedConnector = props.selectedConnector;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var backgroundColor = match$1.backgroundColor;
  var textColor = match$1.font.textColor;
  var typedConnectedConnectorList = ConnectorUtils.getProcessorsListFromJson(
    Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom),
    undefined,
    undefined,
  ).map(function (connectorDict) {
    return ConnectorUtils.getConnectorNameTypeFromString(
      connectorDict.connector_name,
      undefined,
      undefined,
    );
  });
  var popularConnectorList = [
    {
      TAG: /* Processors */ 0,
      _0: /* STRIPE */ 6,
    },
    {
      TAG: /* Processors */ 0,
      _0: /* PAYPAL */ 26,
    },
    {
      TAG: /* Processors */ 0,
      _0: /* ADYEN */ 0,
    },
    {
      TAG: /* Processors */ 0,
      _0: /* CHECKOUT */ 1,
    },
  ].filter(function (connector) {
    return !ConnectorUtils.existsInArray(
      connector,
      typedConnectedConnectorList,
    );
  });
  var remainingConnectorList = props.connectorList.filter(function (value) {
    var existInPopularConnectorList = ConnectorUtils.existsInArray(
      value,
      popularConnectorList,
    );
    var existInTypedConnectorList = ConnectorUtils.existsInArray(
      value,
      typedConnectedConnectorList,
    );
    return !(existInPopularConnectorList || existInTypedConnectorList);
  });
  var headerClass = HSwitchUtils.getTextClass([/* P1 */ 3, /* Medium */ 1]);
  var subheaderText = "text-base font-semibold text-grey-700";
  var getBlockColor = function (connector) {
    switch (selectedConnector.TAG | 0) {
      case /* Processors */ 0:
        switch (connector.TAG | 0) {
          case /* Processors */ 0:
            if (selectedConnector._0 === connector._0) {
              return (
                "" +
                borderColor.primaryNormal +
                " " +
                backgroundColor +
                " bg-opacity-10"
              );
            } else {
              return "border";
            }
          case /* ThreeDsAuthenticator */ 1:
          case /* UnknownConnector */ 2:
            return "border";
        }
      case /* ThreeDsAuthenticator */ 1:
      case /* UnknownConnector */ 2:
        return "border";
    }
  };
  var iconColor = function (connector) {
    switch (selectedConnector.TAG | 0) {
      case /* Processors */ 0:
        switch (connector.TAG | 0) {
          case /* Processors */ 0:
            if (selectedConnector._0 === connector._0) {
              return "selected";
            } else {
              return "nonselected";
            }
          case /* ThreeDsAuthenticator */ 1:
          case /* UnknownConnector */ 2:
            return "nonselected";
        }
      case /* ThreeDsAuthenticator */ 1:
      case /* UnknownConnector */ 2:
        return "nonselected";
    }
  };
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-12",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: popularConnectorList.length > 0,
      children: React.createElement(
        "div",
        {
          className: "flex flex-col gap-4",
        },
        React.createElement(
          "p",
          {
            className: headerClass,
          },
          "Popular Processors",
        ),
        React.createElement(
          "div",
          {
            className: "grid grid-cols-1 gap-6 md:grid-cols-5 ",
          },
          popularConnectorList.map(function (connector, index) {
            var connectorName =
              ConnectorUtils.getConnectorNameString(connector);
            return React.createElement(AddDataAttributes.make, {
              attributes: [["data-testid", connectorName]],
              children: React.createElement(
                "div",
                {
                  key: index.toString(),
                  className:
                    "py-4 px-6 flex gap-4 rounded-md cursor-pointer justify-between items-start " +
                    getBlockColor(connector) +
                    "",
                  onClick: function (param) {
                    Curry._1(setSelectedConnector, function (param) {
                      return connector;
                    });
                  },
                },
                React.createElement(
                  "div",
                  {
                    className: "flex flex-col gap-2 items-start ",
                  },
                  React.createElement(GatewayIcon.make, {
                    gateway: connectorName.toUpperCase(),
                    className: "w-12 h-12",
                  }),
                  React.createElement(
                    "p",
                    {
                      className: subheaderText,
                    },
                    ConnectorUtils.getDisplayNameForConnector(
                      undefined,
                      connectorName,
                    ),
                  ),
                ),
                React.createElement(Icon.make, {
                  name: iconColor(connector),
                  size: 20,
                  className: "cursor-pointer !" + textColor.primaryNormal + "",
                }),
              ),
            });
          }),
        ),
      ),
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-4",
      },
      React.createElement(
        "p",
        {
          className: headerClass,
        },
        "More Processors",
      ),
      React.createElement(
        "div",
        {
          className: "grid grid-cols-1 gap-4 md:grid-cols-3 md:gap-8",
        },
        remainingConnectorList.map(function (connector, index) {
          var connectorName = ConnectorUtils.getConnectorNameString(connector);
          return React.createElement(
            "div",
            {
              key: index.toString(),
              className:
                "py-4 px-6 flex flex-col gap-4 rounded-md cursor-pointer " +
                getBlockColor(connector) +
                "",
              onClick: function (param) {
                Curry._1(setSelectedConnector, function (param) {
                  return connector;
                });
              },
            },
            React.createElement(
              "div",
              {
                className: "flex justify-between items-center",
              },
              React.createElement(
                "div",
                {
                  className: "flex gap-2 items-center ",
                },
                React.createElement(GatewayIcon.make, {
                  gateway: connectorName.toUpperCase(),
                  className: "w-8 h-8",
                }),
                React.createElement(
                  "p",
                  {
                    className: subheaderText,
                  },
                  ConnectorUtils.getDisplayNameForConnector(
                    undefined,
                    connectorName,
                  ),
                ),
              ),
              React.createElement(Icon.make, {
                name:
                  connector === selectedConnector ? "selected" : "nonselected",
                size: 20,
                className: "cursor-pointer !" + textColor.primaryNormal + "",
              }),
            ),
          );
        }),
      ),
    ),
  );
}

var SelectConnectorGrid = {
  make: QuickStartUIUtils$SelectConnectorGrid,
};

export {
  BaseComponent,
  StepCompletedPage,
  VerticalChoiceTile,
  HorizontalChoiceTile,
  LandingPageChoice,
  SelectConnectorGrid,
};
/* Icon Not a pure module */
