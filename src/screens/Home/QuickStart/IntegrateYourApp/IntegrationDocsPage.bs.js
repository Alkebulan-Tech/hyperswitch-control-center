// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../../hooks/ToastState.bs.js";
import * as HSwitchUtils from "../../../Utils/HSwitchUtils.bs.js";
import * as ThemeProvider from "../../../../context/ThemeProvider.bs.js";
import * as HyperswitchAtom from "../../../../Recoils/HyperswitchAtom.bs.js";
import * as MigrateFromStripe from "./MigrateFromStripe.bs.js";
import * as UserOnboardingUtils from "../../../SelfServe/HSwitchSandboxOnboarding/UserOnboardingUtils.bs.js";
import * as IntegrateFromScratch from "./IntegrateFromScratch.bs.js";
import * as UserOnboardingUIUtils from "../../../SelfServe/HSwitchSandboxOnboarding/UserOnboardingUIUtils.bs.js";

function IntegrationDocsPage$RequestPage(props) {
  var currentRoute = props.currentRoute;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var requestedValue = LogicUtils.capitalizeString(props.requestedPlatform);
  var match = React.useState(function () {
    return true;
  });
  var setIsSubmitButtonEnabled = match[1];
  var handleSubmitRequest = async function (param) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var requestedBody = HSwitchUtils.getBodyForFeedBack(
        LogicUtils.getJsonFromArrayOfJson([
          ["rating", 5.0],
          ["category", "Platform Request"],
          ["feedbacks", "Request for " + requestedValue + ""],
        ]),
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        ["Feedback", requestedBody],
      ]);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Request submitted successfully!",
        /* ToastSuccess */ 3,
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setIsSubmitButtonEnabled, function (param) {
        return false;
      });
    } catch (exn) {
      return;
    }
  };
  React.useEffect(
    function () {
      Curry._1(setIsSubmitButtonEnabled, function (param) {
        return true;
      });
    },
    [requestedValue],
  );
  var buttonText = function (param) {
    if (currentRoute !== 0) {
      return "I'm Interested";
    }
    var match = UserOnboardingUtils.getPlatform(requestedValue);
    if (match === "IOS" || match === "Android" || match === "ReactNative") {
      return "Go to Developers Docs";
    } else {
      return "I'm Interested";
    }
  };
  var subText = function (param) {
    if (currentRoute !== 0) {
      return "Our team is currently working to make this available for you soon.Please reach out to us on our Slack for any queries.";
    }
    var match = UserOnboardingUtils.getPlatform(requestedValue);
    if (match === "IOS" || match === "Android" || match === "ReactNative") {
      return (
        "You can access the Integration docs for " +
        requestedValue +
        " plugin on our Developer docs, we will be updating it here shortly."
      );
    } else {
      return "Our team is currently working to make this available for you soon.Please reach out to us on our Slack for any queries.";
    }
  };
  return React.createElement(
    "div",
    {
      className:
        "border bg-jp-gray-light_gray_bg rounded-md p-6 overflow-scroll flex flex-col justify-center items-center gap-6",
    },
    React.createElement(Icon.make, {
      name: requestedValue.toLowerCase(),
      size: 180,
      className: "!scale-200",
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col gap-2 items-center justify-center",
      },
      React.createElement(
        "p",
        {
          className: "text-2xl font-semibold text-grey-700",
        },
        "" + requestedValue + " (Coming Soon)",
      ),
      React.createElement(
        "p",
        {
          className:
            "text-base font-semibold text-grey-700 opacity-50 w-1/2 text-center",
        },
        subText(undefined),
      ),
    ),
    React.createElement(Button.make, {
      buttonState: match[0] ? /* Normal */ 0 : /* Disabled */ 2,
      text: buttonText(undefined),
      buttonType: /* Primary */ 0,
      onClick: function (param) {
        if (currentRoute !== 0) {
          handleSubmitRequest(undefined);
          return;
        }
        var match = UserOnboardingUtils.getPlatform(requestedValue);
        if (match === "ReactNative") {
          window.open(
            "https://hyperswitch.io/docs/migrateFromStripe/migrateFromStripeRN",
          );
        } else if (match === "Android") {
          window.open(
            "https://hyperswitch.io/docs/migrateFromStripe/migrateFromStripeAndroid",
          );
        } else if (match === "IOS") {
          window.open(
            "https://hyperswitch.io/docs/migrateFromStripe/migrateFromStripeIos",
          );
        } else {
          handleSubmitRequest(undefined);
        }
      },
      customButtonStyle: "!rounded-md",
    }),
  );
}

var RequestPage = {
  make: IntegrationDocsPage$RequestPage,
};

function IntegrationDocsPage(props) {
  var markAsDone = props.markAsDone;
  var currentRoute = props.currentRoute;
  var match = React.useState(function () {
    if (currentRoute === /* SampleProjects */ 4) {
      return "ChooseLanguage";
    } else {
      return "ReactJs";
    }
  });
  var setFrontEndLang = match[1];
  var frontEndLang = match[0];
  var match$1 = React.useState(function () {
    if (currentRoute === /* SampleProjects */ 4) {
      return "ChooseLanguage";
    } else {
      return "Node";
    }
  });
  var setBackEndLang = match$1[1];
  var backEndLang = match$1[0];
  var match$2 = React.useState(function () {
    return "Web";
  });
  var setPlatform = match$2[1];
  var platform = match$2[0];
  var merchantDetails = Recoil.useRecoilValue(
    HyperswitchAtom.merchantDetailsValueAtom,
  );
  var publishablekeyMerchant = merchantDetails.publishable_key;
  var match$3 = ThemeProvider.useTheme(undefined);
  var theme = match$3 ? "vs-dark" : "light";
  UserOnboardingUIUtils.getTabsForIntegration(
    currentRoute,
    0,
    frontEndLang,
    theme,
    backEndLang,
    publishablekeyMerchant,
  );
  var getRequestedPlatforms = function (param) {
    if (UserOnboardingUtils.requestOnlyPlatforms.includes(platform)) {
      return platform;
    } else if (
      !["Node"].includes(backEndLang) &&
      currentRoute === /* MigrateFromStripe */ 0
    ) {
      return backEndLang;
    } else {
      return;
    }
  };
  var requestedPlatform = getRequestedPlatforms(undefined);
  if (requestedPlatform !== undefined) {
    return React.createElement(
      "div",
      {
        className: "flex flex-col gap-2",
      },
      React.createElement(
        UserOnboardingUIUtils.BackendFrontendPlatformLangDropDown.make,
        {
          frontEndLang: frontEndLang,
          setFrontEndLang: setFrontEndLang,
          backEndLang: backEndLang,
          setBackEndLang: setBackEndLang,
          currentRoute: currentRoute,
          platform: platform,
          setPlatform: setPlatform,
        },
      ),
      React.createElement(IntegrationDocsPage$RequestPage, {
        requestedPlatform: requestedPlatform,
        currentRoute: currentRoute,
      }),
    );
  } else if (currentRoute !== 1) {
    if (currentRoute !== 0) {
      return React.createElement(React.Fragment, undefined);
    } else {
      return React.createElement(MigrateFromStripe.make, {
        currentRoute: currentRoute,
        frontEndLang: frontEndLang,
        setFrontEndLang: setFrontEndLang,
        backEndLang: backEndLang,
        setBackEndLang: setBackEndLang,
        platform: platform,
        setPlatform: setPlatform,
        markAsDone: markAsDone,
      });
    }
  } else {
    return React.createElement(IntegrateFromScratch.make, {
      currentRoute: currentRoute,
      frontEndLang: frontEndLang,
      setFrontEndLang: setFrontEndLang,
      backEndLang: backEndLang,
      setBackEndLang: setBackEndLang,
      platform: platform,
      setPlatform: setPlatform,
      markAsDone: markAsDone,
    });
  }
}

var make = IntegrationDocsPage;

export { RequestPage, make };
/* Icon Not a pure module */
