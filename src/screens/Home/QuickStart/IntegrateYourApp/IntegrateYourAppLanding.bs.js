// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as MixpanelHook from "../../../MixpanelHook.bs.js";
import * as GlobalProvider from "../../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as EnumVariantHook from "../../../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../QuickStartUtils.bs.js";
import * as ConnectorListHook from "../../../Hooks/ConnectorListHook.bs.js";
import * as HSwitchGlobalVars from "../../../../utils/HSwitchGlobalVars.bs.js";
import * as QuickStartUIUtils from "../QuickStartUIUtils.bs.js";
import * as HSSelfServeSidebar from "../../../Utils/HSSelfServeSidebar.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as CustomIntegrationPage from "./CustomIntegrationPage.bs.js";

function IntegrateYourAppLanding(props) {
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var typedValueOfEnum = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var usePostEnumDetails = EnumVariantHook.usePostEnumDetails(undefined);
  var match = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match.setQuickStartPageState;
  var quickStartPageState = match.quickStartPageState;
  var setDashboardPageState = match.setDashboardPageState;
  var match$1 = React.useState(function () {
    return QuickStartUtils.textToVariantMapper(
      typedValueOfEnum.integrationMethod.integration_type,
    );
  });
  var choiceState = match$1[0];
  var match$2 = React.useState(function () {
    return /* Normal */ 0;
  });
  var setButtonState = match$2[1];
  var buttonState = match$2[0];
  var currentRoute = QuickStartUtils.textToVariantMapperForBuildHS(
    typedValueOfEnum.integrationMethod.integration_type,
  );
  var fetchConnectorListResponse =
    ConnectorListHook.useFetchConnectorList(undefined);
  var landingButtonGroup = React.createElement(
    "div",
    {
      className: "flex flex-col gap-4 w-full",
    },
    React.createElement(Button.make, {
      text: "I want to integrate Hyperswitch into my app",
      buttonType: /* Primary */ 0,
      onClick: function (param) {
        Curry._4(
          mixpanelEvent,
          "quickstart_integration_landing",
          undefined,
          undefined,
          undefined,
        );
        Curry._1(setQuickStartPageState, function (param) {
          return {
            TAG: /* IntegrateApp */ 1,
            _0: /* CHOOSE_INTEGRATION */ 1,
          };
        });
      },
    }),
    React.createElement(Button.make, {
      text: "Go to Home",
      buttonType: /* Secondary */ 1,
      onClick: function (param) {
        Curry._1(setDashboardPageState, function (param) {
          return "HOME";
        });
        RescriptReactRouter.replace(
          HSwitchGlobalVars.appendDashboardPath("/home"),
        );
      },
    }),
  );
  var handleIntegration = async function (param) {
    try {
      Curry._1(setButtonState, function (param) {
        return /* Loading */ 1;
      });
      var integartionValue = {
        integration_type: choiceState,
      };
      var enumVariant =
        QuickStartUtils.variantToEnumMapper(quickStartPageState);
      await Curry._2(
        usePostEnumDetails,
        {
          TAG: /* IntegrationMethod */ 3,
          _0: integartionValue,
        },
        enumVariant,
      );
      Curry._1(fetchConnectorListResponse, undefined);
      Curry._1(setQuickStartPageState, function (param) {
        return {
          TAG: /* IntegrateApp */ 1,
          _0: /* CUSTOM_INTEGRATION */ 2,
        };
      });
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    } catch (exn) {
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  var handleMarkAsDone = async function (param) {
    try {
      var enumVariant =
        QuickStartUtils.variantToEnumMapper(quickStartPageState);
      await Curry._2(
        usePostEnumDetails,
        {
          TAG: /* Boolean */ 4,
          _0: true,
        },
        enumVariant,
      );
    } catch (exn) {}
    return Curry._1(setQuickStartPageState, function (param) {
      return {
        TAG: /* GoLive */ 2,
        _0: /* LANDING */ 0,
      };
    });
  };
  React.useEffect(
    function () {
      if (choiceState === "NotSelected") {
        Curry._1(setButtonState, function (param) {
          return /* Disabled */ 2;
        });
      } else {
        Curry._1(setButtonState, function (param) {
          return /* Normal */ 0;
        });
      }
    },
    [choiceState],
  );
  var tmp;
  switch (props.integrateAppValue) {
    case /* LANDING */ 0:
      tmp = React.createElement(
        "div",
        {
          className: "h-full flex-1 flex flex-col items-center justify-center",
        },
        React.createElement(QuickStartUIUtils.StepCompletedPage.make, {
          buttonGroup: Caml_option.some(landingButtonGroup),
          headerText:
            "Configuration is complete. You can now start integrating with us!",
        }),
      );
      break;
    case /* CHOOSE_INTEGRATION */ 1:
      tmp = React.createElement(
        "div",
        {
          className: "flex h-full",
        },
        React.createElement(HSSelfServeSidebar.make, {
          heading: "Integrate your app",
          sidebarOptions: QuickStartUtils.getSidebarOptionsForIntegrateYourApp(
            enumDetails,
            quickStartPageState,
            currentRoute,
            choiceState,
          ),
        }),
        React.createElement(
          "div",
          {
            className: "flex-1 flex flex-col items-center justify-center",
          },
          React.createElement(QuickStartUIUtils.LandingPageChoice.make, {
            choiceState: choiceState,
            setChoiceState: match$1[1],
            listChoices: QuickStartUtils.integrateYourAppArray,
            nextButton: React.createElement(Button.make, {
              buttonState: buttonState,
              text: "Proceed",
              buttonType: /* Primary */ 0,
              buttonSize: /* Small */ 2,
              onClick: function (param) {
                Curry._4(
                  mixpanelEvent,
                  "quickstart_integration_landing_option",
                  undefined,
                  undefined,
                  undefined,
                );
                handleIntegration(undefined);
              },
              showBtnTextToolTip: buttonState === /* Disabled */ 2,
              tooltipText: "Please select one of the choices",
            }),
            headerText: "How would you like to integrate?",
            isVerticalTile: true,
          }),
        ),
      );
      break;
    case /* CUSTOM_INTEGRATION */ 2:
      tmp = React.createElement(
        "div",
        {
          className: "flex h-full",
        },
        React.createElement(HSSelfServeSidebar.make, {
          heading: "Integrate your app",
          sidebarOptions: QuickStartUtils.getSidebarOptionsForIntegrateYourApp(
            enumDetails,
            quickStartPageState,
            currentRoute,
            choiceState,
          ),
        }),
        React.createElement(
          "div",
          {
            className: "flex-1 flex flex-col items-center justify-center ml-12",
          },
          React.createElement(CustomIntegrationPage.make, {
            currentRoute: currentRoute,
            markAsDone: handleMarkAsDone,
          }),
        ),
      );
      break;
  }
  return React.createElement(React.Fragment, undefined, tmp);
}

var make = IntegrateYourAppLanding;

export { make };
/* react Not a pure module */
