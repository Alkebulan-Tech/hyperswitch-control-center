// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as AuthHooks from "../../hooks/AuthHooks.bs.js";
import * as CardUtils from "../Utils/CardUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../Utils/HSwitchUtils.bs.js";
import * as MixpanelHook from "../MixpanelHook.bs.js";
import * as CopyFieldValue from "../../components/CopyFieldValue.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "./QuickStart/QuickStartUtils.bs.js";
import * as SidebarProvider from "../Sidebar/SidebarProvider.bs.js";
import * as AuthInfoProvider from "../../context/AuthInfoProvider.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as ProdOnboardingUtils from "../SelfServe/HSwitchProdOnboarding/ProdOnboardingUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ClearRecoilValueHook from "../Hooks/ClearRecoilValueHook.bs.js";

var headingStyle =
  "" +
  HSwitchUtils.getTextClass([/* P2 */ 4, /* Medium */ 1]) +
  " text-grey-700 uppercase opacity-50 px-2";

var paragraphTextVariant =
  "" +
  HSwitchUtils.getTextClass([/* P2 */ 4, /* Medium */ 1]) +
  " text-grey-700 opacity-50";

var subtextStyle =
  "" +
  HSwitchUtils.getTextClass([/* P1 */ 3, /* Regular */ 0]) +
  " text-grey-700 opacity-50";

var cardHeaderText = HSwitchUtils.getTextClass([/* H3 */ 2, /* Leading_2 */ 3]);

var hoverStyle =
  "cursor-pointer group-hover:shadow hover:shadow-homePageBoxShadow group";

function boxCssHover(ishoverStyleRequired, param) {
  return (
    "flex flex-col  bg-white border rounded-md pt-10 pl-10 gap-2 h-12.5-rem " +
    (ishoverStyleRequired ? hoverStyle : "") +
    ""
  );
}

var cardHeaderTextStyle = "" + cardHeaderText + " text-grey-700";

var countries = [
  {
    isoAlpha3: "USA",
    currency: "USD",
    countryName: "United States",
    isoAlpha2: "US",
  },
  {
    isoAlpha3: "CHE",
    currency: "CHF",
    countryName: "Switzerland",
    isoAlpha2: "CH",
  },
  {
    isoAlpha3: "DEU",
    currency: "EUR",
    countryName: "Germany",
    isoAlpha2: "DE",
  },
  {
    isoAlpha3: "NLD",
    currency: "EUR",
    countryName: "Netherlands",
    isoAlpha2: "NL",
  },
  {
    isoAlpha3: "AUS",
    currency: "AUD",
    countryName: "Australia",
    isoAlpha2: "AU",
  },
  {
    isoAlpha3: "AUT",
    currency: "EUR",
    countryName: "Austria",
    isoAlpha2: "AT",
  },
  {
    isoAlpha3: "GBR",
    currency: "GBP",
    countryName: "United Kingdom",
    isoAlpha2: "GB",
  },
  {
    isoAlpha3: "CAN",
    currency: "CAD",
    countryName: "Canada",
    isoAlpha2: "CA",
  },
  {
    isoAlpha3: "PLN",
    currency: "PLN",
    countryName: "Poland",
    isoAlpha2: "PL",
  },
  {
    isoAlpha3: "CHN",
    currency: "CNY",
    countryName: "China",
    isoAlpha2: "CN",
  },
  {
    isoAlpha3: "SWE",
    currency: "SEK",
    countryName: "Sweden",
    isoAlpha2: "SE",
  },
  {
    isoAlpha3: "HKG",
    currency: "HKD",
    countryName: "Hongkong",
    isoAlpha2: "HK",
  },
];

function isDefaultBusinessProfile(details) {
  return details.length === 1;
}

function HomeUtils$MerchantAuthInfo(props) {
  var merchantDetailsValue = props.merchantDetailsValue;
  var dataDict = Object.fromEntries([
    ["merchant_id", merchantDetailsValue.merchant_id],
    ["publishable_key", merchantDetailsValue.publishable_key],
  ]);
  return React.createElement(Form.make, {
    children: React.createElement(
      "div",
      {
        className: "flex flex-col md:flex-row gap-3",
      },
      React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className: "font-semibold text-dark_black",
          },
          "Merchant ID",
        ),
        React.createElement(
          "div",
          {
            className: "flex items-center",
          },
          React.createElement(
            "div",
            {
              className: "font-medium text-dark_black opacity-40",
            },
            merchantDetailsValue.merchant_id,
          ),
          React.createElement(CopyFieldValue.make, {
            fieldkey: "merchant_id",
          }),
        ),
      ),
      React.createElement(
        "div",
        undefined,
        React.createElement(
          "div",
          {
            className: "font-semibold text-dark_black",
          },
          "Publishable Key",
        ),
        React.createElement(
          "div",
          {
            className: "flex items-center",
          },
          React.createElement(
            "div",
            {
              className: "font-medium text-dark_black opacity-40",
              style: {
                overflowWrap: "anywhere",
              },
            },
            merchantDetailsValue.publishable_key,
          ),
          React.createElement(CopyFieldValue.make, {
            fieldkey: "publishable_key",
          }),
        ),
      ),
    ),
    initialValues: Caml_option.some(dataDict),
    formClass: "md:ml-9 my-4",
  });
}

var MerchantAuthInfo = {
  make: HomeUtils$MerchantAuthInfo,
};

function HomeUtils$CheckoutCard(props) {
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var match = React.useContext(AuthInfoProvider.authStatusContext);
  var setAuthStatus = match[1];
  var match$1 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarExpanded = match$1.setIsSidebarExpanded;
  var isPlayground = HSLocalStorage.getIsPlaygroundFromLocalStorage(undefined);
  var clearRecoilValue = ClearRecoilValueHook.useClearRecoilValue(undefined);
  var connectorList = Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom);
  var isConfigureConnector = connectorList.length > 0;
  var handleOnClick = function (param) {
    if (isPlayground) {
      return Curry._1(showPopUp, {
        heading: "Sign Up to Access All Features!",
        description:
          "To unlock the potential and experience the full range of capabilities, simply sign up today. Join our community of explorers and gain access to an enhanced world of possibilities",
        popUpType: [/* Warning */ 4, /* WithIcon */ 0],
        handleConfirm: {
          text: "Sign up Now",
          onClick: function (param) {
            APIUtils.handleLogout(
              fetchApi,
              setAuthStatus,
              setIsSidebarExpanded,
              clearRecoilValue,
            );
          },
        },
      });
    } else {
      Curry._4(
        mixpanelEvent,
        "try_test_payment",
        undefined,
        undefined,
        undefined,
      );
      return RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/sdk"),
      );
    }
  };
  var match$2 = isConfigureConnector
    ? [
        "Make a test payment - Try our unified checkout",
        "Test your connector be making a payment and visualise the user checkout experience",
      ]
    : [
        "Demo our checkout experience",
        "Visualise the checkout experience by putting yourself in your user's shoes.",
      ];
  return React.createElement(
    CardUtils.CardLayout.make,
    {
      width: "w-full md:w-1/2",
      children: null,
    },
    React.createElement(CardUtils.CardHeader.make, {
      heading: match$2[0],
      subHeading: match$2[1],
      leftIcon: "checkout",
    }),
    React.createElement("img", {
      className: "w-10/12 -mt-7 hidden md:block",
      src: "/assets/sdk.svg",
    }),
    React.createElement(CardUtils.CardFooter.make, {
      customFooterStyle: "!m-1 !mt-2",
      children: React.createElement(Button.make, {
        text: "Try it out",
        buttonType: /* Secondary */ 1,
        buttonSize: /* Small */ 2,
        onClick: handleOnClick,
      }),
    }),
  );
}

var CheckoutCard = {
  make: HomeUtils$CheckoutCard,
};

function HomeUtils$ControlCenter(props) {
  var merchantDetailsValue = HSwitchUtils.useMerchantDetailsValue(undefined);
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var isLiveMode = match.isLiveMode;
  var isLiveModeEnabledStyles = isLiveMode
    ? "flex flex-col md:flex-row gap-5 w-full"
    : "flex flex-col gap-5 md:w-1/2 w-full";
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-5 md:flex-row",
    },
    React.createElement(
      "div",
      {
        className: isLiveModeEnabledStyles,
      },
      React.createElement(
        CardUtils.CardLayout.make,
        {
          width: "w-full",
          children: null,
          customStyle: isLiveMode ? "" : "h-3/6",
        },
        React.createElement(CardUtils.CardHeader.make, {
          heading: "Integrate a connector",
          subHeading:
            "Give a headstart to the control centre by connecting with more than 20+ gateways, payment methods, and networks.",
          leftIcon: "connector",
        }),
        React.createElement("img", {
          className: "inline-block absolute right-5 bottom-5  lg:block",
          src: "/assets/connectorsList.svg",
        }),
        React.createElement(CardUtils.CardFooter.make, {
          children: React.createElement(Button.make, {
            text: "+  Connect",
            buttonType: /* Secondary */ 1,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              RescriptReactRouter.push(
                HSwitchGlobalVars.appendDashboardPath("/connectors"),
              );
            },
          }),
        }),
      ),
      React.createElement(
        CardUtils.CardLayout.make,
        {
          width: "w-full",
          children: null,
          customStyle: isLiveMode ? "" : "h-4/6",
        },
        React.createElement(CardUtils.CardHeader.make, {
          heading: "Credentials and Keys",
          subHeading: "Your secret credentials to start integrating",
          leftIcon: "merchantInfo",
          customSubHeadingStyle: "w-full max-w-none",
        }),
        React.createElement(HomeUtils$MerchantAuthInfo, {
          merchantDetailsValue: merchantDetailsValue,
        }),
        React.createElement(CardUtils.CardFooter.make, {
          children: React.createElement(Button.make, {
            text: "Go to API keys",
            buttonType: /* Secondary */ 1,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              RescriptReactRouter.push(
                HSwitchGlobalVars.appendDashboardPath("/developer-api-keys"),
              );
            },
          }),
        }),
      ),
    ),
    React.createElement(UIUtils.RenderIf.make, {
      condition: !isLiveMode,
      children: React.createElement(HomeUtils$CheckoutCard, {}),
    }),
  );
}

var ControlCenter = {
  make: HomeUtils$ControlCenter,
};

function HomeUtils$DevResources(props) {
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  return React.createElement(
    "div",
    {
      className: "mb-5",
    },
    React.createElement(PageUtils.PageHeading.make, {
      title: "Developer resources",
      subTitle:
        "Couple of things developers need in handy can be found right here.",
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col md:flex-row gap-5",
      },
      React.createElement(
        CardUtils.CardLayout.make,
        {
          width: "w-full",
          children: null,
        },
        React.createElement(CardUtils.CardHeader.make, {
          heading: "Developer docs",
          subHeading:
            "Everything you need to know to get the SDK up and running resides in here.",
          leftIcon: "docs",
        }),
        React.createElement(CardUtils.CardFooter.make, {
          customFooterStyle: "mt-5",
          children: React.createElement(Button.make, {
            text: "Visit",
            buttonType: /* Secondary */ 1,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              Curry._4(
                mixpanelEvent,
                "dev_docs",
                undefined,
                undefined,
                undefined,
              );
              window.open("https://hyperswitch.io/docs");
            },
          }),
        }),
      ),
      React.createElement(
        CardUtils.CardLayout.make,
        {
          width: "w-full",
          children: null,
        },
        React.createElement(CardUtils.CardHeader.make, {
          heading: "Contribute in open source",
          subHeading:
            "We welcome all your suggestions, feedbacks, and queries. Hop on to the Open source rail!.",
          leftIcon: "contribution",
        }),
        React.createElement(CardUtils.CardFooter.make, {
          customFooterStyle: "mt-5",
          children: React.createElement(Button.make, {
            text: "Contribute",
            buttonType: /* Secondary */ 1,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              Curry._4(
                mixpanelEvent,
                "contribute_in_open_source",
                undefined,
                undefined,
                undefined,
              );
              window.open("https://github.com/juspay/hyperswitch");
            },
          }),
        }),
      ),
      React.createElement(
        CardUtils.CardLayout.make,
        {
          width: "w-full",
          children: null,
        },
        React.createElement(CardUtils.CardHeader.make, {
          heading: "Product and tech blog",
          subHeading:
            "Learn about payments, payment orchestration and all the tech behind it.",
          leftIcon: "blogs",
        }),
        React.createElement(CardUtils.CardFooter.make, {
          children: React.createElement(Button.make, {
            text: "Explore",
            buttonType: /* Secondary */ 1,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              window.open("https://hyperswitch.io/blog");
            },
          }),
        }),
      ),
    ),
  );
}

var DevResources = {
  make: HomeUtils$DevResources,
};

function getGreeting(param) {
  var dateTime = Date.now();
  var hours = new Date(dateTime).getHours() | 0;
  if (hours < 12) {
    return "Good morning";
  } else if (hours < 18) {
    return "Good afternoon";
  } else {
    return "Good evening";
  }
}

var homepageStepperItems = [
  "Configure control center",
  "Integrate into your app",
  "Go Live",
];

function responseDataMapper(res, mapper) {
  var arrayFromJson = LogicUtils.getArrayFromJson(res, []);
  var resDict = {};
  arrayFromJson.forEach(function (value) {
    var value1 = LogicUtils.getDictFromJsonObject(value);
    var key = Core__Option.getOr(Object.keys(value1)[0], "");
    resDict[key] = Curry._2(mapper, value1, key);
  });
  return resDict;
}

function getValueMapped(value, key) {
  var keyVariant = QuickStartUtils.stringToVariantMapperForUserData(key);
  if (
    keyVariant === "SPTestPayment" ||
    keyVariant === "ProductionAgreement" ||
    keyVariant === "IntegrationCompleted" ||
    keyVariant === "SetupWoocomWebhook" ||
    keyVariant === "ConfigureWoocom" ||
    keyVariant === "DownloadWoocom"
  ) {
    return LogicUtils.getBool(value, key, false);
  } else if (
    keyVariant === "TestPayment" ||
    keyVariant !== "ConfigurationType"
  ) {
    return LogicUtils.getJsonObjectFromDict(value, key);
  } else {
    return LogicUtils.getString(value, key, "");
  }
}

function getValueMappedForProd(value, key) {
  var keyVariant = ProdOnboardingUtils.stringToVariantMapperForUserData(key);
  if (
    keyVariant === "ProductionAgreement" ||
    keyVariant === "ConfigureEndpoint" ||
    keyVariant === "SetupComplete"
  ) {
    return LogicUtils.getBool(value, key, false);
  } else {
    return LogicUtils.getJsonObjectFromDict(value, key);
  }
}

var boxCss = "flex flex-col bg-white border rounded-md gap-4 p-10";

var imageTransitionCss =
  "opacity-50 group-hover:opacity-100 transition ease-in-out duration-300";

export {
  headingStyle,
  paragraphTextVariant,
  subtextStyle,
  cardHeaderText,
  hoverStyle,
  boxCssHover,
  boxCss,
  imageTransitionCss,
  cardHeaderTextStyle,
  countries,
  isDefaultBusinessProfile,
  MerchantAuthInfo,
  CheckoutCard,
  ControlCenter,
  DevResources,
  getGreeting,
  homepageStepperItems,
  responseDataMapper,
  getValueMapped,
  getValueMappedForProd,
};
/* headingStyle Not a pure module */
