// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as TestPayment from "../../SDKPayment/TestPayment.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as MixpanelHook from "../../MixpanelHook.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as GlobalProvider from "../../../entryPoints/Provider/GlobalProvider.bs.js";
import * as EnumVariantHook from "../../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../QuickStart/QuickStartUtils.bs.js";
import * as SDKPaymentUtils from "../../SDKPayment/SDKPaymentUtils.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as QuickStartUIUtils from "../QuickStart/QuickStartUIUtils.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as HSSelfServeSidebar from "../../Utils/HSSelfServeSidebar.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../../Settings/MerchantAccountUtils.bs.js";
import * as QuickStartConnectorFlow from "./QuickStartConnectorFlow.bs.js";
import * as HSwitchSetupAccountUtils from "../../SetupAccount/HSwitchSetupAccountUtils.bs.js";

function ConfigureConnector(props) {
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var usePostEnumDetails = EnumVariantHook.usePostEnumDetails(undefined);
  var mixpanelEvent = MixpanelHook.useSendEvent(undefined);
  var match = React.useContext(GlobalProvider.defaultContext);
  var setQuickStartPageState = match.setQuickStartPageState;
  var quickStartPageState = match.quickStartPageState;
  var setDashboardPageState = match.setDashboardPageState;
  var match$1 = React.useState(function () {
    return "";
  });
  var setKey = match$1[1];
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var typedEnumValue = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  var match$2 = React.useState(function () {
    return {
      TAG: /* UnknownConnector */ 2,
      _0: "",
    };
  });
  var selectedConnector = match$2[0];
  var match$3 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$3[1];
  var match$4 = React.useState(function () {
    return /* Select_processor */ 0;
  });
  var connectorConfigureState = match$4[0];
  var match$5 = React.useState(function () {
    return "NotSelected";
  });
  var choiceState = match$5[0];
  var match$6 = React.useState(function () {
    return "DefaultFallback";
  });
  var smartRoutingChoiceState = match$6[0];
  var match$7 = React.useState(function () {
    return "TestApiKeys";
  });
  var choiceStateForTestConnector = match$7[0];
  var match$8 = React.useState(function () {
    return QuickStartUtils.getInitialValueForConnector(typedEnumValue);
  });
  var match$9 = React.useState(function () {
    return /* Normal */ 0;
  });
  var setButtonState = match$9[1];
  var buttonState = match$9[0];
  var updateEnumForRouting = async function (routingId) {
    try {
      var routingVal = {
        routing_id: routingId,
      };
      var enumVariant =
        QuickStartUtils.variantToEnumMapper(quickStartPageState);
      await Curry._2(
        usePostEnumDetails,
        {
          TAG: /* RoutingType */ 1,
          _0: routingVal,
        },
        enumVariant,
      );
      return Curry._1(setQuickStartPageState, function (param) {
        return {
          TAG: /* ConnectProcessor */ 0,
          _0: /* CHECKOUT */ 3,
        };
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
  React.useEffect(
    function () {
      if (choiceState === "NotSelected") {
        Curry._1(setButtonState, function (param) {
          return /* Disabled */ 2;
        });
      } else {
        Curry._1(setButtonState, function (param) {
          return /* Normal */ 0;
        });
      }
    },
    [choiceState],
  );
  React.useEffect(
    function () {
      if (smartRoutingChoiceState === "NotSelected") {
        Curry._1(setButtonState, function (param) {
          return /* Disabled */ 2;
        });
      } else {
        Curry._1(setButtonState, function (param) {
          return /* Normal */ 0;
        });
      }
    },
    [smartRoutingChoiceState],
  );
  React.useEffect(
    function () {
      Curry._1(setInitialValues, function (prevJson) {
        var prevJsonDict = LogicUtils.getDictFromJsonObject(prevJson);
        prevJsonDict["connector_label"] =
          "" +
          ConnectorUtils.getConnectorNameString(selectedConnector) +
          "_" +
          activeBusinessProfile.profile_name +
          "";
        return prevJsonDict;
      });
    },
    [selectedConnector, activeBusinessProfile.profile_name],
  );
  var volumeBasedRoutingAPICall = async function (param) {
    try {
      Curry._1(setButtonState, function (param) {
        return /* Loading */ 1;
      });
      var firstProcessorRoutingPayload_connector_name =
        typedEnumValue.firstProcessorConnected.processorName;
      var firstProcessorRoutingPayload_merchant_connector_id =
        typedEnumValue.firstProcessorConnected.processorID;
      var firstProcessorRoutingPayload = {
        connector_name: firstProcessorRoutingPayload_connector_name,
        merchant_connector_id:
          firstProcessorRoutingPayload_merchant_connector_id,
      };
      var secondProcessorRoutingPayload_connector_name =
        typedEnumValue.secondProcessorConnected.processorName;
      var secondProcessorRoutingPayload_merchant_connector_id =
        typedEnumValue.secondProcessorConnected.processorID;
      var secondProcessorRoutingPayload = {
        connector_name: secondProcessorRoutingPayload_connector_name,
        merchant_connector_id:
          secondProcessorRoutingPayload_merchant_connector_id,
      };
      var routingUrl = APIUtils.getURL(
        /* ROUTING */ 1,
        /* Post */ 2,
        Caml_option.some(undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = HSwitchSetupAccountUtils.routingPayload(
        activeBusinessProfile.profile_id,
        firstProcessorRoutingPayload,
        secondProcessorRoutingPayload,
      );
      var routingResponse = await Curry._7(
        updateDetails,
        routingUrl,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var activatingId = LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(routingResponse),
        "id",
        "",
      );
      var activateRuleURL = APIUtils.getURL(
        /* ROUTING */ 1,
        /* Post */ 2,
        Caml_option.some(activatingId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        activateRuleURL,
        {},
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await updateEnumForRouting(activatingId);
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
  var handleRouting = async function (param) {
    try {
      Curry._1(setButtonState, function (param) {
        return /* Loading */ 1;
      });
      if (smartRoutingChoiceState === "DefaultFallback") {
        await updateEnumForRouting("fallback");
      } else {
        await volumeBasedRoutingAPICall(undefined);
      }
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    } catch (exn) {
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  var updateEnumForMultipleConfigurationType = async function (
    connectorChoiceValue,
  ) {
    try {
      await Curry._2(
        usePostEnumDetails,
        {
          TAG: /* StringEnumType */ 6,
          _0: connectorChoiceValue,
        },
        "ConfigurationType",
      );
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
  var handleConnectorChoiceClick = async function (param) {
    try {
      Curry._1(setButtonState, function (param) {
        return /* Loading */ 1;
      });
      if (choiceState === "MultipleProcessorWithSmartRouting") {
        await updateEnumForMultipleConfigurationType(
          QuickStartUtils.connectorChoiceVariantToString(
            "MultipleProcessorWithSmartRouting",
          ),
        );
        Curry._1(setQuickStartPageState, function (param) {
          if (
            LogicUtils.isNonEmptyString(
              typedEnumValue.firstProcessorConnected.processorID,
            )
          ) {
            return {
              TAG: /* ConnectProcessor */ 0,
              _0: /* CONFIGURE_SECONDARY */ 1,
            };
          } else {
            return {
              TAG: /* ConnectProcessor */ 0,
              _0: /* CONFIGURE_PRIMARY */ 0,
            };
          }
        });
      } else {
        await updateEnumForMultipleConfigurationType(
          QuickStartUtils.connectorChoiceVariantToString(
            "SinglePaymentProcessor",
          ),
        );
        Curry._1(setQuickStartPageState, function (param) {
          if (
            LogicUtils.isNonEmptyString(
              typedEnumValue.firstProcessorConnected.processorID,
            )
          ) {
            return {
              TAG: /* ConnectProcessor */ 0,
              _0: /* CHECKOUT */ 3,
            };
          } else {
            return {
              TAG: /* ConnectProcessor */ 0,
              _0: /* CONFIGURE_PRIMARY */ 0,
            };
          }
        });
      }
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    } catch (exn) {
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  var updateTestPaymentEnum = async function (paymentId) {
    try {
      var paymentBody = {
        payment_id: Core__Option.getOr(paymentId, "pay_default"),
      };
      await Curry._2(
        usePostEnumDetails,
        {
          TAG: /* PaymentType */ 2,
          _0: paymentBody,
        },
        "TestPayment",
      );
      Curry._1(setQuickStartPageState, function (param) {
        return {
          TAG: /* IntegrateApp */ 1,
          _0: /* LANDING */ 0,
        };
      });
      RescriptReactRouter.replace(
        HSwitchGlobalVars.appendDashboardPath("/quick-start"),
      );
      if (Core__Option.isSome(paymentId)) {
        return Curry._4(
          mixpanelEvent,
          "quickstart_checkout_pay",
          undefined,
          undefined,
          undefined,
        );
      } else {
        return Curry._4(
          mixpanelEvent,
          "quickstart_checkout_skip",
          undefined,
          undefined,
          undefined,
        );
      }
    } catch (exn) {
      return;
    }
  };
  React.useEffect(function () {
    Curry._1(setKey, function (param) {
      return Date.now().toString();
    });
  }, []);
  var tmp;
  var exit = 0;
  switch (props.connectProcessorValue) {
    case /* CONFIGURE_PRIMARY */ 0:
    case /* CONFIGURE_SECONDARY */ 1:
      exit = 1;
      break;
    case /* CONFIGURE_SMART_ROUTING */ 2:
      tmp = React.createElement(
        "div",
        {
          className: "flex h-full",
        },
        React.createElement(HSSelfServeSidebar.make, {
          heading: "Configure Control Centre",
          sidebarOptions: QuickStartUtils.getSidebarOptionsForConnectProcessor(
            enumDetails,
            quickStartPageState,
            connectorConfigureState,
            choiceStateForTestConnector,
          ),
        }),
        React.createElement(
          "div",
          {
            className: "flex-1 flex flex-col items-center justify-center ml-12",
          },
          React.createElement(QuickStartUIUtils.LandingPageChoice.make, {
            choiceState: smartRoutingChoiceState,
            setChoiceState: match$6[1],
            listChoices: QuickStartUtils.getSmartRoutingConfigurationText,
            nextButton: React.createElement(Button.make, {
              buttonState: buttonState,
              text: "Proceed",
              buttonType: /* Primary */ 0,
              buttonSize: /* Small */ 2,
              onClick: function (param) {
                Curry._4(
                  mixpanelEvent,
                  "quickstart_configure_smart_routing",
                  undefined,
                  undefined,
                  undefined,
                );
                handleRouting(undefined);
              },
              showBtnTextToolTip: buttonState === /* Disabled */ 2,
              tooltipText: "Please select one of the choices",
            }),
            headerText: "Configure Smart Routing",
          }),
        ),
      );
      break;
    case /* CHECKOUT */ 3:
      tmp = React.createElement(
        "div",
        {
          className: "flex h-full",
        },
        React.createElement(HSSelfServeSidebar.make, {
          heading: "Configure Control Centre",
          sidebarOptions: QuickStartUtils.getSidebarOptionsForConnectProcessor(
            enumDetails,
            quickStartPageState,
            connectorConfigureState,
            choiceStateForTestConnector,
          ),
        }),
        React.createElement(
          "div",
          {
            className: "flex-1 flex flex-col items-center justify-center",
          },
          React.createElement(QuickStartUIUtils.BaseComponent.make, {
            children: React.createElement(TestPayment.make, {
              returnUrl:
                "" + HSwitchGlobalVars.getHostUrlWithBasePath + "/quick-start",
              onProceed: updateTestPaymentEnum,
              sdkWidth: "w-full",
              paymentStatusStyles: "p-0",
              keyValue: match$1[0],
              initialValues: SDKPaymentUtils.initialValueForForm(
                activeBusinessProfile,
              ),
            }),
            headerText: "Preview Checkout page",
            nextButton: Caml_option.some(
              React.createElement(Button.make, {
                text: "Skip this step",
                buttonType: /* PrimaryOutline */ 2,
                buttonSize: /* Small */ 2,
                onClick: function (param) {
                  updateTestPaymentEnum(undefined);
                },
                customButtonStyle: "!rounded-md",
              }),
            ),
          }),
        ),
      );
      break;
    case /* LANDING */ 4:
      tmp = React.createElement(
        "div",
        {
          className: "h-full flex-1 flex flex-col items-center justify-center",
        },
        React.createElement(QuickStartUIUtils.LandingPageChoice.make, {
          choiceState: choiceState,
          setChoiceState: match$5[1],
          listChoices: QuickStartUtils.connectorChoiceArray,
          nextButton: React.createElement(Button.make, {
            buttonState: buttonState,
            text: "Proceed",
            buttonType: /* Primary */ 0,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              Curry._4(
                mixpanelEvent,
                "quickstart_landing",
                undefined,
                undefined,
                undefined,
              );
              handleConnectorChoiceClick(undefined);
            },
            showBtnTextToolTip: buttonState === /* Disabled */ 2,
            tooltipText: "Please select one of the choices",
          }),
          headerText: "How would you like to configure Hyperswitch?",
          backButton: Caml_option.some(
            React.createElement(Button.make, {
              text: "Exit to Homepage",
              buttonType: /* PrimaryOutline */ 2,
              buttonSize: /* Small */ 2,
              onClick: function (param) {
                Curry._1(setDashboardPageState, function (param) {
                  return "HOME";
                });
                RescriptReactRouter.replace(
                  HSwitchGlobalVars.appendDashboardPath("/home"),
                );
              },
            }),
          ),
        }),
      );
      break;
  }
  if (exit === 1) {
    tmp = React.createElement(
      "div",
      {
        className: "flex h-full",
      },
      React.createElement(HSSelfServeSidebar.make, {
        heading: "Configure Control Centre",
        sidebarOptions: QuickStartUtils.getSidebarOptionsForConnectProcessor(
          enumDetails,
          quickStartPageState,
          connectorConfigureState,
          choiceStateForTestConnector,
        ),
      }),
      React.createElement(
        "div",
        {
          className: "flex-1 flex flex-col items-center justify-center ml-12",
        },
        React.createElement(QuickStartConnectorFlow.make, {
          connectorConfigureState: connectorConfigureState,
          selectedConnector: selectedConnector,
          setSelectedConnector: match$2[1],
          setConnectorConfigureState: match$4[1],
          setInitialValues: setInitialValues,
          initialValues: match$3[0],
          connectorArray: match$8[0],
          setConnectorArray: match$8[1],
          choiceStateForTestConnector: choiceStateForTestConnector,
          setChoiceStateForTestConnector: match$7[1],
        }),
      ),
    );
  }
  return React.createElement(React.Fragment, undefined, tmp);
}

var make = ConfigureConnector;

export { make };
/* react Not a pure module */
