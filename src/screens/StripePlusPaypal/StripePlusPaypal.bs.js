// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Recoil from "recoil";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as GlobalProvider from "../../entryPoints/Provider/GlobalProvider.bs.js";
import * as SetupConnector from "../Home/CommonConnectorFlow/SetupConnector.bs.js";
import * as EnumVariantHook from "../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../Home/QuickStart/QuickStartUtils.bs.js";
import * as ConnectorPreview from "../Connectors/ConnectorPreview.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as QuickStartUIUtils from "../Home/QuickStart/QuickStartUIUtils.bs.js";
import * as HSSelfServeSidebar from "../Utils/HSSelfServeSidebar.bs.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";
import * as ProdOnboardingUIUtils from "../SelfServe/HSwitchProdOnboarding/ProdOnboardingUIUtils.bs.js";
import * as StripePlusPaypalUtils from "./StripePlusPaypalUtils.bs.js";
import * as StripePlusPaypalUIUtils from "./StripePlusPaypalUIUtils.bs.js";

var steps = [
  /* STRIPE_CONFIGURE */ 0, /* PAYPAL_CONFIGURE */ 1, /* TEST_PAYMENT */ 2,
];

function StripePlusPaypal(props) {
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var enums = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var getEnumDetails = EnumVariantHook.useFetchEnumDetails(undefined);
  var match = React.useState(function () {
    return {
      TAG: /* Processors */ 0,
      _0: /* STRIPE */ 6,
    };
  });
  var setSelectedConnector = match[1];
  var selectedConnector = match[0];
  var match$1 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$1[1];
  var match$2 = React.useState(function () {
    return {};
  });
  var setInitialValues = match$2[1];
  var initialValues = match$2[0];
  var match$3 = React.useState(function () {
    return /* Configure_keys */ 2;
  });
  var setConnectorConfigureState = match$3[1];
  var match$4 = React.useState(function () {
    return /* STRIPE_CONFIGURE */ 0;
  });
  var setStepInView = match$4[1];
  var stepInView = match$4[0];
  var match$5 = React.useContext(GlobalProvider.defaultContext);
  var setDashboardPageState = match$5.setDashboardPageState;
  var match$6 = React.useState(function () {
    return /* Normal */ 0;
  });
  var buttonState = match$6[0];
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var activeBusinessProfile = MerchantAccountUtils.getValueFromBusinessProfile(
    Recoil.useRecoilValue(HyperswitchAtom.businessProfilesAtom),
  );
  var naviagteToHome = function (param) {
    Curry._1(setDashboardPageState, function (param) {
      return "HOME";
    });
    RescriptReactRouter.replace(HSwitchGlobalVars.appendDashboardPath("/home"));
  };
  var handleNavigation = async function (forward) {
    switch (selectedConnector.TAG | 0) {
      case /* Processors */ 0:
        if (selectedConnector._0 === 6) {
          if (enums.paypalConnected.processorID.length === 0) {
            Curry._1(setSelectedConnector, function (param) {
              return {
                TAG: /* Processors */ 0,
                _0: /* PAYPAL */ 26,
              };
            });
            Curry._1(setConnectorConfigureState, function (param) {
              return /* Configure_keys */ 2;
            });
            Curry._1(setInitialValues, function (param) {
              return {};
            });
            return Curry._1(setStepInView, function (prev) {
              switch (prev) {
                case /* STRIPE_CONFIGURE */ 0:
                  if (forward) {
                    return /* PAYPAL_CONFIGURE */ 1;
                  } else {
                    return /* STRIPE_CONFIGURE */ 0;
                  }
                case /* PAYPAL_CONFIGURE */ 1:
                  if (forward) {
                    return /* TEST_PAYMENT */ 2;
                  } else {
                    return /* STRIPE_CONFIGURE */ 0;
                  }
                case /* TEST_PAYMENT */ 2:
                  if (forward) {
                    return /* COMPLETED_STRIPE_PAYPAL */ 3;
                  } else {
                    return /* PAYPAL_CONFIGURE */ 1;
                  }
                case /* COMPLETED_STRIPE_PAYPAL */ 3:
                  if (forward) {
                    return /* COMPLETED_STRIPE_PAYPAL */ 3;
                  } else {
                    return /* TEST_PAYMENT */ 2;
                  }
              }
            });
          } else {
            return;
          }
        }
        break;
      case /* ThreeDsAuthenticator */ 1:
      case /* UnknownConnector */ 2:
        break;
    }
    return Curry._1(setStepInView, function (param) {
      return /* TEST_PAYMENT */ 2;
    });
  };
  var setPageState = async function (param) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var enums = QuickStartUtils.getTypedValueFromDict(
        Core__Option.getOr(
          Caml_option.nullable_to_opt(
            await Curry._1(
              getEnumDetails,
              QuickStartUtils.quickStartEnumIntialArray,
            ),
          ),
          {},
        ),
      );
      var currentPending = steps.find(function (step) {
        return StripePlusPaypalUtils.enumToValueMapper(step, enums) === false;
      });
      if (currentPending !== undefined) {
        if (currentPending === /* PAYPAL_CONFIGURE */ 1) {
          Curry._1(setSelectedConnector, function (param) {
            return {
              TAG: /* Processors */ 0,
              _0: /* PAYPAL */ 26,
            };
          });
        }
        Curry._1(setStepInView, function (param) {
          return currentPending;
        });
      } else {
        Curry._1(setStepInView, function (param) {
          return /* COMPLETED_STRIPE_PAYPAL */ 3;
        });
      }
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "",
        };
      });
    }
  };
  React.useEffect(function () {
    setPageState(undefined);
  }, []);
  React.useEffect(
    function () {
      var defaultJsonOnNewConnector = Object.fromEntries([
        ["profile_id", activeBusinessProfile.profile_id],
      ]);
      Curry._1(setInitialValues, function (param) {
        return defaultJsonOnNewConnector;
      });
    },
    [activeBusinessProfile.profile_id, connectorName],
  );
  var tmp;
  if (stepInView !== 2) {
    if (stepInView >= 3) {
      tmp = React.createElement(
        "div",
        {
          className: "bg-white rounded h-40-rem",
        },
        React.createElement(
          ProdOnboardingUIUtils.BasicAccountSetupSuccessfulPage.make,
          {
            iconName: "account-setup-completed",
            statusText: "Setup Stripe+Paypal Sandbox Setup Completed",
            buttonText: "Go To Home",
            buttonOnClick: naviagteToHome,
            customWidth: "w-30-rem text-center",
          },
        ),
      );
    } else {
      switch (match$3[0]) {
        case /* Select_processor */ 0:
        case /* Select_configuration_type */ 1:
          tmp = null;
          break;
        case /* Configure_keys */ 2:
          tmp = React.createElement(SetupConnector.ConfigureProcessor.make, {
            selectedConnector: selectedConnector,
            initialValues: initialValues,
            setInitialValues: setInitialValues,
            setConnectorConfigureState: setConnectorConfigureState,
            isBackButtonVisible: false,
          });
          break;
        case /* Setup_payment_methods */ 3:
          tmp = React.createElement(
            StripePlusPaypalUIUtils.SelectPaymentMethods.make,
            {
              selectedConnector: selectedConnector,
              initialValues: initialValues,
              setInitialValues: setInitialValues,
              setConnectorConfigureState: setConnectorConfigureState,
              setButtonState: match$6[1],
              buttonState: buttonState,
            },
          );
          break;
        case /* Summary */ 4:
          tmp = React.createElement(QuickStartUIUtils.BaseComponent.make, {
            children: React.createElement(
              ConnectorPreview.ConnectorSummaryGrid.make,
              {
                connectorInfo: ConnectorListMapper.getProcessorPayloadType(
                  LogicUtils.getDictFromJsonObject(initialValues),
                ),
                connector: connectorName,
                isPayoutFlow: false,
                setScreenState: function (param) {},
              },
            ),
            headerText: LogicUtils.capitalizeString(connectorName),
            nextButton: Caml_option.some(
              React.createElement(Button.make, {
                buttonState: buttonState,
                text: "Continue & Proceed",
                buttonType: /* Primary */ 0,
                buttonSize: /* Small */ 2,
                onClick: function (param) {
                  handleNavigation(true);
                },
                customButtonStyle: "rounded-md",
              }),
            ),
            customIcon: Caml_option.some(
              React.createElement(GatewayIcon.make, {
                gateway: connectorName.toUpperCase(),
                className: "w-6 h-6 rounded-md",
              }),
            ),
            customCss: "show-scrollbar",
          });
          break;
      }
    }
  } else {
    tmp = React.createElement(StripePlusPaypalUIUtils.TestPayment.make, {
      setStepInView: setStepInView,
    });
  }
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex h-full bg-blue-background_blue",
        },
        React.createElement(HSSelfServeSidebar.make, {
          heading: "Setup Stripe Plus Paypal",
          sidebarOptions:
            StripePlusPaypalUtils.getSidebarOptionsForStripePayalIntegration(
              enumDetails,
              stepInView,
            ),
        }),
        React.createElement(
          "div",
          {
            className: "flex-1 flex flex-col items-center justify-center ml-12",
          },
          tmp,
        ),
      ),
    ),
    screenState: match$1[0],
    sectionHeight: "!h-screen !w-full",
  });
}

var make = StripePlusPaypal;

export { steps, make };
/* react Not a pure module */
