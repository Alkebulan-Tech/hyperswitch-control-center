// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as TestPayment from "../SDKPayment/TestPayment.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as PaymentMethod from "../Connectors/ConnectorUIUtils/PaymentMethod.bs.js";
import * as ConnectorUtils from "../Connectors/ConnectorUtils.bs.js";
import * as EnumVariantHook from "../Hooks/EnumVariantHook.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as QuickStartUtils from "../Home/QuickStart/QuickStartUtils.bs.js";
import * as SDKPaymentUtils from "../SDKPayment/SDKPaymentUtils.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as QuickStartUIUtils from "../Home/QuickStart/QuickStartUIUtils.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as MerchantAccountUtils from "../Settings/MerchantAccountUtils.bs.js";

function StripePlusPaypalUIUtils$SelectPaymentMethods(props) {
  var setButtonState = props.setButtonState;
  var setConnectorConfigureState = props.setConnectorConfigureState;
  var setInitialValues = props.setInitialValues;
  var initialValues = props.initialValues;
  var selectedConnector = props.selectedConnector;
  var updateEnumInRecoil = EnumVariantHook.useUpdateEnumInRecoil(undefined);
  var enumDetails = Recoil.useRecoilValue(HyperswitchAtom.enumVariantAtom);
  var enums = QuickStartUtils.getTypedValueFromDict(
    LogicUtils.safeParse(enumDetails),
  );
  var updateAPIHook = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var postEnumDetails = EnumVariantHook.usePostEnumDetails(undefined);
  var connectorName = ConnectorUtils.getConnectorNameString(selectedConnector);
  var match = React.useState(function () {
    return ConnectorUtils.getPaymentMethodEnabled({});
  });
  var setPaymentMethods = match[1];
  var paymentMethodsEnabled = match[0];
  var match$1 = React.useState(function () {
    return {};
  });
  var setMetaData = match$1[1];
  var metaData = match$1[0];
  var updateDetails = function (value) {
    Curry._1(setPaymentMethods, function (param) {
      return value.slice();
    });
  };
  var updateEnumForMultipleConfigurationType = async function (
    connectorChoiceValue,
  ) {
    try {
      await Curry._2(
        postEnumDetails,
        {
          TAG: /* StringEnumType */ 6,
          _0: connectorChoiceValue,
        },
        "ConfigurationType",
      );
      return;
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return Js_exn.raiseError(
          Core__Option.getOr(e._1.message, "Failed to update!"),
        );
      }
      throw e;
    }
  };
  var updateEnumForConnector = async function (connectorResponse) {
    var enums = QuickStartUtils.getTypedValueFromDict(
      LogicUtils.safeParse(enumDetails),
    );
    try {
      var processorVal_processorID = LogicUtils.getString(
        connectorResponse,
        "merchant_connector_id",
        "",
      );
      var processorVal_processorName = LogicUtils.getString(
        connectorResponse,
        "connector_name",
        "",
      );
      var processorVal = {
        processorID: processorVal_processorID,
        processorName: processorVal_processorName,
      };
      var body = {
        TAG: /* ProcesorType */ 0,
        _0: processorVal,
      };
      var enumRecoilUpdateArr = [];
      if (enums.firstProcessorConnected.processorID.length === 0) {
        await Curry._2(postEnumDetails, body, "FirstProcessorConnected");
        enumRecoilUpdateArr.push([body, "FirstProcessorConnected"]);
      } else if (enums.secondProcessorConnected.processorID.length === 0) {
        await Curry._2(postEnumDetails, body, "SecondProcessorConnected");
        enumRecoilUpdateArr.push([body, "SecondProcessorConnected"]);
      }
      switch (selectedConnector.TAG | 0) {
        case /* Processors */ 0:
          var match = selectedConnector._0;
          if (match !== 6) {
            if (match !== 26) {
            } else {
              enumRecoilUpdateArr.push([body, "PaypalConnected"]);
            }
          } else {
            enumRecoilUpdateArr.push([body, "StripeConnected"]);
          }
          break;
        case /* ThreeDsAuthenticator */ 1:
        case /* UnknownConnector */ 2:
          break;
      }
      Curry._1(updateEnumInRecoil, enumRecoilUpdateArr);
      return;
    } catch (exn) {
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  var onSubmitMain = async function (param) {
    Curry._1(setButtonState, function (param) {
      return /* Loading */ 1;
    });
    try {
      var obj = {
        payment_methods_enabled: paymentMethodsEnabled,
        connector: connectorName,
        metadata: metaData,
      };
      var body = ConnectorUtils.constructConnectorRequestBody(
        obj,
        initialValues,
      );
      var connectorUrl = APIUtils.getURL(
        /* CONNECTOR */ 0,
        /* Post */ 2,
        Caml_option.some(undefined),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      if (enums.configurationType.length === 0 && connectorName === "stripe") {
        await updateEnumForMultipleConfigurationType(
          QuickStartUtils.connectorChoiceVariantToString(
            "MultipleProcessorWithSmartRouting",
          ),
        );
      }
      var response = await Curry._7(
        updateAPIHook,
        connectorUrl,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setInitialValues, function (param) {
        return response;
      });
      updateEnumForConnector(LogicUtils.getDictFromJsonObject(response));
      Curry._1(setConnectorConfigureState, function (param) {
        return /* Summary */ 4;
      });
      Curry._8(
        showToast,
        "" +
          LogicUtils.getFirstLetterCaps(connectorName, undefined, undefined) +
          " connected successfully!",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    } catch (exn) {
      return Curry._1(setButtonState, function (param) {
        return /* Normal */ 0;
      });
    }
  };
  React.useEffect(
    function () {
      ConnectorUtils.getConnectorPaymentMethodDetails(
        initialValues,
        setPaymentMethods,
        setMetaData,
        false,
        false,
        connectorName,
        updateDetails,
      );
    },
    [connectorName],
  );
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: React.createElement(PaymentMethod.PaymentMethodsRender.make, {
      _showAdvancedConfiguration: false,
      connector: connectorName,
      paymentMethodsEnabled: paymentMethodsEnabled,
      updateDetails: updateDetails,
      metaData: metaData,
      setMetaData: setMetaData,
      isPayoutFlow: false,
    }),
    headerText: "Connect payment methods",
    nextButton: Caml_option.some(
      React.createElement(Button.make, {
        buttonState: props.buttonState,
        text: "Proceed",
        buttonType: /* Primary */ 0,
        buttonSize: /* Small */ 2,
        onClick: function (param) {
          onSubmitMain(undefined);
        },
        customButtonStyle: "rounded-md",
      }),
    ),
    backButton: Caml_option.some(
      React.createElement(Button.make, {
        text: "Back",
        buttonType: /* PrimaryOutline */ 2,
        buttonSize: /* Small */ 2,
        onClick: function (param) {
          Curry._1(setConnectorConfigureState, function (param) {
            return /* Configure_keys */ 2;
          });
        },
      }),
    ),
    customIcon: Caml_option.some(
      React.createElement(GatewayIcon.make, {
        gateway: connectorName.toUpperCase(),
        className: "w-6 h-6 rounded-md",
      }),
    ),
    customCss: "show-scrollbar",
  });
}

var SelectPaymentMethods = {
  make: StripePlusPaypalUIUtils$SelectPaymentMethods,
};

function StripePlusPaypalUIUtils$TestPayment(props) {
  var setStepInView = props.setStepInView;
  var postEnumDetails = EnumVariantHook.usePostEnumDetails(undefined);
  var match = React.useState(function () {
    return "";
  });
  var setKey = match[1];
  var businessProfiles = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var defaultBusinessProfile =
    MerchantAccountUtils.getValueFromBusinessProfile(businessProfiles);
  var updateTestPaymentEnum = async function (param) {
    try {
      await Curry._2(
        postEnumDetails,
        {
          TAG: /* Boolean */ 4,
          _0: true,
        },
        "SPTestPayment",
      );
      return Curry._1(setStepInView, function (param) {
        return /* COMPLETED_STRIPE_PAYPAL */ 3;
      });
    } catch (exn) {
      return;
    }
  };
  var sptestPaymentProceed = async function (param) {
    updateTestPaymentEnum(undefined);
  };
  React.useEffect(function () {
    Curry._1(setKey, function (param) {
      return Date.now().toString();
    });
  }, []);
  return React.createElement(QuickStartUIUtils.BaseComponent.make, {
    children: React.createElement(TestPayment.make, {
      returnUrl:
        "" + HSwitchGlobalVars.getHostUrlWithBasePath + "/stripe-plus-paypal",
      onProceed: sptestPaymentProceed,
      sdkWidth: "w-full",
      paymentStatusStyles: "p-0",
      keyValue: match[0],
      initialValues: SDKPaymentUtils.initialValueForForm(
        defaultBusinessProfile,
      ),
    }),
    headerText: "Preview Checkout page",
    nextButton: Caml_option.some(
      React.createElement(Button.make, {
        text: "Skip this step",
        buttonType: /* PrimaryOutline */ 2,
        buttonSize: /* Small */ 2,
        onClick: function (param) {
          updateTestPaymentEnum(undefined);
        },
        customButtonStyle: "!rounded-md",
      }),
    ),
  });
}

var TestPayment$1 = {
  make: StripePlusPaypalUIUtils$TestPayment,
};

export { SelectPaymentMethods, TestPayment$1 as TestPayment };
/* react Not a pure module */
