// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../genericUtils/Form.bs.js";
import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as Table from "../../../components/Table.bs.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as ToolTip from "../../../components/tooltip/ToolTip.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Clipboard from "../../../libraries/Clipboard.bs.js";
import * as EntityType from "../../../entities/EntityType.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../../components/InputFields.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as BusinessMappingUtils from "./BusinessMappingUtils.bs.js";
import * as BusinessProfileMapper from "../../../utils/Mappers/BusinessProfileMapper.bs.js";

function BusinessMappingEntity$ProfileActions(props) {
  var profileId = props.profileId;
  var defaultProfileName = props.defaultProfileName;
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var match = React.useState(function () {
    return false;
  });
  var setShowModal = match[1];
  var match$1 = Recoil.useRecoilState(HyperswitchAtom.businessProfilesAtom);
  var setBusinessProfiles = match$1[1];
  var businessProfiles = match$1[0];
  var initialValues = Object.fromEntries([
    ["profile_name", defaultProfileName],
  ]);
  var onSubmit = async function (values, param) {
    try {
      var url = APIUtils.getURL(
        /* BUSINESS_PROFILE */ 29,
        /* Post */ 2,
        Caml_option.some(profileId),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var res = await Curry._7(
        updateDetails,
        url,
        values,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var filteredProfileList = businessProfiles
        .filter(function (businessProfile) {
          return businessProfile.profile_id !== profileId;
        })
        .concat([BusinessProfileMapper.businessProfileTypeMapper(res)]);
      setBusinessProfiles(function (param) {
        return filteredProfileList;
      });
      Curry._8(
        showToast,
        "Updated profile name!",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      Curry._8(
        showToast,
        "Failed to update profile name!",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    Curry._1(setShowModal, function (param) {
      return false;
    });
    return null;
  };
  var businessName = FormRenderer.makeFieldInfo(
    "Profile Name",
    undefined,
    "profile_name",
    function (param) {
      return function (param$1) {
        var param$2;
        var param$3;
        var param$4;
        var param$5;
        var param$6;
        var param$7;
        var param$8;
        var param$9;
        var param$10;
        var param$11;
        var param$12;
        var param$13;
        var param$14;
        var param$15;
        var param$16;
        var param$17;
        var param$18;
        var param$19;
        var param$20;
        var param$21;
        var param$22;
        var param$23;
        var param$24;
        var param$25;
        var param$26;
        var param$27;
        return InputFields.textInput(
          param,
          param$1,
          param$2,
          param$3,
          param$4,
          param$5,
          param$6,
          param$7,
          param$8,
          param$9,
          param$10,
          param$11,
          param$12,
          param$13,
          param$14,
          param$15,
          param$16,
          param$17,
          param$18,
          param$19,
          param$20,
          param$21,
          param$22,
          param$23,
          param$24,
          param$25,
          param$26,
          param$27,
        );
      };
    },
    undefined,
    undefined,
    undefined,
    undefined,
    "Eg: Hyperswitch",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    true,
    undefined,
    undefined,
    undefined,
  );
  return React.createElement(
    "div",
    {
      className: "flex gap-4 items-center",
    },
    React.createElement(ToolTip.make, {
      description: "Edit profile name",
      toolTipFor: Caml_option.some(
        React.createElement(Icon.make, {
          name: "pencil-alt",
          size: 14,
          className: "cursor-pointer",
          onClick: function (param) {
            Curry._1(setShowModal, function (param) {
              return true;
            });
          },
        }),
      ),
      toolTipPosition: /* Top */ 0,
      contentAlign: /* Left */ 0,
    }),
    React.createElement(ToolTip.make, {
      description: "Copy profile Id",
      toolTipFor: Caml_option.some(
        React.createElement(Icon.make, {
          name: "copy-code",
          size: 20,
          className: "cursor-pointer",
          onClick: function (param) {
            Clipboard.writeText(profileId);
            Curry._8(
              showToast,
              "Copied to Clipboard!",
              /* ToastSuccess */ 3,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            );
          },
        }),
      ),
      toolTipPosition: /* Top */ 0,
      contentAlign: /* Left */ 0,
    }),
    JsxPPXReactSupport.createElementWithKey(defaultProfileName, Modal.make, {
      showModal: match[0],
      setShowModal: setShowModal,
      children: React.createElement(Form.make, {
        children: React.createElement(
          "div",
          {
            className: "flex flex-col gap-12 h-full w-full",
          },
          React.createElement(FormRenderer.DesktopRow.make, {
            children: React.createElement(FormRenderer.FieldRenderer.make, {
              field: businessName,
              fieldWrapperClass: "w-full",
              labelClass: "!text-black font-medium !-ml-[0.5px]",
            }),
          }),
          React.createElement(
            "div",
            {
              className: "flex justify-end w-full pr-5 pb-3",
            },
            React.createElement(FormRenderer.SubmitButton.make, {
              text: "Submit changes",
              buttonSize: /* Small */ 2,
            }),
          ),
        ),
        onSubmit: onSubmit,
        initialValues: Caml_option.some(initialValues),
      }),
      modalHeading: "Edit Profile name",
      modalClass: "w-1/4 m-auto",
    }),
  );
}

var ProfileActions = {
  make: BusinessMappingEntity$ProfileActions,
};

var visibleColumns = [/* ProfileId */ 1, /* ProfileName */ 0, /* Action */ 2];

var defaultColumns = [/* ProfileId */ 1, /* ProfileName */ 0, /* Action */ 2];

var allColumns = [/* ProfileId */ 1, /* ProfileName */ 0, /* Action */ 2];

function getHeading(colType) {
  switch (colType) {
    case /* ProfileName */ 0:
      return Table.makeHeaderInfo(
        "profile_name",
        "Profile Name",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ProfileId */ 1:
      return Table.makeHeaderInfo(
        "profile_id",
        "Profile Id",
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Action */ 2:
      return Table.makeHeaderInfo(
        "action",
        "Action",
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCell(item, colType) {
  switch (colType) {
    case /* ProfileName */ 0:
      return {
        TAG: /* Text */ 1,
        _0: item.profile_name,
      };
    case /* ProfileId */ 1:
      return {
        TAG: /* Text */ 1,
        _0: item.profile_id,
      };
    case /* Action */ 2:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(BusinessMappingEntity$ProfileActions, {
          defaultProfileName: item.profile_name,
          profileId: item.profile_id,
        }),
        _1: "",
      };
  }
}

function itemToObjMapper(dict) {
  return {
    merchant_id: LogicUtils.getString(dict, "merchant_id", ""),
    profile_id: LogicUtils.getString(dict, "profile_id", ""),
    profile_name: LogicUtils.getString(
      dict,
      BusinessMappingUtils.getStringFromVariant(/* ProfileName */ 0),
      "",
    ),
    return_url: LogicUtils.getOptionString(dict, "return_url"),
    payment_response_hash_key: LogicUtils.getOptionString(
      dict,
      "payment_response_hash_key",
    ),
    webhook_details: BusinessProfileMapper.constructWebhookDetailsObject(
      LogicUtils.getObj(dict, "webhook_details", {}),
    ),
    authentication_connector_details:
      BusinessProfileMapper.constructAuthConnectorObject(
        LogicUtils.getObj(dict, "webhook_details", {}),
      ),
  };
}

function getItems(json) {
  return LogicUtils.getArrayDataFromJson(json, itemToObjMapper);
}

var businessProfileTableEntity = EntityType.makeEntity(
  "",
  getItems,
  defaultColumns,
  allColumns,
  getHeading,
  getCell,
  "",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  ProfileActions,
  visibleColumns,
  defaultColumns,
  allColumns,
  getHeading,
  getCell,
  itemToObjMapper,
  getItems,
  businessProfileTableEntity,
};
/* businessProfileTableEntity Not a pure module */
