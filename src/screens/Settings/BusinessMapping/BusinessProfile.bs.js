// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "../../../components/Button.bs.js";
import * as Loader from "../../../components/Loader.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as ACLButton from "../../../components/ACLButton.bs.js";
import * as PageUtils from "../../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "../../../components/LoadedTable.bs.js";
import * as FormRenderer from "../../../components/form/FormRenderer.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../../Utils/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as BusinessProfileHook from "../../Hooks/BusinessProfileHook.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as BusinessMappingUtils from "./BusinessMappingUtils.bs.js";
import * as BusinessMappingEntity from "./BusinessMappingEntity.bs.js";
import * as LabelVisibilityContext from "../../../components/form/LabelVisibilityContext.bs.js";

function BusinessProfile$WarningArea(props) {
  return React.createElement(
    "h1",
    {
      className:
        "text-orange-950 bg-orange-100 border w-full py-2 px-4 rounded-md ",
    },
    React.createElement(
      "span",
      {
        className: "text-orange-950 font-bold text-fs-14 mr-2",
      },
      "NOTE:",
    ),
    props.warningText,
  );
}

var WarningArea = {
  make: BusinessProfile$WarningArea,
};

function BusinessProfile$AddEntryBtn(props) {
  var setModalState = props.setModalState;
  var updatedProfileId = props.updatedProfileId;
  var isFromSettings = props.isFromSettings;
  var list = props.list;
  var setShowModal = props.setShowModal;
  var modalState = props.modalState;
  var isFromSettings$1 = isFromSettings !== undefined ? isFromSettings : true;
  var initialValues = Object.fromEntries([
    ["profile_name", "default" + list.length.toString() + ""],
  ]);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var tmp;
  switch (modalState) {
    case /* Loading */ 0:
      tmp = React.createElement(Loader.make, {});
      break;
    case /* Edit */ 1:
      tmp = JsxPPXReactSupport.createElementWithKey(
        "country-currency",
        Form.make,
        {
          children: React.createElement(LabelVisibilityContext.make, {
            children: React.createElement(
              "div",
              {
                className: "flex flex-col gap-3 h-full w-full",
              },
              React.createElement(FormRenderer.DesktopRow.make, {
                children: React.createElement(HSwitchUtils.TextFieldRow.make, {
                  label: BusinessMappingUtils.labelField.label,
                  children: React.createElement(
                    FormRenderer.FieldRenderer.make,
                    {
                      field: BusinessMappingUtils.labelField,
                      fieldWrapperClass: "w-96",
                      errorClass: HSwitchUtils.errorClass,
                    },
                  ),
                  isRequired: false,
                  labelWidth: "w-32",
                }),
              }),
              React.createElement(FormRenderer.DesktopRow.make, {
                children: React.createElement(
                  "div",
                  {
                    className: "flex justify-end gap-5 mt-5 mb-1 -mr-2",
                  },
                  React.createElement(Button.make, {
                    text: "Cancel",
                    buttonType: /* Secondary */ 1,
                    buttonSize: /* Small */ 2,
                    onClick: function (param) {
                      Curry._1(setShowModal, function (param) {
                        return false;
                      });
                    },
                  }),
                  React.createElement(FormRenderer.SubmitButton.make, {
                    text: "Add",
                    buttonSize: /* Small */ 2,
                  }),
                ),
              }),
            ),
            showLabel: false,
          }),
          onSubmit: props.onSubmit,
          initialValues: Caml_option.some(initialValues),
          validate: function (values) {
            return BusinessMappingUtils.validateForm(
              values,
              [/* ProfileName */ 0],
              list,
            );
          },
        },
      );
      break;
    case /* Successful */ 2:
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-col gap-6 justify-center items-end mx-4",
        },
        React.createElement(BusinessProfile$WarningArea, {
          warningText:
            "Warning! Now that you've configured more than one profile, you must mandatorily pass 'profile_id' in payments API request every time",
        }),
        React.createElement(
          "p",
          {
            className: "text-grey-700",
          },
          "Business Profile successfully created! Set up your payments settings like webhooks, return url for your new profile before trying a payment.",
        ),
        React.createElement(Button.make, {
          text: "Configure payment settings",
          buttonType: /* Primary */ 0,
          onClick: function (param) {
            if (LogicUtils.isNonEmptyString(updatedProfileId)) {
              RescriptReactRouter.replace(
                HSwitchGlobalVars.appendDashboardPath(
                  "/payment-settings/" + updatedProfileId + "",
                ),
              );
              return Curry._1(setModalState, function (param) {
                return /* Edit */ 1;
              });
            }
          },
          customButtonStyle: "!w-1/3 mt-6",
        }),
      );
      break;
  }
  var modalBody = React.createElement("div", undefined, tmp);
  var modalHeaderText =
    modalState >= 2
      ? "Configure payment settings"
      : "Add Business Profile Name";
  return React.createElement(
    "div",
    undefined,
    React.createElement(UIUtils.RenderIf.make, {
      condition: isFromSettings$1,
      children: React.createElement(ACLButton.make, {
        text: "Add",
        buttonType: /* Primary */ 0,
        buttonSize: /* Small */ 2,
        rightIcon: {
          TAG: /* FontAwesome */ 0,
          _0: "plus",
        },
        onClick: function (param) {
          Curry._1(setModalState, function (param) {
            return /* Edit */ 1;
          });
          Curry._1(setShowModal, function (param) {
            return true;
          });
        },
        access: userPermissionJson.merchantDetailsManage,
      }),
    }),
    React.createElement(Modal.make, {
      showModal: props.showModal,
      setShowModal: setShowModal,
      children: modalBody,
      modalHeading: modalHeaderText,
      modalClass:
        "w-full max-w-2xl m-auto !bg-white dark:!bg-jp-gray-lightgray_background",
      closeOnOutsideClick: true,
    }),
  );
}

var AddEntryBtn = {
  make: BusinessProfile$AddEntryBtn,
};

function BusinessProfile(props) {
  var setShowModalFromOtherScreen = props.setShowModalFromOtherScreen;
  var showModalFromOtherScreen = props.showModalFromOtherScreen;
  var isFromSettings = props.isFromSettings;
  var isFromSettings$1 = isFromSettings !== undefined ? isFromSettings : true;
  var showModalFromOtherScreen$1 =
    showModalFromOtherScreen !== undefined ? showModalFromOtherScreen : false;
  var setShowModalFromOtherScreen$1 =
    setShowModalFromOtherScreen !== undefined
      ? setShowModalFromOtherScreen
      : function (_bool) {};
  var showToast = ToastState.useShowToast(undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return 0;
  });
  var match$1 = React.useState(function () {
    return false;
  });
  var match$2 = React.useState(function () {
    return /* Edit */ 1;
  });
  var setModalState = match$2[1];
  var modalState = match$2[0];
  var match$3 = React.useState(function () {
    return /* Success */ 1;
  });
  var setScreenState = match$3[1];
  var match$4 = React.useState(function () {
    return "";
  });
  var setUpdatedProfileId = match$4[1];
  var updatedProfileId = match$4[0];
  var businessProfileValues = Recoil.useRecoilValue(
    HyperswitchAtom.businessProfilesAtom,
  );
  var fetchBusinessProfiles =
    BusinessProfileHook.useFetchBusinessProfiles(undefined);
  var updateMerchantDetails = async function (body) {
    try {
      Curry._1(setScreenState, function (param) {
        return /* Loading */ 0;
      });
      var url = APIUtils.getURL(
        /* BUSINESS_PROFILE */ 29,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var response = await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setUpdatedProfileId, function (param) {
        return LogicUtils.getString(
          LogicUtils.getDictFromJsonObject(response),
          "profile_id",
          "",
        );
      });
      Curry._1(fetchBusinessProfiles, undefined);
      Curry._8(
        showToast,
        "Your Entry added successfully",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (exn) {
      Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "",
        };
      });
    }
    if (!isFromSettings$1) {
      Curry._1(setShowModalFromOtherScreen$1, function (param) {
        return false;
      });
    }
    Curry._1(setModalState, function (param) {
      return /* Successful */ 2;
    });
    return null;
  };
  var onSubmit = async function (values, param) {
    updateMerchantDetails(values);
    return null;
  };
  return React.createElement(
    PageLoaderWrapper.make,
    {
      children: Caml_option.some(null),
      screenState: match$3[0],
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: isFromSettings$1,
      children: React.createElement(
        "div",
        {
          className: "relative h-full",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-col-reverse md:flex-col gap-2",
          },
          React.createElement(PageUtils.PageHeading.make, {
            title: "Business Profiles",
            subTitle:
              "Add and manage profiles to represent different businesses across countries.",
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: businessProfileValues.length > 1,
            children: React.createElement(BusinessProfile$WarningArea, {
              warningText:
                "Warning! Now that you've configured more than one profile, you must mandatorily pass 'profile_id' in payments API request every time",
            }),
          }),
          React.createElement(LoadedTable.make, {
            visibleColumns: BusinessMappingEntity.visibleColumns,
            title: "Business profiles",
            showSerialNumber: true,
            actualData: businessProfileValues.map(function (prim) {
              return prim;
            }),
            totalResults: businessProfileValues.length,
            resultsPerPage: 7,
            offset: match[0],
            setOffset: match[1],
            entity: BusinessMappingEntity.businessProfileTableEntity,
            currrentFetchCount: businessProfileValues.length,
            hideTitle: true,
          }),
          React.createElement(
            "div",
            {
              className: "absolute right-0 -top-3",
            },
            React.createElement(BusinessProfile$AddEntryBtn, {
              onSubmit: onSubmit,
              modalState: modalState,
              showModal: match$1[0],
              setShowModal: match$1[1],
              list: businessProfileValues,
              updatedProfileId: updatedProfileId,
              setModalState: setModalState,
            }),
          ),
        ),
      ),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: !isFromSettings$1,
      children: React.createElement(BusinessProfile$AddEntryBtn, {
        onSubmit: onSubmit,
        modalState: modalState,
        showModal: showModalFromOtherScreen$1,
        setShowModal: setShowModalFromOtherScreen$1,
        list: businessProfileValues,
        isFromSettings: isFromSettings$1,
        updatedProfileId: updatedProfileId,
        setModalState: setModalState,
      }),
    }),
  );
}

var make = BusinessProfile;

export { WarningArea, AddEntryBtn, make };
/* Form Not a pure module */
