// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Recoil from "recoil";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as HSLocalStorage from "../HSLocalStorage.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as SettingsFieldsInfo from "./SettingsFieldsInfo.bs.js";
import * as MerchantAccountUtils from "./MerchantAccountUtils.bs.js";
import * as MerchantAccountDetailsMapper from "../../utils/Mappers/MerchantAccountDetailsMapper.bs.js";

function BusinessDetails$InfoOnlyView(props) {
  var subHeading = props.subHeading;
  var subHeading$1 = subHeading !== undefined ? subHeading : "Default value";
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-2 m-2 md:m-4",
    },
    React.createElement(
      "p",
      {
        className: "font-semibold text-fs-13",
      },
      props.heading,
    ),
    React.createElement(
      "p",
      {
        className: "font-medium text-fs-13 text-black opacity-50 break-words",
      },
      subHeading$1,
    ),
  );
}

var InfoOnlyView = {
  make: BusinessDetails$InfoOnlyView,
};

function BusinessDetails$DetailsSection(props) {
  var merchantInfo = props.merchantInfo;
  var formState = props.formState;
  var details = props.details;
  return React.createElement(
    "div",
    {
      className: "flex md:flex-row flex-col md:gap-14 ",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col md:pt-4 md:w-1/3",
      },
      React.createElement(
        "p",
        {
          className: "font-semibold text-fs-16",
        },
        details.name,
      ),
      React.createElement(
        "p",
        {
          className:
            "font-medium hidden md:block text-fs-13 text-black opacity-50",
        },
        details.description,
      ),
    ),
    React.createElement("div", {
      className: "w-full border-b mt-1 md:hidden dark:opacity-20 ",
    }),
    React.createElement(
      "div",
      {
        className: "w-full grid md:grid-cols-2 grid-cols-1 gap-x-16 ",
      },
      details.inputFields.map(function (field, index) {
        var merchantName = LogicUtils.getString(
          merchantInfo,
          field.name,
          "Not Added",
        );
        var defaultText = LogicUtils.isNonEmptyString(merchantName)
          ? merchantName
          : "Not Added";
        return React.createElement(
          "div",
          {
            key: index.toString(),
          },
          formState
            ? React.createElement(FormRenderer.FieldRenderer.make, {
                field: FormRenderer.makeFieldInfo(
                  field.label,
                  undefined,
                  field.name,
                  field.inputType,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  field.placeholder,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                ),
                labelClass: "font-semibold !text-black",
              })
            : React.createElement(BusinessDetails$InfoOnlyView, {
                heading: field.label,
                subHeading: defaultText,
              }),
        );
      }),
    ),
  );
}

var DetailsSection = {
  make: BusinessDetails$DetailsSection,
};

var renderingArray = [
  SettingsFieldsInfo.primaryDetails,
  SettingsFieldsInfo.secondaryDetails,
  SettingsFieldsInfo.businessDetails,
];

function BusinessDetails(props) {
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match = React.useState(function () {});
  var setUid = match[1];
  var uid = match[0];
  var match$1 = React.useState(function () {
    return {};
  });
  var setMerchantInfo = match$1[1];
  var merchantInfo = match$1[0];
  var match$2 = React.useState(function () {
    return /* Preview */ 0;
  });
  var setFormState = match$2[1];
  var formState = match$2[0];
  var match$3 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setFetchState = match$3[1];
  var match$4 = React.useState(function () {
    return false;
  });
  var setIsDisabled = match$4[1];
  var onSubmit = async function (values, param) {
    try {
      Curry._1(setFetchState, function (param) {
        return /* Loading */ 0;
      });
      var accountUrl = APIUtils.getURL(
        /* MERCHANT_ACCOUNT */ 2,
        /* Post */ 2,
        Caml_option.some(uid),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var merchantDetails = await Curry._7(
        updateDetails,
        accountUrl,
        MerchantAccountUtils.getSettingsPayload(
          values,
          Core__Option.getOr(uid, ""),
        ),
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setFormState, function (param) {
        return /* Preview */ 0;
      });
      var merchantInfo = MerchantAccountUtils.parseMerchantJson(
        MerchantAccountDetailsMapper.getMerchantDetails(merchantDetails),
      );
      Curry._1(setMerchantInfo, function (param) {
        return merchantInfo;
      });
      Curry._8(
        showToast,
        "Successfully updated business details",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setFetchState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          Curry._1(setFetchState, function (param) {
            return /* Error */ {
              _0: message,
            };
          });
        } else {
          Curry._1(setFetchState, function (param) {
            return /* Error */ {
              _0: "Something went wrong!",
            };
          });
        }
      } else {
        throw e;
      }
    }
    return null;
  };
  var fetchMerchantInfo = async function (param) {
    var merchantId = HSLocalStorage.getFromMerchantDetails("merchant_id");
    Curry._1(setUid, function (param) {
      return merchantId;
    });
    try {
      Curry._1(setFetchState, function (param) {
        return /* Loading */ 0;
      });
      var accountUrl = APIUtils.getURL(
        /* MERCHANT_ACCOUNT */ 2,
        /* Get */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var merchantDetails = await Curry._1(fetchDetails, accountUrl);
      var merchantInfo = MerchantAccountUtils.parseMerchantJson(
        MerchantAccountDetailsMapper.getMerchantDetails(merchantDetails),
      );
      Curry._1(setMerchantInfo, function (param) {
        return merchantInfo;
      });
      Curry._1(setFetchState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var message = e._1.message;
        if (message !== undefined) {
          Curry._1(setFetchState, function (param) {
            return /* Error */ {
              _0: message,
            };
          });
        } else {
          Curry._1(setFetchState, function (param) {
            return /* Error */ {
              _0: "Something went wrong!",
            };
          });
        }
      } else {
        throw e;
      }
    }
  };
  React.useEffect(function () {
    fetchMerchantInfo(undefined);
    Curry._1(setFormState, function (param) {
      return /* Preview */ 0;
    });
  }, []);
  var buttonText = formState ? "Save" : "Edit";
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-6",
        },
        React.createElement(PageUtils.PageHeading.make, {
          title: "Business Details",
          subTitle:
            "Manage core business information associated with the payment account.",
        }),
        React.createElement(Form.make, {
          children: React.createElement(
            "div",
            {
              className:
                "flex flex-col md:flex-row justify-between bg-white p-7 gap-8 rounded-sm border border-jp-gray-border_gray",
            },
            React.createElement(
              "div",
              {
                className: "w-full flex flex-col gap-5 md:gap-10",
              },
              renderingArray.map(function (details, i) {
                return JsxPPXReactSupport.createElementWithKey(
                  i.toString(),
                  BusinessDetails$DetailsSection,
                  {
                    details: details,
                    formState: formState,
                    merchantInfo: merchantInfo,
                  },
                );
              }),
            ),
            formState
              ? React.createElement(
                  "div",
                  {
                    className: "!flex !items-start gap-4",
                  },
                  React.createElement(Button.make, {
                    text: "Cancel",
                    buttonType: /* Secondary */ 1,
                    buttonSize: /* Small */ 2,
                    onClick: function (param) {
                      Curry._1(setFormState, function (param) {
                        return /* Preview */ 0;
                      });
                    },
                    customButtonStyle: "rounded-sm",
                  }),
                  React.createElement(
                    "div",
                    {
                      className: "!flex !items-start",
                    },
                    React.createElement(FormRenderer.SubmitButton.make, {
                      text: buttonText,
                      disabledParamter: match$4[0],
                      customSumbitButtonStyle: "rounded-sm",
                      buttonType: /* Primary */ 0,
                      buttonSize: /* Small */ 2,
                    }),
                  ),
                )
              : React.createElement(ACLButton.make, {
                  text: "Edit",
                  buttonType: /* Primary */ 0,
                  buttonSize: /* Small */ 2,
                  onClick: function (param) {
                    Curry._1(setFormState, function (param) {
                      return /* Edit */ 1;
                    });
                  },
                  customButtonStyle: "rounded-sm",
                  access: userPermissionJson.merchantDetailsManage,
                }),
          ),
          onSubmit: onSubmit,
          initialValues: Caml_option.some(merchantInfo),
          validate: function (values) {
            return MerchantAccountUtils.validateMerchantAccountForm(
              values,
              [
                /* PrimaryPhone */ 2, /* PrimaryEmail */ 0, /* Website */ 4,
                /* SecondaryEmail */ 1, /* SecondaryPhone */ 3,
              ],
              setIsDisabled,
              merchantInfo,
              featureFlagDetails.isLiveMode,
            );
          },
        }),
      ),
    ),
    screenState: match$3[0],
  });
}

var make = BusinessDetails;

export { InfoOnlyView, DetailsSection, renderingArray, make };
/* Form Not a pure module */
