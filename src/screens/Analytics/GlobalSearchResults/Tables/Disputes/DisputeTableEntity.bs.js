// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../../../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../../../../entities/EntityType.bs.js";
import * as LogicUtils from "../../../../../utils/LogicUtils.bs.js";
import * as OrderEntity from "../../../../Order/OrderEntity.bs.js";
import * as HSwitchGlobalVars from "../../../../../utils/HSwitchGlobalVars.bs.js";
import * as HSwitchOrderUtils from "../../../../Order/HSwitchOrderUtils.bs.js";

var visibleColumns = [
  /* DisputeId */ 0, /* PaymentId */ 5, /* Connector */ 17,
  /* DisputeAmount */ 1, /* Currency */ 2, /* DisputeStatus */ 4,
];

function colMapper(col) {
  switch (col) {
    case /* DisputeId */ 0:
      return "dispute_id";
    case /* DisputeAmount */ 1:
      return "dispute_amount";
    case /* Currency */ 2:
      return "currency";
    case /* DisputeStage */ 3:
      return "dispute_stage";
    case /* DisputeStatus */ 4:
      return "dispute_status";
    case /* PaymentId */ 5:
      return "payment_id";
    case /* AttemptId */ 6:
      return "attempt_id";
    case /* MerchantId */ 7:
      return "merchant_id";
    case /* ConnectorStatus */ 8:
      return "connector_status";
    case /* ConnectorDisputeId */ 9:
      return "connector_dispute_id";
    case /* ConnectorReason */ 10:
      return "connector_reason";
    case /* ConnectorReasonCode */ 11:
      return "connector_reason_code";
    case /* ChallengeRequiredBy */ 12:
      return "challenge_required_by";
    case /* ConnectorCreatedAt */ 13:
      return "connector_created_at";
    case /* ConnectorUpdatedAt */ 14:
      return "connector_updated_at";
    case /* CreatedAt */ 15:
      return "created_at";
    case /* ModifiedAt */ 16:
      return "modified_at";
    case /* Connector */ 17:
      return "connector";
    case /* Evidence */ 18:
      return "evidence";
    case /* ProfileId */ 19:
      return "profile_id";
    case /* MerchantConnectorId */ 20:
      return "merchant_connector_id";
    case /* SignFlag */ 21:
      return "sign_flag";
    case /* Timestamp */ 22:
      return "timestamp";
  }
}

function tableItemToObjMapper(dict) {
  return {
    dispute_id: LogicUtils.getString(dict, "dispute_id", "NA"),
    dispute_amount: LogicUtils.getFloat(dict, "dispute_amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", "NA"),
    dispute_stage: LogicUtils.getString(dict, "dispute_stage", "NA"),
    dispute_status: LogicUtils.getString(dict, "dispute_status", "NA"),
    payment_id: LogicUtils.getString(dict, "payment_id", "NA"),
    attempt_id: LogicUtils.getString(dict, "attempt_id", "NA"),
    merchant_id: LogicUtils.getString(dict, "merchant_id", "NA"),
    connector_status: LogicUtils.getString(dict, "connector_status", "NA"),
    connector_dispute_id: LogicUtils.getString(
      dict,
      "connector_dispute_id",
      "NA",
    ),
    connector_reason: LogicUtils.getString(dict, "connector_reason", "NA"),
    connector_reason_code: LogicUtils.getInt(dict, "connector_reason_code", 0),
    challenge_required_by: LogicUtils.getInt(dict, "challenge_required_by", 0),
    connector_created_at: LogicUtils.getInt(dict, "connector_created_at", 0),
    connector_updated_at: LogicUtils.getInt(dict, "connector_updated_at", 0),
    created_at: LogicUtils.getInt(dict, "created_at", 0),
    modified_at: LogicUtils.getInt(dict, "modified_at", 0),
    connector: LogicUtils.getString(dict, "connector", "NA"),
    evidence: LogicUtils.getString(dict, "evidence", "NA"),
    profile_id: LogicUtils.getString(dict, "profile_id", "NA"),
    merchant_connector_id: LogicUtils.getString(
      dict,
      "merchant_connector_id",
      "NA",
    ),
    sign_flag: LogicUtils.getInt(dict, "sign_flag", 0),
    timestamp: LogicUtils.getString(dict, "timestamp", "NA"),
  };
}

function getObjects(json) {
  return LogicUtils.getArrayFromJson(json, []).map(function (item) {
    return tableItemToObjMapper(LogicUtils.getDictFromJsonObject(item));
  });
}

function getHeading(colType) {
  var key = colMapper(colType);
  switch (colType) {
    case /* DisputeId */ 0:
      return Table.makeHeaderInfo(
        key,
        "Dispute Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* DisputeAmount */ 1:
      return Table.makeHeaderInfo(
        key,
        "Dispute Amount",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Currency */ 2:
      return Table.makeHeaderInfo(
        key,
        "Currency",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* DisputeStage */ 3:
      return Table.makeHeaderInfo(
        key,
        "Dispute Stage",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* DisputeStatus */ 4:
      return Table.makeHeaderInfo(
        key,
        "Dispute Status",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentId */ 5:
      return Table.makeHeaderInfo(
        key,
        "Payment Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AttemptId */ 6:
      return Table.makeHeaderInfo(
        key,
        "Attempt Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* MerchantId */ 7:
      return Table.makeHeaderInfo(
        key,
        "Merchant Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorStatus */ 8:
      return Table.makeHeaderInfo(
        key,
        "Connector Status",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorDisputeId */ 9:
      return Table.makeHeaderInfo(
        key,
        "Connector Dispute Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorReason */ 10:
      return Table.makeHeaderInfo(
        key,
        "Connector Reason",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorReasonCode */ 11:
      return Table.makeHeaderInfo(
        key,
        "Connector Reason Code",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ChallengeRequiredBy */ 12:
      return Table.makeHeaderInfo(
        key,
        "Challenge Required By",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorCreatedAt */ 13:
      return Table.makeHeaderInfo(
        key,
        "Connector Created At",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorUpdatedAt */ 14:
      return Table.makeHeaderInfo(
        key,
        "Connector Updated At",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CreatedAt */ 15:
      return Table.makeHeaderInfo(
        key,
        "Created At",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ModifiedAt */ 16:
      return Table.makeHeaderInfo(
        key,
        "Modified At",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Connector */ 17:
      return Table.makeHeaderInfo(
        key,
        "Connector",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Evidence */ 18:
      return Table.makeHeaderInfo(
        key,
        "Evidence",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ProfileId */ 19:
      return Table.makeHeaderInfo(
        key,
        "Profile Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* MerchantConnectorId */ 20:
      return Table.makeHeaderInfo(
        key,
        "Merchant Connector Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* SignFlag */ 21:
      return Table.makeHeaderInfo(
        key,
        "Sign Flag",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Timestamp */ 22:
      return Table.makeHeaderInfo(
        key,
        "Timestamp",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCell(disputeObj, colType) {
  var disputeStatus = HSwitchOrderUtils.statusVariantMapper(
    disputeObj.dispute_status,
  );
  switch (colType) {
    case /* DisputeId */ 0:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.dispute_id,
      };
    case /* DisputeAmount */ 1:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (disputeObj.dispute_amount / 100.0).toString(),
          currency: disputeObj.currency,
        }),
        _1: "",
      };
    case /* Currency */ 2:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.currency,
      };
    case /* DisputeStage */ 3:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.dispute_stage,
      };
    case /* DisputeStatus */ 4:
      var tmp;
      switch (disputeStatus) {
        case /* Failed */ 1:
        case /* Cancelled */ 2:
          tmp = /* LabelRed */ 1;
          break;
        case /* Succeeded */ 0:
        case /* PartiallyCaptured */ 7:
          tmp = /* LabelGreen */ 0;
          break;
        case /* Processing */ 3:
        case /* RequiresCustomerAction */ 4:
        case /* RequiresPaymentMethod */ 5:
        case /* RequiresConfirmation */ 6:
        case /* None */ 8:
          tmp = /* LabelLightBlue */ 9;
          break;
      }
      return {
        TAG: /* Label */ 0,
        _0: {
          title: disputeObj.dispute_status.toUpperCase(),
          color: tmp,
        },
      };
    case /* PaymentId */ 5:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.payment_id,
      };
    case /* AttemptId */ 6:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.attempt_id,
      };
    case /* MerchantId */ 7:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.merchant_id,
      };
    case /* ConnectorStatus */ 8:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.connector_status,
      };
    case /* ConnectorDisputeId */ 9:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.connector_dispute_id,
      };
    case /* ConnectorReason */ 10:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.connector_reason,
      };
    case /* ConnectorReasonCode */ 11:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.connector_reason_code.toString(),
      };
    case /* ChallengeRequiredBy */ 12:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.challenge_required_by.toString(),
      };
    case /* ConnectorCreatedAt */ 13:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.connector_created_at.toString(),
      };
    case /* ConnectorUpdatedAt */ 14:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.connector_updated_at.toString(),
      };
    case /* CreatedAt */ 15:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.created_at.toString(),
      };
    case /* ModifiedAt */ 16:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.modified_at.toString(),
      };
    case /* Connector */ 17:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.connector,
      };
    case /* Evidence */ 18:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.evidence,
      };
    case /* ProfileId */ 19:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.profile_id,
      };
    case /* MerchantConnectorId */ 20:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.merchant_connector_id,
      };
    case /* SignFlag */ 21:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.sign_flag.toString(),
      };
    case /* Timestamp */ 22:
      return {
        TAG: /* Text */ 1,
        _0: disputeObj.timestamp,
      };
  }
}

var tableEntity = EntityType.makeEntity(
  "",
  getObjects,
  visibleColumns,
  visibleColumns,
  getHeading,
  getCell,
  "queryData",
  undefined,
  undefined,
  undefined,
  undefined,
  function (dispute) {
    return HSwitchGlobalVars.appendDashboardPath(
      "/disputes/" + dispute.dispute_id + "",
    );
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  [],
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  visibleColumns,
  colMapper,
  tableItemToObjMapper,
  getObjects,
  getHeading,
  getCell,
  tableEntity,
};
/* tableEntity Not a pure module */
