// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../../../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../../../../entities/EntityType.bs.js";
import * as LogicUtils from "../../../../../utils/LogicUtils.bs.js";
import * as OrderEntity from "../../../../Order/OrderEntity.bs.js";
import * as HSwitchGlobalVars from "../../../../../utils/HSwitchGlobalVars.bs.js";
import * as HSwitchOrderUtils from "../../../../Order/HSwitchOrderUtils.bs.js";

var visibleColumns = [
  /* RefundId */ 1, /* PaymentId */ 2, /* Connector */ 5, /* TotalAmount */ 9,
  /* Currency */ 10, /* Refundstatus */ 12,
];

function colMapper(col) {
  switch (col) {
    case /* InternalReferenceId */ 0:
      return "internal_reference_id";
    case /* RefundId */ 1:
      return "refund_id";
    case /* PaymentId */ 2:
      return "payment_id";
    case /* MerchantId */ 3:
      return "merchant_id";
    case /* ConnectorTransactionId */ 4:
      return "connector_transaction_id";
    case /* Connector */ 5:
      return "connector";
    case /* ConnectorRefundId */ 6:
      return "connector_refund_id";
    case /* ExternalReferenceId */ 7:
      return "external_reference_id";
    case /* RefundType */ 8:
      return "refund_type";
    case /* TotalAmount */ 9:
      return "total_amount";
    case /* Currency */ 10:
      return "currency";
    case /* RefundAmount */ 11:
      return "refund_amount";
    case /* Refundstatus */ 12:
      return "refund_status";
    case /* SentToGateway */ 13:
      return "sent_to_gateway";
    case /* RefundErrorMessage */ 14:
      return "refund_error_message";
    case /* RefundArn */ 15:
      return "refund_arn";
    case /* CreatedAt */ 16:
      return "created_at";
    case /* ModifiedAt */ 17:
      return "modified_at";
    case /* Description */ 18:
      return "description";
    case /* AttemptId */ 19:
      return "attempt_id";
    case /* RefundReason */ 20:
      return "refund_reason";
    case /* RefundErrorCode */ 21:
      return "refund_error_code";
    case /* SignFlag */ 22:
      return "sign_flag";
    case /* Timestamp */ 23:
      return "timestamp";
  }
}

function tableItemToObjMapper(dict) {
  return {
    internal_reference_id: LogicUtils.getString(
      dict,
      "internal_reference_id",
      "NA",
    ),
    refund_id: LogicUtils.getString(dict, "refund_id", "NA"),
    payment_id: LogicUtils.getString(dict, "payment_id", "NA"),
    merchant_id: LogicUtils.getString(dict, "merchant_id", "NA"),
    connector_transaction_id: LogicUtils.getString(
      dict,
      "connector_transaction_id",
      "NA",
    ),
    connector: LogicUtils.getString(dict, "connector", "NA"),
    connector_refund_id: LogicUtils.getString(
      dict,
      "connector_refund_id",
      "NA",
    ),
    external_reference_id: LogicUtils.getString(
      dict,
      "external_reference_id",
      "NA",
    ),
    refund_type: LogicUtils.getString(dict, "refund_type", "NA"),
    total_amount: LogicUtils.getFloat(dict, "total_amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", "NA"),
    refund_amount: LogicUtils.getFloat(dict, "refund_amount", 0.0),
    refund_status: LogicUtils.getString(dict, "refund_status", "NA"),
    sent_to_gateway: LogicUtils.getBool(dict, "sent_to_gateway", false),
    refund_error_message: LogicUtils.getString(
      dict,
      "refund_error_message",
      "NA",
    ),
    refund_arn: LogicUtils.getString(dict, "refund_arn", "NA"),
    created_at: LogicUtils.getInt(dict, "created_at", 0),
    modified_at: LogicUtils.getInt(dict, "modified_at", 0),
    description: LogicUtils.getString(dict, "description", "NA"),
    attempt_id: LogicUtils.getString(dict, "attempt_id", "NA"),
    refund_reason: LogicUtils.getString(dict, "refund_reason", "NA"),
    refund_error_code: LogicUtils.getString(dict, "refund_error_code", "NA"),
    sign_flag: LogicUtils.getInt(dict, "sign_flag", 0),
    timestamp: LogicUtils.getString(dict, "timestamp", "NA"),
  };
}

function getObjects(json) {
  return LogicUtils.getArrayFromJson(json, []).map(function (item) {
    return tableItemToObjMapper(LogicUtils.getDictFromJsonObject(item));
  });
}

function getHeading(colType) {
  var key = colMapper(colType);
  switch (colType) {
    case /* InternalReferenceId */ 0:
      return Table.makeHeaderInfo(
        key,
        "Internal Reference Id ",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundId */ 1:
      return Table.makeHeaderInfo(
        key,
        "Refund Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentId */ 2:
      return Table.makeHeaderInfo(
        key,
        "Payment Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* MerchantId */ 3:
      return Table.makeHeaderInfo(
        key,
        "Merchant Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorTransactionId */ 4:
      return Table.makeHeaderInfo(
        key,
        "Connector Transaction Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Connector */ 5:
      return Table.makeHeaderInfo(
        key,
        "Connector",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorRefundId */ 6:
      return Table.makeHeaderInfo(
        key,
        "Connector Refund Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ExternalReferenceId */ 7:
      return Table.makeHeaderInfo(
        key,
        "External Reference Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundType */ 8:
      return Table.makeHeaderInfo(
        key,
        "Refund Type",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* TotalAmount */ 9:
      return Table.makeHeaderInfo(
        key,
        "Total Amount",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Currency */ 10:
      return Table.makeHeaderInfo(
        key,
        "Currency",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundAmount */ 11:
      return Table.makeHeaderInfo(
        key,
        "Refund Amount",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Refundstatus */ 12:
      return Table.makeHeaderInfo(
        key,
        "Refund Status",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* SentToGateway */ 13:
      return Table.makeHeaderInfo(
        key,
        "Sent To Gateway",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundErrorMessage */ 14:
      return Table.makeHeaderInfo(
        key,
        "Refund Error Message",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundArn */ 15:
      return Table.makeHeaderInfo(
        key,
        "Refund Arn",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CreatedAt */ 16:
      return Table.makeHeaderInfo(
        key,
        "Created At",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ModifiedAt */ 17:
      return Table.makeHeaderInfo(
        key,
        "Modified At",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Description */ 18:
      return Table.makeHeaderInfo(
        key,
        "Description",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AttemptId */ 19:
      return Table.makeHeaderInfo(
        key,
        "Attempt Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundReason */ 20:
      return Table.makeHeaderInfo(
        key,
        "Refund Reason",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* RefundErrorCode */ 21:
      return Table.makeHeaderInfo(
        key,
        "Refund Error Code",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* SignFlag */ 22:
      return Table.makeHeaderInfo(
        key,
        "Sign Flag",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Timestamp */ 23:
      return Table.makeHeaderInfo(
        key,
        "Timestamp",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCell(refundsObj, colType) {
  switch (colType) {
    case /* InternalReferenceId */ 0:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.internal_reference_id,
      };
    case /* RefundId */ 1:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.refund_id,
      };
    case /* PaymentId */ 2:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.payment_id,
      };
    case /* MerchantId */ 3:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.merchant_id,
      };
    case /* ConnectorTransactionId */ 4:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.connector_transaction_id,
      };
    case /* Connector */ 5:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.connector,
      };
    case /* ConnectorRefundId */ 6:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.connector_refund_id,
      };
    case /* ExternalReferenceId */ 7:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.external_reference_id,
      };
    case /* RefundType */ 8:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.refund_type,
      };
    case /* TotalAmount */ 9:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (refundsObj.total_amount / 100.0).toString(),
          currency: refundsObj.currency,
        }),
        _1: "",
      };
    case /* Currency */ 10:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.currency,
      };
    case /* RefundAmount */ 11:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (refundsObj.refund_amount / 100.0).toString(),
          currency: refundsObj.currency,
        }),
        _1: "",
      };
    case /* Refundstatus */ 12:
      var refundStatus = HSwitchOrderUtils.refundStatusVariantMapper(
        refundsObj.refund_status,
      );
      var tmp;
      switch (refundStatus) {
        case /* Success */ 0:
          tmp = /* LabelGreen */ 0;
          break;
        case /* Pending */ 1:
          tmp = /* LabelYellow */ 5;
          break;
        case /* Failure */ 2:
          tmp = /* LabelRed */ 1;
          break;
        case /* None */ 3:
          tmp = /* LabelLightBlue */ 9;
          break;
      }
      return {
        TAG: /* Label */ 0,
        _0: {
          title: refundsObj.refund_status.toUpperCase(),
          color: tmp,
        },
      };
    case /* SentToGateway */ 13:
      return {
        TAG: /* Text */ 1,
        _0: LogicUtils.getStringFromBool(refundsObj.sent_to_gateway),
      };
    case /* RefundErrorMessage */ 14:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.refund_error_message,
      };
    case /* RefundArn */ 15:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.refund_arn,
      };
    case /* CreatedAt */ 16:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.created_at.toString(),
      };
    case /* ModifiedAt */ 17:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.modified_at.toString(),
      };
    case /* Description */ 18:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.description,
      };
    case /* AttemptId */ 19:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.attempt_id,
      };
    case /* RefundReason */ 20:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.refund_reason,
      };
    case /* RefundErrorCode */ 21:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.refund_error_code,
      };
    case /* SignFlag */ 22:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.sign_flag.toString(),
      };
    case /* Timestamp */ 23:
      return {
        TAG: /* Text */ 1,
        _0: refundsObj.timestamp,
      };
  }
}

var tableEntity = EntityType.makeEntity(
  "",
  getObjects,
  visibleColumns,
  visibleColumns,
  getHeading,
  getCell,
  "queryData",
  undefined,
  undefined,
  undefined,
  undefined,
  function (refund) {
    return HSwitchGlobalVars.appendDashboardPath(
      "/refunds/" + refund.refund_id + "",
    );
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  [],
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  visibleColumns,
  colMapper,
  tableItemToObjMapper,
  getObjects,
  getHeading,
  getCell,
  tableEntity,
};
/* tableEntity Not a pure module */
