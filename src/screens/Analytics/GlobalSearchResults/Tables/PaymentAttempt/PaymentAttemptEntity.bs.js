// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../../../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../../../../entities/EntityType.bs.js";
import * as LogicUtils from "../../../../../utils/LogicUtils.bs.js";
import * as OrderEntity from "../../../../Order/OrderEntity.bs.js";
import * as HSwitchGlobalVars from "../../../../../utils/HSwitchGlobalVars.bs.js";
import * as HSwitchOrderUtils from "../../../../Order/HSwitchOrderUtils.bs.js";

var visibleColumns = [
  /* PaymentId */ 0, /* MerchantId */ 1, /* Status */ 2, /* Amount */ 3,
  /* Currency */ 4, /* Connector */ 28, /* PaymentMethod */ 34,
  /* PaymentMethodType */ 42,
];

function colMapper(col) {
  switch (col) {
    case /* PaymentId */ 0:
      return "payment_id";
    case /* MerchantId */ 1:
      return "merchant_id";
    case /* Status */ 2:
      return "status";
    case /* Amount */ 3:
      return "amount";
    case /* Currency */ 4:
      return "currency";
    case /* AmountCaptured */ 5:
      return "amount_captured";
    case /* CustomerId */ 6:
      return "customer_id";
    case /* Description */ 7:
      return "description";
    case /* ReturnUrl */ 8:
      return "return_url";
    case /* ConnectorId */ 9:
      return "connector_id";
    case /* StatementDescriptorName */ 10:
      return "statement_descriptor_name";
    case /* StatementDescriptorSuffix */ 11:
      return "statement_descriptor_suffix";
    case /* CreatedAt */ 12:
      return "created_at";
    case /* ModifiedAt */ 13:
      return "modified_at";
    case /* LastSynced */ 14:
      return "last_synced";
    case /* SetupFutureUsage */ 15:
      return "setup_future_usage";
    case /* OffSession */ 16:
      return "off_session";
    case /* ClientSecret */ 17:
      return "client_secret";
    case /* ActiveAttemptId */ 18:
      return "active_attempt_id";
    case /* BusinessCountry */ 19:
      return "business_country";
    case /* BusinessLabel */ 20:
      return "business_label";
    case /* AttemptCount */ 21:
      return "attempt_count";
    case /* SignFlag */ 22:
      return "sign_flag";
    case /* Timestamp */ 23:
      return "@timestamp";
    case /* Confirm */ 24:
      return "confirm";
    case /* MultipleCaptureCount */ 25:
      return "multiple_capture_count";
    case /* AttemptId */ 26:
      return "attempt_id";
    case /* SaveToLocker */ 27:
      return "save_to_locker";
    case /* Connector */ 28:
      return "connector";
    case /* ErrorMessage */ 29:
      return "error_message";
    case /* OfferAmount */ 30:
      return "offer_amount";
    case /* SurchargeAmount */ 31:
      return "surcharge_amount";
    case /* TaxAmount */ 32:
      return "tax_amount";
    case /* PaymentMethodId */ 33:
      return "payment_method_id";
    case /* PaymentMethod */ 34:
      return "payment_method";
    case /* ConnectorTransactionId */ 35:
      return "connector_transaction_id";
    case /* CaptureMethod */ 36:
      return "capture_method";
    case /* CaptureOn */ 37:
      return "capture_on";
    case /* AuthenticationType */ 38:
      return "authentication_type";
    case /* CancellationReason */ 39:
      return "cancellation_reason";
    case /* AmountToCapture */ 40:
      return "amount_to_capture";
    case /* MandateId */ 41:
      return "mandate_id";
    case /* PaymentMethodType */ 42:
      return "payment_method_type";
    case /* PaymentExperience */ 43:
      return "payment_experience";
    case /* ErrorReason */ 44:
      return "error_reason";
    case /* AmountCapturable */ 45:
      return "amount_capturable";
    case /* MerchantConnectorId */ 46:
      return "merchant_connector_id";
    case /* NetAmount */ 47:
      return "net_amount";
    case /* UnifiedCode */ 48:
      return "unified_code";
    case /* UnifiedMessage */ 49:
      return "unified_message";
  }
}

function tableItemToObjMapper(dict) {
  return {
    payment_id: LogicUtils.getString(dict, "payment_id", "NA"),
    merchant_id: LogicUtils.getString(dict, "merchant_id", "NA"),
    status: LogicUtils.getString(dict, "status", "NA"),
    amount: LogicUtils.getFloat(dict, "amount", 0.0),
    currency: LogicUtils.getString(dict, "currency", "NA"),
    amount_captured: LogicUtils.getFloat(dict, "amount_captured", 0.0),
    customer_id: LogicUtils.getString(dict, "customer_id", "NA"),
    description: LogicUtils.getString(dict, "description", "NA"),
    return_url: LogicUtils.getString(dict, "return_url", "NA"),
    connector_id: LogicUtils.getString(dict, "connector_id", "NA"),
    statement_descriptor_name: LogicUtils.getString(
      dict,
      "statement_descriptor_name",
      "NA",
    ),
    statement_descriptor_suffix: LogicUtils.getString(
      dict,
      "statement_descriptor_suffix",
      "NA",
    ),
    created_at: LogicUtils.getInt(dict, "created_at", 0),
    modified_at: LogicUtils.getInt(dict, "modified_at", 0),
    last_synced: LogicUtils.getInt(dict, "last_synced", 0),
    setup_future_usage: LogicUtils.getString(dict, "setup_future_usage", "NA"),
    off_session: LogicUtils.getString(dict, "off_session", "NA"),
    client_secret: LogicUtils.getString(dict, "client_secret", "NA"),
    active_attempt_id: LogicUtils.getString(dict, "active_attempt_id", "NA"),
    business_country: LogicUtils.getString(dict, "business_country", "NA"),
    business_label: LogicUtils.getString(dict, "business_label", "NA"),
    attempt_count: LogicUtils.getInt(dict, "attempt_count", 0),
    sign_flag: LogicUtils.getInt(dict, "sign_flag", 0),
    timestamp: LogicUtils.getString(dict, "@timestamp", "NA"),
    confirm: LogicUtils.getBool(dict, "confirm", false),
    multiple_capture_count: LogicUtils.getInt(
      dict,
      "multiple_capture_count",
      0,
    ),
    attempt_id: LogicUtils.getString(dict, "attempt_id", "NA"),
    save_to_locker: LogicUtils.getString(dict, "save_to_locker", "NA"),
    connector: LogicUtils.getString(dict, "connector", "NA"),
    error_message: LogicUtils.getString(dict, "error_message", "NA"),
    offer_amount: LogicUtils.getString(dict, "offer_amount", "NA"),
    surcharge_amount: LogicUtils.getString(dict, "surcharge_amount", "NA"),
    tax_amount: LogicUtils.getString(dict, "tax_amount", "NA"),
    payment_method_id: LogicUtils.getString(dict, "payment_method_id", "NA"),
    payment_method: LogicUtils.getString(dict, "payment_method", "NA"),
    connector_transaction_id: LogicUtils.getString(
      dict,
      "connector_transaction_id",
      "NA",
    ),
    capture_method: LogicUtils.getString(dict, "capture_method", "NA"),
    capture_on: LogicUtils.getString(dict, "capture_on", "NA"),
    authentication_type: LogicUtils.getString(
      dict,
      "authentication_type",
      "NA",
    ),
    cancellation_reason: LogicUtils.getString(
      dict,
      "cancellation_reason",
      "NA",
    ),
    amount_to_capture: LogicUtils.getString(dict, "amount_to_capture", "NA"),
    mandate_id: LogicUtils.getString(dict, "merchant_id", "NA"),
    payment_method_type: LogicUtils.getString(
      dict,
      "payment_method_type",
      "NA",
    ),
    payment_experience: LogicUtils.getString(dict, "payment_experience", "NA"),
    error_reason: LogicUtils.getString(dict, "error_reason", "NA"),
    amount_capturable: LogicUtils.getString(dict, "amount_capturable", "NA"),
    merchant_connector_id: LogicUtils.getString(
      dict,
      "merchant_connector_id",
      "NA",
    ),
    net_amount: LogicUtils.getString(dict, "net_amount", "NA"),
    unified_code: LogicUtils.getString(dict, "unified_code", "NA"),
    unified_message: LogicUtils.getString(dict, "unified_message", "NA"),
  };
}

function getObjects(json) {
  return LogicUtils.getArrayFromJson(json, []).map(function (item) {
    return tableItemToObjMapper(LogicUtils.getDictFromJsonObject(item));
  });
}

function getHeading(colType) {
  var key = colMapper(colType);
  switch (colType) {
    case /* PaymentId */ 0:
      return Table.makeHeaderInfo(
        key,
        "Payment Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* MerchantId */ 1:
      return Table.makeHeaderInfo(
        key,
        "Merchant Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Status */ 2:
      return Table.makeHeaderInfo(
        key,
        "Status",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Amount */ 3:
      return Table.makeHeaderInfo(
        key,
        "Amount",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Currency */ 4:
      return Table.makeHeaderInfo(
        key,
        "Currency",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AmountCaptured */ 5:
      return Table.makeHeaderInfo(
        key,
        "Amount Captured",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CustomerId */ 6:
      return Table.makeHeaderInfo(
        key,
        "Customer Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Description */ 7:
      return Table.makeHeaderInfo(
        key,
        "Description",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ReturnUrl */ 8:
      return Table.makeHeaderInfo(
        key,
        "Return Url",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorId */ 9:
      return Table.makeHeaderInfo(
        key,
        "Connector Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* StatementDescriptorName */ 10:
      return Table.makeHeaderInfo(
        key,
        "Statement Descriptor Name",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* StatementDescriptorSuffix */ 11:
      return Table.makeHeaderInfo(
        key,
        "Statement Descriptor Suffix",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CreatedAt */ 12:
      return Table.makeHeaderInfo(
        key,
        "Created At",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ModifiedAt */ 13:
      return Table.makeHeaderInfo(
        key,
        "Modified At",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* LastSynced */ 14:
      return Table.makeHeaderInfo(
        key,
        "Last Synced",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* SetupFutureUsage */ 15:
      return Table.makeHeaderInfo(
        key,
        "Setup Future Usage",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* OffSession */ 16:
      return Table.makeHeaderInfo(
        key,
        "Off Session",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ClientSecret */ 17:
      return Table.makeHeaderInfo(
        key,
        "Client Secret",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ActiveAttemptId */ 18:
      return Table.makeHeaderInfo(
        key,
        "Active Attempt Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* BusinessCountry */ 19:
      return Table.makeHeaderInfo(
        key,
        "Business Country",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* BusinessLabel */ 20:
      return Table.makeHeaderInfo(
        key,
        "Business Label",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AttemptCount */ 21:
      return Table.makeHeaderInfo(
        key,
        "Attempt Count",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* SignFlag */ 22:
      return Table.makeHeaderInfo(
        key,
        "Sign Flag",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Timestamp */ 23:
      return Table.makeHeaderInfo(
        key,
        "Time Stamp",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Confirm */ 24:
      return Table.makeHeaderInfo(
        key,
        "Confirm",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* MultipleCaptureCount */ 25:
      return Table.makeHeaderInfo(
        key,
        "Multiple Capture Count",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AttemptId */ 26:
      return Table.makeHeaderInfo(
        key,
        "Attempt Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* SaveToLocker */ 27:
      return Table.makeHeaderInfo(
        key,
        "Save To Locker",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Connector */ 28:
      return Table.makeHeaderInfo(
        key,
        "Connector",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ErrorMessage */ 29:
      return Table.makeHeaderInfo(
        key,
        "Error Message",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* OfferAmount */ 30:
      return Table.makeHeaderInfo(
        key,
        "Offer Amount",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* SurchargeAmount */ 31:
      return Table.makeHeaderInfo(
        key,
        "Surcharge Amount",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* TaxAmount */ 32:
      return Table.makeHeaderInfo(
        key,
        "Tax Amount",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentMethodId */ 33:
      return Table.makeHeaderInfo(
        key,
        "Payment Method Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentMethod */ 34:
      return Table.makeHeaderInfo(
        key,
        "Payment Method",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ConnectorTransactionId */ 35:
      return Table.makeHeaderInfo(
        key,
        "Connector Transaction Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CaptureMethod */ 36:
      return Table.makeHeaderInfo(
        key,
        "Capture Method",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CaptureOn */ 37:
      return Table.makeHeaderInfo(
        key,
        "Capture On",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AuthenticationType */ 38:
      return Table.makeHeaderInfo(
        key,
        "Authentication Type",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* CancellationReason */ 39:
      return Table.makeHeaderInfo(
        key,
        "Cancellation Reason",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AmountToCapture */ 40:
      return Table.makeHeaderInfo(
        key,
        "Amount To Capture",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* MandateId */ 41:
      return Table.makeHeaderInfo(
        key,
        "Mandate Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentMethodType */ 42:
      return Table.makeHeaderInfo(
        key,
        "Payment Method Type",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* PaymentExperience */ 43:
      return Table.makeHeaderInfo(
        key,
        "Payment Experience",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* ErrorReason */ 44:
      return Table.makeHeaderInfo(
        key,
        "Error Reason",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* AmountCapturable */ 45:
      return Table.makeHeaderInfo(
        key,
        "Amount Capturable",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* MerchantConnectorId */ 46:
      return Table.makeHeaderInfo(
        key,
        "Merchant Connector Id",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* NetAmount */ 47:
      return Table.makeHeaderInfo(
        key,
        "Net Amount",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* UnifiedCode */ 48:
      return Table.makeHeaderInfo(
        key,
        "Unified Code",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* UnifiedMessage */ 49:
      return Table.makeHeaderInfo(
        key,
        "Unified Message",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCell(paymentObj, colType) {
  switch (colType) {
    case /* PaymentId */ 0:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.payment_id,
      };
    case /* MerchantId */ 1:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.merchant_id,
      };
    case /* Status */ 2:
      var orderStatus = HSwitchOrderUtils.paymentAttemptStatusVariantMapper(
        paymentObj.status,
      );
      return {
        TAG: /* Label */ 0,
        _0: {
          title: paymentObj.status.toUpperCase(),
          color:
            orderStatus === "PENDING" ||
            orderStatus === "AUTHENTICATION_PENDING" ||
            orderStatus === "VOID_INITIATED" ||
            orderStatus === "CAPTURE_INITIATED" ||
            orderStatus === "AUTHORIZING"
              ? /* LabelYellow */ 5
              : orderStatus === "AUTHORIZATION_FAILED" ||
                  orderStatus === "FAILURE" ||
                  orderStatus === "VOID_FAILED" ||
                  orderStatus === "AUTHENTICATION_FAILED" ||
                  orderStatus === "CAPTURE_FAILED" ||
                  orderStatus === "ROUTER_DECLINED"
                ? /* LabelRed */ 1
                : orderStatus === "PARTIAL_CHARGED" ||
                    orderStatus === "AUTO_REFUNDED" ||
                    orderStatus === "COD_INITIATED" ||
                    orderStatus === "CHARGED"
                  ? /* LabelGreen */ 0
                  : /* LabelLightBlue */ 9,
        },
      };
    case /* Amount */ 3:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (paymentObj.amount / 100.0).toString(),
          currency: paymentObj.currency,
        }),
        _1: "",
      };
    case /* Currency */ 4:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.currency,
      };
    case /* AmountCaptured */ 5:
      return {
        TAG: /* CustomCell */ 10,
        _0: React.createElement(OrderEntity.CurrencyCell.make, {
          amount: (paymentObj.amount_captured / 100.0).toString(),
          currency: paymentObj.currency,
        }),
        _1: "",
      };
    case /* CustomerId */ 6:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.customer_id,
      };
    case /* Description */ 7:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.description,
      };
    case /* ReturnUrl */ 8:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.return_url,
      };
    case /* ConnectorId */ 9:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.connector_id,
      };
    case /* StatementDescriptorName */ 10:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.statement_descriptor_name,
      };
    case /* StatementDescriptorSuffix */ 11:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.statement_descriptor_suffix,
      };
    case /* CreatedAt */ 12:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.created_at.toString(),
      };
    case /* ModifiedAt */ 13:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.modified_at.toString(),
      };
    case /* LastSynced */ 14:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.last_synced.toString(),
      };
    case /* SetupFutureUsage */ 15:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.setup_future_usage,
      };
    case /* OffSession */ 16:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.off_session,
      };
    case /* ClientSecret */ 17:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.client_secret,
      };
    case /* ActiveAttemptId */ 18:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.active_attempt_id,
      };
    case /* BusinessCountry */ 19:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.business_country,
      };
    case /* BusinessLabel */ 20:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.business_label,
      };
    case /* AttemptCount */ 21:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.attempt_count.toString(),
      };
    case /* SignFlag */ 22:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.sign_flag.toString(),
      };
    case /* Timestamp */ 23:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.timestamp,
      };
    case /* Confirm */ 24:
      return {
        TAG: /* Text */ 1,
        _0: LogicUtils.getStringFromBool(paymentObj.confirm),
      };
    case /* MultipleCaptureCount */ 25:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.multiple_capture_count.toString(),
      };
    case /* AttemptId */ 26:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.attempt_id,
      };
    case /* SaveToLocker */ 27:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.save_to_locker,
      };
    case /* Connector */ 28:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.connector,
      };
    case /* ErrorMessage */ 29:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.error_message,
      };
    case /* OfferAmount */ 30:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.offer_amount,
      };
    case /* SurchargeAmount */ 31:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.surcharge_amount,
      };
    case /* TaxAmount */ 32:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.tax_amount,
      };
    case /* PaymentMethodId */ 33:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.payment_method_id,
      };
    case /* PaymentMethod */ 34:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.payment_method,
      };
    case /* ConnectorTransactionId */ 35:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.connector_transaction_id,
      };
    case /* CaptureMethod */ 36:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.capture_method,
      };
    case /* CaptureOn */ 37:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.capture_on,
      };
    case /* AuthenticationType */ 38:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.authentication_type,
      };
    case /* CancellationReason */ 39:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.cancellation_reason,
      };
    case /* AmountToCapture */ 40:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.amount_to_capture,
      };
    case /* MandateId */ 41:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.mandate_id,
      };
    case /* PaymentMethodType */ 42:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.payment_method_type,
      };
    case /* PaymentExperience */ 43:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.payment_experience,
      };
    case /* ErrorReason */ 44:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.error_reason,
      };
    case /* AmountCapturable */ 45:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.amount_capturable,
      };
    case /* MerchantConnectorId */ 46:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.merchant_connector_id,
      };
    case /* NetAmount */ 47:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.net_amount,
      };
    case /* UnifiedCode */ 48:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.unified_code,
      };
    case /* UnifiedMessage */ 49:
      return {
        TAG: /* Text */ 1,
        _0: paymentObj.unified_message,
      };
  }
}

var tableEntity = EntityType.makeEntity(
  "",
  getObjects,
  visibleColumns,
  visibleColumns,
  getHeading,
  getCell,
  "queryData",
  undefined,
  undefined,
  undefined,
  undefined,
  function (order) {
    return HSwitchGlobalVars.appendDashboardPath(
      "/payments/" + order.payment_id + "",
    );
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  [],
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

export {
  visibleColumns,
  colMapper,
  tableItemToObjMapper,
  getObjects,
  getHeading,
  getCell,
  tableEntity,
};
/* tableEntity Not a pure module */
