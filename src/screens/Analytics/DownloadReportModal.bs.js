// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as ToastState from "../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as TimeZoneHook from "../../hooks/TimeZoneHook.bs.js";

function DownloadReportModal(props) {
  var entityName = props.entityName;
  var setReportModal = props.setReportModal;
  var showToast = ToastState.useShowToast(undefined);
  var updateDetails = APIUtils.useUpdateMethod(false, undefined);
  var downloadReport = async function (body) {
    try {
      var url = APIUtils.getURL(
        entityName,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._1(setReportModal, function (param) {
        return false;
      });
      Curry._8(
        showToast,
        "Email Sent",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {
      Curry._8(
        showToast,
        "Something went wrong. Please try again.",
        /* ToastError */ 0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    }
    return null;
  };
  var onSubmit = function (values, param) {
    var dateCreatedDict = LogicUtils.getDictFromJsonObject(
      LogicUtils.getJsonObjectFromDict(
        LogicUtils.getDictFromJsonObject(
          LogicUtils.getJsonObjectFromDict(
            LogicUtils.getDictFromJsonObject(values),
            "filters",
          ),
        ),
        "dateCreated",
      ),
    );
    var gte = LogicUtils.getJsonObjectFromDict(dateCreatedDict, "gte");
    var lte = LogicUtils.getJsonObjectFromDict(dateCreatedDict, "lte");
    return downloadReport({
      timeRange: {
        startTime: gte,
        endTime: lte,
      },
      dimensions: [],
    });
  };
  var getPreviousDate = function (param) {
    var currentDate = new Date().getTime();
    var previousDateMilliseconds = currentDate - 86400000.0;
    var previousDate = new Date(previousDateMilliseconds).toISOString();
    return TimeZoneHook.formattedISOString(
      previousDate,
      "YYYY-MM-DDTHH:mm:ss[Z]",
    );
  };
  var initialValues = {
    filters: {
      dateCreated: {
        gte: getPreviousDate(undefined),
        lte: new Date(Date.now()).toISOString(),
      },
    },
  };
  var category;
  if (entityName >= 31) {
    switch (entityName) {
      case /* PAYMENT_REPORT */ 31:
        category = "Payment";
        break;
      case /* REFUND_REPORT */ 32:
        category = "Refund";
        break;
      case /* DISPUTE_REPORT */ 33:
        category = "Dispute";
        break;
      case /* PAYPAL_ONBOARDING */ 34:
      case /* SURCHARGE */ 35:
      case /* CUSTOMERS */ 36:
      case /* ACCEPT_DISPUTE */ 37:
      case /* DISPUTES_ATTACH_EVIDENCE */ 38:
      case /* PAYOUT_DEFAULT_FALLBACK */ 39:
      case /* PAYOUT_ROUTING */ 40:
      case /* GLOBAL_SEARCH */ 41:
      case /* PAYMENT_METHOD_CONFIG */ 42:
        category = "";
        break;
    }
  } else {
    category = "";
  }
  return React.createElement(Modal.make, {
    showModal: props.reportModal,
    setShowModal: setReportModal,
    children: React.createElement(
      Form.make,
      {
        children: null,
        onSubmit: onSubmit,
        initialValues: Caml_option.some(initialValues),
      },
      React.createElement(FormRenderer.FieldRenderer.make, {
        field: FormRenderer.makeMultiInputFieldInfo(
          "Date Range",
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          true,
          InputFields.dateRangeField(
            "filters.dateCreated.gte",
            "filters.dateCreated.lte",
            "YYYY-MM-DDTHH:mm:ss[Z]",
            false,
            true,
            false,
            [
              /* Today */ 0, /* Yesterday */ 2, /* ThisMonth */ 3,
              /* LastMonth */ 4,
            ],
            false,
            2,
            400,
            undefined,
            "filters.dateCreated.opt",
            undefined,
            undefined,
            undefined,
            undefined,
            false,
            undefined,
          ),
          undefined,
          [],
          undefined,
        ),
      }),
      React.createElement(FormRenderer.SubmitButton.make, {
        text: "Generate",
        customSumbitButtonStyle: "mt-10 ml-3",
      }),
    ),
    modalHeading: "Generate " + category + " Reports",
    modalClass: "w-1/4 m-auto",
    modalHeadingDescriptionElement: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "text-md font-medium leading-7 opacity-50 mt-1 w-full",
        },
        "The generated reports will be emailed to you.",
      ),
    ),
  });
}

var make = DownloadReportModal;

export { make };
/* Form Not a pure module */
