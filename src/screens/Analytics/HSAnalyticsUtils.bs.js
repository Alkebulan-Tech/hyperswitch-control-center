// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../../components/Button.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as SelectBox from "../../components/SelectBox.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as InputFields from "../../components/InputFields.bs.js";
import * as NoDataFound from "../../components/NoDataFound.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "../../components/form/FormRenderer.bs.js";
import * as AnalyticsUtils from "../../entities/analytics/AnalyticsUtils.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function setPrecision(num, digitOpt, param) {
  var digit = digitOpt !== undefined ? digitOpt : 2;
  return Number(num.toFixed(digit));
}

function getQueryData(json) {
  return LogicUtils.getArrayFromDict(
    LogicUtils.getDictFromJsonObject(json),
    "queryData",
    [],
  );
}

function options(json) {
  return Core__Option.getOr(
    Core__Option.flatMap(
      LogicUtils.getOptionalArrayFromDict(
        LogicUtils.getDictFromJsonObject(json),
        "queryData",
      ),
      function (arr) {
        return arr.map(function (dimensionObject) {
          var dimensionObject$1 =
            LogicUtils.getDictFromJsonObject(dimensionObject);
          var dimension = LogicUtils.getString(
            dimensionObject$1,
            "dimension",
            "",
          );
          var dimensionTitleCase =
            "Select " + LogicUtils.snakeToTitle(dimension) + "";
          var value = LogicUtils.getStrArrayFromJsonArray(
            LogicUtils.getArrayFromDict(dimensionObject$1, "values", []),
          );
          var arg = SelectBox.makeOptions(value).map(function (item) {
            var newrecord = Caml_obj.obj_dup(item);
            newrecord.label = item.value;
            return newrecord;
          });
          return {
            urlKey: dimension,
            field: FormRenderer.makeFieldInfo(
              "",
              undefined,
              dimension,
              function (param) {
                var func = Curry._3(
                  InputFields.multiSelectInput,
                  param,
                  arg,
                  undefined,
                );
                return function (param) {
                  return Curry.app(func, [
                    param,
                    dimensionTitleCase,
                    undefined,
                    undefined,
                    false,
                    undefined,
                    undefined,
                    true,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    "bg-none",
                    undefined,
                    undefined,
                    true,
                    true,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                  ]);
                };
              },
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ),
            parser: function (val) {
              return val;
            },
            localFilter: undefined,
          };
        });
      },
    ),
    [],
  );
}

function filterByData(txnArr, value) {
  var searchText = LogicUtils.getStringFromJson(value, "");
  return Belt_Array.keepMap(
    Belt_Array.keepMap(txnArr, function (prim) {
      if (prim == null) {
        return;
      } else {
        return Caml_option.some(prim);
      }
    }),
    function (data) {
      var valueArr = Core__Array.reduce(
        Object.entries(data).map(function (item) {
          return Core__Option.getOr(Core__JSON.Decode.string(item[1]), "")
            .toLowerCase()
            .includes(searchText);
        }),
        false,
        function (acc, item) {
          if (item) {
            return true;
          } else {
            return acc;
          }
        },
      );
      if (valueArr) {
        return Caml_option.some(data);
      }
    },
  );
}

function initialFilterFields(json) {
  return Core__Option.getOr(
    Core__Option.flatMap(
      LogicUtils.getOptionalArrayFromDict(
        LogicUtils.getDictFromJsonObject(json),
        "queryData",
      ),
      function (arr) {
        return Belt_Array.keepMap(arr, function (item) {
          var dimensionObject = LogicUtils.getDictFromJsonObject(item);
          var dimension = LogicUtils.getString(
            dimensionObject,
            "dimension",
            "",
          );
          var dimensionTitleCase =
            "Select " + LogicUtils.snakeToTitle(dimension) + "";
          var value = LogicUtils.getStrArrayFromJsonArray(
            LogicUtils.getArrayFromDict(dimensionObject, "values", []),
          );
          var arg = SelectBox.makeOptions(value);
          return {
            field: FormRenderer.makeFieldInfo(
              "",
              undefined,
              dimension,
              function (param) {
                var func = Curry._3(
                  InputFields.multiSelectInput,
                  param,
                  arg,
                  undefined,
                );
                return function (param) {
                  return Curry.app(func, [
                    param,
                    dimensionTitleCase,
                    undefined,
                    undefined,
                    false,
                    undefined,
                    undefined,
                    true,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    "bg-none",
                    undefined,
                    undefined,
                    true,
                    true,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                  ]);
                };
              },
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ),
            localFilter: filterByData,
          };
        });
      },
    ),
    [],
  );
}

var startTimeFilterKey = "startTime";

var endTimeFilterKey = "endTime";

var optFilterKey = "opt";

function initialFixedFilterFields(_json) {
  return [
    {
      field: FormRenderer.makeMultiInputFieldInfo(
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        false,
        InputFields.dateRangeField(
          startTimeFilterKey,
          endTimeFilterKey,
          "YYYY-MM-DDTHH:mm:ss[Z]",
          false,
          true,
          false,
          [
            /* Today */ 0,
            /* Yesterday */ 2,
            {
              TAG: /* Day */ 1,
              _0: 2.0,
            },
            {
              TAG: /* Day */ 1,
              _0: 7.0,
            },
            {
              TAG: /* Day */ 1,
              _0: 30.0,
            },
            /* ThisMonth */ 3,
            /* LastMonth */ 4,
          ],
          false,
          2,
          180,
          undefined,
          optFilterKey,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
        undefined,
        [],
        undefined,
      ),
      localFilter: undefined,
    },
  ];
}

function getStringListFromArrayDict(metrics) {
  return metrics.map(function (item) {
    return LogicUtils.getString(
      LogicUtils.getDictFromJsonObject(item),
      "name",
      "",
    );
  });
}

function HSAnalyticsUtils$NoData(props) {
  return React.createElement(
    "div",
    {
      className: "p-5",
    },
    React.createElement(PageUtils.PageHeading.make, {
      title: props.title,
      subTitle: props.subTitle,
    }),
    React.createElement(NoDataFound.make, {
      message: "No Data Available",
      renderType: /* Painting */ 1,
      children: Caml_option.some(
        React.createElement(Button.make, {
          text: "Make a Payment",
          buttonType: /* Primary */ 0,
          buttonSize: /* Small */ 2,
          onClick: function (param) {
            RescriptReactRouter.push(
              HSwitchGlobalVars.appendDashboardPath("/home"),
            );
          },
        }),
      ),
    }),
  );
}

var NoData = {
  make: HSAnalyticsUtils$NoData,
};

function generateTablePayload(
  startTimeFromUrl,
  endTimeFromUrl,
  filterValueFromUrl,
  currenltySelectedTab,
  tableMetrics,
  distributionArray,
  deltaMetrics,
  deltaPrefixArr,
  isIndustry,
  mode,
  customFilter,
  showDeltaMetrics,
  param,
  sourceOpt,
  param$1,
) {
  var source = sourceOpt !== undefined ? sourceOpt : "BATCH";
  var deltaDateArr =
    deltaMetrics.length === 0
      ? []
      : AnalyticsUtils.generateDateArray(
          startTimeFromUrl,
          endTimeFromUrl,
          deltaPrefixArr,
        );
  var deltaPayload = AnalyticsUtils.generatedeltaTablePayload(
    deltaDateArr,
    deltaMetrics,
    currenltySelectedTab,
    source,
    mode,
    deltaPrefixArr,
    filterValueFromUrl,
    showDeltaMetrics,
    customFilter,
  );
  var tableBodyWithNonDeltaMetrix =
    tableMetrics.length > 0
      ? [
          AnalyticsUtils.getFilterRequestBody(
            undefined,
            Caml_option.some(currenltySelectedTab),
            Caml_option.some(filterValueFromUrl),
            Caml_option.some(tableMetrics),
            showDeltaMetrics,
            undefined,
            undefined,
            startTimeFromUrl,
            endTimeFromUrl,
            undefined,
            Caml_option.some(mode),
            customFilter,
            source,
            undefined,
          ),
        ]
      : [];
  var tableBodyWithDeltaMetrix =
    deltaMetrics.length > 0
      ? distributionArray !== undefined
        ? distributionArray.map(function (arr) {
            return AnalyticsUtils.getFilterRequestBody(
              undefined,
              Caml_option.some(currenltySelectedTab),
              Caml_option.some(filterValueFromUrl),
              Caml_option.some(deltaMetrics),
              showDeltaMetrics,
              undefined,
              Caml_option.some(Caml_option.some(arr)),
              startTimeFromUrl,
              endTimeFromUrl,
              undefined,
              Caml_option.some(mode),
              customFilter,
              source,
              undefined,
            );
          })
        : [
            AnalyticsUtils.getFilterRequestBody(
              undefined,
              Caml_option.some(currenltySelectedTab),
              Caml_option.some(filterValueFromUrl),
              Caml_option.some(deltaMetrics),
              showDeltaMetrics,
              undefined,
              undefined,
              startTimeFromUrl,
              endTimeFromUrl,
              undefined,
              Caml_option.some(mode),
              customFilter,
              source,
              undefined,
            ),
          ]
      : [];
  var tableIndustryPayload = isIndustry
    ? [
        AnalyticsUtils.getFilterRequestBody(
          undefined,
          Caml_option.some(currenltySelectedTab),
          Caml_option.some(filterValueFromUrl),
          Caml_option.some(deltaMetrics),
          showDeltaMetrics,
          "industry",
          undefined,
          startTimeFromUrl,
          endTimeFromUrl,
          undefined,
          Caml_option.some(mode),
          customFilter,
          source,
          undefined,
        ),
      ]
    : [];
  var tableBodyValues = tableBodyWithNonDeltaMetrix.concat(
    tableBodyWithDeltaMetrix,
    tableIndustryPayload,
  );
  return tableBodyValues.concat(deltaPayload).map(function (prim) {
    return prim;
  });
}

var filterFieldsPortalName = "analytics";

export {
  filterFieldsPortalName,
  setPrecision,
  getQueryData,
  options,
  filterByData,
  initialFilterFields,
  startTimeFilterKey,
  endTimeFilterKey,
  optFilterKey,
  initialFixedFilterFields,
  getStringListFromArrayDict,
  NoData,
  generateTablePayload,
};
/* react Not a pure module */
