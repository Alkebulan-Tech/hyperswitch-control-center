// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as ACLButton from "../../../components/ACLButton.bs.js";
import * as HomeUtils from "../../Home/HomeUtils.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as ToastState from "../../../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../../components/custom-icons/GatewayIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConfigContext from "../../../context/ConfigContext.bs.js";
import * as AnalyticsUtils from "../../../entities/analytics/AnalyticsUtils.bs.js";
import * as ConnectorUtils from "../../Connectors/ConnectorUtils.bs.js";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as PaymentOverview from "./PaymentsOverview/PaymentOverview.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as DynamicSingleStat from "../../../components/DynamicSingleStat.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as HSwitchRemoteFilter from "../../HSwitchRemoteFilter.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as SystemMetricsAnalyticsUtils from "../SystemMetrics/SystemMetricsAnalyticsUtils.bs.js";

function HomePageOverviewComponent$ConnectorOverview(props) {
  var match = React.useContext(ConfigContext.configContext);
  var backgroundColor = match.globalUIConfig.backgroundColor;
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var connectorsList = ConnectorUtils.getProcessorsListFromJson(
    Recoil.useRecoilValue(HyperswitchAtom.connectorListAtom),
    /* FRMPlayer */ 0,
    undefined,
  );
  var configuredConnectors = connectorsList.map(function (paymentMethod) {
    return ConnectorUtils.getConnectorNameTypeFromString(
      paymentMethod.connector_name,
      undefined,
      undefined,
    );
  });
  var getConnectorIconsList = function (param) {
    var icons = configuredConnectors
      .filter(function (param, i) {
        return i <= 2;
      })
      .map(function (connector, index) {
        var iconStyle =
          "" +
          (index === 0 ? "" : "-ml-4") +
          " z-" +
          ((30 - Math.imul(index, 10)) | 0).toString() +
          "";
        return JsxPPXReactSupport.createElementWithKey(
          index.toString(),
          GatewayIcon.make,
          {
            gateway:
              ConnectorUtils.getConnectorNameString(connector).toUpperCase(),
            className:
              "w-12 h-12 rounded-full border-3 border-white  " +
              iconStyle +
              " bg-white",
          },
        );
      });
    var icons$1 =
      configuredConnectors.length > 3
        ? icons.concat([
            React.createElement(
              "div",
              {
                key: "concat-number",
                className:
                  "w-12 h-12 flex items-center justify-center text-white font-medium rounded-full border-3 border-white -ml-3 z-0 " +
                  backgroundColor +
                  "",
              },
              "+" + ((configuredConnectors.length - 3) | 0).toString() + "",
            ),
          ])
        : icons;
    return React.createElement(
      "div",
      {
        className: "flex",
      },
      icons$1,
    );
  };
  return React.createElement(UIUtils.RenderIf.make, {
    condition: configuredConnectors.length > 0,
    children: React.createElement(
      "div",
      {
        className: HomeUtils.boxCss,
      },
      getConnectorIconsList(undefined),
      React.createElement(
        "div",
        {
          className: "flex items-center gap-2",
        },
        React.createElement(
          "p",
          {
            className: HomeUtils.cardHeaderTextStyle,
          },
          "" + configuredConnectors.length.toString() + " Active Processors",
        ),
      ),
      React.createElement(ACLButton.make, {
        text: "+ Add More",
        buttonType: /* PrimaryOutline */ 2,
        buttonSize: /* Small */ 2,
        onClick: function (param) {
          RescriptReactRouter.push(
            HSwitchGlobalVars.appendDashboardPath("/connectors"),
          );
        },
        customButtonStyle: "w-10 !px-3",
        access: userPermissionJson.connectorsView,
      }),
    ),
  });
}

var ConnectorOverview = {
  make: HomePageOverviewComponent$ConnectorOverview,
};

function HomePageOverviewComponent$SystemMetricsInsights(props) {
  var match = React.useState(function () {
    return 0;
  });
  var getStatData = function (
    singleStatData,
    timeSeriesData,
    deltaTimestampData,
    colType,
    _mode,
  ) {
    var partial_arg = deltaTimestampData.currentSr;
    var partial_arg$1 = singleStatData.latency;
    return {
      title: "Payments Confirm Latency",
      tooltipText:
        "Average time taken for the entire Payments Confirm API call.",
      deltaTooltipComponent: function (param) {
        return AnalyticsUtils.singlestatDeltaTooltipFormat(
          partial_arg$1,
          partial_arg,
          param,
        );
      },
      value: singleStatData.latency / 1000.0,
      delta: singleStatData.latency,
      data: SystemMetricsAnalyticsUtils.constructData(
        "latency",
        timeSeriesData,
      ),
      statType: "LatencyMs",
      showDelta: false,
    };
  };
  var defaultColumns = [
    {
      sectionName: "",
      columns: [/* Latency */ 0],
    },
  ];
  var singleStatBodyMake = function (singleStatBodyEntity) {
    var filters = LogicUtils.getJsonFromArrayOfJson([
      ["api_name", ["PaymentsConfirm"]],
      ["status_code", [200.0]],
      ["flow_type", ["Payment"]],
    ]);
    return JSON.stringify([
      AnalyticsUtils.getFilterRequestBody(
        Caml_option.some(singleStatBodyEntity.granularity),
        undefined,
        Caml_option.some(Caml_option.some(filters)),
        Caml_option.some(singleStatBodyEntity.metrics),
        singleStatBodyEntity.delta,
        Caml_option.some(singleStatBodyEntity.prefix),
        undefined,
        singleStatBodyEntity.startDateTime,
        singleStatBodyEntity.endDateTime,
        undefined,
        Caml_option.some(singleStatBodyEntity.mode),
        singleStatBodyEntity.customFilter,
        singleStatBodyEntity.source,
        undefined,
      ),
    ]);
  };
  var getStatEntity = function (metrics) {
    return {
      urlConfig: [
        {
          uri:
            "" +
            window._env_.apiBaseUrl +
            "/analytics/v1/metrics/" +
            SystemMetricsAnalyticsUtils.domain +
            "",
          metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
          singleStatBody: singleStatBodyMake,
          singleStatTimeSeriesBody: singleStatBodyMake,
        },
      ],
      getObjects: SystemMetricsAnalyticsUtils.itemToObjMapper,
      getTimeSeriesObject: SystemMetricsAnalyticsUtils.timeSeriesObjMapper,
      defaultColumns: defaultColumns,
      getData: getStatData,
      matrixUriMapper: function (param) {
        return (
          "" +
          window._env_.apiBaseUrl +
          "/analytics/v1/metrics/" +
          SystemMetricsAnalyticsUtils.domain +
          ""
        );
      },
    };
  };
  var metrics = ["latency"].map(function (key) {
    return Object.fromEntries([["name", key]]);
  });
  var singleStatEntity = getStatEntity(metrics);
  var dateDict = HSwitchRemoteFilter.getDateFilteredObject(undefined);
  return React.createElement(DynamicSingleStat.make, {
    entity: singleStatEntity,
    filterKeys: ["api_name", "status_code"],
    startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
    endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
    moduleName: "SystemMetrics",
    setTotalVolume: match[1],
    showPercentage: false,
    isHomePage: true,
    defaultStartDate: dateDict.start_time,
    defaultEndDate: dateDict.end_time,
    statSentiment: Caml_option.some(
      Core__Option.getOr(singleStatEntity.statSentiment, {}),
    ),
    wrapperClass: "flex flex-wrap w-full h-full",
  });
}

var SystemMetricsInsights = {
  make: HomePageOverviewComponent$SystemMetricsInsights,
};

function HomePageOverviewComponent$OverviewInfo(props) {
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var showToast = ToastState.useShowToast(undefined);
  var generateSampleData = async function (param) {
    try {
      var generateSampleDataUrl = APIUtils.getURL(
        /* GENERATE_SAMPLE_DATA */ 21,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      await Curry._7(
        updateDetails,
        generateSampleDataUrl,
        Object.fromEntries([["record", 50.0]]),
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      Curry._8(
        showToast,
        "Sample data generated successfully.",
        /* ToastSuccess */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      window.location.reload();
      return;
    } catch (exn) {
      return;
    }
  };
  return React.createElement(UIUtils.RenderIf.make, {
    condition: match$1.sampleData,
    children: React.createElement(
      "div",
      {
        className: "flex bg-white border rounded-md gap-2 px-9 py-3",
      },
      React.createElement(Icon.make, {
        name: "info-vacent",
        size: 20,
        className: "" + match.globalUIConfig.font.textColor.primaryNormal + "",
      }),
      React.createElement(
        "span",
        undefined,
        "To view more points on the above graph, you need to make payments or",
      ),
      React.createElement(
        "span",
        {
          className:
            "underline  cursor-pointer -mx-1 font-medium underline-offset-2",
          onClick: function (param) {
            generateSampleData(undefined);
          },
        },
        "generate",
      ),
      React.createElement("span", undefined, "sample data"),
    ),
  });
}

var OverviewInfo = {
  make: HomePageOverviewComponent$OverviewInfo,
};

function HomePageOverviewComponent(props) {
  var match = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-4",
    },
    React.createElement(
      "p",
      {
        className: HomeUtils.headingStyle,
      },
      "Overview",
    ),
    React.createElement(
      "div",
      {
        className: "grid grid-cols-1 md:grid-cols-3 w-full gap-4",
      },
      React.createElement(HomePageOverviewComponent$ConnectorOverview, {}),
      React.createElement(UIUtils.RenderIf.make, {
        condition: userPermissionJson.analyticsView === /* Access */ 1,
        children: React.createElement(PaymentOverview.make, {}),
      }),
      React.createElement(UIUtils.RenderIf.make, {
        condition: match.systemMetrics,
        children: React.createElement(
          HomePageOverviewComponent$SystemMetricsInsights,
          {},
        ),
      }),
    ),
    React.createElement(HomePageOverviewComponent$OverviewInfo, {}),
  );
}

var make = HomePageOverviewComponent;

export { ConnectorOverview, SystemMetricsInsights, OverviewInfo, make };
/* Icon Not a pure module */
