// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Analytics from "../Analytics.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";
import * as PageLoaderWrapper from "../../Utils/PageLoaderWrapper.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as DisputeAnalyticsEntity from "./DisputeAnalyticsEntity.bs.js";

function DisputeAnalytics(props) {
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match[1];
  var match$1 = React.useState(function () {
    return [];
  });
  var setMetrics = match$1[1];
  var metrics = match$1[0];
  var match$2 = React.useState(function () {
    return [];
  });
  var setDimensions = match$2[1];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var loadInfo = async function (param) {
    Curry._1(setScreenState, function (param) {
      return /* Loading */ 0;
    });
    try {
      var infoUrl = APIUtils.getURL(
        /* ANALYTICS_DISPUTES */ 7,
        /* Get */ 0,
        "dispute",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var infoDetails = await Curry._1(fetchDetails, infoUrl);
      Curry._1(setMetrics, function (param) {
        return LogicUtils.getArrayFromDict(
          LogicUtils.getDictFromJsonObject(infoDetails),
          "metrics",
          [],
        );
      });
      Curry._1(setDimensions, function (param) {
        return LogicUtils.getArrayFromDict(
          LogicUtils.getDictFromJsonObject(infoDetails),
          "dimensions",
          [],
        );
      });
      return Curry._1(setScreenState, function (param) {
        return /* Success */ 1;
      });
    } catch (raw_e) {
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        var err = Core__Option.getOr(e._1.message, "Failed to Fetch!");
        return Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: err,
          };
        });
      }
      throw e;
    }
  };
  React.useEffect(function () {
    loadInfo(undefined);
  }, []);
  var tabKeys = HSAnalyticsUtils.getStringListFromArrayDict(match$2[0]);
  var tabValues = tabKeys.map(function (key, index) {
    return {
      title: LogicUtils.snakeToTitle(key),
      value: key,
      isRemovable: index > 2,
    };
  });
  var title = "Disputes Analytics";
  var subTitle =
    "Gain Insights, monitor performance and make Informed Decisions with Dispute Analytics.";
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      JsxPPXReactSupport.createElementWithKey(
        "DisputesAnalytics",
        Analytics.make,
        {
          pageTitle: title,
          pageSubTitle: subTitle,
          startTimeFilterKey: HSAnalyticsUtils.startTimeFilterKey,
          endTimeFilterKey: HSAnalyticsUtils.endTimeFilterKey,
          chartEntity: {
            default: DisputeAnalyticsEntity.chartEntity(tabKeys),
          },
          defaultSort: "total_volume",
          tabKeys: tabKeys,
          tabValues: tabValues,
          initialFilters: HSAnalyticsUtils.initialFilterFields,
          initialFixedFilters: HSAnalyticsUtils.initialFixedFilterFields,
          options: HSAnalyticsUtils.options,
          getTable: DisputeAnalyticsEntity.getDisputeTable,
          colMapper: DisputeAnalyticsEntity.colMapper,
          tableEntity: DisputeAnalyticsEntity.disputeTableEntity(undefined),
          deltaMetrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
          deltaArray: [],
          singleStatEntity: DisputeAnalyticsEntity.getSingleStatEntity(
            metrics,
            undefined,
          ),
          filterUri:
            "" +
            window._env_.apiBaseUrl +
            "/analytics/v1/filters/" +
            DisputeAnalyticsEntity.domain +
            "",
          tableUpdatedHeading: DisputeAnalyticsEntity.getUpdatedHeading,
          tableGlobalFilter: HSAnalyticsUtils.filterByData,
          moduleName: "Disputes",
        },
      ),
    ),
    screenState: match[0],
    customUI: Caml_option.some(
      React.createElement(HSAnalyticsUtils.NoData.make, {
        title: title,
        subTitle: subTitle,
      }),
    ),
  });
}

var make = DisputeAnalytics;

export { make };
/* react Not a pure module */
