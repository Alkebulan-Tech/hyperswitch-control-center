// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "../../../components/DynamicChart.bs.js";
import * as DateTimeUtils from "../../../utils/DateTimeUtils.bs.js";
import * as AnalyticsUtils from "../../../entities/analytics/AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";

var domain = "sdk_events";

var singleStateInitialValue = {
  payment_attempts: 0,
  sdk_rendered_count: 0,
  average_payment_time: 0.0,
};

var singleStateSeriesInitialValue = {
  payment_attempts: 0,
  sdk_rendered_count: 0,
  average_payment_time: 0.0,
  time_series: "",
};

function singleStatItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        payment_attempts: LogicUtils.getInt(dict, "payment_attempts", 0),
        sdk_rendered_count: LogicUtils.getInt(dict, "sdk_rendered_count", 0),
        average_payment_time:
          LogicUtils.getFloat(dict, "average_payment_time", 0.0) / 1000,
      };
    }),
    singleStateInitialValue,
  );
}

function singleStateSeriesItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        payment_attempts: LogicUtils.getInt(dict, "payment_attempts", 0),
        sdk_rendered_count: LogicUtils.getInt(dict, "sdk_rendered_count", 0),
        average_payment_time:
          HSAnalyticsUtils.setPrecision(
            LogicUtils.getFloat(dict, "average_payment_time", 0.0),
            undefined,
            undefined,
          ) / 1000,
        time_series: LogicUtils.getString(dict, "time_bucket", ""),
      };
    }),
    singleStateSeriesInitialValue,
  );
}

function itemToObjMapper(json) {
  var data = HSAnalyticsUtils.getQueryData(json).map(singleStatItemToObjMapper);
  var ele = data[0];
  if (ele !== undefined) {
    return ele;
  } else {
    return singleStateInitialValue;
  }
}

function timeSeriesObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(
    singleStateSeriesItemToObjMapper,
  );
}

var defaultColumns = [
  {
    sectionName: "",
    columns: [
      /* SdkRenderedCount */ 0, /* Count */ 1, /* ConversionRate */ 2,
      /* DropOutRate */ 3, /* AvgPaymentTime */ 4,
    ],
  },
];

function compareLogic(firstValue, secondValue) {
  var temp2 = secondValue[0];
  var temp1 = firstValue[0];
  if (Caml_obj.equal(temp1, temp2)) {
    return 0;
  } else if (Caml_obj.greaterthan(temp1, temp2)) {
    return -1;
  } else {
    return 1;
  }
}

function constructData(key, singlestatTimeseriesData) {
  switch (key) {
    case "average_payment_time":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.average_payment_time,
        ];
      });
    case "conversion_rate":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.parseAsFloat(ob.time_series),
            (100 * ob.payment_attempts) / ob.sdk_rendered_count,
          ];
        })
        .toSorted(compareLogic);
    case "drop_out_rate":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          100 - (100 * ob.payment_attempts) / ob.sdk_rendered_count,
        ];
      });
    case "payment_attempts":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.parseAsFloat(ob.time_series),
            ob.payment_attempts,
          ];
        })
        .toSorted(compareLogic);
    case "sdk_rendered_count":
      return singlestatTimeseriesData.map(function (ob) {
        return [
          DateTimeUtils.parseAsFloat(ob.time_series),
          ob.sdk_rendered_count,
        ];
      });
    default:
      return [];
  }
}

function getStatData(
  singleStatData,
  timeSeriesData,
  deltaTimestampData,
  colType,
  _mode,
) {
  switch (colType) {
    case /* SdkRenderedCount */ 0:
      var partial_arg = deltaTimestampData.currentSr;
      var partial_arg$1 = singleStatData.sdk_rendered_count;
      return {
        title: "Checkout Page Renders",
        tooltipText: "Total SDK Renders",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$1,
            partial_arg,
            param,
          );
        },
        value: singleStatData.sdk_rendered_count,
        delta: Number(singleStatData.sdk_rendered_count.toFixed(2)),
        data: constructData("sdk_rendered_count", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case /* Count */ 1:
      var partial_arg$2 = deltaTimestampData.currentSr;
      var partial_arg$3 = singleStatData.payment_attempts;
      return {
        title: "Total Payments",
        tooltipText: "Sessions where users attempted a payment",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$3,
            partial_arg$2,
            param,
          );
        },
        value: singleStatData.payment_attempts,
        delta: singleStatData.payment_attempts,
        data: constructData("payment_attempts", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case /* ConversionRate */ 2:
      var partial_arg$4 = deltaTimestampData.currentSr;
      var partial_arg$5 =
        (singleStatData.payment_attempts * 100) /
        singleStatData.sdk_rendered_count;
      return {
        title: "Converted User Sessions",
        tooltipText: "Percentage of sessions where users attempted a payment",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$5,
            partial_arg$4,
            param,
          );
        },
        value:
          (singleStatData.payment_attempts * 100) /
          singleStatData.sdk_rendered_count,
        delta: Number(
          (
            (singleStatData.payment_attempts * 100) /
            singleStatData.sdk_rendered_count
          ).toFixed(2),
        ),
        data: constructData("conversion_rate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case /* DropOutRate */ 3:
      var partial_arg$6 = deltaTimestampData.currentSr;
      var partial_arg$7 =
        100 -
        (singleStatData.payment_attempts * 100) /
          singleStatData.sdk_rendered_count;
      return {
        title: "Dropped Out User Sessions",
        tooltipText: "Sessions where users did not attempt a payment",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$7,
            partial_arg$6,
            param,
          );
        },
        value:
          100 -
          (singleStatData.payment_attempts * 100) /
            singleStatData.sdk_rendered_count,
        delta: Number(singleStatData.sdk_rendered_count.toFixed(2)),
        data: constructData("drop_out_rate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case /* AvgPaymentTime */ 4:
      var partial_arg$8 = deltaTimestampData.currentSr;
      var partial_arg$9 = singleStatData.average_payment_time;
      return {
        title: "Average Payment Time",
        tooltipText: "Time taken to attempt payment",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$9,
            partial_arg$8,
            param,
          );
        },
        value: singleStatData.average_payment_time,
        delta: Number(singleStatData.average_payment_time.toFixed(2)),
        data: constructData("average_payment_time", timeSeriesData),
        statType: "LatencyMs",
        showDelta: false,
      };
  }
}

var getStatSentiment = Object.fromEntries([
  ["Checkout Page Impressions", /* Positive */ 0],
  ["Total Payments", /* Positive */ 0],
  ["Converted User Sessions", /* Positive */ 0],
  ["Dropped Out User Sessions", /* Negative */ 1],
  ["Average Payment Time", /* Negative */ 1],
]);

var getStatThresholds = Object.fromEntries([
  ["Dropped Out User Sessions", 40],
  ["Converted User Sessions", 60],
]);

function getSingleStatEntity(metrics) {
  return {
    urlConfig: [
      {
        uri:
          "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
        metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
      },
    ],
    getObjects: itemToObjMapper,
    getTimeSeriesObject: timeSeriesObjMapper,
    defaultColumns: defaultColumns,
    getData: getStatData,
    matrixUriMapper: function (param) {
      return (
        "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + ""
      );
    },
    statSentiment: Caml_option.some(getStatSentiment),
    statThreshold: Caml_option.some(getStatThresholds),
  };
}

var paymentMetricsConfig = [
  {
    metric_name_db: "payment_attempts",
    metric_label: "Volume",
    metric_type: /* Volume */ 1,
    legendOption: [/* Average */ 2, /* Overall */ 1],
  },
];

var userMetricsConfig = [
  {
    metric_name_db: "sdk_rendered_count",
    metric_label: "Volume",
    metric_type: /* Volume */ 1,
    legendOption: [/* Average */ 2, /* Overall */ 1],
  },
];

var userJourneyMetricsConfig = [
  {
    metric_name_db: "sdk_rendered_count",
    metric_label: "Checkout Page Rendered",
    metric_type: /* Volume */ 1,
    legendOption: [/* Average */ 2, /* Overall */ 1],
  },
  {
    metric_name_db: "payment_methods_call_count",
    metric_label: "Payment Methods Loaded",
    metric_type: /* Volume */ 1,
    legendOption: [/* Average */ 2, /* Overall */ 1],
  },
  {
    metric_name_db: "payment_method_selected_count",
    metric_label: "Payment Method Selected",
    metric_type: /* Volume */ 1,
    legendOption: [/* Average */ 2, /* Overall */ 1],
  },
  {
    metric_name_db: "payment_data_filled_count",
    metric_label: "Payment Method Data Entered",
    metric_type: /* Volume */ 1,
    legendOption: [/* Average */ 2, /* Overall */ 1],
  },
  {
    metric_name_db: "payment_attempts",
    metric_label: "Payment Attempted",
    metric_type: /* Volume */ 1,
    legendOption: [/* Average */ 2, /* Overall */ 1],
  },
];

function paymentChartEntity(tabKeys) {
  return DynamicChart.makeEntity(
    {
      TAG: /* String */ 0,
      _0: "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
    },
    undefined,
    tabKeys,
    [HSAnalyticsUtils.startTimeFilterKey, HSAnalyticsUtils.endTimeFilterKey],
    ["Success Rate", "Volume"],
    [],
    [],
    [/* SemiDonut */ 2],
    [
      {
        uri:
          "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
        timeSeriesBody: DynamicChart.getTimeSeriesChart,
        legendBody: DynamicChart.getLegendBody,
        metrics: paymentMetricsConfig,
        timeCol: "time_bucket",
        filterKeys: tabKeys,
      },
    ],
    "User Journey Analytics",
    undefined,
    undefined,
    function (param, param$1) {
      return [""];
    },
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

function userChartEntity(tabKeys) {
  var newrecord = Caml_obj.obj_dup(paymentChartEntity(tabKeys));
  newrecord.uriConfig = [
    {
      uri:
        "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
      timeSeriesBody: DynamicChart.getTimeSeriesChart,
      legendBody: DynamicChart.getLegendBody,
      metrics: userMetricsConfig,
      timeCol: "time_bucket",
      filterKeys: tabKeys,
    },
  ];
  return newrecord;
}

function userBarChartEntity(tabKeys) {
  var newrecord = Caml_obj.obj_dup(paymentChartEntity(tabKeys));
  newrecord.uriConfig = [
    {
      uri:
        "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
      timeSeriesBody: DynamicChart.getTimeSeriesChart,
      legendBody: DynamicChart.getLegendBody,
      metrics: userMetricsConfig,
      timeCol: "time_bucket",
      filterKeys: tabKeys,
    },
  ];
  newrecord.chartTypes = [/* HorizontalBar */ 3];
  return newrecord;
}

function userJourneyFunnelChartEntity(tabKeys) {
  var newrecord = Caml_obj.obj_dup(paymentChartEntity(tabKeys));
  newrecord.chartDescription =
    "Breakdown of users based on journey checkpoints";
  newrecord.uriConfig = [
    {
      uri:
        "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
      timeSeriesBody: DynamicChart.getTimeSeriesChart,
      legendBody: DynamicChart.getLegendBody,
      metrics: userJourneyMetricsConfig,
      timeCol: "time_bucket",
      filterKeys: tabKeys,
    },
  ];
  newrecord.chartTypes = [/* Funnel */ 4];
  return newrecord;
}

export {
  domain,
  singleStateInitialValue,
  singleStateSeriesInitialValue,
  singleStatItemToObjMapper,
  singleStateSeriesItemToObjMapper,
  itemToObjMapper,
  timeSeriesObjMapper,
  defaultColumns,
  compareLogic,
  constructData,
  getStatData,
  getStatSentiment,
  getStatThresholds,
  getSingleStatEntity,
  paymentMetricsConfig,
  userMetricsConfig,
  userJourneyMetricsConfig,
  paymentChartEntity,
  userChartEntity,
  userBarChartEntity,
  userJourneyFunnelChartEntity,
};
/* getStatSentiment Not a pure module */
