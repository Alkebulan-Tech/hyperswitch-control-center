// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as UIUtils from "../../../../utils/UIUtils.bs.js";
import * as LogTypes from "./LogTypes.bs.js";
import * as LogUtils from "./LogUtils.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as ConfigContext from "../../../../context/ConfigContext.bs.js";

function ApiDetailsComponent(props) {
  var filteredKeys = props.filteredKeys;
  var index = props.index;
  var currentSelected = props.currentSelected;
  var setSelectedOption = props.setSelectedOption;
  var setLogDetails = props.setLogDetails;
  var dataDict = props.dataDict;
  var filteredKeys$1 = filteredKeys !== undefined ? filteredKeys : [];
  var match = React.useContext(ConfigContext.configContext);
  var headerStyle = "text-sm font-medium text-gray-700 break-all";
  var logType = Curry._1(props.getLogType, dataDict);
  var tmp;
  switch (logType) {
    case /* SDK */ 0:
      tmp = LogicUtils.getString(dataDict, "event_name", "default value");
      break;
    case /* API_EVENTS */ 1:
      tmp = LogicUtils.camelCaseToTitle(
        LogicUtils.getString(dataDict, "api_flow", "default value"),
      );
      break;
    case /* WEBHOOKS */ 2:
      tmp = LogicUtils.snakeToTitle(
        LogicUtils.getString(dataDict, "event_type", "default value"),
      );
      break;
    case /* CONNECTOR */ 3:
      tmp = LogicUtils.camelCaseToTitle(
        LogUtils.apiNameMapper(
          LogicUtils.getString(dataDict, "flow", "default value"),
        ),
      );
      break;
  }
  var apiName = Curry._1(props.nameToURLMapper, tmp);
  var createdTime = LogicUtils.getString(dataDict, "created_at", "00000");
  var requestObject;
  if (logType >= 3) {
    requestObject = LogicUtils.getString(dataDict, "request", "");
  } else {
    switch (logType) {
      case /* SDK */ 0:
        requestObject = JSON.stringify(
          LogicUtils.getJsonFromArrayOfJson(
            Object.entries(dataDict).filter(function (entry) {
              return !filteredKeys$1.includes(entry[0]);
            }),
          ),
        );
        break;
      case /* API_EVENTS */ 1:
        requestObject = LogicUtils.getString(dataDict, "request", "");
        break;
      case /* WEBHOOKS */ 2:
        requestObject = LogicUtils.getString(
          dataDict,
          "outgoing_webhook_event_type",
          "",
        );
        break;
    }
  }
  var responseObject;
  switch (logType) {
    case /* SDK */ 0:
      var isErrorLog =
        LogicUtils.getString(dataDict, "log_type", "") === "ERROR";
      responseObject = isErrorLog
        ? LogicUtils.getString(dataDict, "value", "")
        : "";
      break;
    case /* API_EVENTS */ 1:
      responseObject = LogicUtils.getString(dataDict, "response", "");
      break;
    case /* WEBHOOKS */ 2:
      responseObject = LogicUtils.getString(dataDict, "content", "");
      break;
    case /* CONNECTOR */ 3:
      responseObject = LogicUtils.getString(dataDict, "masked_response", "");
      break;
  }
  var statusCode;
  if (logType >= 3) {
    statusCode = LogicUtils.getInt(dataDict, "status_code", 200).toString();
  } else {
    switch (logType) {
      case /* SDK */ 0:
        statusCode = LogicUtils.getString(dataDict, "log_type", "INFO");
        break;
      case /* API_EVENTS */ 1:
        statusCode = LogicUtils.getInt(dataDict, "status_code", 200).toString();
        break;
      case /* WEBHOOKS */ 2:
        statusCode = LogicUtils.getBool(dataDict, "is_error", false)
          ? "500"
          : "200";
        break;
    }
  }
  var method;
  switch (logType) {
    case /* SDK */ 0:
      method = "";
      break;
    case /* API_EVENTS */ 1:
      method = LogicUtils.getString(dataDict, "http_method", "");
      break;
    case /* WEBHOOKS */ 2:
      method = "POST";
      break;
    case /* CONNECTOR */ 3:
      method = LogicUtils.getString(dataDict, "method", "");
      break;
  }
  var statusCodeTextColor;
  var exit = 0;
  if (logType >= 3) {
    exit = 1;
  } else {
    switch (logType) {
      case /* SDK */ 0:
        switch (statusCode) {
          case "ERROR":
            statusCodeTextColor = "red-400";
            break;
          case "INFO":
            statusCodeTextColor = "blue-500";
            break;
          case "WARNING":
            statusCodeTextColor = "yellow-800";
            break;
          default:
            statusCodeTextColor = "gray-700 opacity-50";
        }
        break;
      case /* API_EVENTS */ 1:
        exit = 1;
        break;
      case /* WEBHOOKS */ 2:
        switch (statusCode) {
          case "200":
            statusCodeTextColor = "green-700";
            break;
          case "500":
            statusCodeTextColor = "gray-700 opacity-50";
            break;
          default:
            statusCodeTextColor = "gray-700 opacity-50";
        }
        break;
    }
  }
  if (exit === 1) {
    switch (statusCode) {
      case "200":
        statusCodeTextColor = "green-700";
        break;
      case "400":
        statusCodeTextColor = "yellow-800";
        break;
      case "500":
        statusCodeTextColor = "gray-700 opacity-50";
        break;
      default:
        statusCodeTextColor = "gray-700 opacity-50";
    }
  }
  var statusCodeBg;
  var exit$1 = 0;
  if (logType >= 3) {
    exit$1 = 1;
  } else {
    switch (logType) {
      case /* SDK */ 0:
        switch (statusCode) {
          case "ERROR":
            statusCodeBg = "red-100";
            break;
          case "INFO":
            statusCodeBg = "blue-100";
            break;
          case "WARNING":
            statusCodeBg = "yellow-100";
            break;
          default:
            statusCodeBg = "gray-100";
        }
        break;
      case /* API_EVENTS */ 1:
        exit$1 = 1;
        break;
      case /* WEBHOOKS */ 2:
        switch (statusCode) {
          case "200":
            statusCodeBg = "green-50";
            break;
          case "500":
            statusCodeBg = "gray-100";
            break;
          default:
            statusCodeBg = "gray-100";
        }
        break;
    }
  }
  if (exit$1 === 1) {
    switch (statusCode) {
      case "200":
        statusCodeBg = "green-50";
        break;
      case "400":
        statusCodeBg = "orange-100";
        break;
      case "500":
        statusCodeBg = "gray-100";
        break;
      default:
        statusCodeBg = "gray-100";
    }
  }
  var isSelected = currentSelected === index;
  var stepperColor;
  if (isSelected) {
    var exit$2 = 0;
    if (logType >= 3) {
      exit$2 = 1;
    } else {
      switch (logType) {
        case /* SDK */ 0:
          switch (statusCode) {
            case "ERROR":
              stepperColor = "red-400";
              break;
            case "INFO":
              stepperColor = "blue-500";
              break;
            case "WARNING":
              stepperColor = "yellow-300";
              break;
            default:
              stepperColor = "gray-700 opacity-50";
          }
          break;
        case /* API_EVENTS */ 1:
          exit$2 = 1;
          break;
        case /* WEBHOOKS */ 2:
          switch (statusCode) {
            case "200":
              stepperColor = "green-700";
              break;
            case "500":
              stepperColor = "gray-700 opacity-50";
              break;
            default:
              stepperColor = "gray-700 opacity-50";
          }
          break;
      }
    }
    if (exit$2 === 1) {
      switch (statusCode) {
        case "200":
          stepperColor = "green-700";
          break;
        case "400":
          stepperColor = "yellow-300";
          break;
        case "500":
          stepperColor = "gray-700 opacity-50";
          break;
        default:
          stepperColor = "gray-700 opacity-50";
      }
    }
  } else {
    stepperColor = "gray-200";
  }
  var stepperBorderColor;
  if (isSelected) {
    var exit$3 = 0;
    if (logType >= 3) {
      exit$3 = 1;
    } else {
      switch (logType) {
        case /* SDK */ 0:
          switch (statusCode) {
            case "ERROR":
              stepperBorderColor = "red-400";
              break;
            case "INFO":
              stepperBorderColor = "blue-500";
              break;
            case "WARNING":
              stepperBorderColor = "orange-500";
              break;
            default:
              stepperBorderColor = "gray-600";
          }
          break;
        case /* API_EVENTS */ 1:
          exit$3 = 1;
          break;
        case /* WEBHOOKS */ 2:
          switch (statusCode) {
            case "200":
              stepperBorderColor = "green-700";
              break;
            case "500":
              stepperBorderColor = "gray-600";
              break;
            default:
              stepperBorderColor = "gray-600";
          }
          break;
      }
    }
    if (exit$3 === 1) {
      switch (statusCode) {
        case "200":
          stepperBorderColor = "green-700";
          break;
        case "400":
          stepperBorderColor = "orange-500";
          break;
        case "500":
          stepperBorderColor = "gray-600";
          break;
        default:
          stepperBorderColor = "gray-600";
      }
    }
  } else {
    stepperBorderColor = "gray-200";
  }
  var borderClass = isSelected
    ? "" + match.globalUIConfig.border.borderColor.primaryNormal + " rounded-md"
    : "border border-transparent";
  return React.createElement(
    "div",
    {
      className: "flex items-start gap-4",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col items-center h-full",
      },
      React.createElement("div", {
        className:
          "w-fit h-fit p-1  border rounded-md bg-" +
          stepperColor +
          " border-gray-300",
      }),
      React.createElement(UIUtils.RenderIf.make, {
        condition: index !== props.logsDataLength,
        children: React.createElement("div", {
          className:
            "h-full border-" +
            stepperBorderColor +
            " border-dashed rounded divide-x-2 border-2 my-1",
        }),
      }),
    ),
    React.createElement(
      "div",
      {
        key: currentSelected.toString(),
        className:
          "flex gap-6 items-start w-full py-3 px-3 cursor-pointer " +
          borderClass +
          " -mt-5 mb-8",
        onClick: function (param) {
          Curry._1(setLogDetails, function (param) {
            return {
              response: responseObject,
              request: requestObject,
              data: dataDict,
            };
          });
          Curry._1(setSelectedOption, function (param) {
            return {
              value: index,
              optionType: logType,
            };
          });
        },
      },
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-1",
        },
        React.createElement(
          "div",
          {
            className: " flex gap-3",
          },
          React.createElement(
            "div",
            {
              className:
                "bg-" + statusCodeBg + " h-fit w-fit px-2 py-1 rounded-md",
            },
            React.createElement(
              "p",
              {
                className:
                  "text-" +
                  statusCodeTextColor +
                  " text-sm opacity-100  font-bold ",
              },
              statusCode,
            ),
          ),
          logType !== 0
            ? React.createElement(
                "p",
                {
                  className:
                    "" +
                    headerStyle +
                    " " +
                    (isSelected ? "" : "opacity-80") +
                    "",
                },
                React.createElement(
                  "span",
                  {
                    className: "mr-3 border-2 px-1 py-0.5 rounded text-sm",
                  },
                  method.toUpperCase(),
                ),
                React.createElement(
                  "span",
                  {
                    className: "leading-7",
                  },
                  apiName,
                ),
              )
            : React.createElement(
                "p",
                {
                  className:
                    "" +
                    headerStyle +
                    " mt-1 " +
                    (isSelected ? "" : "opacity-80") +
                    "",
                },
                LogicUtils.snakeToTitle(apiName.toLowerCase()),
              ),
        ),
        React.createElement(
          "div",
          {
            className: "" + headerStyle + " opacity-40 flex gap-1",
          },
          new Date(createdTime).toUTCString(),
          React.createElement(
            "span",
            undefined,
            ", [ " + LogTypes.getTagName(logType) + " ]",
          ),
        ),
      ),
    ),
  );
}

var make = ApiDetailsComponent;

export { make };
/* react Not a pure module */
