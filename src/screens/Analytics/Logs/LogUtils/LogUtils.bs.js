// Generated by ReScript, PLEASE EDIT WITH CARE

import * as JsSha256 from "js-sha256";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as HSLocalStorage from "../../../HSLocalStorage.bs.js";

function sortByCreatedAt(log1, log2) {
  var getKey = function (dict) {
    return new Date(
      LogicUtils.getString(
        LogicUtils.getDictFromJsonObject(dict),
        "created_at",
        "",
      ),
    );
  };
  var keyA = getKey(log1);
  var keyB = getKey(log2);
  return LogicUtils.compareLogic(keyA, keyB);
}

function itemToObjMapper(flowString) {
  switch (flowString) {
    case "AttachDisputeEvidence":
      return /* AttachDisputeEvidence */ 9;
    case "DisputesEvidenceSubmit":
      return /* DisputesEvidenceSubmit */ 8;
    case "IncomingWebhookReceive":
      return /* IncomingWebhookReceive */ 11;
    case "PaymentsCancel":
      return /* PaymentsCancel */ 0;
    case "PaymentsCapture":
      return /* PaymentsCapture */ 1;
    case "PaymentsConfirm":
      return /* PaymentsConfirm */ 2;
    case "PaymentsCreate":
      return /* PaymentsCreate */ 3;
    case "PaymentsStart":
      return /* PaymentsStart */ 4;
    case "PaymentsUpdate":
      return /* PaymentsUpdate */ 5;
    case "RefundsCreate":
      return /* RefundsCreate */ 6;
    case "RefundsUpdate":
      return /* RefundsUpdate */ 7;
    case "RetrieveDisputeEvidence":
      return /* RetrieveDisputeEvidence */ 10;
    default:
      return /* NotDefined */ 12;
  }
}

function nameToURLMapper(id) {
  var merchant_id = HSLocalStorage.getFromMerchantDetails("merchant_id");
  return function (urlName) {
    var match = itemToObjMapper(urlName);
    switch (match) {
      case /* PaymentsCancel */ 0:
        return "/payments/" + id + "/cancel";
      case /* PaymentsCapture */ 1:
        return "/payments/" + id + "/capture";
      case /* PaymentsConfirm */ 2:
        return "/payments/" + id + "/confirm";
      case /* PaymentsCreate */ 3:
        return "/payments";
      case /* PaymentsStart */ 4:
        return "/payments/redirect/" + id + "/" + merchant_id + "";
      case /* PaymentsUpdate */ 5:
        return "/payments/" + id + "";
      case /* RefundsCreate */ 6:
        return "/refunds";
      case /* RefundsUpdate */ 7:
        return "/refunds/" + id + "";
      case /* DisputesEvidenceSubmit */ 8:
      case /* AttachDisputeEvidence */ 9:
        return "/disputes/evidence";
      case /* RetrieveDisputeEvidence */ 10:
        return "/disputes/evidence/" + id + "";
      case /* IncomingWebhookReceive */ 11:
      case /* NotDefined */ 12:
        return urlName;
    }
  };
}

var filteredKeys = [
  "value",
  "merchant_id",
  "created_at_precise",
  "component",
  "platform",
  "version",
];

var detailsSectionFilterKeys = [
  "content",
  "created_at",
  "event_type",
  "flow_type",
  "api_flow",
  "request",
  "response",
  "user_agent",
  "ip_addr",
  "flow",
  "masked_response",
  "http_method",
  "hs_latency",
  "status_code",
];

function parseSdkResponse(arr) {
  var sourceMapper = function (source) {
    switch (source) {
      case "ORCA-LOADER":
        return "HYPERLOADER";
      case "ORCA-PAYMENT-PAGE":
      case "STRIPE_PAYMENT_SHEET":
        return "PAYMENT_SHEET";
      default:
        return source;
    }
  };
  var sdkLogsArray = arr.map(function ($$event) {
    var eventDict = LogicUtils.getDictFromJsonObject($$event);
    var eventName = LogicUtils.getString(eventDict, "event_name", "");
    var timestamp = LogicUtils.getString(eventDict, "created_at_precise", "");
    var logType = LogicUtils.getString(eventDict, "log_type", "");
    var updatedEventName =
      logType === "INFO" ? eventName.replace("Call", "Response") : eventName;
    eventDict["event_name"] = updatedEventName;
    eventDict["event_id"] = JsSha256.sha256(updatedEventName + timestamp);
    eventDict["source"] = sourceMapper(
      LogicUtils.getString(eventDict, "source", ""),
    );
    eventDict["checkout_platform"] = LogicUtils.getString(
      eventDict,
      "component",
      "",
    );
    eventDict["customer_device"] = LogicUtils.getString(
      eventDict,
      "platform",
      "",
    );
    eventDict["sdk_version"] = LogicUtils.getString(eventDict, "version", "");
    eventDict["event_name"] = updatedEventName;
    eventDict["created_at"] = timestamp;
    return eventDict;
  });
  return sdkLogsArray.filter(function (sdkLog) {
    var eventDict = LogicUtils.getDictFromJsonObject(sdkLog);
    var eventName = LogicUtils.getString(eventDict, "event_name", "");
    var filteredEventNames = ["OrcaElementsCalled"];
    return !filteredEventNames.includes(eventName);
  });
}

function apiNameMapper(apiName) {
  if (apiName === "PSync") {
    return "Payments Sync";
  } else {
    return apiName;
  }
}

export {
  sortByCreatedAt,
  itemToObjMapper,
  nameToURLMapper,
  filteredKeys,
  detailsSectionFilterKeys,
  parseSdkResponse,
  apiNameMapper,
};
/* js-sha256 Not a pure module */
