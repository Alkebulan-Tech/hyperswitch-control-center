// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as UIUtils from "../../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../../APIUtils/APIUtils.bs.js";
import * as LogTypes from "./LogTypes.bs.js";
import * as LogUtils from "./LogUtils.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../../utils/LogicUtils.bs.js";
import * as OrderUtils from "../../../../components/OrderUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as NoDataFound from "../../../../components/NoDataFound.bs.js";
import * as PromiseUtils from "../../../../utils/PromiseUtils.bs.js";
import * as PrettyPrintJson from "./PrettyPrintJson.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as HSwitchOrderUtils from "../../../Order/HSwitchOrderUtils.bs.js";
import * as PageLoaderWrapper from "../../../Utils/PageLoaderWrapper.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as ApiDetailsComponent from "./ApiDetailsComponent.bs.js";
import * as ReactSyntaxHighlighter from "../../../../libraries/ReactSyntaxHighlighter.bs.js";
import * as Hljs from "react-syntax-highlighter/dist/esm/styles/hljs";

function AuditLogUI$LogDetailsSection(props) {
  return React.createElement(
    "div",
    {
      className: "border-b-2 border-border-light-grey pb-3 px-5 py-3",
    },
    Object.entries(props.logDetails.data)
      .filter(function (item) {
        if (LogUtils.detailsSectionFilterKeys.includes(item[0])) {
          return false;
        } else {
          var value = item[1];
          var match = Core__JSON.Classify.classify(value);
          if (typeof match === "number" || match.TAG === /* Array */ 4) {
            return false;
          } else {
            return true;
          }
        }
      })
      .map(function (item) {
        return React.createElement(
          "div",
          {
            className: "text-sm font-medium text-gray-700 flex",
          },
          React.createElement(
            "span",
            {
              className: "w-2/5",
            },
            LogicUtils.snakeToTitle(item[0]),
          ),
          React.createElement(
            "span",
            {
              className:
                "w-3/5 overflow-scroll cursor-pointer relative hover:bg-gray-50 p-1 rounded",
            },
            React.createElement(ReactSyntaxHighlighter.SyntaxHighlighter.make, {
              language: "json",
              style: Caml_option.some(Hljs.googlecode),
              customStyle: {
                backgroundColor: "transparent",
                fontSize: "0.875rem",
                padding: "0px",
              },
              showLineNumbers: false,
              wrapLines: true,
              wrapLongLines: true,
              lineNumberContainerStyle: {
                backgroundColor: "red",
                paddingLeft: "0px",
                padding: "0px",
              },
              children: JSON.stringify(item[1]),
            }),
          ),
        );
      }),
  );
}

var LogDetailsSection = {
  make: AuditLogUI$LogDetailsSection,
};

function AuditLogUI(props) {
  var logType = props.logType;
  var urls = props.urls;
  var id = props.id;
  var fetchDetails = APIUtils.useGetMethod(false, undefined);
  var fetchPostDetils = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return [];
  });
  var setData = match[1];
  var data = match[0];
  var isError = React.useMemo(function () {
    return {
      contents: false,
    };
  }, []);
  var match$1 = React.useState(function () {
    return {
      response: "",
      request: "",
      data: {},
    };
  });
  var setLogDetails = match$1[1];
  var logDetails = match$1[0];
  var match$2 = React.useState(function () {
    return {
      value: 0,
      optionType: /* API_EVENTS */ 1,
    };
  });
  var setSelectedOption = match$2[1];
  var selectedOption = match$2[0];
  var match$3 = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match$3[1];
  var getDetails = async function (param) {
    var logs = [];
    if (HSwitchOrderUtils.isTestData(id)) {
      return Curry._1(setScreenState, function (param) {
        return /* Custom */ 2;
      });
    }
    var promiseArr = urls.map(function (url) {
      var match = url.apiMethod;
      if (match !== 2) {
        return Curry._1(fetchDetails, url.url);
      }
      var val = url.body;
      var body = val !== undefined ? Caml_option.valFromOption(val) : {};
      return Curry._7(
        fetchPostDetils,
        url.url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    });
    var resArr = await PromiseUtils.allSettledPolyfill(promiseArr);
    resArr.forEach(function (json) {
      var arr = Core__JSON.Classify.classify(json);
      if (typeof arr === "number") {
        return;
      }
      switch (arr.TAG | 0) {
        case /* String */ 1:
          isError.contents = true;
          return;
        case /* Array */ 4:
          var arr$1 = arr._0;
          var dict = arr$1[0];
          if (dict === undefined) {
            return;
          }
          var dict$1 = Caml_option.valFromOption(dict);
          var match = LogTypes.getLogType(
            LogicUtils.getDictFromJsonObject(dict$1),
          );
          if (match >= 3) {
            Caml_splice_call.spliceObjApply(logs, "push", [arr$1]);
            return;
          }
          switch (match) {
            case /* SDK */ 0:
              Caml_splice_call.spliceObjApply(logs, "push", [
                LogUtils.parseSdkResponse(arr$1),
              ]);
              return;
            case /* API_EVENTS */ 1:
              Caml_splice_call.spliceObjApply(logs, "push", [arr$1]);
              return;
            case /* WEBHOOKS */ 2:
              logs.push(dict$1);
              return;
          }
        default:
          return;
      }
    });
    if (logs.length === 0 && isError.contents) {
      return Curry._1(setScreenState, function (param) {
        return /* Error */ {
          _0: "Failed to Fetch!",
        };
      });
    }
    Curry._1(setScreenState, function (param) {
      return /* Success */ 1;
    });
    logs.sort(LogUtils.sortByCreatedAt);
    Curry._1(setData, function (param) {
      return logs;
    });
    var value = logs[0];
    if (value === undefined) {
      return;
    }
    var initialData = LogicUtils.getDictFromJsonObject(
      Caml_option.valFromOption(value),
    );
    return LogTypes.setDefaultValue(
      initialData,
      setLogDetails,
      setSelectedOption,
    );
  };
  React.useEffect(function () {
    getDetails(undefined);
  }, []);
  var match$4 = selectedOption.optionType;
  var tmp;
  if (match$4 >= 3) {
    tmp = "Response body";
  } else {
    switch (match$4) {
      case /* SDK */ 0:
        tmp = "Metadata";
        break;
      case /* API_EVENTS */ 1:
        tmp = "Response body";
        break;
      case /* WEBHOOKS */ 2:
        tmp = "Request body";
        break;
    }
  }
  var headerText = tmp;
  var timeLine = React.createElement(
    "div",
    {
      className: "flex flex-col w-2/5 overflow-y-scroll pt-7 pl-5",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-col",
      },
      data.map(function (detailsValue, index) {
        return JsxPPXReactSupport.createElementWithKey(
          index.toString(),
          ApiDetailsComponent.make,
          {
            dataDict: LogicUtils.getDictFromJsonObject(detailsValue),
            setLogDetails: setLogDetails,
            setSelectedOption: setSelectedOption,
            currentSelected: selectedOption.value,
            index: index,
            logsDataLength: (data.length - 1) | 0,
            getLogType: LogTypes.getLogType,
            nameToURLMapper: LogUtils.nameToURLMapper(id),
            filteredKeys: LogUtils.filteredKeys,
          },
        );
      }),
    ),
  );
  var match$5 = selectedOption.optionType;
  var requestHeader;
  if (match$5 >= 3) {
    requestHeader = "Request body";
  } else {
    switch (match$5) {
      case /* SDK */ 0:
        requestHeader = "Event";
        break;
      case /* API_EVENTS */ 1:
        requestHeader = "Request body";
        break;
      case /* WEBHOOKS */ 2:
        requestHeader = "";
        break;
    }
  }
  var codeBlock = React.createElement(UIUtils.RenderIf.make, {
    condition:
      LogicUtils.isNonEmptyString(logDetails.response) ||
      LogicUtils.isNonEmptyString(logDetails.request),
    children: React.createElement(
      "div",
      {
        className:
          "flex flex-col gap-4 border-l-2 border-border-light-grey show-scrollbar scroll-smooth overflow-scroll  w-3/5",
      },
      React.createElement(AuditLogUI$LogDetailsSection, {
        logDetails: logDetails,
      }),
      React.createElement(
        "div",
        {
          className: "px-5 py-3",
        },
        React.createElement(UIUtils.RenderIf.make, {
          condition:
            LogicUtils.isNonEmptyString(logDetails.request) &&
            selectedOption.optionType !== /* WEBHOOKS */ 2,
          children: React.createElement(PrettyPrintJson.make, {
            jsonToDisplay: logDetails.request,
            headerText: Caml_option.some(requestHeader),
            maxHeightClass:
              logDetails.response.length > 0 ? "max-h-25-rem" : "",
          }),
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition: LogicUtils.isNonEmptyString(logDetails.response),
          children: React.createElement(PrettyPrintJson.make, {
            jsonToDisplay: logDetails.response,
            headerText: Caml_option.some(headerText),
          }),
        }),
      ),
    ),
  });
  return React.createElement(
    PageLoaderWrapper.make,
    {
      children: Caml_option.some(null),
      screenState: match$3[0],
      customUI: Caml_option.some(
        React.createElement(NoDataFound.make, {
          message: "No logs available for this " + logType.toLowerCase() + "",
        }),
      ),
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: HSwitchOrderUtils.isTestData(id) || data.length === 0,
      children: React.createElement(
        "div",
        {
          className:
            "flex items-center gap-2 bg-white w-full border-2 p-3 !opacity-100 rounded-lg text-md font-medium",
        },
        React.createElement(Icon.make, {
          name: "info-circle-unfilled",
          size: 16,
        }),
        React.createElement(
          "div",
          {
            className: "text-lg font-medium opacity-50",
          },
          "No logs available for this " + logType.toLowerCase() + "",
        ),
      ),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: !(HSwitchOrderUtils.isTestData(id) || data.length === 0),
      children: React.createElement(
        OrderUtils.Section.make,
        {
          children: null,
          customCssClass:
            "bg-white dark:bg-jp-gray-lightgray_background rounded-md pt-2 pb-4 flex gap-7 justify-between h-48-rem !max-h-50-rem !min-w-[55rem] max-w-[72rem] overflow-scroll",
        },
        timeLine,
        codeBlock,
      ),
    }),
  );
}

var make = AuditLogUI;

export { LogDetailsSection, make };
/* Icon Not a pure module */
