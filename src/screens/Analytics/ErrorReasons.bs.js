// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as Table from "../../components/Table.bs.js";
import * as React from "react";
import * as EntityType from "../../entities/EntityType.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";

var visibleColumns = [/* ErrorReason */ 0, /* Count */ 1, /* Percentage */ 2];

function colMapper(col) {
  switch (col) {
    case /* ErrorReason */ 0:
      return "error_reason";
    case /* Count */ 1:
      return "count";
    case /* Percentage */ 2:
      return "percentage";
  }
}

function tableItemToObjMapper(dict) {
  return {
    error_reason: LogicUtils.getString(dict, "error_reason", "NA"),
    count: LogicUtils.getInt(dict, "count", 0),
    percentage: LogicUtils.getFloat(dict, "percentage", 0.0),
  };
}

function getObjects(json) {
  return LogicUtils.getArrayFromJson(json, []).map(function (item) {
    return tableItemToObjMapper(LogicUtils.getDictFromJsonObject(item));
  });
}

function getHeading(colType) {
  var key = colMapper(colType);
  switch (colType) {
    case /* ErrorReason */ 0:
      return Table.makeHeaderInfo(
        key,
        "Error Reason",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Count */ 1:
      return Table.makeHeaderInfo(
        key,
        "Count",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    case /* Percentage */ 2:
      return Table.makeHeaderInfo(
        key,
        "Percentage",
        /* TextType */ 1,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
  }
}

function getCell(errorObj, colType) {
  switch (colType) {
    case /* ErrorReason */ 0:
      return {
        TAG: /* Text */ 1,
        _0: errorObj.error_reason,
      };
    case /* Count */ 1:
      return {
        TAG: /* Text */ 1,
        _0: errorObj.count.toString(),
      };
    case /* Percentage */ 2:
      return {
        TAG: /* Text */ 1,
        _0: errorObj.percentage.toString(),
      };
  }
}

var tableEntity = EntityType.makeEntity(
  "",
  getObjects,
  visibleColumns,
  visibleColumns,
  getHeading,
  getCell,
  "queryData",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  [],
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

function ErrorReasons(props) {
  var errors = props.errors;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowModal = match$1[1];
  var showModal = match$1[0];
  var match$2 = React.useState(function () {
    return 0;
  });
  var val = errors[0];
  var errorStr = val !== undefined ? val.reason.slice(0, 15) : "Error Reasons";
  var getCellText = "" + errorStr + "...";
  var tableData =
    errors.length > 0
      ? errors.map(function (item) {
          return {
            error_reason: item.reason,
            count: item.count,
            percentage: item.percentage,
          };
        })
      : [];
  var tableBorderClass =
    "border-collapse border border-jp-gray-940 border-solid border-2 border-opacity-30 dark:border-jp-gray-dark_table_border_color dark:border-opacity-30";
  return React.createElement(
    React.Fragment,
    undefined,
    errors.length > 0
      ? React.createElement(
          "div",
          {
            className:
              "underline underline-offset-4 font-medium cursor-pointer " +
              match.globalUIConfig.font.textColor.primaryNormal +
              "",
            onClick: function (param) {
              Curry._1(setShowModal, function (param) {
                return !showModal;
              });
            },
          },
          getCellText,
        )
      : "NA",
    React.createElement(Modal.make, {
      showModal: showModal,
      setShowModal: setShowModal,
      children: React.createElement(LoadedTable.make, {
        visibleColumns: visibleColumns,
        defaultSort: {
          key: "",
          order: /* INC */ 0,
        },
        title: " ",
        actualData: tableData,
        totalResults: tableData.length,
        resultsPerPage: 10,
        offset: match$2[0],
        setOffset: match$2[1],
        entity: tableEntity,
        currrentFetchCount: tableData.length,
        hideTitle: true,
        ignoreHeaderBg: true,
        tableLocalFilter: false,
        tableheadingClass: tableBorderClass,
        tableBorderClass: tableBorderClass,
        tableDataBorderClass: tableBorderClass,
        isAnalyticsModule: true,
      }),
      modalHeading: "Top 5 Error Reasons",
      modalClass: "w-full max-w-xl mx-auto md:mt-44 ",
      closeOnOutsideClick: true,
    }),
  );
}

var make = ErrorReasons;

export {
  visibleColumns,
  colMapper,
  tableItemToObjMapper,
  getObjects,
  getHeading,
  getCell,
  tableEntity,
  make,
};
/* tableEntity Not a pure module */
