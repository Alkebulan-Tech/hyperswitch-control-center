// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Table from "../../../components/Table.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as EntityType from "../../../entities/EntityType.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DynamicChart from "../../../components/DynamicChart.bs.js";
import * as DateTimeUtils from "../../../utils/DateTimeUtils.bs.js";
import * as AnalyticsTypes from "../AnalyticsTypes.bs.js";
import * as AnalyticsUtils from "../../../entities/analytics/AnalyticsUtils.bs.js";
import * as HSAnalyticsUtils from "../HSAnalyticsUtils.bs.js";

var domain = "refunds";

function colMapper(col) {
  switch (col) {
    case /* SuccessRate */ 0:
      return "refund_success_rate";
    case /* Count */ 1:
      return "refund_count";
    case /* SuccessCount */ 2:
      return "refund_success_count";
    case /* ProcessedAmount */ 3:
      return "refund_processed_amount";
    case /* Connector */ 4:
      return "connector";
    case /* RefundMethod */ 5:
      return "refund_method";
    case /* Currency */ 6:
      return "currency";
    case /* Status */ 7:
      return "refund_status";
    case /* NoCol */ 8:
      return "";
  }
}

function tableItemToObjMapper(dict) {
  return {
    refund_success_rate: LogicUtils.getFloat(dict, "refund_success_rate", 0.0),
    refund_count: LogicUtils.getFloat(dict, "refund_count", 0.0),
    refund_success_count: LogicUtils.getFloat(
      dict,
      "refund_success_count",
      0.0,
    ),
    refund_processed_amount: LogicUtils.getFloat(
      dict,
      "refund_processed_amount",
      0.0,
    ),
    connector: LogicUtils.getFirstLetterCaps(
      LogicUtils.getString(dict, "connector", "OTHER"),
      undefined,
      undefined,
    ),
    refund_method: LogicUtils.getFirstLetterCaps(
      LogicUtils.getString(dict, "refund_method", "OTHER"),
      undefined,
      undefined,
    ),
    currency: LogicUtils.getString(dict, "currency", "OTHER").toUpperCase(),
    refund_status: LogicUtils.getString(
      dict,
      "refund_status",
      "OTHER",
    ).toUpperCase(),
  };
}

function getUpdatedHeading(param, param$1) {
  return function (colType) {
    var key = colMapper(colType);
    switch (colType) {
      case /* SuccessRate */ 0:
        return Table.makeHeaderInfo(
          key,
          "Success Rate",
          /* NumericType */ 3,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case /* Count */ 1:
        return Table.makeHeaderInfo(
          key,
          "Refund Count",
          /* NumericType */ 3,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case /* SuccessCount */ 2:
        return Table.makeHeaderInfo(
          key,
          "Refund Success Count",
          /* NumericType */ 3,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case /* ProcessedAmount */ 3:
        return Table.makeHeaderInfo(
          key,
          "Refund Processed Amount",
          /* NumericType */ 3,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case /* Connector */ 4:
        return Table.makeHeaderInfo(
          key,
          "Connector",
          /* DropDown */ 5,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case /* RefundMethod */ 5:
        return Table.makeHeaderInfo(
          key,
          "RefundMethod",
          /* DropDown */ 5,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case /* Currency */ 6:
        return Table.makeHeaderInfo(
          key,
          "Currency",
          /* DropDown */ 5,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case /* Status */ 7:
        return Table.makeHeaderInfo(
          key,
          "Status",
          /* DropDown */ 5,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
      case /* NoCol */ 8:
        return Table.makeHeaderInfo(
          key,
          "",
          undefined,
          false,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        );
    }
  };
}

function getCell(refundTable, colType) {
  var usaNumberAbbreviation = function (labelValue) {
    return LogicUtils.shortNum(
      labelValue,
      LogicUtils.getDefaultNumberFormat(undefined),
      undefined,
      undefined,
    );
  };
  var percentFormat = function (value) {
    return "" + value.toFixed(2) + "%";
  };
  switch (colType) {
    case /* SuccessRate */ 0:
      return {
        TAG: /* Numeric */ 15,
        _0: refundTable.refund_success_rate,
        _1: percentFormat,
      };
    case /* Count */ 1:
      return {
        TAG: /* Numeric */ 15,
        _0: refundTable.refund_count,
        _1: usaNumberAbbreviation,
      };
    case /* SuccessCount */ 2:
      return {
        TAG: /* Numeric */ 15,
        _0: refundTable.refund_success_count,
        _1: usaNumberAbbreviation,
      };
    case /* ProcessedAmount */ 3:
      return {
        TAG: /* Numeric */ 15,
        _0: refundTable.refund_processed_amount / 100.0,
        _1: usaNumberAbbreviation,
      };
    case /* Connector */ 4:
      return {
        TAG: /* Text */ 1,
        _0: refundTable.connector,
      };
    case /* RefundMethod */ 5:
      return {
        TAG: /* Text */ 1,
        _0: refundTable.refund_method,
      };
    case /* Currency */ 6:
      return {
        TAG: /* Text */ 1,
        _0: refundTable.currency,
      };
    case /* Status */ 7:
      return {
        TAG: /* Text */ 1,
        _0: refundTable.refund_status,
      };
    case /* NoCol */ 8:
      return {
        TAG: /* Text */ 1,
        _0: "",
      };
  }
}

function getRefundTable(json) {
  return LogicUtils.getArrayFromJson(json, []).map(function (item) {
    return tableItemToObjMapper(LogicUtils.getDictFromJsonObject(item));
  });
}

function refundTableEntity(param) {
  return EntityType.makeEntity(
    "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
    getRefundTable,
    AnalyticsTypes.defaultRefundColumns,
    AnalyticsTypes.allRefundColumns,
    getUpdatedHeading(undefined, undefined),
    getCell,
    "queryData",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    [HSAnalyticsUtils.startTimeFilterKey, HSAnalyticsUtils.endTimeFilterKey],
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

var singleStateInitialValue = {
  refund_success_rate: 0.0,
  refund_count: 0,
  refund_success_count: 0,
  refund_processed_amount: 0.0,
};

var singleStateSeriesInitialValue = {
  refund_success_rate: 0.0,
  refund_count: 0,
  refund_success_count: 0,
  time_series: "",
  refund_processed_amount: 0.0,
};

function singleStateItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        refund_success_rate: LogicUtils.getFloat(
          dict,
          "refund_success_rate",
          0.0,
        ),
        refund_count: LogicUtils.getInt(dict, "refund_count", 0),
        refund_success_count: LogicUtils.getInt(
          dict,
          "refund_success_count",
          0,
        ),
        refund_processed_amount: LogicUtils.getFloat(
          dict,
          "refund_processed_amount",
          0.0,
        ),
      };
    }),
    singleStateInitialValue,
  );
}

function singleStateSeriesItemToObjMapper(json) {
  return Core__Option.getOr(
    Core__Option.map(Core__JSON.Decode.object(json), function (dict) {
      return {
        refund_success_rate: HSAnalyticsUtils.setPrecision(
          LogicUtils.getFloat(dict, "refund_success_rate", 0.0),
          undefined,
          undefined,
        ),
        refund_count: LogicUtils.getInt(dict, "refund_count", 0),
        refund_success_count: LogicUtils.getInt(
          dict,
          "refund_success_count",
          0,
        ),
        time_series: LogicUtils.getString(dict, "time_bucket", ""),
        refund_processed_amount: HSAnalyticsUtils.setPrecision(
          LogicUtils.getFloat(dict, "refund_processed_amount", 0.0),
          undefined,
          undefined,
        ),
      };
    }),
    singleStateSeriesInitialValue,
  );
}

function itemToObjMapper(json) {
  var data = HSAnalyticsUtils.getQueryData(json).map(
    singleStateItemToObjMapper,
  );
  var ele = data[0];
  if (ele !== undefined) {
    return ele;
  } else {
    return singleStateInitialValue;
  }
}

function timeSeriesObjMapper(json) {
  return HSAnalyticsUtils.getQueryData(json).map(
    singleStateSeriesItemToObjMapper,
  );
}

var defaultColumns = [
  {
    sectionName: "",
    columns: [
      /* SuccessRate */ 0, /* Count */ 1, /* SuccessCount */ 2,
      /* ProcessedAmount */ 3,
    ],
  },
];

function compareLogic(firstValue, secondValue) {
  var temp2 = secondValue[0];
  var temp1 = firstValue[0];
  if (Caml_obj.equal(temp1, temp2)) {
    return 0;
  } else if (Caml_obj.greaterthan(temp1, temp2)) {
    return -1;
  } else {
    return 1;
  }
}

function constructData(key, singlestatTimeseriesData) {
  switch (key) {
    case "refund_count":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.utcToISTDate(
              new Date(DateTimeUtils.parseAsFloat(ob.time_series)),
            ).valueOf(),
            ob.refund_count,
          ];
        })
        .toSorted(compareLogic);
    case "refund_processed_amount":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.utcToISTDate(
              new Date(DateTimeUtils.parseAsFloat(ob.time_series)),
            ).valueOf(),
            ob.refund_processed_amount / 100.0,
          ];
        })
        .toSorted(compareLogic);
    case "refund_success_count":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.utcToISTDate(
              new Date(DateTimeUtils.parseAsFloat(ob.time_series)),
            ).valueOf(),
            ob.refund_success_count,
          ];
        })
        .toSorted(compareLogic);
    case "refund_success_rate":
      return singlestatTimeseriesData
        .map(function (ob) {
          return [
            DateTimeUtils.utcToISTDate(
              new Date(DateTimeUtils.parseAsFloat(ob.time_series)),
            ).valueOf(),
            ob.refund_success_rate,
          ];
        })
        .toSorted(compareLogic);
    default:
      return [];
  }
}

function getStatData(
  singleStatData,
  timeSeriesData,
  deltaTimestampData,
  colType,
  _mode,
) {
  switch (colType) {
    case /* SuccessRate */ 0:
      var partial_arg = deltaTimestampData.currentSr;
      var partial_arg$1 = singleStatData.refund_success_rate;
      return {
        title:
          "" +
          LogicUtils.getFirstLetterCaps(domain, undefined, undefined) +
          " Success Rate",
        tooltipText: "Successful refund over total refund initiated",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$1,
            partial_arg,
            param,
          );
        },
        value: singleStatData.refund_success_rate,
        delta: Number(singleStatData.refund_success_rate.toFixed(2)),
        data: constructData("refund_success_rate", timeSeriesData),
        statType: "Rate",
        showDelta: false,
      };
    case /* Count */ 1:
      var partial_arg$2 = deltaTimestampData.currentSr;
      var partial_arg$3 = singleStatData.refund_count;
      return {
        title: "Overall Refunds",
        tooltipText: "Total refund initiated",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$3,
            partial_arg$2,
            param,
          );
        },
        value: singleStatData.refund_count,
        delta: Number(singleStatData.refund_count.toFixed(2)),
        data: constructData("refund_count", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case /* SuccessCount */ 2:
      var partial_arg$4 = deltaTimestampData.currentSr;
      var partial_arg$5 = singleStatData.refund_success_count;
      return {
        title: "Success Refunds",
        tooltipText: "Total successful refunds",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$5,
            partial_arg$4,
            param,
          );
        },
        value: singleStatData.refund_success_count,
        delta: Number(singleStatData.refund_success_count.toFixed(2)),
        data: constructData("refund_success_count", timeSeriesData),
        statType: "Volume",
        showDelta: false,
      };
    case /* ProcessedAmount */ 3:
      var partial_arg$6 = deltaTimestampData.currentSr;
      var partial_arg$7 = singleStatData.refund_processed_amount / 100.0;
      return {
        title: "Processed Amount",
        tooltipText: "Total amount processed successfully",
        deltaTooltipComponent: function (param) {
          return AnalyticsUtils.singlestatDeltaTooltipFormat(
            partial_arg$7,
            partial_arg$6,
            param,
          );
        },
        value: singleStatData.refund_processed_amount / 100.0,
        delta: Number(
          (singleStatData.refund_processed_amount / 100.0).toFixed(2),
        ),
        data: constructData("refund_processed_amount", timeSeriesData),
        statType: "Amount",
        showDelta: false,
      };
  }
}

var getStatSentiment = Object.fromEntries([
  ["Success Refunds", /* Negative */ 1],
  ["Overall Refunds", /* Negative */ 1],
  ["Processed Amount", /* Negative */ 1],
]);

function getSingleStatEntity(metrics) {
  return {
    urlConfig: [
      {
        uri:
          "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
        metrics: HSAnalyticsUtils.getStringListFromArrayDict(metrics),
      },
    ],
    getObjects: itemToObjMapper,
    getTimeSeriesObject: timeSeriesObjMapper,
    defaultColumns: defaultColumns,
    getData: getStatData,
    matrixUriMapper: function (param) {
      return (
        "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + ""
      );
    },
    statSentiment: Caml_option.some(getStatSentiment),
  };
}

var metricsConfig = [
  {
    metric_name_db: "refund_count",
    metric_label: "Volume",
    metric_type: /* Volume */ 1,
  },
  {
    metric_name_db: "refund_success_rate",
    metric_label: "Success Rate",
    metric_type: /* Rate */ 2,
  },
  {
    metric_name_db: "refund_processed_amount",
    metric_label: "Processed Amount",
    metric_type: /* Volume */ 1,
  },
];

function chartEntity(tabKeys) {
  return DynamicChart.makeEntity(
    {
      TAG: /* String */ 0,
      _0: "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
    },
    undefined,
    tabKeys,
    [HSAnalyticsUtils.startTimeFilterKey, HSAnalyticsUtils.endTimeFilterKey],
    ["refund_success_rate", "refund_count"],
    [],
    [],
    [/* Line */ 0],
    [
      {
        uri:
          "" + window._env_.apiBaseUrl + "/analytics/v1/metrics/" + domain + "",
        timeSeriesBody: DynamicChart.getTimeSeriesChart,
        legendBody: DynamicChart.getLegendBody,
        metrics: metricsConfig,
        timeCol: "time_bucket",
        filterKeys: tabKeys,
      },
    ],
    "Refunds Analytics",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
}

export {
  domain,
  colMapper,
  tableItemToObjMapper,
  getUpdatedHeading,
  getCell,
  getRefundTable,
  refundTableEntity,
  singleStateInitialValue,
  singleStateSeriesInitialValue,
  singleStateItemToObjMapper,
  singleStateSeriesItemToObjMapper,
  itemToObjMapper,
  timeSeriesObjMapper,
  defaultColumns,
  compareLogic,
  constructData,
  getStatData,
  getStatSentiment,
  getSingleStatEntity,
  metricsConfig,
  chartEntity,
};
/* getStatSentiment Not a pure module */
