// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../../utils/Modal.bs.js";
import * as React from "react";
import * as Loader from "../../../components/Loader.bs.js";
import * as Lottie from "../../../libraries/Lottie.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../../../utils/UIUtils.bs.js";
import * as APIUtils from "../../APIUtils/APIUtils.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../../utils/LogicUtils.bs.js";
import * as MatchMedia from "../../../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LottieFiles from "../../../components/custom-icons/LottieFiles.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as HSwitchUtils from "../../Utils/HSwitchUtils.bs.js";
import * as ReactDebounce from "../../../components/ReactDebounce.bs.js";
import * as SidebarValues from "../../../entryPoints/SidebarValues.bs.js";
import * as FramerMotion from "framer-motion";
import * as HyperswitchAtom from "../../../Recoils/HyperswitchAtom.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as React$1 from "@headlessui/react";
import * as GlobalSearchTypes from "./GlobalSearchTypes.bs.js";
import * as HSwitchGlobalVars from "../../../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as GlobalSearchBarUtils from "./GlobalSearchBarUtils.bs.js";

function GlobalSearchBar$RenderedComponent(props) {
  var searchText = props.searchText;
  return LogicUtils.listOfMatchedText(props.ele, searchText).map(
    function (item, i) {
      if (
        item.toLowerCase() === searchText.toLowerCase() &&
        searchText.length > 0
      ) {
        return React.createElement(
          "mark",
          {
            key: i.toString(),
            className:
              "border-searched_text_border bg-yellow-searched_text font-medium text-fs-14 text-lightgray_background opacity-50",
          },
          item,
        );
      } else {
        return React.createElement(
          "span",
          {
            key: i.toString(),
            className:
              "font-medium text-fs-14 text-lightgray_background opacity-50",
          },
          item,
        );
      }
    },
  );
}

var RenderedComponent = {
  make: GlobalSearchBar$RenderedComponent,
};

function GlobalSearchBar$SearchBox(props) {
  var openModalOnClickHandler = props.openModalOnClickHandler;
  var shortcutText = window.navigator.platform.includes("Mac")
    ? "Cmd + K"
    : "Ctrl + K";
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  if (isMobileView) {
    return React.createElement(Icon.make, {
      name: "search",
      size: 14,
      className: "mx-2",
      onClick: openModalOnClickHandler,
    });
  } else {
    return React.createElement(
      "div",
      {
        className:
          "flex w-80 gap-2 items-center bg-white text-grey-700 text-opacity-30 font-semibold justify-between py-2 px-3 rounded-lg border border-jp-gray-border_gray hover:cursor-text",
        onClick: openModalOnClickHandler,
      },
      React.createElement(
        "div",
        {
          className: "flex gap-2 ",
        },
        React.createElement(Icon.make, {
          name: "search",
          size: 14,
        }),
        React.createElement(
          "p",
          {
            className: "hidden lg:inline-block text-sm",
          },
          "Search",
        ),
      ),
      React.createElement(
        "div",
        {
          className: "text-semibold text-sm hidden md:block",
        },
        shortcutText,
      ),
    );
  }
}

var SearchBox = {
  make: GlobalSearchBar$SearchBox,
};

function GlobalSearchBar$EmptyResult(props) {
  return React.createElement(FramerMotion.motion.div, {
    animate: {
      scale: 1.0,
      opacity: 1.0,
    },
    layoutId: "empty",
    initial: {
      scale: 0.9,
      opacity: 0.0,
    },
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className:
            "flex flex-col w-full h-fit p-7 justify-center items-center gap-6",
        },
        React.createElement("img", {
          className: "w-1/9",
          src: "" + props.prefix + "/icons/globalSearchNoResult.svg",
        }),
        React.createElement(
          "div",
          {
            className: "w-3/5 text-wrap text-center break-all",
          },
          'No Results for " ' + props.searchText + ' "',
        ),
      ),
    ),
  });
}

var EmptyResult = {
  make: GlobalSearchBar$EmptyResult,
};

function GlobalSearchBar$OptionsWrapper(props) {
  var children = props.children;
  return React.createElement(FramerMotion.motion.div, {
    layoutId: "options",
    children: Caml_option.some(
      React.createElement(React$1.Combobox.Options, {
        static: true,
        className:
          "w-full overflow-auto text-base max-h-[60vh] focus:outline-none sm:text-sm",
        children: function (param) {
          return children;
        },
      }),
    ),
  });
}

var OptionsWrapper = {
  make: GlobalSearchBar$OptionsWrapper,
};

function GlobalSearchBar$OptionWrapper(props) {
  var children = props.children;
  var redirectOnSelect = props.redirectOnSelect;
  var value = props.value;
  var activeClasses = function (isActive) {
    var borderClass = isActive ? "bg-gray-100 dark:bg-jp-gray-960" : "";
    return (
      "group flex items-center w-full p-2 text-sm rounded-lg " +
      borderClass +
      ""
    );
  };
  return JsxPPXReactSupport.createElementWithKey(
    props.index.toString(),
    React$1.Combobox.Option,
    {
      value: Caml_option.some(value),
      className: "flex flex-row cursor-pointer truncate",
      onClick: function (param) {
        Curry._1(redirectOnSelect, value);
      },
      children: function (props) {
        return React.createElement(
          "div",
          {
            className: activeClasses(props.active),
          },
          children,
        );
      },
    },
  );
}

var OptionWrapper = {
  make: GlobalSearchBar$OptionWrapper,
};

function GlobalSearchBar$ModalWrapper(props) {
  return React.createElement(Modal.make, {
    showModal: props.showModal,
    setShowModal: props.setShowModal,
    children: JsxPPXReactSupport.createElementWithKey(
      "search",
      FramerMotion.motion.div,
      {
        animate: {
          scale: 1.0,
          borderRadius: ["15px", "15px", "15px", "15px"],
        },
        className:
          "flex flex-col bg-white gap-2 overflow-hidden py-2 !show-scrollbar",
        layoutId: "search",
        initial: {
          scale: 0.9,
          borderRadius: ["15px", "15px", "15px", "15px"],
        },
        children: Caml_option.some(props.children),
      },
    ),
    bgClass:
      "bg-transparent dark:bg-transparent border-transparent dark:border-transparent shadow-transparent",
    modalClass: "w-full md:w-7/12 lg:w-6/12 xl:w-6/12 2xl:w-4/12 mx-auto",
    paddingClass: "pt-24",
    closeOnOutsideClick: true,
  });
}

var ModalWrapper = {
  make: GlobalSearchBar$ModalWrapper,
};

function GlobalSearchBar$SearchResultsComponent(props) {
  var setShowModal = props.setShowModal;
  var redirectOnSelect = props.redirectOnSelect;
  var searchText = props.searchText;
  var searchResults = props.searchResults;
  return React.createElement(GlobalSearchBar$OptionsWrapper, {
    children: searchResults.map(function (section, index) {
      var borderClass =
        index !== ((searchResults.length - 1) | 0)
          ? "border-b-1 dark:border-jp-gray-960"
          : "";
      return React.createElement(
        FramerMotion.motion.div,
        {
          className: "px-3 mb-3 py-1 " + borderClass + "",
          layoutId: GlobalSearchTypes.getSectionHeader(section.section),
          children: Caml_option.some(null),
        },
        React.createElement(
          FramerMotion.motion.div,
          {
            animate: {
              opacity: 0.5,
            },
            className:
              "text-lightgray_background  px-2 pb-1 flex justify-between",
            layoutId:
              "" +
              GlobalSearchTypes.getSectionHeader(section.section) +
              "-" +
              String(index) +
              "",
            initial: {
              opacity: 0.5,
            },
            children: Caml_option.some(null),
          },
          React.createElement(
            "div",
            {
              className: "font-bold",
            },
            GlobalSearchTypes.getSectionHeader(section.section).toUpperCase(),
          ),
          React.createElement(
            "div",
            undefined,
            React.createElement(GlobalSearchBarUtils.ShowMoreLink.make, {
              section: section,
              cleanUpFunction: function (param) {
                Curry._1(setShowModal, function (param) {
                  return false;
                });
              },
              textStyleClass: "text-xs",
              searchText: searchText,
            }),
          ),
        ),
        section.results.map(function (item, i) {
          var elementsArray = item.texts;
          return React.createElement(GlobalSearchBar$OptionWrapper, {
            index: i,
            value: item,
            redirectOnSelect: redirectOnSelect,
            children: elementsArray.map(function (item, index) {
              var elementValue = Core__Option.getOr(
                Core__JSON.Decode.string(item),
                "",
              );
              return JsxPPXReactSupport.createElementVariadicWithKey(
                index.toString(),
                UIUtils.RenderIf.make,
                {
                  condition: LogicUtils.isNonEmptyString(elementValue),
                  children: null,
                },
                [
                  React.createElement(GlobalSearchBar$RenderedComponent, {
                    ele: elementValue,
                    searchText: searchText,
                  }),
                  React.createElement(UIUtils.RenderIf.make, {
                    condition:
                      index >= 0 && index < ((elementsArray.length - 1) | 0),
                    children: React.createElement(
                      "span",
                      {
                        className: "mx-2 text-lightgray_background opacity-50",
                      },
                      ">",
                    ),
                  }),
                ],
              );
            }),
          });
        }),
      );
    }),
  });
}

var SearchResultsComponent = {
  make: GlobalSearchBar$SearchResultsComponent,
};

function GlobalSearchBar(props) {
  var prefix = LogicUtils.useUrlPrefix(undefined);
  var setGLobalSearchResults = Recoil.useSetRecoilState(
    HyperswitchAtom.globalSeacrchAtom,
  );
  var fetchDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var match = React.useState(function () {
    return /* Idle */ 3;
  });
  var setState = match[1];
  var state = match[0];
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowModal = match$1[1];
  var showModal = match$1[0];
  var match$2 = React.useState(function () {
    return "";
  });
  var setSearchText = match$2[1];
  var match$3 = React.useState(function () {
    return [];
  });
  var setSearchResults = match$3[1];
  var searchResults = match$3[0];
  var merchentDetails = HSwitchUtils.useMerchantDetailsValue(undefined);
  var isReconEnabled = merchentDetails.recon_status === /* Active */ 2;
  var hswitchTabs = SidebarValues.useGetSidebarValues(isReconEnabled);
  var searchText = match$2[0].trim();
  var loader = LottieFiles.useLottieJson("loader-circle.json");
  var match$4 = Recoil.useRecoilValue(HyperswitchAtom.featureFlagAtom);
  var permissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var isShowRemoteResults =
    match$4.globalSearch && permissionJson.operationsView === /* Access */ 1;
  var redirectOnSelect = function (element) {
    var redirectLink = Core__Option.getOr(
      Core__JSON.Decode.string(element.redirect_link),
      "/search",
    );
    if (LogicUtils.isNonEmptyString(redirectLink)) {
      Curry._1(setShowModal, function (param) {
        return false;
      });
      return RescriptReactRouter.push(
        HSwitchGlobalVars.appendDashboardPath(redirectLink),
      );
    }
  };
  var getSearchResults = async function (results) {
    try {
      var url = APIUtils.getURL(
        /* GLOBAL_SEARCH */ 41,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([["query", searchText]]);
      var response = await Curry._7(
        fetchDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var local_results = [];
      results.forEach(function (item) {
        var match = item.section;
        if (match !== 0) {
          return;
        } else {
          Caml_splice_call.spliceObjApply(local_results, "push", [
            item.results,
          ]);
          return;
        }
      });
      var remote_results = GlobalSearchBarUtils.parseResponse(response);
      setGLobalSearchResults(function (param) {
        return {
          local_results: local_results,
          remote_results: remote_results,
          searchText: searchText,
        };
      });
      var values = GlobalSearchBarUtils.getRemoteResults(response);
      Caml_splice_call.spliceObjApply(results, "push", [values]);
      if (results.length > 0) {
        var defaultItem = GlobalSearchBarUtils.getDefaultResult(searchText);
        var arr = [defaultItem].concat(results);
        Curry._1(setSearchResults, function (param) {
          return arr;
        });
      } else {
        Curry._1(setSearchResults, function (param) {
          return [];
        });
      }
      return Curry._1(setState, function (param) {
        return /* Loaded */ 1;
      });
    } catch (exn) {
      return Curry._1(setState, function (param) {
        return /* Failed */ 2;
      });
    }
  };
  React.useEffect(
    function () {
      var results = [];
      if (searchText.length > 0) {
        Curry._1(setState, function (param) {
          return /* Loading */ 0;
        });
        var localResults = GlobalSearchBarUtils.getLocalMatchedResults(
          searchText,
          hswitchTabs,
        );
        if (localResults.results.length > 0) {
          results.push(localResults);
        }
        if (isShowRemoteResults) {
          getSearchResults(results);
        } else {
          if (results.length > 0) {
            var defaultItem = GlobalSearchBarUtils.getDefaultResult(searchText);
            var arr = [defaultItem].concat(results);
            Curry._1(setSearchResults, function (param) {
              return arr;
            });
          } else {
            Curry._1(setSearchResults, function (param) {
              return [];
            });
          }
          Curry._1(setState, function (param) {
            return /* Loaded */ 1;
          });
        }
      } else {
        Curry._1(setState, function (param) {
          return /* Idle */ 3;
        });
        Curry._1(setSearchResults, function (param) {
          return [];
        });
      }
    },
    [searchText],
  );
  React.useEffect(
    function () {
      Curry._1(setSearchText, function (param) {
        return "";
      });
    },
    [showModal],
  );
  React.useEffect(function () {
    var onKeyPress = function ($$event) {
      var metaKey = $$event.metaKey;
      var keyPressed = $$event.key;
      var ctrlKey = $$event.ctrlKey;
      if (
        window.navigator.platform.includes("Mac") &&
        metaKey &&
        keyPressed === "k"
      ) {
        return Curry._1(setShowModal, function (param) {
          return true;
        });
      } else if (ctrlKey && keyPressed === "k") {
        $$event.preventDefault();
        return Curry._1(setShowModal, function (param) {
          return true;
        });
      } else {
        return;
      }
    };
    window.addEventListener("keydown", onKeyPress);
    return function (param) {
      window.removeEventListener("keydown", onKeyPress);
    };
  }, []);
  var openModalOnClickHandler = function (param) {
    Curry._1(setShowModal, function (param) {
      return true;
    });
  };
  var borderClass =
    searchText.length > 0 ? "border-b dark:border-jp-gray-960" : "";
  var setGlobalSearchText = ReactDebounce.useDebounced(500, function (value) {
    Curry._1(setSearchText, function (param) {
      return value;
    });
  });
  var leftIcon =
    state !== 0
      ? React.createElement(
          "div",
          {
            className: "self-center py-3 pl-5 pr-4",
            id: "leftIcon",
          },
          React.createElement(Icon.make, {
            name: "search",
            size: 18,
          }),
        )
      : React.createElement(
          "div",
          {
            className: "w-14 overflow-hidden mr-1",
          },
          React.createElement(
            "div",
            {
              className: "w-24 -ml-5 ",
            },
            React.createElement(Lottie.make, {
              animationData: loader,
              autoplay: true,
              loop: true,
            }),
          ),
        );
  var modalSearchBox = React.createElement(FramerMotion.motion.div, {
    className: "h-11 bg-white",
    layoutId: "input",
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-row items-center grow " + borderClass + "",
        },
        leftIcon,
        React.createElement(React$1.Combobox.Input, {
          as: "input",
          className:
            "w-full py-3 !text-lg bg-transparent focus:outline-none cursor-default sm:text-sm",
          autoFocus: true,
          autoComplete: "off",
          placeholder: "Search",
          onChange: function ($$event) {
            Curry._1(setGlobalSearchText, $$event.target.value);
          },
        }),
        React.createElement(
          "div",
          {
            className:
              "bg-gray-200 py-1 px-2 rounded-md flex gap-1 items-center mr-5 cursor-pointer ml-2 opacity-70",
            onClick: function (param) {
              Curry._1(setShowModal, function (param) {
                return false;
              });
            },
          },
          React.createElement(
            "span",
            {
              className: "opacity-40 font-bold text-sm",
            },
            "Esc",
          ),
          React.createElement(Icon.make, {
            name: "times",
            size: 15,
            parentClass: "flex justify-end opacity-30",
          }),
        ),
      ),
    ),
  });
  return React.createElement(
    "div",
    {
      className: "w-max",
    },
    React.createElement(GlobalSearchBar$SearchBox, {
      openModalOnClickHandler: openModalOnClickHandler,
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition: showModal,
      children: React.createElement(GlobalSearchBar$ModalWrapper, {
        showModal: showModal,
        setShowModal: setShowModal,
        children: React.createElement(React$1.Combobox, {
          className: "w-full",
          onChange: redirectOnSelect,
          children: function (param) {
            return React.createElement(
              React.Fragment,
              undefined,
              modalSearchBox,
              state !== 0
                ? LogicUtils.isNonEmptyString(searchText) &&
                  searchResults.length === 0
                  ? React.createElement(GlobalSearchBar$EmptyResult, {
                      prefix: prefix,
                      searchText: searchText,
                    })
                  : React.createElement(
                      GlobalSearchBar$SearchResultsComponent,
                      {
                        searchResults: searchResults,
                        searchText: searchText,
                        redirectOnSelect: redirectOnSelect,
                        setShowModal: setShowModal,
                      },
                    )
                : React.createElement(
                    "div",
                    {
                      className: "my-14 py-4",
                    },
                    React.createElement(Loader.make, {}),
                  ),
            );
          },
        }),
      }),
    }),
  );
}

var make = GlobalSearchBar;

export {
  RenderedComponent,
  SearchBox,
  EmptyResult,
  OptionsWrapper,
  OptionWrapper,
  ModalWrapper,
  SearchResultsComponent,
  make,
};
/* Icon Not a pure module */
