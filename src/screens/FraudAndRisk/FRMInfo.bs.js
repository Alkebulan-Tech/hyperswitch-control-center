// Generated by ReScript, PLEASE EDIT WITH CARE

import * as InputFields from "../../components/InputFields.bs.js";

var frmList = [/* Signifyd */ 0];

var flowTypeList = [/* PreAuth */ 0, /* PostAuth */ 1];

function getFRMNameString(frm) {
  if (typeof frm === "number") {
    if (frm !== 0) {
      return "riskified";
    } else {
      return "signifyd";
    }
  } else {
    return frm._0;
  }
}

function getFRMNameTypeFromString(connector) {
  switch (connector) {
    case "riskified":
      return /* Riskifyed */ 1;
    case "signifyd":
      return /* Signifyd */ 0;
    default:
      return /* UnknownFRM */ {
        _0: "Not known",
      };
  }
}

function getFRMAuthType(connector) {
  if (typeof connector === "number") {
    return "HeaderKey";
  } else {
    return connector._0;
  }
}

var signifydInfo_connectorFields = [
  {
    placeholder: "Enter API Key",
    label: "API Key",
    name: "connector_account_details.api_key",
    inputType: function (param) {
      return function (param$1) {
        var param$2;
        var param$3;
        var param$4;
        var param$5;
        var param$6;
        var param$7;
        var param$8;
        var param$9;
        var param$10;
        var param$11;
        var param$12;
        var param$13;
        var param$14;
        var param$15;
        var param$16;
        var param$17;
        var param$18;
        var param$19;
        var param$20;
        var param$21;
        var param$22;
        var param$23;
        var param$24;
        var param$25;
        var param$26;
        var param$27;
        return InputFields.textInput(
          param,
          param$1,
          param$2,
          param$3,
          param$4,
          param$5,
          param$6,
          param$7,
          param$8,
          param$9,
          param$10,
          param$11,
          param$12,
          param$13,
          param$14,
          param$15,
          param$16,
          param$17,
          param$18,
          param$19,
          param$20,
          param$21,
          param$22,
          param$23,
          param$24,
          param$25,
          param$26,
          param$27,
        );
      };
    },
    isRequired: true,
    encodeToBase64: false,
  },
];

var signifydInfo = {
  name: /* Signifyd */ 0,
  description: "One platform to protect the entire shopper journey end-to-end",
  connectorFields: signifydInfo_connectorFields,
};

var riskifyedInfo_connectorFields = [
  {
    placeholder: "Enter API Key",
    label: "API Key",
    name: "connector_account_details.api_key",
    inputType: function (param) {
      return function (param$1) {
        var param$2;
        var param$3;
        var param$4;
        var param$5;
        var param$6;
        var param$7;
        var param$8;
        var param$9;
        var param$10;
        var param$11;
        var param$12;
        var param$13;
        var param$14;
        var param$15;
        var param$16;
        var param$17;
        var param$18;
        var param$19;
        var param$20;
        var param$21;
        var param$22;
        var param$23;
        var param$24;
        var param$25;
        var param$26;
        var param$27;
        return InputFields.textInput(
          param,
          param$1,
          param$2,
          param$3,
          param$4,
          param$5,
          param$6,
          param$7,
          param$8,
          param$9,
          param$10,
          param$11,
          param$12,
          param$13,
          param$14,
          param$15,
          param$16,
          param$17,
          param$18,
          param$19,
          param$20,
          param$21,
          param$22,
          param$23,
          param$24,
          param$25,
          param$26,
          param$27,
        );
      };
    },
    isRequired: true,
    encodeToBase64: false,
  },
];

var riskifyedInfo = {
  name: /* Riskifyed */ 1,
  description: "Frictionless fraud management for eCommerce",
  connectorFields: riskifyedInfo_connectorFields,
};

var unknownFRMInfo_name = /* UnknownFRM */ {
  _0: "Unknown FRM",
};

var unknownFRMInfo_connectorFields = [];

var unknownFRMInfo = {
  name: unknownFRMInfo_name,
  description: "",
  connectorFields: unknownFRMInfo_connectorFields,
};

function getFRMInfo(frmPlayer) {
  if (typeof frmPlayer === "number") {
    if (frmPlayer !== 0) {
      return riskifyedInfo;
    } else {
      return signifydInfo;
    }
  } else {
    return unknownFRMInfo;
  }
}

var stepsArr = [
  /* PaymentMethods */ 1, /* IntegFields */ 0, /* SummaryAndTest */ 2,
];

function getNextStep(currentStep) {
  if (currentStep !== 1) {
    if (currentStep >= 3) {
      return /* Preview */ 3;
    } else {
      return /* SummaryAndTest */ 2;
    }
  } else {
    return /* IntegFields */ 0;
  }
}

function getPrevStep(currentStep) {
  if (currentStep >= 3) {
    return /* Preview */ 3;
  }
  switch (currentStep) {
    case /* IntegFields */ 0:
      return /* PaymentMethods */ 1;
    case /* PaymentMethods */ 1:
      return /* Preview */ 3;
    case /* SummaryAndTest */ 2:
      return /* IntegFields */ 0;
  }
}

function getFlowTypeNameString(flowType) {
  if (flowType) {
    return "post";
  } else {
    return "pre";
  }
}

function getFlowTypeVariantFromString(flowTypeString) {
  if (flowTypeString === "pre") {
    return /* PreAuth */ 0;
  } else {
    return /* PostAuth */ 1;
  }
}

function getFlowTypeLabel(flowType) {
  var match = getFlowTypeVariantFromString(flowType);
  if (match) {
    return "Post Auth";
  } else {
    return "Pre Auth";
  }
}

var frmPreActionList = [/* CancelTxn */ 0];

var frmPostActionList = [/* ManualReview */ 2];

function getActionTypeNameString(flowType) {
  switch (flowType) {
    case /* CancelTxn */ 0:
      return "cancel_txn";
    case /* AutoRefund */ 1:
      return "auto_refund";
    case /* ManualReview */ 2:
      return "manual_review";
    case /* Process */ 3:
      return "process";
  }
}

function getActionTypeNameVariantFromString(flowType) {
  switch (flowType) {
    case "auto_refund":
      return /* AutoRefund */ 1;
    case "cancel_txn":
      return /* CancelTxn */ 0;
    case "manual_review":
      return /* ManualReview */ 2;
    case "process":
      return /* Process */ 3;
    default:
      return /* CancelTxn */ 0;
  }
}

function getActionTypeLabel(actionType) {
  var match = getActionTypeNameVariantFromString(actionType);
  switch (match) {
    case /* CancelTxn */ 0:
      return "Cancel Transactions";
    case /* AutoRefund */ 1:
      return "Auto Refund";
    case /* ManualReview */ 2:
      return "Manual Review";
    case /* Process */ 3:
      return "Process Transactions";
  }
}

var flowTypeAllOptions = flowTypeList.map(getFlowTypeNameString);

function getActionTypeAllOptions(flowType) {
  var match = getFlowTypeVariantFromString(flowType);
  if (match) {
    return frmPostActionList.map(getActionTypeNameString);
  } else {
    return frmPreActionList.map(getActionTypeNameString);
  }
}

var ignoredField = [
  "business_country",
  "business_label",
  "business_sub_label",
  "connector_label",
  "merchant_connector_id",
  "connector_name",
  "profile_id",
  "applepay_verified_domains",
];

function actionDescriptionForFlow(flowType) {
  if (flowType) {
    return "PostAuth flow - fraudulent transactions are flagged for a manual review before amount capture.";
  } else {
    return "PreAuth flow - fraudulent transactions are cancelled before authorization.";
  }
}

export {
  frmList,
  flowTypeList,
  getFRMNameString,
  getFRMNameTypeFromString,
  getFRMAuthType,
  signifydInfo,
  riskifyedInfo,
  unknownFRMInfo,
  getFRMInfo,
  stepsArr,
  getNextStep,
  getPrevStep,
  getFlowTypeNameString,
  getFlowTypeVariantFromString,
  getFlowTypeLabel,
  frmPreActionList,
  frmPostActionList,
  getActionTypeNameString,
  getActionTypeNameVariantFromString,
  getActionTypeLabel,
  flowTypeAllOptions,
  getActionTypeAllOptions,
  ignoredField,
  actionDescriptionForFlow,
};
/* flowTypeAllOptions Not a pure module */
