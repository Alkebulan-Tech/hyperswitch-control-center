// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as FRMInfo from "./FRMInfo.bs.js";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as APIUtils from "../APIUtils/APIUtils.bs.js";
import * as FRMUtils from "./FRMUtils.bs.js";
import * as ACLButton from "../../components/ACLButton.bs.js";
import * as CardUtils from "../Utils/CardUtils.bs.js";
import * as PageUtils from "../Utils/PageUtils.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GatewayIcon from "../../components/custom-icons/GatewayIcon.bs.js";
import * as LoadedTable from "../../components/LoadedTable.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as FRMTableUtils from "./FRMTableUtils.bs.js";
import * as ReactDebounce from "../../components/ReactDebounce.bs.js";
import * as HyperswitchAtom from "../../Recoils/HyperswitchAtom.bs.js";
import * as HelperComponents from "../Helpers/HelperComponents.bs.js";
import * as HSwitchGlobalVars from "../../utils/HSwitchGlobalVars.bs.js";
import * as PageLoaderWrapper from "../Utils/PageLoaderWrapper.bs.js";
import * as TableSearchFilter from "../Utils/TableSearchFilter.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as ConnectorListMapper from "../../utils/Mappers/ConnectorListMapper.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function FRMSelect$NewProcessorCards(props) {
  var configuredFRMs = props.configuredFRMs;
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var unConfiguredFRMs = FRMInfo.frmList.filter(function (total) {
    return Core__Option.isNone(
      configuredFRMs.find(function (item) {
        return item === total;
      }),
    );
  });
  var unConfiguredFRMCount = unConfiguredFRMs.length;
  var descriptedFRMs = function (frmList, heading) {
    return React.createElement(
      React.Fragment,
      undefined,
      React.createElement(
        "h2",
        {
          className:
            "font-bold text-xl text-black text-opacity-75 dark:text-white dark:text-opacity-75",
        },
        heading,
      ),
      React.createElement(
        "div",
        {
          className:
            "grid gap-4 lg:grid-cols-4 md:grid-cols-2 grid-cols-1 mb-5",
        },
        frmList.map(function (frm, i) {
          var frmName = FRMInfo.getFRMNameString(frm);
          var frmInfo = FRMInfo.getFRMInfo(frm);
          return JsxPPXReactSupport.createElementVariadicWithKey(
            i.toString(),
            CardUtils.CardLayout.make,
            {
              width: "w-full",
              children: null,
            },
            [
              React.createElement(
                "div",
                {
                  className: "flex gap-2 items-center mb-3",
                },
                React.createElement(GatewayIcon.make, {
                  gateway: frmName.toUpperCase(),
                  className: "w-10 h-10 rounded-lg",
                }),
                React.createElement(
                  "h1",
                  {
                    className: "text-xl font-semibold break-all",
                  },
                  LogicUtils.capitalizeString(frmName),
                ),
              ),
              React.createElement(
                "div",
                {
                  className: "overflow-hidden text-gray-400 flex-1 mb-6",
                },
                frmInfo.description,
              ),
              React.createElement(ACLButton.make, {
                text: "Connect",
                buttonType: /* Secondary */ 1,
                buttonSize: /* Small */ 2,
                leftIcon: {
                  TAG: /* CustomIcon */ 1,
                  _0: React.createElement(Icon.make, {
                    name: "plus",
                    size: 16,
                    className:
                      "text-jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme",
                  }),
                },
                onClick: function (param) {
                  RescriptReactRouter.push(
                    HSwitchGlobalVars.appendDashboardPath(
                      "/fraud-risk-management/new?name=" + frmName + "",
                    ),
                  );
                },
                access: userPermissionJson.connectorsManage,
              }),
            ],
          );
        }),
      ),
    );
  };
  return React.createElement(UIUtils.RenderIf.make, {
    condition: unConfiguredFRMCount > 0,
    children: React.createElement(
      "div",
      {
        className: "flex flex-col gap-4",
      },
      descriptedFRMs(
        FRMInfo.frmList,
        "Connect a new fraud & risk management player",
      ),
    ),
  });
}

var NewProcessorCards = {
  make: FRMSelect$NewProcessorCards,
};

function FRMSelect(props) {
  var match = React.useState(function () {
    return /* Loading */ 0;
  });
  var setScreenState = match[1];
  var fetchDetails = APIUtils.useGetMethod(undefined, undefined);
  var isMobileView = MatchMedia.useMatchMedia("(max-width: 844px)");
  var userPermissionJson = Recoil.useRecoilValue(
    HyperswitchAtom.userPermissionAtom,
  );
  var match$1 = React.useState(function () {
    return [];
  });
  var setConfiguredFRMs = match$1[1];
  var configuredFRMs = match$1[0];
  var match$2 = React.useState(function () {
    return [];
  });
  var setPreviouslyConnectedData = match$2[1];
  var match$3 = React.useState(function () {
    return [];
  });
  var setFilteredFRMData = match$3[1];
  var filteredFRMData = match$3[0];
  var match$4 = React.useState(function () {
    return 0;
  });
  var match$5 = React.useState(function () {
    return "";
  });
  var customUI = React.createElement(
    HelperComponents.BluredTableComponent.make,
    {
      infoText: "No connectors configured yet. Try connecting a connector.",
      buttonText: "Take me to connectors",
      onClickElement: Caml_option.some(null),
      onClickUrl: "connectors",
      moduleName: "Fraud & Risk Management",
      moduleSubtitle:
        "Connect and configure processors to screen transactions and mitigate fraud",
    },
  );
  React.useEffect(function () {
    Core__Promise.$$catch(
      Curry._1(
        fetchDetails,
        APIUtils.getURL(
          /* FRAUD_RISK_MANAGEMENT */ 25,
          /* Get */ 0,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
        ),
      ).then(function (json) {
        var processorsList = LogicUtils.getArrayFromJson(json, []).map(
          LogicUtils.getDictFromJsonObject,
        );
        var connectorsCount = FRMUtils.filterList(
          processorsList,
          /* FRMPlayer */ 1,
          undefined,
        ).length;
        if (connectorsCount <= 0) {
          return Curry._1(setScreenState, function (param) {
            return /* Custom */ 2;
          });
        }
        var frmList = FRMUtils.filterList(
          processorsList,
          /* Connector */ 0,
          undefined,
        );
        var previousData = frmList.map(
          ConnectorListMapper.getProcessorPayloadType,
        );
        Curry._1(setFilteredFRMData, function (param) {
          return previousData.map(function (prim) {
            return prim;
          });
        });
        Curry._1(setPreviouslyConnectedData, function (param) {
          return previousData.map(function (prim) {
            return prim;
          });
        });
        var arr = frmList.map(function (paymentMethod) {
          return FRMInfo.getFRMNameTypeFromString(
            LogicUtils.getString(paymentMethod, "connector_name", ""),
          );
        });
        Curry._1(setConfiguredFRMs, function (param) {
          return arr;
        });
        Curry._1(setScreenState, function (param) {
          return /* Success */ 1;
        });
      }),
      function (param) {
        Curry._1(setScreenState, function (param) {
          return /* Error */ {
            _0: "Failed to fetch",
          };
        });
        return Promise.resolve(undefined);
      },
    );
  }, []);
  var filterLogic = ReactDebounce.useDebounced(200, function (ob) {
    var arr = ob[1];
    var searchText = ob[0];
    var filteredList = LogicUtils.isNonEmptyString(searchText)
      ? arr.filter(function (frmPlayer) {
          if (frmPlayer == null) {
            return false;
          } else {
            return LogicUtils.isContainingStringLowercase(
              frmPlayer.connector_name,
              searchText,
            );
          }
        })
      : arr;
    Curry._1(setFilteredFRMData, function (param) {
      return filteredList;
    });
  });
  return React.createElement(PageLoaderWrapper.make, {
    children: Caml_option.some(
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-10 ",
        },
        React.createElement(PageUtils.PageHeading.make, {
          title: "Fraud & Risk Management",
          subTitle:
            "Connect and configure processors to screen transactions and mitigate fraud",
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition: configuredFRMs.length > 0,
          children: React.createElement(LoadedTable.make, {
            title: "Connected Processors",
            actualData: filteredFRMData,
            totalResults: filteredFRMData.length,
            resultsPerPage: 20,
            offset: match$4[0],
            setOffset: match$4[1],
            entity: FRMTableUtils.connectorEntity(
              "fraud-risk-management",
              userPermissionJson.connectorsManage,
            ),
            currrentFetchCount: filteredFRMData.length,
            filters: Caml_option.some(
              React.createElement(TableSearchFilter.make, {
                data: match$2[0],
                filterLogic: filterLogic,
                placeholder: "Search FRM Player Name",
                searchVal: match$5[0],
                setSearchVal: match$5[1],
                customSearchBarWrapperWidth: "w-full lg:w-1/3",
                customInputBoxWidth: "w-full",
              }),
            ),
            collapseTableRow: false,
          }),
        }),
        React.createElement(FRMSelect$NewProcessorCards, {
          configuredFRMs: configuredFRMs,
        }),
        React.createElement(UIUtils.RenderIf.make, {
          condition: !isMobileView,
          children: React.createElement("img", {
            className: "w-full max-w-[1400px] mb-10",
            src: "/assets/frmBanner.svg",
          }),
        }),
      ),
    ),
    screenState: match[0],
    customUI: Caml_option.some(customUI),
  });
}

var make = FRMSelect;

export { NewProcessorCards, make };
/* Icon Not a pure module */
