// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Recoil from "recoil";
import * as AuthHooks from "../hooks/AuthHooks.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as CountryUtils from "./Utils/CountryUtils.bs.js";
import * as HSwitchUtils from "./Utils/HSwitchUtils.bs.js";
import * as HSLocalStorage from "./HSLocalStorage.bs.js";
import * as HyperswitchAtom from "../Recoils/HyperswitchAtom.bs.js";
import * as HSwitchGlobalVars from "../utils/HSwitchGlobalVars.bs.js";

function useSendEvent(param) {
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var name = HSLocalStorage.getFromUserDetails("name");
  var id = localStorage.getItem("deviceid");
  var deviceId = id == null ? HSLocalStorage.getFromUserDetails("email") : id;
  var parseEmail = function (email) {
    if (email.length === 0) {
      return HSLocalStorage.getFromMerchantDetails("email");
    } else {
      return email;
    }
  };
  var featureFlagDetails = Recoil.useRecoilValue(
    HyperswitchAtom.featureFlagAtom,
  );
  var match = HSwitchUtils.getBrowswerDetails(undefined);
  var country = CountryUtils.getCountryCodeStringFromVarient(
    match.clientCountry.isoAlpha2,
  );
  var environment;
  switch (HSwitchGlobalVars.hostType) {
    case /* Live */ 0:
      environment = "production";
      break;
    case /* Sandbox */ 1:
      environment = "sandbox";
      break;
    case /* Local */ 2:
      environment = "localhost";
      break;
    case /* Netlify */ 3:
      environment = "netlify";
      break;
  }
  var mixpanelToken = window._env_.mixpanelToken;
  var trackApi = async function (email, merchantId, description, $$event) {
    var body = {
      event: $$event,
      properties: {
        token: mixpanelToken,
        distinct_id: deviceId,
        $device_id: deviceId.split(":")[1],
        $screen_height: window.screen.height,
        $screen_width: window.screen.width,
        name: email,
        merchantName: name,
        email: email,
        mp_lib: "restapi",
        merchantId: merchantId,
        environment: environment,
        description: description,
        lang: window.navigator.language,
        $os: window.navigator.platform,
        $browser: window.navigator.appName,
        mp_country_code: country,
      },
    };
    try {
      await Curry._8(
        fetchApi,
        "" + HSwitchGlobalVars.getHostUrl + "/mixpanel/track",
        "data=" + encodeURI(Core__Option.getOr(JSON.stringify(body), "")) + "",
        undefined,
        undefined,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
      );
      return;
    } catch (exn) {
      return;
    }
  };
  return function (eventName, emailOpt, descriptionOpt, param) {
    var email = emailOpt !== undefined ? emailOpt : "";
    var description =
      descriptionOpt !== undefined
        ? Caml_option.valFromOption(descriptionOpt)
        : undefined;
    var eventName$1 = eventName.toLowerCase();
    var merchantId = HSLocalStorage.getFromMerchantDetails("merchant_id");
    if (featureFlagDetails.mixpanel) {
      trackApi(parseEmail(email), merchantId, description, eventName$1);
      return;
    }
  };
}

export { useSendEvent };
/* recoil Not a pure module */
