// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../../utils/Modal.bs.js";
import * as React from "react";
import * as UIUtils from "../../utils/UIUtils.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as MobileView from "../../components/MobileView.bs.js";
import * as DesktopView from "../../components/DesktopView.bs.js";
import * as ErrorBoundary from "../../components/ErrorBoundary.bs.js";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function Accordion$SectionAccordion(props) {
  var setShow = props.setShow;
  var hideHeaderWeb = props.hideHeaderWeb;
  var mobileRenderType = props.mobileRenderType;
  var headingClass = props.headingClass;
  var headerBg = props.headerBg;
  var children = props.children;
  var subtext = props.subtext;
  var title = props.title;
  var title$1 = title !== undefined ? title : "";
  var subtext$1 = subtext !== undefined ? subtext : "";
  var headerBg$1 =
    headerBg !== undefined ? headerBg : "md:bg-jp-gray-100 dark:bg-transparent";
  var headingClass$1 = headingClass !== undefined ? headingClass : "";
  var mobileRenderType$1 =
    mobileRenderType !== undefined ? mobileRenderType : /* Accordion */ 1;
  var hideHeaderWeb$1 = hideHeaderWeb !== undefined ? hideHeaderWeb : false;
  var setShow$1 = setShow !== undefined ? setShow : function (param) {};
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var match = React.useState(function () {
    return !isMobileView;
  });
  var setIsExpanded = match[1];
  var isExpanded = match[0];
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-section", title$1]],
    children: React.createElement(
      "div",
      {
        className:
          "border md:border-0 dark:border-jp-gray-950 " + headerBg$1 + "",
      },
      React.createElement(
        DesktopView.make,
        {
          children: null,
        },
        React.createElement(UIUtils.RenderIf.make, {
          condition: !hideHeaderWeb$1,
          children: React.createElement(
            "h3",
            {
              className: "text-base " + headingClass$1 + "",
            },
            title$1,
          ),
        }),
        React.createElement(
          "p",
          {
            className:
              "text-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50",
          },
          subtext$1,
        ),
        React.createElement(AddDataAttributes.make, {
          attributes: [["data-section", title$1]],
          children: children,
        }),
      ),
      React.createElement(
        MobileView.make,
        {
          children: null,
        },
        React.createElement(
          "div",
          {
            className:
              "md:font-bold font-semibold md:text-fs-16 text-fs-13 text-jp-gray-900 text-opacity-75 dark:text-white  dark:text-opacity-75 bg-white dark:bg-jp-gray-lightgray_background px-4 py-3 flex justify-start  text-jp-gray-900 text-opacity-75 ",
            onClick: function (param) {
              Curry._1(setIsExpanded, function (prev) {
                return !prev;
              });
              Curry._1(setShow$1, function (param) {
                return title$1;
              });
            },
          },
          React.createElement(
            "div",
            {
              className: "py-1 !text-lg",
            },
            title$1,
          ),
          React.createElement(
            "div",
            {
              className:
                "cursor-pointer flex  justify-center align-center text-jp-gray-900 text-right text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50 ml-auto",
            },
            React.createElement(Icon.make, {
              name: isExpanded ? "angle-down" : "angle-right",
              size: 15,
            }),
          ),
        ),
        mobileRenderType$1
          ? React.createElement(
              "div",
              {
                className:
                  "" +
                  (isExpanded ? "" : "hidden") +
                  " border-t-2 dark:border-jp-gray-950 md:border-0",
              },
              children,
            )
          : React.createElement(Modal.make, {
              showModal: isExpanded,
              setShowModal: setIsExpanded,
              children: React.createElement(
                "div",
                {
                  className: "mx-4 mb-4",
                },
                children,
              ),
              modalHeading: title$1,
              childClass: "",
              borderBottom: true,
            }),
      ),
    ),
  });
}

var SectionAccordion = {
  make: Accordion$SectionAccordion,
};

function Accordion$AccordionInfo(props) {
  var titleStyle = props.titleStyle;
  var contentExpandCss = props.contentExpandCss;
  var expanded = props.expanded;
  var accordianBottomContainerCss = props.accordianBottomContainerCss;
  var accordianTopContainerCss = props.accordianTopContainerCss;
  var arrowPosition = props.arrowPosition;
  var arrowFillColor = props.arrowFillColor;
  var accordion = props.accordion;
  var arrowFillColor$1 = arrowFillColor !== undefined ? arrowFillColor : "";
  var arrowPosition$1 =
    arrowPosition !== undefined ? arrowPosition : /* Left */ 0;
  var accordianTopContainerCss$1 =
    accordianTopContainerCss !== undefined ? accordianTopContainerCss : "";
  var accordianBottomContainerCss$1 =
    accordianBottomContainerCss !== undefined
      ? accordianBottomContainerCss
      : "";
  var expanded$1 = expanded !== undefined ? expanded : false;
  var contentExpandCss$1 =
    contentExpandCss !== undefined ? contentExpandCss : "";
  var titleStyle$1 = titleStyle !== undefined ? titleStyle : "";
  var match = React.useState(function () {
    return expanded$1;
  });
  var setIsExpanded = match[1];
  var isExpanded = match[0];
  var handleClick = function (_e) {
    Curry._1(setIsExpanded, function (prevExpanded) {
      return !prevExpanded;
    });
  };
  var contentClasses = isExpanded
    ? "flex-wrap bg-white dark:bg-jp-gray-lightgray_background text-lg " +
      contentExpandCss$1 +
      ""
    : "hidden";
  var svgDeg = isExpanded ? "90" : "0";
  var ui = accordion.renderContentOnTop;
  return React.createElement(
    "div",
    {
      className:
        "overflow-hidden border bg-white  border-jp-gray-500 dark:border-jp-gray-960 dark:bg-jp-gray-950 " +
        accordianTopContainerCss$1 +
        "",
    },
    React.createElement(
      "div",
      {
        className:
          "flex cursor-pointer items-center font-ibm-plex  bg-white hover:bg-jp-gray-100 dark:bg-jp-gray-950  dark:border-jp-gray-960 " +
          titleStyle$1 +
          " " +
          accordianBottomContainerCss$1 +
          "",
        onClick: handleClick,
      },
      arrowPosition$1 === /* Left */ 0
        ? React.createElement(
            "svg",
            {
              height: "11",
              width: "7",
              fill: "none",
              transform: "rotate(" + svgDeg + ")",
              viewBox: "0 0 7 11",
              xmlns: "http://www.w3.org/2000/svg",
            },
            React.createElement("path", {
              clipRule: "evenodd",
              d: "M-0.000107288 0L6.01489 5.013L-0.000107288 10.025V0Z",
              fill: arrowFillColor$1,
              fillRule: "evenodd",
            }),
          )
        : null,
      ui !== undefined
        ? Curry._1(ui, undefined)
        : React.createElement(
            "div",
            {
              className: "ml-5",
            },
            accordion.title,
          ),
      arrowPosition$1 === /* Right */ 1
        ? React.createElement(
            "svg",
            {
              height: "11",
              width: "7",
              fill: "none",
              transform: "rotate(" + svgDeg + ")",
              viewBox: "0 0 7 11",
              xmlns: "http://www.w3.org/2000/svg",
            },
            React.createElement("path", {
              clipRule: "evenodd",
              d: "M-0.000107288 0L6.01489 5.013L-0.000107288 10.025V0Z",
              fill: arrowFillColor$1,
              fillRule: "evenodd",
            }),
          )
        : null,
    ),
    React.createElement(
      "div",
      {
        className:
          "flex flex-col dark:border-jp-gray-960 border-t dark:hover:bg-jp-gray-900 dark:hover:bg-opacity-25 " +
          contentClasses +
          "",
      },
      Curry._1(accordion.renderContent, undefined),
    ),
  );
}

var AccordionInfo = {
  make: Accordion$AccordionInfo,
};

function Accordion(props) {
  var titleStyle = props.titleStyle;
  var gapClass = props.gapClass;
  var initialExpandedArray = props.initialExpandedArray;
  var arrowPosition = props.arrowPosition;
  var contentExpandCss = props.contentExpandCss;
  var accordianBottomContainerCss = props.accordianBottomContainerCss;
  var accordianTopContainerCss = props.accordianTopContainerCss;
  var arrowFillColor = props.arrowFillColor;
  var arrowFillColor$1 =
    arrowFillColor !== undefined ? arrowFillColor : "#CED0DA";
  var accordianTopContainerCss$1 =
    accordianTopContainerCss !== undefined
      ? accordianTopContainerCss
      : "mt-5 rounded-lg";
  var accordianBottomContainerCss$1 =
    accordianBottomContainerCss !== undefined
      ? accordianBottomContainerCss
      : "p-4";
  var contentExpandCss$1 =
    contentExpandCss !== undefined ? contentExpandCss : "px-8 font-bold";
  var arrowPosition$1 =
    arrowPosition !== undefined ? arrowPosition : /* Left */ 0;
  var initialExpandedArray$1 =
    initialExpandedArray !== undefined ? initialExpandedArray : [];
  var gapClass$1 = gapClass !== undefined ? gapClass : "";
  var titleStyle$1 =
    titleStyle !== undefined
      ? titleStyle
      : "font-bold text-lg text-jp-gray-700 dark:text-jp-gray-text_darktheme dark:text-opacity-50 hover:text-jp-gray-800 dark:hover:text-opacity-100";
  return React.createElement(ErrorBoundary.make, {
    children: React.createElement(
      "div",
      {
        className: "w-full " + gapClass$1 + "",
      },
      props.accordion.map(function (accordion, i) {
        return JsxPPXReactSupport.createElementWithKey(
          i.toString(),
          Accordion$AccordionInfo,
          {
            accordion: accordion,
            arrowFillColor: arrowFillColor$1,
            arrowPosition: arrowPosition$1,
            accordianTopContainerCss: accordianTopContainerCss$1,
            accordianBottomContainerCss: accordianBottomContainerCss$1,
            expanded: initialExpandedArray$1.includes(i),
            contentExpandCss: contentExpandCss$1,
            titleStyle: titleStyle$1,
          },
        );
      }),
    ),
  });
}

var make = Accordion;

export { SectionAccordion, AccordionInfo, make };
/* Icon Not a pure module */
