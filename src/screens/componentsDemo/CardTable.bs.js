// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as TableUtils from "../../components/TableUtils.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as AddDataAttributes from "../../components/AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function CardTable$TextCard(props) {
  var text = props.text;
  if (text.trim().length > 0) {
    return React.createElement(
      "p",
      {
        className: "break-words font-semibold",
      },
      text.trim().length > 0 ? text : "N/A",
    );
  } else {
    return "-";
  }
}

var TextCard = {
  make: CardTable$TextCard,
};

function CardTable$ItemValue(props) {
  var fontStyle = props.fontStyle;
  var customMoneyStyle = props.customMoneyStyle;
  var cell = props.cell;
  var customMoneyStyle$1 =
    customMoneyStyle !== undefined ? customMoneyStyle : "";
  var fontStyle$1 = fontStyle !== undefined ? fontStyle : "";
  switch (cell.TAG | 0) {
    case /* Label */ 0:
      var x = cell._0;
      return React.createElement(TableUtils.LabelCell.make, {
        labelColor: x.color,
        text: x.title,
        fontStyle: fontStyle$1,
      });
    case /* Text */ 1:
      return React.createElement(CardTable$TextCard, {
        text: cell._0,
      });
    case /* Currency */ 3:
      return React.createElement(TableUtils.MoneyCell.make, {
        amount: cell._0,
        currency: cell._1,
        customMoneyStyle: customMoneyStyle$1,
      });
    case /* Date */ 4:
      return React.createElement(TableUtils.DateCell.make, {
        timestamp: cell._0,
        isCard: true,
        textStyle: fontStyle$1,
        hideTime: true,
      });
    case /* StartEndDate */ 6:
      return React.createElement(TableUtils.StartEndDateCell.make, {
        startDate: cell._0,
        endDate: cell._1,
        isCard: true,
      });
    case /* Link */ 8:
      return React.createElement(TableUtils.LinkCell.make, {
        data: cell._0,
      });
    case /* CustomCell */ 10:
      return cell._0;
    case /* TrimmedText */ 12:
      return React.createElement(TableUtils.TrimmedText.make, {
        text: cell._0,
        width: cell._1,
        highlightText: "",
        hideShowMore: false,
      });
    case /* DeltaPercentage */ 13:
      return React.createElement(TableUtils.DeltaColumn.make, {
        value: cell._0,
        delta: cell._1,
      });
    case /* Numeric */ 15:
      return React.createElement(TableUtils.Numeric.make, {
        num: cell._0,
        mapper: cell._1,
        clearFormatting: false,
      });
    default:
      return null;
  }
}

var ItemValue = {
  make: CardTable$ItemValue,
};

function CardTable$CardDetails(props) {
  var isAnalyticsModule = props.isAnalyticsModule;
  var isBorderEnabled = props.isBorderEnabled;
  var offset = props.offset;
  var size = props.size;
  var rowIndex = props.rowIndex;
  var onRowClick = props.onRowClick;
  var heading = props.heading;
  var itemArray = props.itemArray;
  var size$1 = size !== undefined ? size : 4;
  var offset$1 = offset !== undefined ? offset : 0;
  var isBorderEnabled$1 =
    isBorderEnabled !== undefined ? isBorderEnabled : true;
  var match = React.useContext(ConfigContext.configContext);
  var onCardClick = function (_ev) {
    if (onRowClick !== undefined) {
      return Curry._1(onRowClick, (rowIndex + offset$1) | 0);
    }
  };
  var match$1 = React.useState(function () {
    return true;
  });
  var setshow = match$1[1];
  var show = match$1[0];
  var showMore = function (_ev) {
    Curry._1(setshow, function (prev) {
      return !prev;
    });
  };
  var itemArray$1 = show ? itemArray.slice(0, size$1) : itemArray;
  return React.createElement(
    "div",
    {
      className: "w-full lg:w-1/4 md:w-1/2",
      onClick: onCardClick,
    },
    React.createElement(
      "div",
      {
        className:
          "flex justify-between flex-wrap dark:bg-jp-gray-lightgray_background bg-white my-2 px-4 " +
          (isBorderEnabled$1
            ? "border border-jp-gray-500 dark:border-jp-gray-960 p-4 rounded"
            : "") +
          " ",
      },
      itemArray$1.map(function (cell, cellIndex) {
        var key = ((cellIndex + offset$1) | 0).toString();
        var label = heading[cellIndex];
        if (label !== undefined) {
          if (isAnalyticsModule) {
            return React.createElement(
              "div",
              {
                key: cellIndex.toString(),
                className: "w-full flex jutify-end",
              },
              React.createElement(
                "p",
                {
                  className: "mt-2 md:inline inline-block w-1/2 ",
                },
                label.title,
              ),
              React.createElement(
                "div",
                {
                  className: "md:inline flex justify-end  w-1/2 break-all",
                },
                JsxPPXReactSupport.createElementWithKey(
                  key,
                  CardTable$ItemValue,
                  {
                    cell: cell,
                  },
                ),
              ),
            );
          } else {
            return React.createElement(
              "div",
              {
                key: cellIndex.toString(),
                className: "w-full",
              },
              React.createElement(
                "p",
                {
                  className: "mt-2 md:inline inline-block w-1/2 ",
                },
                label.title,
              ),
              React.createElement(
                "div",
                {
                  className: "md:inline inline-block w-1/2 ",
                },
                JsxPPXReactSupport.createElementWithKey(
                  key,
                  CardTable$ItemValue,
                  {
                    cell: cell,
                  },
                ),
              ),
            );
          }
        } else {
          return null;
        }
      }),
      isAnalyticsModule
        ? React.createElement(
            "div",
            {
              className:
                "flex justify-end " +
                match.globalUIConfig.font.textColor.primaryNormal +
                " cursor-pointer",
              onClick: showMore,
            },
            itemArray.length > size$1 ? (show ? "More" : "Less") : null,
          )
        : null,
    ),
  );
}

var CardDetails = {
  make: CardTable$CardDetails,
};

function CardTable(props) {
  var isAnalyticsModule = props.isAnalyticsModule;
  var isBorderEnabled = props.isBorderEnabled;
  var size = props.size;
  var onRowClick = props.onRowClick;
  var offset = props.offset;
  var heading = props.heading;
  var offset$1 = offset !== undefined ? offset : 0;
  var size$1 = size !== undefined ? size : 4;
  var isBorderEnabled$1 =
    isBorderEnabled !== undefined ? isBorderEnabled : true;
  var isAnalyticsModule$1 =
    isAnalyticsModule !== undefined ? isAnalyticsModule : false;
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      {
        className: "overflow-auto flex flex-wrap",
      },
      props.rows.map(function (itemArray, rowIndex) {
        return React.createElement(AddDataAttributes.make, {
          attributes: [["data-card-details", "cardDetails"]],
          children: JsxPPXReactSupport.createElementWithKey(
            ((rowIndex + offset$1) | 0).toString(),
            CardTable$CardDetails,
            {
              itemArray: itemArray,
              heading: heading,
              onRowClick: onRowClick,
              rowIndex: rowIndex,
              size: size$1,
              offset: offset$1,
              isBorderEnabled: isBorderEnabled$1,
              isAnalyticsModule: isAnalyticsModule$1,
            },
          ),
        });
      }),
    ),
  );
}

var make = CardTable;

export { TextCard, ItemValue, CardDetails, make };
/* react Not a pure module */
