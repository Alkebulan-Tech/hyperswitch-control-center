// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as ReactBeautifulDnd from "react-beautiful-dnd";

function reorder(currentState, startIndex, endIndex) {
  if (startIndex === endIndex) {
    return [currentState, false];
  }
  var oldStateArray = currentState.slice();
  var removed = Js_array.removeCountInPlace(startIndex, 1, oldStateArray);
  Caml_splice_call.spliceObjApply(oldStateArray, "splice", [
    endIndex,
    0,
    removed,
  ]);
  return [oldStateArray, true];
}

function DragDropComponent(props) {
  var keyExtractor = props.keyExtractor;
  var setListItems = props.setListItems;
  var gap = props.gap;
  var listItems = props.listItems;
  var isHorizontal = props.isHorizontal;
  var isHorizontal$1 = isHorizontal !== undefined ? isHorizontal : true;
  var gap$1 = gap !== undefined ? gap : "";
  var onDragEnd = function (result) {
    var dest = result.destination;
    if (dest == null) {
      return;
    }
    var res_index = dest.index;
    var res_droppableId = dest.droppableId;
    var match = reorder(listItems, result.source.index, res_index);
    if (match[1]) {
      return Curry._1(setListItems, match[0]);
    }
  };
  var directionClass = isHorizontal$1 ? "flex-row" : "flex-col";
  var droppableDirection = isHorizontal$1 ? "horizontal" : "vertical";
  return React.createElement(ReactBeautifulDnd.DragDropContext, {
    children: Caml_option.some(
      React.createElement(ReactBeautifulDnd.Droppable, {
        children: function (provided, _snapshot) {
          return React.cloneElement(
            React.createElement(
              "div",
              {
                ref: Caml_option.some(provided.innerRef),
                className: "flex " + directionClass + " " + gap$1 + " w-full",
              },
              listItems.map(function (item, index) {
                return JsxPPXReactSupport.createElementWithKey(
                  "item-" + index.toString() + "",
                  ReactBeautifulDnd.Draggable,
                  {
                    children: function (provided, snapshot) {
                      var draggableElement = React.createElement(
                        "div",
                        {
                          ref: Caml_option.some(provided.innerRef),
                          onDragStart: provided.onDragStart,
                        },
                        Curry._3(
                          keyExtractor,
                          index,
                          item,
                          snapshot.isDragging,
                        ),
                      );
                      return React.cloneElement(
                        React.cloneElement(
                          draggableElement,
                          provided.draggableProps,
                        ),
                        provided.dragHandleProps,
                      );
                    },
                    draggableId: "item-" + index.toString() + "",
                    index: index,
                  },
                );
              }),
              provided.placeholder,
            ),
            provided.droppableProps,
          );
        },
        droppableId: "droppable",
        direction: droppableDirection,
      }),
    ),
    onDragEnd: onDragEnd,
  });
}

var make = DragDropComponent;

export { reorder, make };
/* react Not a pure module */
