// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.bs.js";
import * as Link from "../components/router/Link.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as PopUpState from "../hooks/PopUpState.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConfigContext from "../context/ConfigContext.bs.js";
import * as AddDataAttributes from "../components/AddDataAttributes.bs.js";
import * as HSwitchGlobalVars from "../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

var arrowDivider = React.createElement(
  "span",
  {
    className: "ml-2 mr-2",
  },
  React.createElement(Icon.make, {
    name: "chevron-right",
    size: 8,
    className: "align-middle  text-jp-gray-930",
  }),
);

function BreadCrumbNavigation(props) {
  var linkTextClass = props.linkTextClass;
  var commonTextClass = props.commonTextClass;
  var cursorStyle = props.cursorStyle;
  var is_reverse = props.is_reverse;
  var currentPageTitle = props.currentPageTitle;
  var path = props.path;
  var path$1 = path !== undefined ? path : [];
  var currentPageTitle$1 =
    currentPageTitle !== undefined ? currentPageTitle : "";
  var is_reverse$1 = is_reverse !== undefined ? is_reverse : false;
  var cursorStyle$1 = cursorStyle !== undefined ? cursorStyle : "cursor-help";
  var commonTextClass$1 = commonTextClass !== undefined ? commonTextClass : "";
  var linkTextClass$1 = linkTextClass !== undefined ? linkTextClass : "";
  var match = React.useContext(ConfigContext.configContext);
  var prefix = LogicUtils.useUrlPrefix(undefined);
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var pathLength = path$1.length;
  var textClass = "" + match.globalUIConfig.font.textColor.primaryNormal + "";
  var flexDirection = is_reverse$1
    ? "flex-wrap flex-row-reverse"
    : "flex-wrap flex-row";
  return React.createElement(
    "div",
    {
      className:
        "flex " + flexDirection + " font-semibold gap-2  items-center w-fit",
    },
    path$1.map(function (crumb, index) {
      var showCrumb = index <= 2 || index === ((pathLength - 1) | 0);
      var collapse = index === 2 && pathLength > 3;
      var fn = crumb.onClick;
      var onClick =
        fn !== undefined
          ? fn
          : function (_ev) {
              Curry._1(showPopUp, {
                heading: "Heads up!",
                description: Core__Option.getOr(crumb.warning, ""),
                popUpType: [/* Warning */ 4, /* WithIcon */ 0],
                handleCancel: {
                  text: "No, don't go back",
                },
                handleConfirm: {
                  text: "Yes, go back",
                  onClick: function (param) {
                    RescriptReactRouter.push(
                      HSwitchGlobalVars.appendDashboardPath(crumb.link),
                    );
                  },
                },
              });
            };
      var tmp;
      if (collapse) {
        tmp = React.createElement(
          "div",
          {
            className:
              "flex flex-row gap-1 text-jp-2-gray-100 font-medium items-center justify-center",
          },
          React.createElement("span", undefined, "..."),
          React.createElement(Icon.make, {
            name: "angle-down",
            size: 12,
          }),
        );
      } else {
        var match = crumb.warning;
        var match$1 = crumb.onClick;
        var tmp$1;
        var exit = 0;
        if (match !== undefined || match$1 !== undefined) {
          exit = 1;
        } else {
          tmp$1 = React.createElement(Link.make, {
            to_: "" + prefix + "" + crumb.link + "",
            children: crumb.title,
            className:
              "" +
              textClass +
              " " +
              linkTextClass$1 +
              " " +
              commonTextClass$1 +
              "",
          });
        }
        if (exit === 1) {
          tmp$1 = React.createElement(
            "a",
            {
              className:
                "" +
                textClass +
                " " +
                cursorStyle$1 +
                " " +
                linkTextClass$1 +
                " " +
                commonTextClass$1 +
                "",
              onClick: onClick,
            },
            crumb.title,
          );
        }
        tmp = React.createElement(AddDataAttributes.make, {
          attributes: [["data-breadcrumb", crumb.title]],
          children: React.createElement("div", undefined, tmp$1),
        });
      }
      return JsxPPXReactSupport.createElementWithKey(
        index.toString(),
        UIUtils.RenderIf.make,
        {
          condition: showCrumb,
          children: React.createElement(
            "div",
            {
              className: "flex " + flexDirection + "  items-center",
            },
            tmp,
            arrowDivider,
          ),
        },
      );
    }),
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-breadcrumb", currentPageTitle$1]],
      children: React.createElement(
        "div",
        {
          className: "text-fs-14 text-jp-gray-930 " + commonTextClass$1 + "",
        },
        currentPageTitle$1,
      ),
    }),
  );
}

var make = BreadCrumbNavigation;

export { arrowDivider, make };
/* arrowDivider Not a pure module */
