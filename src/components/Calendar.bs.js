// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import Dayjs from "dayjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as ConfigContext from "../context/ConfigContext.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function defaultCellHighlighter(param) {
  return {
    highlightSelf: false,
    highlightLeft: false,
    highlightRight: false,
  };
}

function defaultCellRenderer(obj) {
  if (obj === undefined) {
    return "";
  }
  var day = obj.split("-");
  return Core__Option.getOr(day[2], "");
}

function Calendar$TableRow(props) {
  var allowedDateRange = props.allowedDateRange;
  var setShowMsg = props.setShowMsg;
  var dateRangeLimit = props.dateRangeLimit;
  var customDisabledFutureDays = props.customDisabledFutureDays;
  var disableFutureDates = props.disableFutureDates;
  var disablePastDates = props.disablePastDates;
  var setHoverdDate = props.setHoverdDate;
  var hoverdDate = props.hoverdDate;
  var endDate = props.endDate;
  var startDate = props.startDate;
  var cellRenderer = props.cellRenderer;
  var cellHighlighter = props.cellHighlighter;
  var onDateClick = props.onDateClick;
  var year = props.year;
  var month = props.month;
  var item = props.item;
  var changeHighlightCellStyle = props.changeHighlightCellStyle;
  var changeHighlightCellStyle$1 =
    changeHighlightCellStyle !== undefined ? changeHighlightCellStyle : "";
  var cellHighlighter$1 =
    cellHighlighter !== undefined ? cellHighlighter : defaultCellHighlighter;
  var cellRenderer$1 =
    cellRenderer !== undefined ? cellRenderer : defaultCellRenderer;
  var startDate$1 = startDate !== undefined ? startDate : "";
  var endDate$1 = endDate !== undefined ? endDate : "";
  var disablePastDates$1 =
    disablePastDates !== undefined ? disablePastDates : true;
  var disableFutureDates$1 =
    disableFutureDates !== undefined ? disableFutureDates : false;
  var customDisabledFutureDays$1 =
    customDisabledFutureDays !== undefined ? customDisabledFutureDays : 0.0;
  var match = React.useContext(ConfigContext.configContext);
  var textColor = match.globalUIConfig.font.textColor;
  var customTimezoneToISOString =
    TimeZoneHook.useCustomTimeZoneToIsoString(undefined);
  if (Caml_obj.equal(item, Core__Array.make(7, ""))) {
    return React.createElement("tr", {
      className: "h-0",
    });
  } else {
    return React.createElement(
      "tr",
      {
        className: "transition duration-300 ease-in-out",
      },
      item.map(function (obj, cellIndex) {
        var date = new Date(
          Curry._6(
            customTimezoneToISOString,
            String(year),
            String(month + 1.0),
            String(LogicUtils.isEmptyString(obj) ? "01" : obj),
            "00",
            "00",
            "00",
          ),
        );
        var dateToday = new Date();
        var todayInitial = dateToday.setHours(0.0, 0.0, 0.0, 0.0);
        var isInCustomDisable =
          customDisabledFutureDays$1 > 0.0
            ? date.getTime() - todayInitial <=
              customDisabledFutureDays$1 * 24.0 * 3600.0 * 1000.0
            : false;
        var dateNotInRange =
          allowedDateRange !== undefined &&
          LogicUtils.isNonEmptyString(allowedDateRange.startDate) &&
          LogicUtils.isNonEmptyString(allowedDateRange.endDate)
            ? !(
                date.getTime() -
                  new Date(allowedDateRange.startDate).getTime() >=
                  0.0 &&
                new Date(allowedDateRange.endDate).getTime() - date.getTime() >=
                  0.0
              )
            : false;
        var isFutureDate = disablePastDates$1
          ? todayInitial - date.getTime() <= 0.0
          : todayInitial - date.getTime() < 0.0;
        var isInLimit =
          dateRangeLimit !== undefined &&
          LogicUtils.isNonEmptyString(startDate$1)
            ? date.getTime() - new Date(startDate$1).getTime() <
              ((dateRangeLimit - 1) * 24 * 60 * 60 - 60) * 1000
            : true;
        var onClick = function (_evt) {
          var isClickDisabled =
            (LogicUtils.isEmptyString(endDate$1) && !isInLimit) ||
            (isFutureDate ? disableFutureDates$1 : disablePastDates$1) ||
            (customDisabledFutureDays$1 > 0.0 && isInCustomDisable) ||
            dateNotInRange;
          if (!isClickDisabled && onDateClick !== undefined) {
            return Curry._1(
              onDateClick,
              Dayjs(date.toISOString()).format("YYYY-MM-DD"),
            );
          }
        };
        var hSelf = Curry._1(
          cellHighlighter$1,
          Dayjs(date.toString()).format("YYYY-MM-DD"),
        );
        var dayClass =
          (isFutureDate && disableFutureDates$1) ||
          (customDisabledFutureDays$1 > 0.0 && isInCustomDisable) ||
          (!isFutureDate && disablePastDates$1) ||
          (LogicUtils.isEmptyString(endDate$1) && !isInLimit) ||
          dateNotInRange
            ? "cursor-not-allowed"
            : "cursor-default";
        var getDate = function (date) {
          return new Date(
            Number(Core__Option.getOr(date[0], "")),
            Number(String(Number(Core__Option.getOr(date[1], "")) - 1.0)),
            Number(Core__Option.getOr(date[2], "")),
          );
        };
        var today = Dayjs(new Date().toString()).format("YYYY-MM-DD");
        var renderingDate = Dayjs(
          getDate([year.toString(), (month + 1.0).toString(), obj]).toString(),
        ).format("YYYY-MM-DD");
        var textColor$1 =
          today === renderingDate
            ? "" + textColor.primaryNormal + ""
            : "text-jp-gray-900 text-opacity-75 dark:text-opacity-75";
        var classN =
          LogicUtils.isEmptyString(obj) || hSelf.highlightSelf
            ? "h-9 p-0 w-9 font-semibold font-fira-code text-center " +
              textColor$1 +
              "  dark:text-jp-gray-text_darktheme  " +
              dayClass +
              ""
            : "h-9 p-0 w-9 font-semibold text-center font-fira-code " +
              textColor$1 +
              "  dark:text-jp-gray-text_darktheme hover:text-opacity-100 dark:hover:text-opacity-100 hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-75 hover:rounded-lg dark:hover:bg-jp-gray-850 dark:hover:bg-opacity-100 " +
              dayClass +
              " ";
        var c2 =
          LogicUtils.isNonEmptyString(obj) && hSelf.highlightSelf
            ? "h-full w-full flex flex-1 justify-center items-center bg-blue-500 bg-opacity-100 dark:bg-blue-500 dark:bg-opacity-100 text-white rounded-full"
            : "h-full w-full";
        var shouldHighlight = function (startDate, endDate, obj, month, year) {
          if (
            !(
              LogicUtils.isNonEmptyString(startDate) &&
              LogicUtils.isNonEmptyString(obj)
            )
          ) {
            return "h-full w-full";
          }
          var parsedStartDate = getDate(startDate.split("-"));
          var z = getDate([year, month, obj]);
          if (!LogicUtils.isNonEmptyString(endDate)) {
            if (Caml_obj.equal(z, parsedStartDate)) {
              return (
                "h-full w-full flex flex-1 justify-center items-center bg-blue-500 bg-opacity-100 dark:bg-blue-500 dark:bg-opacity-100 text-white rounded-lg " +
                changeHighlightCellStyle$1 +
                ""
              );
            } else if (
              LogicUtils.isNonEmptyString(hoverdDate) &&
              LogicUtils.isEmptyString(endDate) &&
              Caml_obj.greaterthan(z, parsedStartDate) &&
              Caml_obj.lessequal(z, new Date(hoverdDate)) &&
              !(
                (isFutureDate && disableFutureDates$1) ||
                (!isFutureDate && disablePastDates$1) ||
                (LogicUtils.isEmptyString(endDate) && !isInLimit)
              )
            ) {
              return "h-full w-full flex flex-1 justify-center items-center bg-blue-100 dark:bg-gray-700 dark:bg-opacity-100";
            } else {
              return "h-full w-full";
            }
          }
          var parsedEndDate = getDate(endDate.split("-"));
          if (Caml_obj.equal(z, parsedStartDate)) {
            return "h-full w-full flex flex-1 justify-center items-center bg-blue-500 bg-opacity-100 dark:bg-blue-500 dark:bg-opacity-100 text-white rounded-l-lg ";
          } else if (Caml_obj.equal(z, parsedEndDate)) {
            return "h-full w-full flex flex-1 justify-center items-center bg-blue-500 bg-opacity-100 dark:bg-blue-500 dark:bg-opacity-100 text-white rounded-r-lg ";
          } else if (
            Caml_obj.greaterthan(z, parsedStartDate) &&
            Caml_obj.lessthan(z, parsedEndDate)
          ) {
            return "h-full w-full flex flex-1 justify-center items-center bg-blue-100  dark:bg-gray-700 dark:bg-opacity-100 text-gray-600 dark:text-gray-400";
          } else {
            return "h-full w-full";
          }
        };
        var c3 = shouldHighlight(
          startDate$1,
          endDate$1,
          obj,
          (month + 1.0).toString(),
          year.toString(),
        );
        return React.createElement(
          "td",
          {
            key: cellIndex.toString(),
            className: classN,
            onClick: onClick,
            onMouseOut: function (evt) {
              Curry._1(setHoverdDate, function (param) {
                return "";
              });
            },
            onMouseOver: function (param) {
              var date$1 = Dayjs(date.toString()).format("YYYY-MM-DD");
              var parsedDate = getDate(date$1.split("-"));
              Curry._1(setHoverdDate, function (param) {
                return parsedDate.toString();
              });
              if (setShowMsg !== undefined) {
                if (
                  LogicUtils.isNonEmptyString(hoverdDate) &&
                  ((!isInLimit &&
                    LogicUtils.isEmptyString(endDate$1) &&
                    !isFutureDate &&
                    disableFutureDates$1) ||
                    (!disableFutureDates$1 &&
                      !isInLimit &&
                      LogicUtils.isEmptyString(endDate$1)))
                ) {
                  return Curry._1(setShowMsg, function (param) {
                    return true;
                  });
                } else {
                  return Curry._1(setShowMsg, function (param) {
                    return false;
                  });
                }
              }
            },
          },
          React.createElement(AddDataAttributes.make, {
            attributes: [
              [
                "data-calender-date",
                hSelf.highlightSelf || LogicUtils.isNonEmptyString(startDate$1)
                  ? "selected"
                  : "normal",
              ],
              [
                "data-calender-date-disabled",
                (isFutureDate && disableFutureDates$1) ||
                (customDisabledFutureDays$1 > 0.0 && isInCustomDisable) ||
                (!isFutureDate && disablePastDates$1) ||
                (LogicUtils.isEmptyString(endDate$1) && !isInLimit) ||
                dateNotInRange
                  ? "disabled"
                  : "enabled",
              ],
            ],
            children: React.createElement(
              "span",
              {
                className: LogicUtils.isEmptyString(startDate$1) ? c2 : c3,
              },
              Curry._1(
                cellRenderer$1,
                LogicUtils.isEmptyString(obj)
                  ? undefined
                  : Dayjs(date.toString()).format("YYYY-MM-DD"),
              ),
            ),
          }),
        );
      }),
    );
  }
}

var TableRow = {
  defaultCellHighlighter: defaultCellHighlighter,
  defaultCellRenderer: defaultCellRenderer,
  make: Calendar$TableRow,
};

function Calendar(props) {
  var allowedDateRange = props.allowedDateRange;
  var customDisabledFutureDays = props.customDisabledFutureDays;
  var showHead = props.showHead;
  var setShowMsg = props.setShowMsg;
  var dateRangeLimit = props.dateRangeLimit;
  var disableFutureDates = props.disableFutureDates;
  var disablePastDates = props.disablePastDates;
  var endDate = props.endDate;
  var startDate = props.startDate;
  var cellRenderer = props.cellRenderer;
  var cellHighlighter = props.cellHighlighter;
  var showTitle = props.showTitle;
  var setHoverdDate = props.setHoverdDate;
  var hoverdDate = props.hoverdDate;
  var onDateClick = props.onDateClick;
  var year = props.year;
  var month = props.month;
  var changeHighlightCellStyle = props.changeHighlightCellStyle;
  var changeHighlightCellStyle$1 =
    changeHighlightCellStyle !== undefined ? changeHighlightCellStyle : "";
  var showTitle$1 = showTitle !== undefined ? showTitle : true;
  var startDate$1 = startDate !== undefined ? startDate : "";
  var endDate$1 = endDate !== undefined ? endDate : "";
  var disablePastDates$1 =
    disablePastDates !== undefined ? disablePastDates : true;
  var disableFutureDates$1 =
    disableFutureDates !== undefined ? disableFutureDates : false;
  var showHead$1 = showHead !== undefined ? showHead : true;
  var customDisabledFutureDays$1 =
    customDisabledFutureDays !== undefined ? customDisabledFutureDays : 0.0;
  var months = [
    /* Jan */ 0, /* Feb */ 1, /* Mar */ 2, /* Apr */ 3, /* May */ 4,
    /* Jun */ 5, /* Jul */ 6, /* Aug */ 7, /* Sep */ 8, /* Oct */ 9,
    /* Nov */ 10, /* Dec */ 11,
  ];
  var heading = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var getMonthInStr = function (mon) {
    switch (mon) {
      case /* Jan */ 0:
        return "January, ";
      case /* Feb */ 1:
        return "February, ";
      case /* Mar */ 2:
        return "March, ";
      case /* Apr */ 3:
        return "April, ";
      case /* May */ 4:
        return "May, ";
      case /* Jun */ 5:
        return "June, ";
      case /* Jul */ 6:
        return "July, ";
      case /* Aug */ 7:
        return "August, ";
      case /* Sep */ 8:
        return "September, ";
      case /* Oct */ 9:
        return "October, ";
      case /* Nov */ 10:
        return "November, ";
      case /* Dec */ 11:
        return "December, ";
    }
  };
  var firstDay = new Date(year, months.indexOf(month)).getDay();
  var daysInMonth;
  switch (month) {
    case /* Feb */ 1:
      daysInMonth = LogicUtils.checkLeapYear(year) ? 29 : 28;
      break;
    case /* Apr */ 3:
    case /* Jun */ 5:
    case /* Sep */ 8:
    case /* Nov */ 10:
      daysInMonth = 30;
      break;
    case /* Jan */ 0:
    case /* Mar */ 2:
    case /* May */ 4:
    case /* Jul */ 6:
    case /* Aug */ 7:
    case /* Oct */ 9:
    case /* Dec */ 11:
      daysInMonth = 31;
      break;
  }
  var dummyRow = Core__Array.make(6, Core__Array.make(7, ""));
  var rowMapper = function (row, indexRow) {
    return row.map(function (_item, index) {
      var subFactor = firstDay | 0;
      if (indexRow === 0 && index < (firstDay | 0)) {
        return "";
      } else if (indexRow === 0) {
        return (
          (((indexRow + ((index + 1) | 0)) | 0) - subFactor) |
          0
        ).toString();
      } else if (
        ((((Math.imul(indexRow, 7) + ((index + 1) | 0)) | 0) - subFactor) | 0) >
        daysInMonth
      ) {
        return "";
      } else {
        return (
          (((Math.imul(indexRow, 7) + ((index + 1) | 0)) | 0) - subFactor) |
          0
        ).toString();
      }
    });
  };
  var rowInfo = dummyRow.map(rowMapper);
  return React.createElement(
    "div",
    {
      className: "text-sm px-2 pb-2",
    },
    showTitle$1
      ? React.createElement(
          "h3",
          {
            className: "text-center font-bold text-lg text-gray-500 ",
          },
          getMonthInStr(month),
          React.createElement(
            "span",
            {
              className: "font-fira-code",
            },
            year.toString(),
          ),
        )
      : React.createElement("span", undefined),
    React.createElement(
      "table",
      {
        className: "table-auto min-w-full",
      },
      React.createElement(
        "thead",
        undefined,
        showHead$1
          ? React.createElement(
              "tr",
              undefined,
              heading.map(function (item, i) {
                return React.createElement(
                  "th",
                  {
                    key: i.toString(),
                  },
                  React.createElement(
                    "div",
                    {
                      className:
                        "flex flex-1 justify-center py-1 text-jp-gray-700 dark:text-jp-gray-text_darktheme dark:text-opacity-50",
                    },
                    isMobileView ? item.charAt(0) : item,
                  ),
                );
              }),
            )
          : null,
      ),
      React.createElement(
        "tbody",
        undefined,
        rowInfo.map(function (item, rowIndex) {
          return JsxPPXReactSupport.createElementWithKey(
            rowIndex.toString(),
            Calendar$TableRow,
            {
              changeHighlightCellStyle: changeHighlightCellStyle$1,
              item: item,
              month: months.indexOf(month),
              year: year,
              rowIndex: rowIndex,
              onDateClick: onDateClick,
              cellHighlighter: cellHighlighter,
              cellRenderer: cellRenderer,
              startDate: startDate$1,
              endDate: endDate$1,
              hoverdDate: hoverdDate,
              setHoverdDate: setHoverdDate,
              disablePastDates: disablePastDates$1,
              disableFutureDates: disableFutureDates$1,
              customDisabledFutureDays: customDisabledFutureDays$1,
              dateRangeLimit: dateRangeLimit,
              setShowMsg: setShowMsg,
              allowedDateRange: allowedDateRange,
            },
          );
        }),
      ),
    ),
  );
}

var make = Calendar;

export { TableRow, make };
/* dayjs Not a pure module */
