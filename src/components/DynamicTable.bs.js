// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.bs.js";
import Dayjs from "dayjs";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Portal from "./portal/Portal.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as AuthHooks from "../hooks/AuthHooks.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as ToastState from "../hooks/ToastState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as LoadedTable from "./LoadedTable.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as LocalFilters from "./LocalFilters.bs.js";
import * as RemoteFilter from "./RemoteFilter.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as DictionaryUtils from "../utils/DictionaryUtils.bs.js";
import * as JsonFlattenUtils from "../utils/JsonFlattenUtils.bs.js";
import * as ReactWindowTable from "./ReactWindowTable.bs.js";
import * as DynamicTableUtils from "./DynamicTableUtils.bs.js";
import * as RemoteFiltersUtils from "./RemoteFiltersUtils.bs.js";
import * as RefreshStateContext from "../context/RefreshStateContext.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as LabelVisibilityContext from "./form/LabelVisibilityContext.bs.js";

function useRemoteFilter(
  searchParams,
  remoteFilters,
  remoteOptions,
  mandatoryRemoteKeys,
) {
  var match = React.useState(function () {
    return {};
  });
  var remoteFiltersFromUrl = match[0];
  var remoteFiltersFromUrlTemp = React.useMemo(
    function () {
      return RemoteFiltersUtils.getInitialValuesFromUrl(
        searchParams,
        remoteFilters,
        remoteOptions,
        mandatoryRemoteKeys,
        undefined,
      );
    },
    [searchParams],
  );
  if (
    JSON.stringify(remoteFiltersFromUrlTemp) !==
    JSON.stringify(remoteFiltersFromUrl)
  ) {
    Curry._1(match[1], function (_prev) {
      return remoteFiltersFromUrlTemp;
    });
  }
  return remoteFiltersFromUrl;
}

function DynamicTable(props) {
  var urlKeyTypeDict = props.urlKeyTypeDict;
  var defaultKeysAllowed = props.defaultKeysAllowed;
  var mergeBodytoRemoteFilterDict = props.mergeBodytoRemoteFilterDict;
  var disableURIdecode = props.disableURIdecode;
  var noDataMsg = props.noDataMsg;
  var headBottomMargin = props.headBottomMargin;
  var showFilterBorder = props.showFilterBorder;
  var showFiltersSearch = props.showFiltersSearch;
  var customLocalFilterStyle = props.customLocalFilterStyle;
  var ignoreHeaderBg = props.ignoreHeaderBg;
  var tableheadingClass = props.tableheadingClass;
  var maxTableHeight = props.maxTableHeight;
  var errorButtonType = props.errorButtonType;
  var applyFilters = props.applyFilters;
  var filterCols = props.filterCols;
  var setFilterObj = props.setFilterObj;
  var filterObj = props.filterObj;
  var addDataLoading = props.addDataLoading;
  var showClearFilter = props.showClearFilter;
  var requireDateFormatting = props.requireDateFormatting;
  var rowCustomClass = props.rowCustomClass;
  var titleTooltip = props.titleTooltip;
  var rowHeightClass = props.rowHeightClass;
  var reactWindow = props.reactWindow;
  var customFilterStyle = props.customFilterStyle;
  var onMouseLeave = props.onMouseLeave;
  var onMouseEnter = props.onMouseEnter;
  var getRowDetails = props.getRowDetails;
  var filterButtonStyle = props.filterButtonStyle;
  var showRemoteOptions = props.showRemoteOptions;
  var showRefreshFilter = props.showRefreshFilter;
  var collapseTableRow = props.collapseTableRow;
  var forcePreventConcatData = props.forcePreventConcatData;
  var isSearchKeyArray = props.isSearchKeyArray;
  var mandatoryRemoteKeys = props.mandatoryRemoteKeys;
  var searchkeysDict = props.searchkeysDict;
  var dropdownSearchKeyValueNames = props.dropdownSearchKeyValueNames;
  var tableLocalFilter = props.tableLocalFilter;
  var isEulerOrderEntity = props.isEulerOrderEntity;
  var portalKey = props.portalKey;
  var getCustomUriForOrder = props.getCustomUriForOrder;
  var customizedColumnsStyle = props.customizedColumnsStyle;
  var activeColumnsAtom = props.activeColumnsAtom;
  var dataNotFoundComponent = props.dataNotFoundComponent;
  var defaultSort = props.defaultSort;
  var isFiltersInPortal = props.isFiltersInPortal;
  var body = props.body;
  var ignoreUrlUpdate = props.ignoreUrlUpdate;
  var downloadCsv = props.downloadCsv;
  var path = props.path;
  var method = props.method;
  var onEntityClick = props.onEntityClick;
  var resultsPerPage = props.resultsPerPage;
  var bottomActions = props.bottomActions;
  var hideFilterTopPortals = props.hideFilterTopPortals;
  var isTableActionBesideFilters = props.isTableActionBesideFilters;
  var tableActions = props.tableActions;
  var showSerialNumber = props.showSerialNumber;
  var hideFiltersOnNoData = props.hideFiltersOnNoData;
  var description = props.description;
  var hideTitle = props.hideTitle;
  var titleSize = props.titleSize;
  var title = props.title;
  var entity = props.entity;
  var titleSize$1 = titleSize !== undefined ? titleSize : /* Large */ 3;
  var hideTitle$1 = hideTitle !== undefined ? hideTitle : false;
  var hideFiltersOnNoData$1 =
    hideFiltersOnNoData !== undefined ? hideFiltersOnNoData : false;
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : false;
  var isTableActionBesideFilters$1 =
    isTableActionBesideFilters !== undefined
      ? isTableActionBesideFilters
      : false;
  var hideFilterTopPortals$1 =
    hideFilterTopPortals !== undefined ? hideFilterTopPortals : true;
  var resultsPerPage$1 = resultsPerPage !== undefined ? resultsPerPage : 15;
  var method$1 = method !== undefined ? method : /* Post */ 2;
  var ignoreUrlUpdate$1 =
    ignoreUrlUpdate !== undefined ? ignoreUrlUpdate : false;
  var isFiltersInPortal$1 =
    isFiltersInPortal !== undefined ? isFiltersInPortal : true;
  var customizedColumnsStyle$1 =
    customizedColumnsStyle !== undefined ? customizedColumnsStyle : "";
  var portalKey$1 = portalKey !== undefined ? portalKey : "desktopNavbarLeft";
  var isEulerOrderEntity$1 =
    isEulerOrderEntity !== undefined ? isEulerOrderEntity : false;
  var tableLocalFilter$1 =
    tableLocalFilter !== undefined ? tableLocalFilter : false;
  var dropdownSearchKeyValueNames$1 =
    dropdownSearchKeyValueNames !== undefined
      ? dropdownSearchKeyValueNames
      : [];
  var searchkeysDict$1 =
    searchkeysDict !== undefined
      ? Caml_option.valFromOption(searchkeysDict)
      : {};
  var mandatoryRemoteKeys$1 =
    mandatoryRemoteKeys !== undefined ? mandatoryRemoteKeys : [];
  var isSearchKeyArray$1 =
    isSearchKeyArray !== undefined ? isSearchKeyArray : false;
  var forcePreventConcatData$1 =
    forcePreventConcatData !== undefined ? forcePreventConcatData : false;
  var collapseTableRow$1 =
    collapseTableRow !== undefined ? collapseTableRow : false;
  var showRefreshFilter$1 =
    showRefreshFilter !== undefined ? showRefreshFilter : true;
  var showRemoteOptions$1 =
    showRemoteOptions !== undefined ? showRemoteOptions : false;
  var filterButtonStyle$1 =
    filterButtonStyle !== undefined ? filterButtonStyle : "";
  var getRowDetails$1 =
    getRowDetails !== undefined
      ? getRowDetails
      : function (param) {
          return null;
        };
  var customFilterStyle$1 =
    customFilterStyle !== undefined ? customFilterStyle : "";
  var reactWindow$1 = reactWindow !== undefined ? reactWindow : false;
  var rowHeightClass$1 = rowHeightClass !== undefined ? rowHeightClass : "";
  var titleTooltip$1 = titleTooltip !== undefined ? titleTooltip : false;
  var rowCustomClass$1 = rowCustomClass !== undefined ? rowCustomClass : "";
  var requireDateFormatting$1 =
    requireDateFormatting !== undefined ? requireDateFormatting : false;
  var showClearFilter$1 =
    showClearFilter !== undefined ? showClearFilter : true;
  var addDataLoading$1 = addDataLoading !== undefined ? addDataLoading : false;
  var applyFilters$1 = applyFilters !== undefined ? applyFilters : false;
  var errorButtonType$1 =
    errorButtonType !== undefined ? errorButtonType : /* Primary */ 0;
  var maxTableHeight$1 = maxTableHeight !== undefined ? maxTableHeight : "";
  var tableheadingClass$1 =
    tableheadingClass !== undefined ? tableheadingClass : "";
  var ignoreHeaderBg$1 = ignoreHeaderBg !== undefined ? ignoreHeaderBg : false;
  var customLocalFilterStyle$1 =
    customLocalFilterStyle !== undefined ? customLocalFilterStyle : "";
  var showFiltersSearch$1 =
    showFiltersSearch !== undefined ? showFiltersSearch : false;
  var showFilterBorder$1 =
    showFilterBorder !== undefined ? showFilterBorder : false;
  var headBottomMargin$1 =
    headBottomMargin !== undefined ? headBottomMargin : "mb-6 mobile:mb-4";
  var noDataMsg$1 = noDataMsg !== undefined ? noDataMsg : "No Data Available";
  var disableURIdecode$1 =
    disableURIdecode !== undefined ? disableURIdecode : false;
  var mergeBodytoRemoteFilterDict$1 =
    mergeBodytoRemoteFilterDict !== undefined
      ? mergeBodytoRemoteFilterDict
      : false;
  var urlKeyTypeDict$1 =
    urlKeyTypeDict !== undefined
      ? Caml_option.valFromOption(urlKeyTypeDict)
      : {};
  var filterForRow = entity.filterForRow;
  var filterCheck = entity.filterCheck;
  var searchValueDict = entity.searchValueDict;
  var popupFilterFields = entity.popupFilterFields;
  var getNewUrl = entity.getNewUrl;
  var options = entity.options;
  var initialFilters = entity.initialFilters;
  var headers = entity.headers;
  var getSummary = entity.getSummary;
  var summaryKey = entity.summaryKey;
  var dataKey = entity.dataKey;
  var defaultColumns = entity.defaultColumns;
  var getObjects = entity.getObjects;
  var uri = entity.uri;
  var tableName = Core__Option.getOr(props.prefixAddition, false)
    ? title.replace(/ /g, "-").toLowerCase()
    : undefined;
  var match = React.useState(function () {
    return entity.defaultFilters;
  });
  var setDefaultFilters = match[1];
  var defaultFilters = match[0];
  var match$1 = React.useState(function () {
    return {
      totalCount: 0,
      count: 0,
    };
  });
  var setSummary = match$1[1];
  var summary = match$1[0];
  var match$2 = React.useState(function () {});
  var setData = match$2[1];
  var data = match$2[0];
  var match$3 = React.useState(function () {
    return false;
  });
  var setTableDataLoading = match$3[1];
  var tableDataLoading = match$3[0];
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var searchParams = disableURIdecode$1 ? url.search : decodeURI(url.search);
  var match$4 = React.useContext(RefreshStateContext.refreshStateContext);
  var match$5 = React.useState(function () {
    return 0;
  });
  var setOffset = match$5[1];
  var offset = match$5[0];
  var remoteFilters = initialFilters.filter(function (item) {
    return Core__Option.isNone(item.localFilter);
  });
  var filtersFromUrl = LogicUtils.getDictFromUrlSearchParams(searchParams);
  var localFilters = initialFilters.filter(function (item) {
    return Core__Option.isSome(item.localFilter);
  });
  var showToast = ToastState.useShowToast(undefined);
  var localOptions = options.concat(popupFilterFields).filter(function (item) {
    return Core__Option.isSome(item.localFilter);
  });
  var remoteOptions = options.concat(popupFilterFields).filter(function (item) {
    return Core__Option.isNone(item.localFilter);
  });
  var remoteFiltersFromUrl = useRemoteFilter(
    searchParams,
    remoteFilters,
    remoteOptions,
    mandatoryRemoteKeys$1,
  );
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var resultsPerPage$2 = isMobileView ? 10 : resultsPerPage$1;
  var match$6 = React.useState(function () {
    return true;
  });
  var setFetchSuccess = match$6[1];
  var match$7 = React.useState(function () {
    return 0;
  });
  var setRefetchCounter = match$7[1];
  var refetchCounter = match$7[0];
  var match$8 = React.useState(function () {
    return false;
  });
  var setShowColumnSelector = match$8[1];
  var match$9 = React.useState(function () {});
  var setFinalData = match$9[1];
  var finalData = match$9[0];
  React.useEffect(
    function () {
      Curry._1(setDefaultFilters, function (param) {
        return entity.defaultFilters;
      });
    },
    [entity.defaultFilters],
  );
  React.useEffect(
    function () {
      var remoteFilterDict = RemoteFiltersUtils.getFinalDict(
        defaultFilters,
        remoteFiltersFromUrl,
        remoteOptions.concat(popupFilterFields),
        isEulerOrderEntity$1,
        dropdownSearchKeyValueNames$1,
        searchkeysDict$1,
        isSearchKeyArray$1,
        defaultKeysAllowed,
        urlKeyTypeDict$1,
        undefined,
      );
      var finalJson;
      if (body !== undefined) {
        var b = Caml_option.valFromOption(body);
        var remoteFilterDict$1 =
          LogicUtils.getDictFromJsonObject(remoteFilterDict);
        finalJson = mergeBodytoRemoteFilterDict$1
          ? DictionaryUtils.mergeDicts([
              LogicUtils.getDictFromJsonObject(b),
              remoteFilterDict$1,
            ])
          : b;
      } else {
        finalJson = remoteFilterDict;
      }
      var setNewData = function (sampleRes) {
        if (
          (Caml_obj.notequal(
            LogicUtils.getDictFromJsonObject(remoteFiltersFromUrl),
            {},
          ) &&
            offset === 0) ||
          forcePreventConcatData$1
        ) {
          Curry._1(setData, function (param) {
            return [];
          });
        }
        Curry._1(setData, function (prevData) {
          return Core__Option.getOr(prevData, []).concat(sampleRes);
        });
      };
      var getCustomUri = function (uri, searchValueDict) {
        var uriList = Object.keys(searchValueDict).map(function (val) {
          var defaultFilterOffset = LogicUtils.getInt(
            LogicUtils.getDictFromJsonObject(defaultFilters),
            "offset",
            0,
          );
          var dictValue;
          if (val === "offset") {
            dictValue = defaultFilterOffset.toString();
          } else {
            var x = Core__Option.getOr(
              filtersFromUrl[val],
              Core__Option.getOr(searchValueDict[val], ""),
            );
            dictValue =
              requireDateFormatting$1 &&
              (val === "startTime" || val === "endTime")
                ? Dayjs(x).format("YYYY-MM-DD+HH:mm:ss")
                : requireDateFormatting$1 &&
                    (val === "start_date" || val === "end_date")
                  ? Dayjs(x).format("YYYY-MM-DD HH:mm:ss")
                  : x;
          }
          if (LogicUtils.isEmptyString(dictValue) || dictValue === "NA") {
            return "";
          } else {
            return "" + val + "=" + dictValue + "";
          }
        });
        return (
          uri + "?" + uriList.filter(LogicUtils.isNonEmptyString).join("&")
        );
      };
      var uri$1 =
        searchValueDict !== undefined
          ? getCustomUri(uri, Caml_option.valFromOption(searchValueDict))
          : uri;
      var uri$2 =
        getCustomUriForOrder !== undefined
          ? Curry._3(
              getCustomUriForOrder,
              uri$1,
              remoteFiltersFromUrl,
              finalJson,
            )
          : uri$1;
      var uri$3 = uri$2 + Curry._1(getNewUrl, defaultFilters);
      Curry._1(setTableDataLoading, function (param) {
        return true;
      });
      Core__Promise.$$catch(
        Curry._8(
          fetchApi,
          uri$3,
          JSON.stringify(finalJson),
          undefined,
          Caml_option.some(headers),
          method$1,
          undefined,
          undefined,
          undefined,
        )
          .then(function (resp) {
            var status = resp.status;
            if (status >= 300) {
              Curry._1(setFetchSuccess, function (param) {
                return false;
              });
              Curry._1(setTableDataLoading, function (param) {
                return false;
              });
            }
            return Fetch.$$Response.json(resp);
          })
          .then(function (json) {
            var _arr = Core__JSON.Classify.classify(json);
            var exit = 0;
            if (typeof _arr === "number") {
              exit = 1;
            } else {
              switch (_arr.TAG | 0) {
                case /* Object */ 3:
                  var dict = _arr._0;
                  var flattenedObject = JsonFlattenUtils.flattenObject(
                    json,
                    false,
                  );
                  var x = flattenedObject[dataKey];
                  if (x !== undefined) {
                    setNewData(
                      Curry._1(getObjects, Caml_option.valFromOption(x)).map(
                        function (obj) {
                          return obj;
                        },
                      ),
                    );
                  }
                  var x$1 = dict[summaryKey];
                  var summary =
                    x$1 !== undefined
                      ? Curry._1(getSummary, Caml_option.valFromOption(x$1))
                      : Curry._1(getSummary, dict);
                  Curry._1(setSummary, function (param) {
                    return summary;
                  });
                  break;
                case /* Array */ 4:
                  setNewData(
                    Curry._1(getObjects, json).map(function (obj) {
                      return obj;
                    }),
                  );
                  break;
                default:
                  exit = 1;
              }
            }
            if (exit === 1) {
              Curry._8(
                showToast,
                "Response was not a JSON object",
                /* ToastError */ 0,
                undefined,
                true,
                undefined,
                undefined,
                undefined,
                undefined,
              );
            }
            Curry._1(setTableDataLoading, function (param) {
              return false;
            });
            return Promise.resolve(undefined);
          }),
        function (param) {
          return Promise.resolve(undefined);
        },
      );
    },
    [remoteFiltersFromUrl, defaultFilters, fetchApi, match$4[0], uri],
  );
  React.useEffect(
    function () {
      if (refetchCounter > 0) {
        window.location.reload();
      }
    },
    [refetchCounter],
  );
  var refetch = React.useCallback(
    function (param) {
      Curry._1(setRefetchCounter, function (p) {
        return (p + 1) | 0;
      });
    },
    [setRefetchCounter],
  );
  var visibleColumns = Core__Option.getOr(props.visibleColumns, defaultColumns);
  var handleRefetch = function (param) {
    var rowFetched = Core__Option.getOr(data, []).length;
    if (rowFetched === summary.totalCount) {
      return;
    }
    Curry._1(setTableDataLoading, function (param) {
      return true;
    });
    var newDefaultFilter = Object.fromEntries(
      Object.entries(
        Core__Option.getOr(Core__JSON.Decode.object(defaultFilters), {}),
      ),
    );
    newDefaultFilter["offset"] = rowFetched;
    Curry._1(setDefaultFilters, function (param) {
      return newDefaultFilter;
    });
  };
  var showLocalFilter =
    (localFilters.length > 0 || localOptions.length > 0) &&
    Core__Option.getOr(applyFilters$1 ? finalData : data, []).length > 0;
  var showRemoteFilter = remoteFilters.length > 0 || remoteOptions.length > 0;
  var filters;
  if (
    (initialFilters.length > 0 || options.length > 0) &&
    (showLocalFilter || showRemoteFilter) &&
    (!hideFiltersOnNoData$1 || Core__Option.getOr(data, []).length > 0)
  ) {
    var children = React.createElement(
      "div",
      {
        className: "flex-1 " + customFilterStyle$1 + "",
      },
      showLocalFilter
        ? React.createElement(LabelVisibilityContext.make, {
            children: React.createElement(LocalFilters.make, {
              entity: entity,
              setOffset: setOffset,
              localFilters: localFilters,
              localOptions: localOptions,
              remoteOptions: remoteOptions,
              remoteFilters: remoteFilters,
              mandatoryRemoteKeys: mandatoryRemoteKeys$1,
              path: path,
              tableName: tableName,
              customLocalFilterStyle: customLocalFilterStyle$1,
              showSelectFiltersSearch: showFiltersSearch$1,
              disableURIdecode: disableURIdecode$1,
            }),
            showLabel: false,
          })
        : null,
      React.createElement(UIUtils.RenderIf.make, {
        condition: showRemoteFilter,
        children: React.createElement(LabelVisibilityContext.make, {
          children: React.createElement(RemoteFilter.make, {
            defaultFilters: entity.defaultFilters,
            requiredSearchFieldsList: entity.requiredSearchFieldsList,
            setOffset: setOffset,
            title: title,
            path: path,
            refreshFilters: showRefreshFilter$1,
            remoteFilters: remoteFilters,
            remoteOptions: remoteOptions,
            localOptions: localOptions,
            localFilters: localFilters,
            mandatoryRemoteKeys: mandatoryRemoteKeys$1,
            popupFilterFields: popupFilterFields,
            showRemoteOptions: showRemoteOptions$1,
            tableName: tableName,
            autoApply: props.autoApply,
            filterButtonStyle: filterButtonStyle$1,
            showClearFilter: showClearFilter$1,
            showSelectFiltersSearch: showFiltersSearch$1,
            disableURIdecode: disableURIdecode$1,
          }),
          showLabel: false,
        }),
      }),
    );
    filters = isFiltersInPortal$1
      ? React.createElement(Portal.make, {
          to: portalKey$1,
          children: children,
        })
      : children;
  } else {
    filters = null;
  }
  React.useEffect(
    function () {
      var temp =
        filterObj !== undefined
          ? filterCols !== undefined
            ? (filterCols.map(function (key) {
                filterObj[key] = Curry._2(filterForRow, data, key);
              }),
              filterObj)
            : []
          : [];
      if (setFilterObj !== undefined) {
        Curry._1(setFilterObj, function (param) {
          return temp;
        });
      }
    },
    [data],
  );
  var checkLength = {
    contents: true,
  };
  React.useEffect(
    function () {
      var findVal = function (accumulator, item) {
        return accumulator.concat(item.selected);
      };
      var keys =
        filterObj !== undefined
          ? Core__Array.reduce(filterObj, [], findVal)
          : [];
      if (filterObj !== undefined) {
        if (filterCols !== undefined) {
          for (var i = 0, i_finish = filterCols.length; i < i_finish; ++i) {
            var tmp = false;
            if (checkLength.contents) {
              var ele = filterObj[Core__Option.getOr(filterCols[i], 0)];
              tmp = ele !== undefined ? ele.selected.length > 0 : false;
            }
            checkLength.contents = tmp;
          }
        }
        if (checkLength.contents) {
          var newData =
            data !== undefined
              ? data.filter(function (item) {
                  if (item == null) {
                    return false;
                  } else {
                    return Curry._2(filterCheck, item, keys);
                  }
                })
              : [];
          Curry._1(setFinalData, function (param) {
            return newData;
          });
        } else {
          Curry._1(setFinalData, function (param) {
            return data;
          });
        }
      }
    },
    [filterObj, data],
  );
  var dataLoading = addDataLoading$1 ? tableDataLoading : false;
  var actualData = applyFilters$1 ? finalData : data;
  if (actualData === undefined) {
    return React.createElement(
      DynamicTableUtils.TableLoadingErrorIndicator.make,
      {
        title: title,
        titleSize: titleSize$1,
        showFilterBorder: showFilterBorder$1,
        fetchSuccess: match$6[0],
        filters: filters,
        buttonType: errorButtonType$1,
        hideTitle: hideTitle$1,
      },
    );
  }
  var localFilteredData =
    localFilters.length > 0 || localOptions.length > 0
      ? RemoteFiltersUtils.getLocalFiltersData(
          actualData,
          searchParams,
          localFilters,
          entity.dateRangeFilterDict,
          localOptions,
          undefined,
        )
      : actualData;
  var currrentFetchCount = localFilteredData.length;
  var totalResults =
    actualData.length < summary.totalCount
      ? summary.totalCount
      : currrentFetchCount;
  var customizeColumn =
    Core__Option.isSome(activeColumnsAtom) &&
    Core__Option.isSome(entity.allColumns) &&
    totalResults > 0
      ? React.createElement(Button.make, {
          text: "Customize Columns",
          buttonType: /* SecondaryFilled */ 3,
          buttonSize: /* XSmall */ 3,
          leftIcon: {
            TAG: /* CustomIcon */ 1,
            _0: React.createElement(Icon.make, {
              name: "vertical_slider",
              size: 15,
              className: "mr-1",
            }),
          },
          showBorder: true,
          onClick: function (param) {
            Curry._1(setShowColumnSelector, function (param) {
              return true;
            });
          },
          customButtonStyle: customizedColumnsStyle$1,
        })
      : null;
  var chooseCols =
    customizeColumn === null
      ? null
      : React.createElement(DynamicTableUtils.ChooseColumnsWrapper.make, {
          entity: entity,
          totalResults: totalResults,
          defaultColumns: defaultColumns,
          activeColumnsAtom: activeColumnsAtom,
          setShowColumnSelector: setShowColumnSelector,
          showColumnSelector: match$8[0],
        });
  var filt = React.createElement(
    "div",
    {
      className: "flex flex-row gap-4",
    },
    filters,
    chooseCols,
  );
  return React.createElement(DynamicTableUtils.RefetchContextProvider.make, {
    value: refetch,
    children: reactWindow$1
      ? React.createElement(ReactWindowTable.make, {
          actualData: localFilteredData,
          defaultSort: defaultSort,
          title: title,
          visibleColumns: visibleColumns,
          description: description,
          tableActions: tableActions,
          rightTitleElement: Caml_option.some(customizeColumn),
          bottomActions: bottomActions,
          showSerialNumber: showSerialNumber$1,
          totalResults: totalResults,
          entity: entity,
          onEntityClick: onEntityClick,
          downloadCsv: downloadCsv,
          hideTitle: hideTitle$1,
          tableDataLoading: tableDataLoading,
          dataNotFoundComponent: dataNotFoundComponent,
          tableLocalFilter: tableLocalFilter$1,
          collapseTableRow: collapseTableRow$1,
          getRowDetails: getRowDetails$1,
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave,
        })
      : React.createElement(LoadedTable.make, {
          visibleColumns: visibleColumns,
          defaultSort: defaultSort,
          title: title,
          titleSize: titleSize$1,
          description: description,
          tableActions: tableActions,
          isTableActionBesideFilters: isTableActionBesideFilters$1,
          hideFilterTopPortals: hideFilterTopPortals$1,
          rightTitleElement: Caml_option.some(customizeColumn),
          bottomActions: bottomActions,
          showSerialNumber: showSerialNumber$1,
          actualData: localFilteredData,
          totalResults: totalResults,
          resultsPerPage: resultsPerPage$2,
          offset: offset,
          setOffset: setOffset,
          handleRefetch: handleRefetch,
          entity: entity,
          onEntityClick: onEntityClick,
          currrentFetchCount: currrentFetchCount,
          filters: Caml_option.some(filt),
          showFilterBorder: showFilterBorder$1,
          headBottomMargin: headBottomMargin$1,
          downloadCsv: downloadCsv,
          ignoreUrlUpdate: ignoreUrlUpdate$1,
          hideTitle: hideTitle$1,
          ignoreHeaderBg: ignoreHeaderBg$1,
          tableDataLoading: tableDataLoading,
          dataLoading: dataLoading,
          advancedSearchComponent: props.advancedSearchComponent,
          setData: setData,
          setSummary: setSummary,
          dataNotFoundComponent: dataNotFoundComponent,
          renderCard: props.renderCard,
          tableLocalFilter: tableLocalFilter$1,
          tableheadingClass: tableheadingClass$1,
          tableBorderClass: props.tableBorderClass,
          tableDataBorderClass: props.tableDataBorderClass,
          collapseTableRow: collapseTableRow$1,
          getRowDetails: getRowDetails$1,
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave,
          frozenUpto: props.frozenUpto,
          heightHeadingClass: props.heightHeadingClass,
          rowHeightClass: rowHeightClass$1,
          titleTooltip: titleTooltip$1,
          rowCustomClass: rowCustomClass$1,
          filterObj: filterObj,
          setFilterObj: setFilterObj,
          filterIcon: props.filterIcon,
          maxTableHeight: maxTableHeight$1,
          noDataMsg: noDataMsg$1,
          tableActionBorder: props.tableActionBorder,
          checkBoxProps: props.checkBoxProps,
          paginationClass: props.paginationClass,
        }),
  });
}

var make = DynamicTable;

export { useRemoteFilter, make };
/* Icon Not a pure module */
