// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Shimmer from "../libraries/Shimmer.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import Highcharts from "highcharts";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HSwitchUtils from "../screens/Utils/HSwitchUtils.bs.js";
import * as ConfigContext from "../context/ConfigContext.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import HighchartsReactOfficial from "highcharts-react-official";

function HSwitchSingleStatWidget(props) {
  var isHomePage = props.isHomePage;
  var filterNullVals = props.filterNullVals;
  var loaderType = props.loaderType;
  var singleStatLoading = props.singleStatLoading;
  var borderRounded = props.borderRounded;
  var statType = props.statType;
  var data = props.data;
  var value = props.value;
  var deltaTooltipComponent = props.deltaTooltipComponent;
  var tooltipText = props.tooltipText;
  var title = props.title;
  if (deltaTooltipComponent !== undefined) {
    Caml_option.valFromOption(deltaTooltipComponent);
  }
  var statType$1 = statType !== undefined ? statType : "";
  var borderRounded$1 = borderRounded !== undefined ? borderRounded : "rounded";
  var singleStatLoading$1 =
    singleStatLoading !== undefined ? singleStatLoading : false;
  var loaderType$1 = loaderType !== undefined ? loaderType : /* Shimmer */ 1;
  var filterNullVals$1 = filterNullVals !== undefined ? filterNullVals : false;
  var isHomePage$1 = isHomePage !== undefined ? isHomePage : false;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = React.useState(function () {
    return false;
  });
  var setUpdateKey = match$1[1];
  var updateKey = match$1[0];
  var sortedData = React.useMemo(
    function () {
      return data
        .toSorted(function (item1, item2) {
          var x2 = item2[0];
          var x1 = item1[0];
          if (x1 > x2) {
            return -1;
          } else if (x1 === x2) {
            return 0;
          } else {
            return 1;
          }
        })
        .map(function (item) {
          var y = item[1];
          var x = item[0];
          if (y === 0 && filterNullVals$1) {
            return [x, null];
          } else {
            return [x, y];
          }
        });
    },
    [data],
  );
  React.useEffect(
    function () {
      if (!singleStatLoading$1) {
        Curry._1(setUpdateKey, function (prev) {
          return !prev;
        });
      }
    },
    [singleStatLoading$1],
  );
  var statValue = function (statType) {
    if (statType === "Amount") {
      return LogicUtils.indianShortNum(value);
    } else if (statType === "Rate" || statType === "NegativeRate") {
      if (Number.isNaN(value)) {
        return "-";
      } else {
        return "" + value.toFixed(2) + "%";
      }
    } else if (statType === "Volume") {
      return LogicUtils.indianShortNum(value);
    } else if (statType === "Latency") {
      return LogicUtils.latencyShortNum(value, undefined, undefined);
    } else if (statType === "LatencyMs") {
      return LogicUtils.latencyShortNum(value, true, undefined);
    } else {
      return value.toString();
    }
  };
  var strokeColor = match.globalUIConfig.font.textColor.primaryNormal;
  var options = React.useMemo(
    function () {
      return {
        chart: {
          type: "area",
          zoomType: "x",
          margin: [0, 0, 0, 0],
          marginLeft: isHomePage$1 ? -5 : undefined,
          marginRight: isHomePage$1 ? -5 : undefined,
          backgroundColor: null,
          height: isHomePage$1 ? "80" : "50",
          width: isHomePage$1 ? undefined : "105",
          events: undefined,
        },
        title: {
          text: "",
          style: {},
        },
        series: [
          {
            name: "Sample",
            data: sortedData,
            color: strokeColor,
            legendIndex: 0,
            fillOpacity: isHomePage$1 ? 0.3 : 0.0,
            connectNulls: false,
            className: "fill-current " + strokeColor + "",
          },
        ],
        plotOptions: {
          area: {
            inverted: true,
            backgroundColor: "transparent",
            spacing: [0, 0, 0, 0],
            styledMode: true,
            pointStart: undefined,
            states: {
              hover: {
                lineWidth: 3,
              },
            },
            lineWidth: 3,
          },
          boxplot: {
            visible: false,
          },
          series: {
            marker: {
              enabled: false,
              radius: undefined,
              symbol: undefined,
            },
            states: undefined,
            events: {
              legendItemClick: undefined,
              mouseOver: "",
            },
          },
        },
        xAxis: {
          type: "datetime",
          zoomEnabled: false,
        },
        yAxis: {
          tickPositioner: undefined,
          plotLines: undefined,
          visible: false,
          title: {
            text: "",
            style: {},
          },
          labels: {
            formatter: undefined,
            enabled: false,
            useHTML: false,
          },
          zoomEnabled: false,
        },
        credits: {
          enabled: false,
        },
        legend: {
          enabled: false,
        },
        tooltip: {
          enabled: false,
        },
      };
    },
    [sortedData, statType$1],
  );
  var isMobileWidth = MatchMedia.useMatchMedia("(max-width: 700px)");
  if (singleStatLoading$1 && loaderType$1 === /* Shimmer */ 1) {
    if (isHomePage$1) {
      return React.createElement(Shimmer.make, {
        styleClass: "w-full h-full",
      });
    } else {
      return React.createElement(
        "div",
        {
          className: "p-4",
          style: {
            width: isMobileWidth ? "100%" : "33.33%",
          },
        },
        React.createElement(Shimmer.make, {
          styleClass: "w-full h-28",
        }),
      );
    }
  } else if (isHomePage$1) {
    return React.createElement(
      "div",
      {
        className: "relative w-full h-full",
      },
      React.createElement(
        "div",
        {
          className:
            "h-full w-full flex flex-col border " +
            borderRounded$1 +
            " dark:border-jp-gray-850 bg-white dark:bg-jp-gray-lightgray_background overflow-hidden p-10 mb-7",
        },
        React.createElement(
          "div",
          {
            className: "h-full flex flex-col gap-1",
          },
          React.createElement(
            "div",
            {
              className: "font-bold text-[2.3rem]",
            },
            statValue(statType$1).toLowerCase(),
          ),
          React.createElement(
            "div",
            {
              className: "flex gap-2 items-centertext-jp-gray-700 font-bold",
            },
            React.createElement(
              "div",
              {
                className:
                  "" +
                  HSwitchUtils.getTextClass([/* H3 */ 2, /* Leading_2 */ 3]) +
                  " text-grey-700",
              },
              title,
            ),
            React.createElement(ToolTip.make, {
              description: tooltipText,
              toolTipFor: Caml_option.some(
                React.createElement(
                  "div",
                  {
                    className: "cursor-pointer",
                  },
                  React.createElement(Icon.make, {
                    name: "info-vacent",
                    size: 13,
                  }),
                ),
              ),
              toolTipPosition: /* Top */ 0,
            }),
          ),
        ),
      ),
      React.createElement(
        "div",
        {
          className: "absolute bottom-0 w-full h-1/3 overflow-hidden rounded",
        },
        JsxPPXReactSupport.createElementWithKey(
          updateKey ? "0" : "1",
          HighchartsReactOfficial,
          {
            highcharts: Highcharts,
            options: options,
          },
        ),
      ),
    );
  } else {
    return React.createElement(
      "div",
      {
        className: "mt-4",
        style: {
          width: isMobileWidth ? "100%" : "33.33%",
        },
      },
      React.createElement(
        "div",
        {
          className:
            "h-full flex flex-col border " +
            borderRounded$1 +
            " dark:border-jp-gray-850 bg-white dark:bg-jp-gray-lightgray_background overflow-hidden singlestatBox p-4 md:mr-4",
        },
        React.createElement(
          "div",
          {
            className: "p-4 flex flex-col justify-between h-full gap-auto",
          },
          React.createElement(UIUtils.RenderIf.make, {
            condition:
              singleStatLoading$1 && loaderType$1 === /* SideLoader */ 0,
            children: React.createElement(
              "div",
              {
                className: "animate-spin self-end absolute",
              },
              React.createElement(Icon.make, {
                name: "spinner",
                size: 16,
              }),
            ),
          }),
          React.createElement(
            "div",
            {
              className: "flex flex-row h-1/2 items-end",
            },
            React.createElement(
              "div",
              {
                className: "font-bold text-3xl",
              },
              statValue(statType$1).toLowerCase(),
            ),
            React.createElement(
              "div",
              {
                className: "flex px-4 h-full items-center",
              },
              JsxPPXReactSupport.createElementWithKey(
                updateKey ? "0" : "1",
                HighchartsReactOfficial,
                {
                  highcharts: Highcharts,
                  options: options,
                },
              ),
            ),
          ),
          React.createElement(
            "div",
            {
              className:
                "flex gap-2 items-center pt-4 text-jp-gray-700 font-bold self-start h-1/2",
            },
            React.createElement(
              "div",
              {
                className: "font-semibold text-base text-black dark:text-white",
              },
              title,
            ),
            React.createElement(ToolTip.make, {
              description: tooltipText,
              toolTipFor: Caml_option.some(
                React.createElement(
                  "div",
                  {
                    className: "cursor-pointer",
                  },
                  React.createElement(Icon.make, {
                    name: "info-vacent",
                    size: 13,
                  }),
                ),
              ),
              toolTipPosition: /* Top */ 0,
            }),
          ),
        ),
      ),
    );
  }
}

var make = HSwitchSingleStatWidget;

export { make };
/* Icon Not a pure module */
