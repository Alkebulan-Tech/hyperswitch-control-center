// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "./Button.bs.js";
import * as HSwitchUtils from "../screens/Utils/HSwitchUtils.bs.js";

function ACLButton(props) {
  var tooltipText = props.tooltipText;
  var access = props.access;
  var allowButtonTextMinWidth = props.allowButtonTextMinWidth;
  var customButtonStyle = props.customButtonStyle;
  var disableRipple = props.disableRipple;
  var fullLength = props.fullLength;
  var textStyle = props.textStyle;
  var type_ = props.type_;
  var showBorder = props.showBorder;
  var rightIcon = props.rightIcon;
  var leftIcon = props.leftIcon;
  var buttonVariant = props.buttonVariant;
  var buttonType = props.buttonType;
  var buttonState = props.buttonState;
  var buttonState$1 = buttonState !== undefined ? buttonState : /* Normal */ 0;
  var buttonType$1 =
    buttonType !== undefined ? buttonType : /* SecondaryFilled */ 3;
  var buttonVariant$1 =
    buttonVariant !== undefined ? buttonVariant : /* Fit */ 0;
  var leftIcon$1 = leftIcon !== undefined ? leftIcon : /* NoIcon */ 0;
  var rightIcon$1 = rightIcon !== undefined ? rightIcon : /* NoIcon */ 0;
  var showBorder$1 = showBorder !== undefined ? showBorder : true;
  var type_$1 = type_ !== undefined ? type_ : "button";
  var textStyle$1 = textStyle !== undefined ? textStyle : "";
  var fullLength$1 = fullLength !== undefined ? fullLength : false;
  var disableRipple$1 = disableRipple !== undefined ? disableRipple : false;
  var customButtonStyle$1 =
    customButtonStyle !== undefined ? customButtonStyle : "";
  var allowButtonTextMinWidth$1 =
    allowButtonTextMinWidth !== undefined ? allowButtonTextMinWidth : true;
  var access$1 = access !== undefined ? access : /* Access */ 1;
  var tooltipText$1 =
    tooltipText !== undefined ? tooltipText : HSwitchUtils.noAccessControlText;
  var buttonState$2 = access$1 ? buttonState$1 : /* Disabled */ 2;
  var showBtnTextToolTip = access$1 === /* NoAccess */ 0;
  return React.createElement(Button.make, {
    buttonState: buttonState$2,
    text: props.text,
    buttonType: buttonType$1,
    buttonVariant: buttonVariant$1,
    buttonSize: props.buttonSize,
    leftIcon: leftIcon$1,
    rightIcon: rightIcon$1,
    showBorder: showBorder$1,
    type_: type_$1,
    onClick: props.onClick,
    textStyle: textStyle$1,
    customIconMargin: props.customIconMargin,
    customTextSize: props.customTextSize,
    customIconSize: props.customIconSize,
    textWeight: props.textWeight,
    fullLength: fullLength$1,
    disableRipple: disableRipple$1,
    customButtonStyle: customButtonStyle$1,
    textStyleClass: props.textStyleClass,
    customTextPaddingClass: props.customTextPaddingClass,
    allowButtonTextMinWidth: allowButtonTextMinWidth$1,
    customPaddingClass: props.customPaddingClass,
    customRoundedClass: props.customRoundedClass,
    customHeightClass: props.customHeightClass,
    customBackColor: props.customBackColor,
    showBtnTextToolTip: showBtnTextToolTip,
    tooltipText: tooltipText$1,
    toolTipPosition: props.toolTipPosition,
  });
}

var make = ACLButton;

export { make };
/* react Not a pure module */
