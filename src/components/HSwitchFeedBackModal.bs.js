// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as APIUtils from "../screens/APIUtils/APIUtils.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as ToastState from "../hooks/ToastState.bs.js";
import * as FormRenderer from "./form/FormRenderer.bs.js";
import * as HSwitchUtils from "../screens/Utils/HSwitchUtils.bs.js";
import * as RatingOptions from "./RatingOptions.bs.js";
import * as LabelVisibilityContext from "./form/LabelVisibilityContext.bs.js";
import * as HSwitchFeedBackModalUtils from "./HSwitchFeedBackModalUtils.bs.js";

function HSwitchFeedBackModal(props) {
  var modalType = props.modalType;
  var setShowModal = props.setShowModal;
  var modalType$1 = modalType !== undefined ? modalType : /* FeedBackModal */ 0;
  var showToast = ToastState.useShowToast(undefined);
  var updateDetails = APIUtils.useUpdateMethod(undefined, undefined);
  var onSubmit = async function (values, param) {
    try {
      var url = APIUtils.getURL(
        /* USERS */ 22,
        /* Post */ 2,
        undefined,
        undefined,
        "USER_DATA",
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var body = LogicUtils.getJsonFromArrayOfJson([
        [
          "Feedback",
          HSwitchUtils.getBodyForFeedBack(values, modalType$1, undefined),
        ],
      ]);
      await Curry._7(
        updateDetails,
        url,
        body,
        /* Post */ 2,
        undefined,
        undefined,
        undefined,
        undefined,
      );
      var successMessage = modalType$1
        ? "Request submitted succesfully"
        : "Thanks for feedback";
      Curry._8(
        showToast,
        successMessage,
        /* ToastSuccess */ 3,
        undefined,
        false,
        undefined,
        undefined,
        undefined,
        undefined,
      );
    } catch (exn) {}
    Curry._1(setShowModal, function (param) {
      return false;
    });
    return null;
  };
  var showLabel = modalType$1 ? true : false;
  var modalFormFields = modalType$1
    ? React.createElement(
        "div",
        {
          className: "flex flex-col gap-1",
        },
        React.createElement(FormRenderer.FieldRenderer.make, {
          field: HSwitchFeedBackModalUtils.connectorNameField,
        }),
        React.createElement(FormRenderer.FieldRenderer.make, {
          field: HSwitchFeedBackModalUtils.connectorDescription,
        }),
      )
    : React.createElement(
        React.Fragment,
        undefined,
        React.createElement(RatingOptions.make, {
          icons: ["angry", "frown", "smile", "smile-beam", "grin-hearts"],
          size: 30,
        }),
        React.createElement(
          "div",
          {
            className:
              "text-md w-full font-medium mt-7 -mb-1 text-dark_black opacity-80 my-5",
          },
          "Type of feedback",
        ),
        React.createElement(
          "div",
          {
            className: "mb-5 mt-1",
          },
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: HSwitchFeedBackModalUtils.selectFeedbackType,
          }),
        ),
        React.createElement(
          "div",
          {
            className:
              "text-md w-full font-medium mt-3 ml-2 -mb-1 text-dark_black opacity-80 my-5",
          },
          "How can we improve your hyperswitch experience?",
        ),
        React.createElement(
          "div",
          {
            className: "mt-2",
          },
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: HSwitchFeedBackModalUtils.feedbackTextBox,
          }),
        ),
      );
  var submitBtnText = modalType$1 ? "Submit Request" : "Send";
  return React.createElement(Modal.make, {
    showModal: props.showModal,
    setShowModal: setShowModal,
    children: React.createElement(Form.make, {
      children: React.createElement(LabelVisibilityContext.make, {
        children: React.createElement(
          "div",
          {
            className: "flex flex-col justify-center",
          },
          modalFormFields,
          React.createElement(
            "div",
            {
              className: "flex justify-end gap-3 p-1 mt-4",
            },
            React.createElement(Button.make, {
              text: "Cancel",
              buttonType: /* Secondary */ 1,
              onClick: function (param) {
                Curry._1(setShowModal, function (param) {
                  return false;
                });
              },
            }),
            React.createElement(FormRenderer.SubmitButton.make, {
              text: submitBtnText,
            }),
          ),
        ),
        showLabel: showLabel,
      }),
      onSubmit: onSubmit,
      validate: function (values) {
        return HSwitchFeedBackModalUtils.validateFields(values, modalType$1);
      },
    }),
    modalHeading: props.modalHeading,
    modalClass:
      "w-full max-w-xl m-auto dark:!bg-jp-gray-lightgray_background pb-3",
    headingClass: "!bg-transparent dark:!bg-jp-gray-lightgray_background",
    closeOnOutsideClick: true,
    borderBottom: true,
  });
}

var make = HSwitchFeedBackModal;

export { make };
/* Form Not a pure module */
