// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Portal from "./portal/Portal.bs.js";
import * as Recoil from "recoil";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LoadedTable from "./LoadedTable.bs.js";
import * as DynamicTableUtils from "./DynamicTableUtils.bs.js";

function LoadedTableWithCustomColumns(props) {
  var previewOnly = props.previewOnly;
  var noScrollbar = props.noScrollbar;
  var showResultsPerPageSelector = props.showResultsPerPageSelector;
  var showSerialNumberInCustomizeColumns =
    props.showSerialNumberInCustomizeColumns;
  var sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var customColumnMapper = props.customColumnMapper;
  var rowCustomClass = props.rowCustomClass;
  var titleTooltip = props.titleTooltip;
  var rowHeightClass = props.rowHeightClass;
  var getRowDetails = props.getRowDetails;
  var collapseTableRow = props.collapseTableRow;
  var tableheadingClass = props.tableheadingClass;
  var tableLocalFilter = props.tableLocalFilter;
  var setSummary = props.setSummary;
  var setData = props.setData;
  var dataLoading = props.dataLoading;
  var tableDataLoading = props.tableDataLoading;
  var hideTitle = props.hideTitle;
  var ignoreUrlUpdate = props.ignoreUrlUpdate;
  var hideRightTitleElement = props.hideRightTitleElement;
  var tableDataBackgroundClass = props.tableDataBackgroundClass;
  var filters = props.filters;
  var entity = props.entity;
  var handleRefetch = props.handleRefetch;
  var actualData = props.actualData;
  var showSerialNumber = props.showSerialNumber;
  var rightTitleElement = props.rightTitleElement;
  var title = props.title;
  if (rightTitleElement !== undefined) {
    Caml_option.valFromOption(rightTitleElement);
  }
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : false;
  var handleRefetch$1 =
    handleRefetch !== undefined ? handleRefetch : function (param) {};
  var filters$1 =
    filters !== undefined ? Caml_option.valFromOption(filters) : null;
  var tableDataBackgroundClass$1 =
    tableDataBackgroundClass !== undefined ? tableDataBackgroundClass : "";
  var hideRightTitleElement$1 =
    hideRightTitleElement !== undefined ? hideRightTitleElement : false;
  var ignoreUrlUpdate$1 =
    ignoreUrlUpdate !== undefined ? ignoreUrlUpdate : false;
  var hideTitle$1 = hideTitle !== undefined ? hideTitle : false;
  var tableDataLoading$1 =
    tableDataLoading !== undefined ? tableDataLoading : false;
  var dataLoading$1 = dataLoading !== undefined ? dataLoading : false;
  var setData$1 = setData !== undefined ? setData : function (param) {};
  var setSummary$1 =
    setSummary !== undefined ? setSummary : function (param) {};
  var tableLocalFilter$1 =
    tableLocalFilter !== undefined ? tableLocalFilter : false;
  var tableheadingClass$1 =
    tableheadingClass !== undefined ? tableheadingClass : "";
  var collapseTableRow$1 =
    collapseTableRow !== undefined ? collapseTableRow : false;
  var getRowDetails$1 =
    getRowDetails !== undefined
      ? getRowDetails
      : function (param) {
          return null;
        };
  var rowHeightClass$1 = rowHeightClass !== undefined ? rowHeightClass : "";
  var titleTooltip$1 = titleTooltip !== undefined ? titleTooltip : false;
  var rowCustomClass$1 = rowCustomClass !== undefined ? rowCustomClass : "";
  var sortingBasedOnDisabled$1 =
    sortingBasedOnDisabled !== undefined ? sortingBasedOnDisabled : true;
  var showSerialNumberInCustomizeColumns$1 =
    showSerialNumberInCustomizeColumns !== undefined
      ? showSerialNumberInCustomizeColumns
      : true;
  var showResultsPerPageSelector$1 =
    showResultsPerPageSelector !== undefined
      ? showResultsPerPageSelector
      : true;
  var noScrollbar$1 = noScrollbar !== undefined ? noScrollbar : false;
  var previewOnly$1 = previewOnly !== undefined ? previewOnly : false;
  var match = React.useState(function () {
    return false;
  });
  var setShowColumnSelector = match[1];
  var activeColumnsAtom = customColumnMapper;
  var visibleColumns = Recoil.useRecoilValue(customColumnMapper);
  var chooseCols = React.createElement(
    DynamicTableUtils.ChooseColumnsWrapper.make,
    {
      entity: entity,
      totalResults: actualData.length,
      defaultColumns: props.defaultColumns,
      activeColumnsAtom: activeColumnsAtom,
      setShowColumnSelector: setShowColumnSelector,
      showColumnSelector: match[0],
      sortingBasedOnDisabled: sortingBasedOnDisabled$1,
      showSerialNumber: showSerialNumberInCustomizeColumns$1,
    },
  );
  var filt = React.createElement(
    "div",
    {
      className: "flex flex-row gap-4",
    },
    filters$1,
    chooseCols,
  );
  var customizeColumn = React.createElement(UIUtils.RenderIf.make, {
    condition: !hideRightTitleElement$1,
    children: React.createElement(Portal.make, {
      to: "" + title + "CustomizeColumn",
      children: React.createElement(Button.make, {
        text: "Customize Columns",
        buttonType: /* SecondaryFilled */ 3,
        buttonSize: /* XSmall */ 3,
        leftIcon: {
          TAG: /* CustomIcon */ 1,
          _0: React.createElement(Icon.make, {
            name: "vertical_slider",
          }),
        },
        onClick: function (param) {
          Curry._1(setShowColumnSelector, function (param) {
            return true;
          });
        },
      }),
    }),
  });
  var rightTitleElement$1 = previewOnly$1 ? null : customizeColumn;
  return React.createElement(LoadedTable.make, {
    visibleColumns: visibleColumns,
    defaultSort: props.defaultSort,
    title: title,
    description: props.description,
    tableActions: props.tableActions,
    rightTitleElement: Caml_option.some(rightTitleElement$1),
    bottomActions: props.bottomActions,
    showSerialNumber: showSerialNumber$1,
    actualData: actualData,
    totalResults: props.totalResults,
    resultsPerPage: props.resultsPerPage,
    offset: props.offset,
    setOffset: props.setOffset,
    handleRefetch: handleRefetch$1,
    entity: entity,
    onEntityClick: props.onEntityClick,
    currrentFetchCount: props.currrentFetchCount,
    filters: Caml_option.some(filt),
    downloadCsv: props.downloadCsv,
    ignoreUrlUpdate: ignoreUrlUpdate$1,
    hideTitle: hideTitle$1,
    tableDataLoading: tableDataLoading$1,
    dataLoading: dataLoading$1,
    advancedSearchComponent: props.advancedSearchComponent,
    setData: setData$1,
    setSummary: setSummary$1,
    dataNotFoundComponent: props.dataNotFoundComponent,
    renderCard: props.renderCard,
    tableLocalFilter: tableLocalFilter$1,
    tableheadingClass: tableheadingClass$1,
    collapseTableRow: collapseTableRow$1,
    getRowDetails: getRowDetails$1,
    onMouseEnter: props.onMouseEnter,
    onMouseLeave: props.onMouseLeave,
    frozenUpto: props.frozenUpto,
    heightHeadingClass: props.heightHeadingClass,
    rowHeightClass: rowHeightClass$1,
    titleTooltip: titleTooltip$1,
    rowCustomClass: rowCustomClass$1,
    filterObj: props.filterObj,
    setFilterObj: props.setFilterObj,
    filterIcon: props.filterIcon,
    setExtFilteredDataLength: props.setExtFilteredDataLength,
    showResultsPerPageSelector: showResultsPerPageSelector$1,
    noScrollbar: noScrollbar$1,
    tableDataBackgroundClass: tableDataBackgroundClass$1,
  });
}

var make = LoadedTableWithCustomColumns;

export { make };
/* Icon Not a pure module */
