// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../genericUtils/Form.bs.js";
import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Portal from "./portal/Portal.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as EntityType from "../entities/EntityType.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as FilterUtils from "./FilterUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "./form/FormRenderer.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as PortalCapture from "./portal/PortalCapture.bs.js";
import * as ReactFinalForm from "../libraries/ReactFinalForm.bs.js";
import * as DictionaryUtils from "../utils/DictionaryUtils.bs.js";
import * as UserPrefContext from "../context/UserPrefContext.bs.js";
import * as DateRefreshHooks from "../hooks/DateRefreshHooks.bs.js";
import * as JsonFlattenUtils from "../utils/JsonFlattenUtils.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RemoteFiltersUtils from "./RemoteFiltersUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as CustomInputSelectBox from "./CustomInputSelectBox.bs.js";
import * as LabelVisibilityContext from "./form/LabelVisibilityContext.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";

function RemoteFilter$ClearForm(props) {
  var form = ReactFinalForm$1.useForm();
  return React.createElement(
    "div",
    {
      className: "ml-2",
    },
    React.createElement(Button.make, {
      text: "Clear Form",
      onClick: function (e) {
        Curry._1(form.reset, {});
      },
    }),
  );
}

var ClearForm = {
  make: RemoteFilter$ClearForm,
};

function RemoteFilter$ModalUI(props) {
  var fieldsFromOption = props.fieldsFromOption;
  var initialValueJson = props.initialValueJson;
  var setShowModal = props.setShowModal;
  var form = ReactFinalForm$1.useForm();
  var footerUi = React.createElement(
    "div",
    {
      className:
        "flex flex-row justify-between p-4 border-t border-jp-gray-500 dark:border-jp-gray-960 items-center",
    },
    React.createElement(RemoteFilter$ClearForm, {}),
    React.createElement(
      "div",
      {
        className: "flex flex-row gap-2 place-content-end",
      },
      React.createElement(Button.make, {
        text: "Cancel",
        buttonType: /* SecondaryFilled */ 3,
        buttonSize: /* Small */ 2,
        onClick: function (_ev) {
          Curry._1(form.reset, initialValueJson);
          Curry._1(setShowModal, function (param) {
            return false;
          });
        },
      }),
      React.createElement(FormRenderer.SubmitButton.make, {
        text: "Submit",
        disabledParamter: props.isButtonDisabled,
      }),
    ),
  );
  var field = fieldsFromOption[0];
  var field$1 = fieldsFromOption[1];
  var field$2 = fieldsFromOption[3];
  var field$3 = fieldsFromOption[2];
  return React.createElement(Modal.make, {
    showModal: props.showModal,
    setShowModal: setShowModal,
    children: React.createElement(AddDataAttributes.make, {
      attributes: [["data-filter", "advanceFilters"]],
      children: React.createElement(
        "div",
        {
          className: "overflow-auto",
          style: {
            maxHeight: "calc(100vh - 15rem)",
          },
        },
        React.createElement(
          "div",
          {
            className: "flex flex-wrap h-fit",
          },
          field !== undefined
            ? React.createElement(FormRenderer.FieldRenderer.make, {
                field: field,
                fieldWrapperClass: "w-full !min-w-[200px] p-4 -my-4",
              })
            : null,
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-wrap h-fit ",
          },
          field$1 !== undefined
            ? React.createElement(FormRenderer.FieldRenderer.make, {
                field: field$1,
                fieldWrapperClass: "w-full !min-w-[200px] p-4 -my-4",
              })
            : null,
          field$2 !== undefined
            ? React.createElement(FormRenderer.FieldRenderer.make, {
                field: field$2,
                fieldWrapperClass: "w-full !min-w-[200px] p-4 -my-4",
              })
            : null,
        ),
        React.createElement(
          "div",
          {
            className: "flex flex-wrap h-fit mb-10",
          },
          field$3 !== undefined
            ? React.createElement(FormRenderer.FieldRenderer.make, {
                field: field$3,
                fieldWrapperClass: "w-full !min-w-[200px] p-4 -my-4",
              })
            : null,
          React.createElement(FormRenderer.FieldsRenderer.make, {
            fields: fieldsFromOption.slice(4),
            fieldWrapperClass: "w-1/3 !min-w-[200px] p-4 -my-4",
          }),
        ),
      ),
    }),
    modalHeading: "Advanced Search",
    modalClass: "w-full md:w-2/3 mx-auto mt-0",
    childClass: "p-2 m-2",
    borderBottom: true,
    onCloseClickCustomFun: function (_ev) {
      Curry._1(form.reset, initialValueJson);
      Curry._1(setShowModal, function (param) {
        return false;
      });
    },
    modalFooter: Caml_option.some(footerUi),
  });
}

var ModalUI = {
  make: RemoteFilter$ModalUI,
};

function RemoteFilter$ClearFilters(props) {
  var outsidefilter = props.outsidefilter;
  var isCountRequired = props.isCountRequired;
  var clearFilters = props.clearFilters;
  var defaultFilterKeys = props.defaultFilterKeys;
  var defaultFilterKeys$1 =
    defaultFilterKeys !== undefined ? defaultFilterKeys : [];
  var isCountRequired$1 =
    isCountRequired !== undefined ? isCountRequired : true;
  var outsidefilter$1 = outsidefilter !== undefined ? outsidefilter : false;
  var match = React.useContext(FilterContext.filterContext);
  var updateExistingKeys = match.updateExistingKeys;
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var outerClass = isMobileView
    ? "flex items-center justify-end"
    : "mt-1 ml-10";
  var leftIcon = {
    TAG: /* CustomIcon */ 1,
    _0: React.createElement(Icon.make, {
      name: "clear_filter_img",
      size: 14,
    }),
  };
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values", "initialValues"]),
  );
  var handleClearFilter =
    clearFilters !== undefined
      ? function (param) {
          Curry._1(clearFilters, undefined);
        }
      : function (param) {
          var searchStr = Belt_Array.keepMap(
            Object.entries(
              Core__Option.getOr(
                Core__JSON.Decode.object(formState.values),
                {},
              ),
            ),
            function (entry) {
              var key = entry[0];
              if (!defaultFilterKeys$1.includes(key)) {
                return;
              }
              var str = Core__JSON.Classify.classify(entry[1]);
              if (typeof str === "number") {
                return;
              }
              switch (str.TAG | 0) {
                case /* String */ 1:
                  return "" + key + "=" + str._0 + "";
                case /* Number */ 2:
                  return "" + key + "=" + String(str._0) + "";
                case /* Array */ 4:
                  return "" + key + "=[" + String(str._0) + "]";
                default:
                  return;
              }
            },
          ).join("&");
          Curry._1(
            updateExistingKeys,
            FilterUtils.parseFilterString(searchStr),
          );
        };
  var hasExtraFilters = React.useMemo(
    function () {
      return (
        Object.entries(
          Core__Option.getOr(
            Core__JSON.Decode.object(formState.initialValues),
            {},
          ),
        ).filter(function (entry) {
          var str = Core__JSON.Classify.classify(entry[1]);
          var isEmptyValue;
          if (typeof str === "number") {
            isEmptyValue = true;
          } else {
            switch (str.TAG | 0) {
              case /* String */ 1:
                isEmptyValue = LogicUtils.isEmptyString(str._0);
                break;
              case /* Array */ 4:
                isEmptyValue = str._0.length === 0;
                break;
              default:
                isEmptyValue = false;
            }
          }
          if (defaultFilterKeys$1.includes(entry[0])) {
            return false;
          } else {
            return !isEmptyValue;
          }
        }).length > 0
      );
    },
    [formState.initialValues, defaultFilterKeys$1],
  );
  var text = isCountRequired$1
    ? "Clear " + props.count.toString() + " Filters"
    : "Clear Filters";
  return React.createElement(UIUtils.RenderIf.make, {
    condition: hasExtraFilters || outsidefilter$1,
    children: React.createElement(
      "div",
      {
        className: "" + props.filterButtonStyle + " " + outerClass + "",
      },
      React.createElement(Button.make, {
        text: text,
        buttonType: /* NonFilled */ 4,
        leftIcon: leftIcon,
        showBorder: false,
        onClick: handleClearFilter,
        textStyle: "",
      }),
    ),
  });
}

var ClearFilters = {
  make: RemoteFilter$ClearFilters,
};

function RemoteFilter$AnalyticsClearFilters(props) {
  var outsidefilter = props.outsidefilter;
  var clearFilters = props.clearFilters;
  var defaultFilterKeys = props.defaultFilterKeys;
  var defaultFilterKeys$1 =
    defaultFilterKeys !== undefined ? defaultFilterKeys : [];
  var outsidefilter$1 = outsidefilter !== undefined ? outsidefilter : false;
  var match = React.useContext(FilterContext.filterContext);
  var updateExistingKeys = match.updateExistingKeys;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values", "initialValues"]),
  );
  var handleClearFilter =
    clearFilters !== undefined
      ? function (param) {
          Curry._1(clearFilters, undefined);
        }
      : function (param) {
          var searchStr = Belt_Array.keepMap(
            Object.entries(
              Core__Option.getOr(
                Core__JSON.Decode.object(formState.values),
                {},
              ),
            ),
            function (entry) {
              var key = entry[0];
              if (!defaultFilterKeys$1.includes(key)) {
                return;
              }
              var str = Core__JSON.Classify.classify(entry[1]);
              if (typeof str === "number") {
                return;
              }
              switch (str.TAG | 0) {
                case /* String */ 1:
                  return "" + key + "=" + str._0 + "";
                case /* Number */ 2:
                  return "" + key + "=" + String(str._0) + "";
                case /* Array */ 4:
                  return "" + key + "=[" + String(str._0) + "]";
                default:
                  return;
              }
            },
          ).join("&");
          Curry._1(
            updateExistingKeys,
            FilterUtils.parseFilterString(searchStr),
          );
        };
  var hasExtraFilters = React.useMemo(
    function () {
      return (
        Object.entries(
          Core__Option.getOr(
            Core__JSON.Decode.object(formState.initialValues),
            {},
          ),
        ).filter(function (entry) {
          var str = Core__JSON.Classify.classify(entry[1]);
          var isEmptyValue;
          if (typeof str === "number") {
            isEmptyValue = true;
          } else {
            switch (str.TAG | 0) {
              case /* String */ 1:
                isEmptyValue = LogicUtils.isEmptyString(str._0);
                break;
              case /* Array */ 4:
                isEmptyValue = str._0.length === 0;
                break;
              default:
                isEmptyValue = false;
            }
          }
          if (defaultFilterKeys$1.includes(entry[0])) {
            return false;
          } else {
            return !isEmptyValue;
          }
        }).length > 0
      );
    },
    [formState.initialValues, defaultFilterKeys$1],
  );
  return React.createElement(UIUtils.RenderIf.make, {
    condition: hasExtraFilters || outsidefilter$1,
    children: React.createElement(
      "div",
      {
        className: "absolute -top-2 -right-2",
      },
      React.createElement(ToolTip.make, {
        description: "Clear Filters",
        toolTipFor: Caml_option.some(
          React.createElement(Icon.make, {
            name: "filters-close",
            size: 20,
            className: "mx-1",
            onClick: handleClearFilter,
          }),
        ),
        tooltipWidthClass: "w-24",
      }),
    ),
  });
}

var AnalyticsClearFilters = {
  make: RemoteFilter$AnalyticsClearFilters,
};

function RemoteFilter$CheckCustomFilters(props) {
  var addFilters = props.addFilters;
  var removeFilters = props.removeFilters;
  var checkedFilters = props.checkedFilters;
  var options = props.options;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var values = formState.values;
  var onChangeSelect = function (ev) {
    var newlyAdded = ev.filter(function (newVal) {
      return !checkedFilters.includes(newVal);
    });
    if (newlyAdded.length > 0) {
      return Curry._1(addFilters, newlyAdded);
    } else {
      return Curry._2(removeFilters, ev, values);
    }
  };
  var selectOptions = options.map(function (obj) {
    return obj.urlKey;
  });
  return React.createElement(
    "div",
    {
      className: "md:justify-between flex p-1 items-center flex-wrap",
    },
    options.length > 0 && props.showAddFilter
      ? React.createElement(
          "div",
          {
            className: "flex flex-wrap",
          },
          React.createElement(CustomInputSelectBox.make, {
            onChange: onChangeSelect,
            value: checkedFilters.map(function (prim) {
              return prim;
            }),
            buttonText: "Add Filters",
            options: selectOptions.map(function (item) {
              return {
                label: LogicUtils.snakeToTitle(item),
                value: item,
              };
            }),
            allowMultiSelect: true,
            isDropDown: true,
            hideMultiSelectButtons: true,
            buttonType: /* FilterAdd */ 7,
            searchable: props.showSelectFiltersSearch,
          }),
        )
      : null,
  );
}

var CheckCustomFilters = {
  make: RemoteFilter$CheckCustomFilters,
};

function RemoteFilter$AutoSubmitter(props) {
  var defaultFilterKeys = props.defaultFilterKeys;
  var submit = props.submit;
  var autoApply = props.autoApply;
  var showModal = props.showModal;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values", "dirtyFields"]),
  );
  var values = formState.values;
  React.useEffect(
    function () {
      if (formState.dirty) {
        var defaultFieldsHaveChanged = defaultFilterKeys.some(function (key) {
          return Core__Option.getOr(formState.dirtyFields[key], false);
        });
        if (!showModal && (autoApply || defaultFieldsHaveChanged)) {
          Curry._2(submit, formState.values, 0);
        }
      }
    },
    [values],
  );
  return null;
}

var AutoSubmitter = {
  make: RemoteFilter$AutoSubmitter,
};

function getStrFromJson(key, val) {
  var str = Core__JSON.Classify.classify(val);
  if (typeof str === "number") {
    return "";
  }
  switch (str.TAG | 0) {
    case /* String */ 1:
      return str._0;
    case /* Number */ 2:
      if (key === "offset") {
        return "0";
      } else {
        return (str._0 | 0).toString();
      }
    case /* Array */ 4:
      var array = str._0;
      if (array.length > 0) {
        return "[" + array.join(",") + "]";
      } else {
        return "";
      }
    default:
      return "";
  }
}

function RemoteFilter$ApplyFilterButton(props) {
  var defaultFilterKeys = props.defaultFilterKeys;
  var defaultinputField = FormRenderer.makeInputFieldInfo(
    undefined,
    "-",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
  );
  var inputFieldsDict = Object.fromEntries(
    props.selectedFiltersList.map(function (filter) {
      var inputFieldsArr = filter.inputFields;
      var inputField = LogicUtils.getValueFromArray(
        inputFieldsArr,
        0,
        defaultinputField,
      );
      return [inputField.name, inputField];
    }),
  );
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription([
      "values",
      "dirtyFields",
      "initialValues",
    ]),
  );
  var formCurrentValues = DictionaryUtils.deleteKeys(
    LogicUtils.getDictFromJsonObject(formState.values),
    defaultFilterKeys,
  );
  var formInitalValues = DictionaryUtils.deleteKeys(
    LogicUtils.getDictFromJsonObject(formState.initialValues),
    defaultFilterKeys,
  );
  var dirtyFields = Object.keys(formState.dirtyFields);
  var getFormattedDict = function (dict) {
    return Object.fromEntries(
      Object.entries(dict).map(function (entry) {
        var value = entry[1];
        var key = entry[0];
        var inputField = Core__Option.getOr(
          inputFieldsDict[key],
          defaultinputField,
        );
        var formattor = inputField.format;
        var value$1 = formattor !== undefined ? formattor(value, key) : value;
        return [key, value$1];
      }),
    );
  };
  var formattedInitialValues = getFormattedDict(formInitalValues);
  var formattedCurrentValues = getFormattedDict(formCurrentValues);
  var equalDictCheck = DictionaryUtils.checkEqualJsonDicts(
    dirtyFields,
    ["opt"],
    formattedInitialValues,
    formattedCurrentValues,
  );
  var otherCheck = Core__Array.reduce(
    Object.entries(formattedCurrentValues),
    true,
    function (acc, item) {
      var str = Core__JSON.Classify.classify(item[1]);
      var tmp;
      if (typeof str === "number") {
        tmp = true;
      } else {
        switch (str.TAG | 0) {
          case /* String */ 1:
            tmp = LogicUtils.isEmptyString(str._0);
            break;
          case /* Bool */ 0:
          case /* Number */ 2:
            tmp = false;
            break;
          case /* Object */ 3:
            tmp = Object.entries(str._0).length === 0;
            break;
          case /* Array */ 4:
            tmp = str._0.length === 0;
            break;
        }
      }
      if (tmp) {
        return acc;
      } else {
        return false;
      }
    },
  );
  var showApplyFilter = !equalDictCheck && !otherCheck;
  if (
    props.autoApply ||
    props.totalFilters === 0 ||
    !(!props.hideFilters && showApplyFilter)
  ) {
    return null;
  } else {
    return React.createElement(
      "div",
      {
        className:
          "flex justify-between items-center " + props.filterButtonStyle + "",
      },
      React.createElement(FormRenderer.SubmitButton.make, {
        text: "Apply Filters",
        icon: {
          TAG: /* FontAwesome */ 0,
          _0: "check",
        },
      }),
    );
  }
}

var ApplyFilterButton = {
  make: RemoteFilter$ApplyFilterButton,
};

function RemoteFilter$FilterModal(props) {
  var showAllFilter = props.showAllFilter;
  var selectedFiltersList = props.selectedFiltersList;
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values", "dirtyFields"]),
  );
  var formCurrentValues = LogicUtils.getDictFromJsonObject(formState.values);
  var sortedSelectedFiltersList = React.useMemo(function () {
    var selectedFiltersListWithVal = selectedFiltersList.filter(
      function (item) {
        var inputName = Core__Option.getOr(item.inputNames[0], "");
        var selectedNo = LogicUtils.getStrArray(
          formCurrentValues,
          inputName,
        ).length.toString();
        return selectedNo !== "0";
      },
    );
    var selectedFiltersListWithoutVal = selectedFiltersList.filter(
      function (item) {
        return !selectedFiltersListWithVal.includes(item);
      },
    );
    return selectedFiltersListWithVal.concat(selectedFiltersListWithoutVal);
  }, selectedFiltersList);
  return React.createElement(
    "div",
    {
      className: "flex flex-col gap-4.5",
    },
    sortedSelectedFiltersList.map(function (item, i) {
      var inputName = Core__Option.getOr(item.inputNames[0], "");
      var selectedNo = LogicUtils.getStrArray(
        formCurrentValues,
        inputName,
      ).length.toString();
      var textcolor =
        selectedNo !== "0"
          ? "text-jp-2-light-gray-2000"
          : "text-jp-2-light-gray-1000";
      return React.createElement(UIUtils.RenderIf.make, {
        condition: showAllFilter || i < 10,
        children: React.createElement(
          "div",
          {
            className:
              "font-medium flex flex-row items-center justify-between px-4 py-2.5 text-fs-14",
          },
          React.createElement(
            "span",
            {
              className: "flex gap-2 items-center " + textcolor + "",
            },
            LogicUtils.snakeToTitle(inputName),
            React.createElement(UIUtils.RenderIf.make, {
              condition: selectedNo !== "0",
              children: React.createElement(AddDataAttributes.make, {
                attributes: [["data-badge-value", selectedNo]],
                children: React.createElement(
                  "span",
                  {
                    className:
                      "bg-jp-2-light-primary-600 font-medium text-white text-fs-12 px-1.5 py-0.5 w-fit rounded",
                  },
                  selectedNo,
                ),
              }),
            }),
          ),
          React.createElement(FormRenderer.FieldRenderer.make, {
            field: item,
            fieldWrapperClass: "flex flex-col",
            labelClass: "hidden",
            labelPadding: "pb-2",
          }),
        ),
      });
    }),
  );
}

var FilterModal = {
  make: RemoteFilter$FilterModal,
};

function RemoteFilter(props) {
  var revampedFilter = props.revampedFilter;
  var disableURIdecode = props.disableURIdecode;
  var showSelectFiltersSearch = props.showSelectFiltersSearch;
  var hideFiltersDefaultValue = props.hideFiltersDefaultValue;
  var showFiltersBtn = props.showFiltersBtn;
  var initalCount = props.initalCount;
  var filterFieldsPortalName = props.filterFieldsPortalName;
  var showClearFilter = props.showClearFilter;
  var clearFilters = props.clearFilters;
  var updateUrlWith = props.updateUrlWith;
  var customViewTop = props.customViewTop;
  var customView = props.customView;
  var defaultFilterKeys = props.defaultFilterKeys;
  var showClearFilterButton = props.showClearFilterButton;
  var tooltipStyling = props.tooltipStyling;
  var filterButtonStyle = props.filterButtonStyle;
  var addFilterStyle = props.addFilterStyle;
  var showExtraFiltersInline = props.showExtraFiltersInline;
  var autoApply = props.autoApply;
  var tableName = props.tableName;
  var showRemoteOptions = props.showRemoteOptions;
  var popupFilterFields = props.popupFilterFields;
  var mandatoryRemoteKeys = props.mandatoryRemoteKeys;
  var localFilters = props.localFilters;
  var remoteOptions = props.remoteOptions;
  var remoteFilters = props.remoteFilters;
  var refreshFilters = props.refreshFilters;
  var path = props.path;
  var title = props.title;
  var setOffset = props.setOffset;
  var requiredSearchFieldsList = props.requiredSearchFieldsList;
  var fixedFilters = props.fixedFilters;
  var defaultFilters = props.defaultFilters;
  var fixedFilters$1 = fixedFilters !== undefined ? fixedFilters : [];
  var title$1 = title !== undefined ? title : "";
  var path$1 = path !== undefined ? path : "";
  var refreshFilters$1 = refreshFilters !== undefined ? refreshFilters : true;
  var mandatoryRemoteKeys$1 =
    mandatoryRemoteKeys !== undefined ? mandatoryRemoteKeys : [];
  var popupFilterFields$1 =
    popupFilterFields !== undefined ? popupFilterFields : [];
  var showRemoteOptions$1 =
    showRemoteOptions !== undefined ? showRemoteOptions : false;
  var autoApply$1 = autoApply !== undefined ? autoApply : false;
  var showExtraFiltersInline$1 =
    showExtraFiltersInline !== undefined ? showExtraFiltersInline : false;
  var addFilterStyle$1 = addFilterStyle !== undefined ? addFilterStyle : "";
  var filterButtonStyle$1 =
    filterButtonStyle !== undefined ? filterButtonStyle : "";
  var tooltipStyling$1 = tooltipStyling !== undefined ? tooltipStyling : "";
  var showClearFilterButton$1 =
    showClearFilterButton !== undefined ? showClearFilterButton : false;
  var defaultFilterKeys$1 =
    defaultFilterKeys !== undefined ? defaultFilterKeys : [];
  var customView$1 =
    customView !== undefined ? Caml_option.valFromOption(customView) : null;
  var customViewTop$1 =
    customViewTop !== undefined
      ? Caml_option.valFromOption(customViewTop)
      : null;
  var showClearFilter$1 =
    showClearFilter !== undefined ? showClearFilter : true;
  var filterFieldsPortalName$1 =
    filterFieldsPortalName !== undefined ? filterFieldsPortalName : "";
  var initalCount$1 = initalCount !== undefined ? initalCount : 0;
  var showFiltersBtn$1 = showFiltersBtn !== undefined ? showFiltersBtn : false;
  var showSelectFiltersSearch$1 =
    showSelectFiltersSearch !== undefined ? showSelectFiltersSearch : false;
  var disableURIdecode$1 =
    disableURIdecode !== undefined ? disableURIdecode : false;
  var revampedFilter$1 = revampedFilter !== undefined ? revampedFilter : false;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useContext(FilterContext.filterContext);
  var query = match.query;
  var alreadySelectedFiltersUserpref =
    "remote_filters_selected_keys_" + Core__Option.getOr(tableName, "") + "";
  var match$1 = React.useContext(UserPrefContext.userPrefContext);
  var addConfig = match$1.addConfig;
  var match$2 = React.useState(function () {
    return remoteFilters.map(function (item) {
      return item.field;
    });
  });
  var setSelectedFiltersList = match$2[1];
  var selectedFiltersList = match$2[0];
  React.useEffect(function () {
    if (remoteFilters.length >= selectedFiltersList.length) {
      Curry._1(setSelectedFiltersList, function (param) {
        return remoteFilters.map(function (item) {
          return item.field;
        });
      });
    }
  }, remoteFilters);
  var updatedSelectedList = React.useMemo(
    function () {
      return LogicUtils.getJsonFromArrayOfString(
        selectedFiltersList.map(function (item) {
          return Core__Option.getOr(item.inputNames[0], "");
        }),
      );
    },
    [selectedFiltersList],
  );
  React.useEffect(
    function () {
      if (remoteFilters.length > 0) {
        Curry._2(
          addConfig,
          alreadySelectedFiltersUserpref,
          updatedSelectedList,
        );
      }
    },
    [JSON.stringify(updatedSelectedList)],
  );
  var getNewQuery = DateRefreshHooks.useConstructQueryOnBasisOfOpt(undefined);
  var match$3 = React.useState(function () {
    return false;
  });
  var setIsButtonDisabled = match$3[1];
  var totalFilters =
    (selectedFiltersList.length + props.localOptions.length) | 0;
  var match$4 = React.useState(function () {
    return [];
  });
  var setCheckedFilters = match$4[1];
  var checkedFilters = match$4[0];
  var match$5 = React.useState(function () {
    return false;
  });
  var setClearFilterAfterRefresh = match$5[1];
  var match$6 = React.useState(function () {
    return initalCount$1;
  });
  var setCount = match$6[1];
  var count = match$6[0];
  var searchParams = disableURIdecode$1 ? query : decodeURI(url.search);
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var match$7 = React.useState(function () {
    return {};
  });
  var setInitialValueJson = match$7[1];
  var initialValueJson = match$7[0];
  var countSelectedFilters = React.useMemo(
    function () {
      return Object.keys(
        Core__Option.getOr(Core__JSON.Decode.object(initialValueJson), {}),
      ).length;
    },
    [initialValueJson],
  );
  var hideFiltersInit =
    hideFiltersDefaultValue !== undefined ? hideFiltersDefaultValue : true;
  var match$8 = React.useState(function () {
    return false;
  });
  var setShowModal = match$8[1];
  var showModal = match$8[0];
  var match$9 = React.useState(function () {
    return hideFiltersInit;
  });
  var setHideFilters = match$9[1];
  var hideFilters = match$9[0];
  var match$10 = React.useState(function () {
    return false;
  });
  var setShowFiltersModal = match$10[1];
  var match$11 = React.useState(function () {
    return false;
  });
  var setShowAllFilter = match$11[1];
  var showAllFilter = match$11[0];
  var localFilterJson = RemoteFiltersUtils.getInitialValuesFromUrl(
    searchParams,
    localFilters,
    undefined,
    undefined,
    undefined,
  );
  var clearFilterJson = Object.keys(
    LogicUtils.getDictFromJsonObject(
      RemoteFiltersUtils.getInitialValuesFromUrl(
        searchParams,
        localFilters,
        remoteOptions,
        undefined,
        undefined,
      ),
    ),
  ).length;
  var popupUrlKeyArr = popupFilterFields$1.map(function (item) {
    return item.urlKey;
  });
  React.useEffect(
    function () {
      var initialValues = RemoteFiltersUtils.getInitialValuesFromUrl(
        searchParams,
        remoteFilters.concat(fixedFilters$1),
        remoteOptions,
        mandatoryRemoteKeys$1,
        undefined,
      );
      if (updateUrlWith !== undefined) {
        Curry._1(
          updateUrlWith,
          Object.fromEntries(
            Object.entries(LogicUtils.getDictFromJsonObject(initialValues)).map(
              function (item) {
                var key = item[0];
                return [key, getStrFromJson(key, item[1])];
              },
            ),
          ),
        );
      }
      var dict = Core__JSON.Decode.object(initialValues);
      if (dict !== undefined) {
        var localCheckedFilters = checkedFilters.map(function (filter) {
          return filter;
        });
        var localSelectedFiltersList = selectedFiltersList.map(
          function (filter) {
            return filter;
          },
        );
        Object.entries(Caml_option.valFromOption(dict)).forEach(
          function (entry) {
            var key = entry[0];
            var keyIdx = checkedFilters.findIndex(function (item) {
              return item === key;
            });
            if (keyIdx !== -1) {
              return;
            }
            var optionObjIdx = remoteOptions.findIndex(function (option) {
              return option.urlKey === key;
            });
            if (optionObjIdx === -1) {
              return;
            }
            var defaultEntityOptionType =
              EntityType.getDefaultEntityOptionType(undefined);
            var optionObj = Core__Option.getOr(
              remoteOptions[optionObjIdx],
              defaultEntityOptionType,
            );
            var optionObjUrlKey = optionObj.urlKey;
            if (!popupUrlKeyArr.includes(optionObjUrlKey)) {
              localSelectedFiltersList.push(optionObj.field);
              localCheckedFilters.push(key);
              return;
            }
          },
        );
        Curry._1(setCount, function (_prev) {
          return (clearFilterJson + initalCount$1) | 0;
        });
        Curry._1(setCheckedFilters, function (_prev) {
          return localCheckedFilters;
        });
        Curry._1(setSelectedFiltersList, function (_prev) {
          return localSelectedFiltersList;
        });
        var finalInitialValueJson =
          JsonFlattenUtils.unflattenObject(initialValues);
        Curry._1(setInitialValueJson, function (param) {
          return finalInitialValueJson;
        });
      }
    },
    [searchParams],
  );
  var onSubmit = function (values, param) {
    var obj = Object.fromEntries(
      Object.entries(Core__Option.getOr(Core__JSON.Decode.object(values), {})),
    );
    var flattendDict = JsonFlattenUtils.flattenObject(obj, false);
    var localFilterDict = JsonFlattenUtils.flattenObject(
      localFilterJson,
      false,
    );
    if (updateUrlWith !== undefined) {
      RemoteFiltersUtils.applyFilters(
        flattendDict,
        defaultFilters,
        setOffset,
        path$1,
        localFilterDict,
        remoteOptions,
        undefined,
        undefined,
        tableName,
        updateUrlWith,
        undefined,
      );
    } else {
      RemoteFiltersUtils.applyFilters(
        flattendDict,
        defaultFilters,
        setOffset,
        path$1,
        localFilterDict,
        remoteOptions,
        undefined,
        undefined,
        tableName,
        undefined,
        undefined,
      );
    }
    Curry._1(setShowFiltersModal, function (param) {
      return false;
    });
    Curry._1(setShowModal, function (param) {
      return false;
    });
    return Promise.resolve(null);
  };
  var addFilters = function (newlyAdded) {
    var localCheckedFilters = checkedFilters.map(function (checkedStr) {
      return checkedStr;
    });
    var localSelectedFiltersList = selectedFiltersList.map(function (filter) {
      return filter;
    });
    newlyAdded.forEach(function (value) {
      var optionObjArry = remoteOptions.filter(function (option) {
        return option.urlKey === value;
      });
      var defaultEntityOptionType =
        EntityType.getDefaultEntityOptionType(undefined);
      var optionObj = Core__Option.getOr(
        optionObjArry[0],
        defaultEntityOptionType,
      );
      localSelectedFiltersList.push(optionObj.field);
      localCheckedFilters.push(value);
    });
    Curry._1(setCheckedFilters, function (_prev) {
      return localCheckedFilters;
    });
    Curry._1(setSelectedFiltersList, function (_prev) {
      return localSelectedFiltersList;
    });
  };
  var removeFilters = function (fieldNameArr, values) {
    var toBeRemoved = checkedFilters.filter(function (oldVal) {
      return !fieldNameArr.includes(oldVal);
    });
    var dict = Core__JSON.Decode.object(values);
    if (dict !== undefined) {
      var dict$1 = Caml_option.valFromOption(dict);
      Object.entries(dict$1).forEach(function (entry) {
        var key = entry[0];
        if (toBeRemoved.includes(key)) {
          dict$1[key] = "";
          return;
        }
      });
    }
    var finalFieldList = selectedFiltersList.filter(function (val) {
      return Core__Option.getOr(
        Core__Option.map(val.inputNames[0], function (name) {
          return !toBeRemoved.includes(name);
        }),
        false,
      );
    });
    var filtersAfterRemoving = checkedFilters.filter(function (val) {
      return !toBeRemoved.includes(val);
    });
    var newValueJson = Object.fromEntries(
      Core__Option.getOr(
        Core__Option.map(
          Core__JSON.Decode.object(initialValueJson),
          function (prim) {
            return Object.entries(prim);
          },
        ),
        [],
      ).filter(function (entry) {
        return !toBeRemoved.includes(entry[0]);
      }),
    );
    Curry._1(setInitialValueJson, function (param) {
      return newValueJson;
    });
    Curry._1(setCheckedFilters, function (_prev) {
      return filtersAfterRemoving;
    });
    Curry._1(setSelectedFiltersList, function (_prev) {
      return finalFieldList;
    });
  };
  var validate = function (values) {
    var valuesDict = JsonFlattenUtils.flattenObject(values, false);
    var errors = {};
    requiredSearchFieldsList.forEach(function (key) {
      if (!Core__Option.isNone(valuesDict[key])) {
        return;
      }
      var key$1 =
        key === "filters.dateCreated.lte" || key === "filters.dateCreated.gte"
          ? "Date Range"
          : key;
      errors[key$1] = "Required";
    });
    if (Object.entries(errors).length > 0) {
      Curry._1(setIsButtonDisabled, function (param) {
        return true;
      });
    } else {
      Curry._1(setIsButtonDisabled, function (param) {
        return false;
      });
    }
    return errors;
  };
  var fieldsFromOption = popupFilterFields$1.map(function (option) {
    return option.field;
  });
  var handleRefresh = function (param) {
    var newQueryStr = Curry._6(
      getNewQuery,
      query,
      true,
      false,
      "startTime",
      "endTime",
      "opt",
    );
    var urlValue = "" + path$1 + "?" + newQueryStr + "";
    Curry._1(setClearFilterAfterRefresh, function (param) {
      return true;
    });
    Curry._1(setInitialValueJson, function (param) {
      return {};
    });
    window.location.replace(urlValue);
  };
  var refreshFilterUi = refreshFilters$1
    ? React.createElement(ToolTip.make, {
        description: "Refresh the dashboard with applied settings",
        toolTipFor: Caml_option.some(
          React.createElement(
            "div",
            {
              className: "my-1 mx-2 " + tooltipStyling$1 + " syncButton",
            },
            React.createElement(Button.make, {
              text: "Refresh",
              buttonType: /* SecondaryFilled */ 3,
              buttonSize: /* Small */ 2,
              rightIcon: {
                TAG: /* FontAwesome */ 0,
                _0: "sync",
              },
              onClick: handleRefresh,
            }),
          ),
        ),
        toolTipPosition: /* Bottom */ 1,
        height: "h-fit",
      })
    : null;
  var match$12 = showAllFilter
    ? ["Show Less", "new-chevron-up"]
    : [
        "View " +
          ((selectedFiltersList.length - 10) | 0).toString() +
          " more filters",
        "new-chevron-down",
      ];
  var isFilterSection = React.useContext(
    TableFilterSectionContext.filterSectionContext,
  );
  var advancedSearchMargin = isMobileView ? "ml-1 mt-1" : "ml-1";
  var verticalGap = isMobileView ? "" : "gap-y-2";
  var match$13 = React.useState(function () {
    return false;
  });
  var setFilterHovered = match$13[1];
  var badge_value = countSelectedFilters.toString();
  var badge = {
    value: badge_value,
    color: /* BadgeBlue */ 2,
  };
  var advacedAndClearButtons = React.createElement(
    React.Fragment,
    undefined,
    React.createElement(UIUtils.RenderIf.make, {
      condition:
        fieldsFromOption.length > 0 &&
        !showExtraFiltersInline$1 &&
        !showRemoteOptions$1,
      children: React.createElement(Portal.make, {
        to: "tableFilterTopRight-" + title$1 + "",
        children: React.createElement(
          "div",
          {
            className: advancedSearchMargin,
          },
          React.createElement(Button.make, {
            text: "Advanced Search",
            buttonType: /* SecondaryFilled */ 3,
            buttonSize: /* Small */ 2,
            leftIcon: /* NoIcon */ 0,
            onClick: function (_ev) {
              Curry._1(setShowModal, function (param) {
                return true;
              });
            },
            badge:
              countSelectedFilters > 0
                ? badge
                : {
                    value: (1).toString(),
                    color: /* NoBadge */ 8,
                  },
          }),
        ),
      }),
    }),
    React.createElement(UIUtils.RenderIf.make, {
      condition:
        !hideFilters && fixedFilters$1.length === 0 && showClearFilter$1,
      children: React.createElement(RemoteFilter$ClearFilters, {
        filterButtonStyle: filterButtonStyle$1,
        defaultFilterKeys: defaultFilterKeys$1,
        clearFilters: clearFilters,
        count: count,
        isCountRequired: false,
        outsidefilter: initalCount$1 > 0,
      }),
    }),
  );
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      Form.make,
      {
        children: null,
        onSubmit: onSubmit,
        initialValues: Caml_option.some(initialValueJson),
      },
      React.createElement(RemoteFilter$AutoSubmitter, {
        showModal: showModal,
        autoApply: autoApply$1,
        submit: onSubmit,
        defaultFilterKeys: defaultFilterKeys$1,
      }),
      React.createElement(AddDataAttributes.make, {
        attributes: [["data-filter", "remoteFilters"]],
        children: React.createElement(
          "div",
          undefined,
          React.createElement(
            "div",
            {
              className: "flex flex-wrap flex-1 " + verticalGap + "",
            },
            React.createElement(UIUtils.RenderIf.make, {
              condition: fixedFilters$1.length > 0,
              children: React.createElement(FormRenderer.FieldsRenderer.make, {
                fields: fixedFilters$1.map(function (item) {
                  return item.field;
                }),
                labelClass: "hidden",
                labelPadding: "pb-2",
              }),
            }),
            React.createElement(UIUtils.RenderIf.make, {
              condition: hideFilters && isFilterSection,
              children: JsxPPXReactSupport.createElementWithKey(
                "customizedColumn-" + title$1 + "",
                PortalCapture.make,
                {
                  name: "customizedColumn-" + title$1 + "",
                },
              ),
            }),
            customViewTop$1,
            React.createElement(UIUtils.RenderIf.make, {
              condition: showFiltersBtn$1,
              children: revampedFilter$1
                ? React.createElement(
                    React.Fragment,
                    undefined,
                    JsxPPXReactSupport.createElementWithKey(
                      "savedView",
                      PortalCapture.make,
                      {
                        name: "savedView",
                        customStyle: "flex items-center",
                      },
                    ),
                    React.createElement(
                      Portal.make,
                      {
                        to: "filter",
                        children: null,
                      },
                      React.createElement(
                        "div",
                        {
                          className: "my-1 showFilterButton relative",
                          onMouseOut: function (param) {
                            Curry._1(setFilterHovered, function (param) {
                              return false;
                            });
                          },
                          onMouseOver: function (param) {
                            Curry._1(setFilterHovered, function (param) {
                              return true;
                            });
                          },
                        },
                        React.createElement(Button.make, {
                          text: isMobileView ? "" : "Filters",
                          buttonType: /* Dropdown */ 12,
                          isDropdownOpen: !hideFilters,
                          buttonSize: /* Small */ 2,
                          leftIcon: {
                            TAG: /* CustomIcon */ 1,
                            _0: React.createElement(Icon.make, {
                              name: "filter-funnel",
                              size: 20,
                            }),
                          },
                          onClick: function (param) {
                            Curry._1(setShowFiltersModal, function (param) {
                              return true;
                            });
                          },
                          badge: {
                            value: count.toString(),
                            color:
                              count > 0 ? /* BadgeBlue */ 2 : /* NoBadge */ 8,
                          },
                        }),
                        React.createElement(UIUtils.RenderIf.make, {
                          condition: count > 0 && match$13[0],
                          children: React.createElement(
                            RemoteFilter$AnalyticsClearFilters,
                            {
                              defaultFilterKeys: defaultFilterKeys$1,
                              clearFilters: clearFilters,
                              outsidefilter: initalCount$1 > 0,
                            },
                          ),
                        }),
                      ),
                      React.createElement(Modal.make, {
                        showModal: match$10[0],
                        setShowModal: setShowFiltersModal,
                        children: React.createElement(
                          "div",
                          {
                            className: "px-4 pt-6",
                            style: {
                              height: "calc(100vh - 12rem)",
                            },
                          },
                          React.createElement(
                            "div",
                            {
                              className: "overflow-auto pb-10 gap-8",
                              style: {
                                height: "calc(100vh - 14rem)",
                              },
                            },
                            selectedFiltersList.length > 0
                              ? React.createElement(
                                  "div",
                                  {
                                    className: "flex flex-col gap-6",
                                  },
                                  React.createElement(
                                    RemoteFilter$FilterModal,
                                    {
                                      selectedFiltersList: selectedFiltersList,
                                      showAllFilter: showAllFilter,
                                    },
                                  ),
                                  React.createElement(
                                    "div",
                                    {
                                      className:
                                        "rounded-full bg-jp-2-light-gray-100 font-medium cursor-pointer flex flex-row gap-2 items-center justify-center mx-auto py-0.5 px-2 w-fit",
                                      onClick: function (param) {
                                        Curry._1(
                                          setShowAllFilter,
                                          function (prev) {
                                            return !prev;
                                          },
                                        );
                                      },
                                    },
                                    match$12[0],
                                    React.createElement(Icon.make, {
                                      name: match$12[1],
                                      size: 12,
                                    }),
                                  ),
                                )
                              : React.createElement(
                                  "div",
                                  {
                                    className:
                                      "flex justify-center items-center",
                                  },
                                  "No filters found",
                                ),
                          ),
                          React.createElement(FormRenderer.SubmitButton.make, {
                            text: "Apply Filters",
                            customSumbitButtonStyle: "w-full mt-4",
                          }),
                        ),
                        modalHeading: "Analytics Filters",
                        modalClass:
                          "w-100 h-screen overflow-hidden float-right !bg-white dark:!bg-jp-gray-lightgray_background",
                        childClass: "m-0 p-0",
                        headingClass:
                          "py-6 px-2.5 h-24 border-b border-solid flex flex-col justify-center !bg-white dark:!bg-black border-slate-300",
                        paddingClass: "",
                        closeOnOutsideClick: false,
                        headerTextClass: "font-bold text-fs-24 leading-8",
                        noBackDrop: true,
                      }),
                      customView$1,
                    ),
                  )
                : React.createElement(ToolTip.make, {
                    description: hideFilters
                      ? "Apply filters from exhaustive list of dimensions"
                      : "Hide filters control panel(this will not clear the filters)",
                    toolTipFor: Caml_option.some(
                      React.createElement(
                        "div",
                        {
                          className:
                            "my-1 mx-2 " +
                            tooltipStyling$1 +
                            " showFilterButton",
                        },
                        React.createElement(Button.make, {
                          text: isMobileView
                            ? ""
                            : hideFilters
                              ? "Show Filters"
                              : "Hide Filters",
                          buttonType: /* SecondaryFilled */ 3,
                          buttonSize: /* XSmall */ 3,
                          leftIcon: {
                            TAG: /* CustomIcon */ 1,
                            _0: React.createElement(Icon.make, {
                              name: hideFilters ? "show-filters" : "minus",
                              size: 14,
                              className: isMobileView
                                ? "mr-0.75"
                                : "ml-1.5 mr-1",
                            }),
                          },
                          onClick: function (param) {
                            Curry._1(setHideFilters, function (param) {
                              return !hideFilters;
                            });
                          },
                        }),
                      ),
                    ),
                    toolTipPosition: isMobileView
                      ? /* BottomLeft */ 6
                      : /* Right */ 3,
                  }),
            }),
            React.createElement(UIUtils.RenderIf.make, {
              condition:
                !match$5[0] && hideFilters && count > 0 && !revampedFilter$1,
              children: React.createElement(RemoteFilter$ClearFilters, {
                filterButtonStyle: filterButtonStyle$1,
                defaultFilterKeys: defaultFilterKeys$1,
                clearFilters: clearFilters,
                count: count,
                outsidefilter: initalCount$1 > 0,
              }),
            }),
          ),
          React.createElement(
            "div",
            {
              className: "flex items-center",
            },
            React.createElement(Portal.make, {
              to: filterFieldsPortalName$1,
              children: React.createElement(
                "div",
                {
                  className:
                    "flex " +
                    (isMobileView ? "flex-wrap" : "flex-row justify-between") +
                    " w-full items-center gap-2",
                },
                React.createElement(
                  "div",
                  {
                    className:
                      "md:justify-between flex items-center flex-wrap  " +
                      addFilterStyle$1 +
                      "",
                  },
                  React.createElement(UIUtils.RenderIf.make, {
                    condition: !hideFilters,
                    children: React.createElement(
                      "div",
                      {
                        className:
                          "flex " +
                          (isMobileView ? "flex-wrap" : "w-full") +
                          "",
                      },
                      React.createElement(
                        "div",
                        {
                          className:
                            "flex flex-wrap " +
                            (isMobileView
                              ? ""
                              : "items-center flex-1 gap-y-2 gap-x-3 w-full") +
                            "",
                        },
                        React.createElement(FormRenderer.FieldsRenderer.make, {
                          fields: selectedFiltersList,
                          labelClass: "hidden",
                          labelPadding: "pb-2",
                        }),
                        React.createElement(UIUtils.RenderIf.make, {
                          condition: fixedFilters$1.length === 0,
                          children: refreshFilterUi,
                        }),
                        advacedAndClearButtons,
                        JsxPPXReactSupport.createElementWithKey(
                          "customizedColumn-" + title$1 + "",
                          PortalCapture.make,
                          {
                            name: "customizedColumn-" + title$1 + "",
                          },
                        ),
                      ),
                    ),
                  }),
                ),
                React.createElement(
                  "div",
                  {
                    className: "flex items-center justify-end flex-wrap",
                  },
                  React.createElement(
                    "div",
                    undefined,
                    (showExtraFiltersInline$1 || showRemoteOptions$1) &&
                      !hideFilters
                      ? React.createElement(
                          "div",
                          undefined,
                          React.createElement(RemoteFilter$CheckCustomFilters, {
                            options: remoteOptions,
                            checkedFilters: checkedFilters,
                            removeFilters: removeFilters,
                            addFilters: addFilters,
                            showAddFilter:
                              fieldsFromOption.length > 0 ||
                              (showRemoteOptions$1 && remoteOptions.length > 0),
                            showSelectFiltersSearch: showSelectFiltersSearch$1,
                          }),
                        )
                      : null,
                  ),
                  hideFilters ? null : customView$1,
                  React.createElement(RemoteFilter$ApplyFilterButton, {
                    autoApply: autoApply$1,
                    totalFilters: totalFilters,
                    hideFilters: hideFilters,
                    filterButtonStyle: filterButtonStyle$1,
                    defaultFilterKeys: defaultFilterKeys$1,
                    selectedFiltersList: selectedFiltersList,
                  }),
                  showClearFilterButton$1 && !hideFilters && count > 0
                    ? React.createElement(RemoteFilter$ClearFilters, {
                        filterButtonStyle: filterButtonStyle$1,
                        defaultFilterKeys: defaultFilterKeys$1,
                        clearFilters: clearFilters,
                        count: count,
                        outsidefilter: initalCount$1 > 0,
                      })
                    : null,
                ),
              ),
            }),
          ),
        ),
      }),
    ),
    React.createElement(LabelVisibilityContext.make, {
      children: React.createElement(TableFilterSectionContext.make, {
        children: React.createElement(Form.make, {
          children: React.createElement(RemoteFilter$ModalUI, {
            showModal: showModal,
            setShowModal: setShowModal,
            initialValueJson: initialValueJson,
            fieldsFromOption: fieldsFromOption,
            isButtonDisabled: match$3[0],
          }),
          onSubmit: onSubmit,
          initialValues: Caml_option.some(initialValueJson),
          validate: validate,
        }),
        isFilterSection: false,
      }),
      showLabel: true,
    }),
  );
}

var makeFieldInfo = FormRenderer.makeFieldInfo;

var defaultAutoApply = false;

var make = RemoteFilter;

export {
  makeFieldInfo,
  ClearForm,
  ModalUI,
  ClearFilters,
  AnalyticsClearFilters,
  CheckCustomFilters,
  defaultAutoApply,
  AutoSubmitter,
  getStrFromJson,
  ApplyFilterButton,
  FilterModal,
  make,
};
/* Form Not a pure module */
