// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Recoil from "recoil";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Float from "@rescript/core/src/Core__Float.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as JsonFlattenUtils from "../utils/JsonFlattenUtils.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as DateFormatProvider from "../context/DateFormatProvider.bs.js";
import * as CustomizeTableColumns from "./CustomizeTableColumns.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";

var tableHeadingClass =
  "font-bold text-xl text-black text-opacity-75 dark:text-white dark:text-opacity-75";

function visibilityColFunc(dateFormatConvertor, jsonVal, tableCell) {
  switch (tableCell.TAG | 0) {
    case /* Text */ 1:
    case /* EllipsisText */ 2:
      return [Caml_option.some(tableCell._0), jsonVal];
    case /* Date */ 4:
      var x = tableCell._0;
      return [
        Curry._1(dateFormatConvertor, x),
        Curry._1(dateFormatConvertor, x),
      ];
    case /* StartEndDate */ 6:
      var end = tableCell._1;
      return [
        Caml_option.some(
          "" +
            String(
              Core__Option.getOr(
                Curry._1(dateFormatConvertor, tableCell._0),
                "",
              ),
            ) +
            " " +
            String(Core__Option.getOr(Curry._1(dateFormatConvertor, end), "")) +
            "",
        ),
        Curry._1(dateFormatConvertor, end),
      ];
    case /* CustomCell */ 10:
      return [Caml_option.some(tableCell._1), jsonVal];
    case /* Label */ 0:
    case /* ColoredText */ 16:
      return [Caml_option.some(tableCell._0.title), jsonVal];
    default:
      return [jsonVal, jsonVal];
  }
}

function useDateFormatConvertor(param) {
  var dateFormat = React.useContext(DateFormatProvider.dateFormatContext);
  var isoStringToCustomTimeZone =
    TimeZoneHook.useIsoStringToCustomTimeZoneInFloat(undefined);
  return function (dateStr) {
    try {
      var customTimeZone = Curry._1(isoStringToCustomTimeZone, dateStr);
      return Caml_option.some(
        TimeZoneHook.formattedDateTimeFloat(customTimeZone, dateFormat),
      );
    } catch (exn) {
      return;
    }
  };
}

function filteredData(
  actualData,
  columnFilter,
  visibleColumns,
  entity,
  dateFormatConvertor,
) {
  var selectedFiltersKeys = Object.keys(columnFilter);
  if (selectedFiltersKeys.length > 0) {
    return actualData.filter(function (item) {
      if (item == null) {
        return false;
      } else {
        return Core__Option.isNone(
          selectedFiltersKeys.find(function (keys) {
            var selectedArr = columnFilter[keys];
            if (selectedArr === undefined) {
              return false;
            }
            var jsonVal = JsonFlattenUtils.flattenObject(item, false)[keys];
            var visibleColumns$1 = Belt_Array.keepMap(
              Core__Option.getOr(visibleColumns, entity.defaultColumns),
              function (item) {
                var columnEntity = Curry._1(entity.getHeading, item);
                var entityKey = Curry._1(entity.getHeading, item).key;
                var dataType = columnEntity.dataType;
                if (entityKey === keys) {
                  return [dataType, item];
                }
              },
            );
            var ele = visibleColumns$1[0];
            if (ele === undefined) {
              return false;
            }
            var visibleColumns$2 = ele[0];
            var jsonVal$1 = visibilityColFunc(
              dateFormatConvertor,
              jsonVal,
              Curry._2(entity.getCell, item, ele[1]),
            );
            if (visibleColumns$2 >= 2) {
              if (visibleColumns$2 >= 5) {
                var selectedArr$1 = Belt_Array.keepMap(
                  selectedArr,
                  function (item) {
                    return Core__JSON.Decode.string(item);
                  },
                ).map(function (prim) {
                  return prim.toLowerCase();
                });
                var transformed = jsonVal$1[0];
                var currVal =
                  transformed !== undefined
                    ? String(
                        Caml_option.valFromOption(transformed),
                      ).toLowerCase()
                    : "";
                return !selectedArr$1.includes(currVal);
              }
              var selectedArr$2 = Belt_Array.keepMap(
                selectedArr,
                function (item) {
                  return Core__JSON.Decode.$$float(item);
                },
              );
              var actualVal = jsonVal$1[1];
              var currVal$1 =
                actualVal !== undefined
                  ? Number(String(Caml_option.valFromOption(actualVal)))
                  : 0;
              return !(
                currVal$1 >= Core__Option.getOr(selectedArr$2[0], 0) &&
                currVal$1 <= Core__Option.getOr(selectedArr$2[1], 0)
              );
            }
            var selectedArr1 = Belt_Array.keepMap(selectedArr, function (item) {
              return Core__JSON.Decode.string(item);
            });
            var transformed$1 = jsonVal$1[0];
            var currVal$2 =
              transformed$1 !== undefined
                ? String(Caml_option.valFromOption(transformed$1))
                : "";
            var searchedText = Core__Option.getOr(selectedArr1[0], "");
            return !searchedText
              .toUpperCase()
              .includes(currVal$2.toUpperCase());
          }),
        );
      }
    });
  } else {
    return actualData;
  }
}

function convertStrCellToFloat(dataType, str) {
  if (dataType > 4 || dataType < 2) {
    return str;
  } else {
    return Core__Option.getOr(Core__Float.fromString(str), 0);
  }
}

function convertFloatCellToStr(dataType, num) {
  if (dataType > 4 || dataType < 2) {
    return num.toString();
  } else {
    return num;
  }
}

function defaultRefetchFn(param) {
  console.log("This is default refetch");
}

var refetchContext = React.createContext(defaultRefetchFn);

var make = refetchContext.Provider;

var RefetchContextProvider = {
  make: make,
};

function DynamicTableUtils$TableHeading(props) {
  var titleTooltip = props.titleTooltip;
  var description = props.description;
  var noVerticalMargin = props.noVerticalMargin;
  var title = props.title;
  var noVerticalMargin$1 =
    noVerticalMargin !== undefined ? noVerticalMargin : false;
  var titleTooltip$1 = titleTooltip !== undefined ? titleTooltip : false;
  var tooltipFlexDir = titleTooltip$1 ? "flex-row" : "flex-col";
  var marginClass = noVerticalMargin$1 ? "" : "lg:mb-4 lg:mt-8";
  if (LogicUtils.isNonEmptyString(title) || Core__Option.isSome(description)) {
    return React.createElement(
      "div",
      {
        className: "flex " + tooltipFlexDir + " " + marginClass + "",
      },
      LogicUtils.isNonEmptyString(title)
        ? React.createElement(AddDataAttributes.make, {
            attributes: [["data-table-heading-title", title]],
            children: React.createElement(
              "div",
              {
                className: tableHeadingClass,
              },
              title,
            ),
          })
        : null,
      description !== undefined
        ? titleTooltip$1
          ? React.createElement(
              "div",
              {
                className: "text-sm text-gray-500 mx-2",
              },
              React.createElement(ToolTip.make, {
                description: description,
                toolTipPosition: /* Bottom */ 1,
              }),
            )
          : React.createElement(AddDataAttributes.make, {
              attributes: [["data-table-heading-desc", description]],
              children: React.createElement(
                "div",
                {
                  className: "text-base text-jp-gray-700 dark:text-jp-gray-800",
                },
                description,
              ),
            })
        : null,
    );
  } else {
    return null;
  }
}

var TableHeading = {
  make: DynamicTableUtils$TableHeading,
};

function DynamicTableUtils$TableLoadingErrorIndicator(props) {
  var hideTitle = props.hideTitle;
  var buttonType = props.buttonType;
  var showFilterBorder = props.showFilterBorder;
  var showFilterBorder$1 =
    showFilterBorder !== undefined ? showFilterBorder : false;
  var buttonType$1 = buttonType !== undefined ? buttonType : /* Primary */ 0;
  var hideTitle$1 = hideTitle !== undefined ? hideTitle : false;
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var filtersBorder =
    !isMobileView && showFilterBorder$1
      ? "p-2 bg-white dark:bg-black border border-jp-2-light-gray-400 rounded-lg"
      : "";
  return React.createElement(
    "div",
    {
      className: "flex flex-col w-full",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: !hideTitle$1,
      children: React.createElement(DynamicTableUtils$TableHeading, {
        title: props.title,
      }),
    }),
    React.createElement(TableFilterSectionContext.make, {
      children: React.createElement(
        "div",
        {
          className: filtersBorder,
        },
        props.filters,
      ),
      isFilterSection: true,
    }),
    React.createElement(
      "div",
      {
        className: "flex flex-col py-16 text-center items-center",
      },
      props.fetchSuccess
        ? React.createElement(
            React.Fragment,
            undefined,
            React.createElement(
              "div",
              {
                className: "animate-spin mb-10",
              },
              React.createElement(Icon.make, {
                name: "spinner",
              }),
            ),
            "Loading...",
          )
        : React.createElement(
            React.Fragment,
            undefined,
            React.createElement(
              "div",
              {
                className: "mb-4 text-xl",
              },
              "Oops, Something Went Wrong! Try again Later.",
            ),
            React.createElement(Button.make, {
              text: "Refresh",
              buttonType: buttonType$1,
              leftIcon: {
                TAG: /* FontAwesome */ 0,
                _0: "sync-alt",
              },
              onClick: function (param) {
                window.location.reload();
              },
            }),
          ),
    ),
  );
}

var TableLoadingErrorIndicator = {
  make: DynamicTableUtils$TableLoadingErrorIndicator,
};

function DynamicTableUtils$TableDataLoadingIndicator(props) {
  var showWithData = props.showWithData;
  var showWithData$1 = showWithData !== undefined ? showWithData : true;
  var padding = showWithData$1 ? "py-8 rounded-b" : "py-56 rounded";
  return React.createElement(
    "div",
    {
      className:
        "flex flex-col " +
        padding +
        " justify-center space-x-2 items-center bg-white shadow-md dark:bg-jp-gray-lightgray_background dark:shadow-md",
    },
    React.createElement(
      "div",
      {
        className: "animate-spin mb-4",
      },
      React.createElement(Icon.make, {
        name: "spinner",
      }),
    ),
    React.createElement(
      "div",
      {
        className: "text-gray-500",
      },
      "Loading...",
    ),
  );
}

var TableDataLoadingIndicator = {
  make: DynamicTableUtils$TableDataLoadingIndicator,
};

function DynamicTableUtils$ChooseColumns(props) {
  var showSerialNumber = props.showSerialNumber;
  var orderdColumnBasedOnDefaultCol = props.orderdColumnBasedOnDefaultCol;
  var sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var isModalView = props.isModalView;
  var setShowColumnSelector = props.setShowColumnSelector;
  var entity = props.entity;
  var isModalView$1 = isModalView !== undefined ? isModalView : true;
  var sortingBasedOnDisabled$1 =
    sortingBasedOnDisabled !== undefined ? sortingBasedOnDisabled : true;
  var orderdColumnBasedOnDefaultCol$1 =
    orderdColumnBasedOnDefaultCol !== undefined
      ? orderdColumnBasedOnDefaultCol
      : false;
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : true;
  var match = Recoil.useRecoilState(props.activeColumnsAtom);
  var setVisibleColumns = match[1];
  var setColumns = React.useCallback(
    function (fn) {
      setVisibleColumns(fn);
      Curry._1(setShowColumnSelector, function (param) {
        return false;
      });
    },
    [setVisibleColumns],
  );
  if (Core__Option.isSome(entity.allColumns) && props.totalResults > 0) {
    return React.createElement(CustomizeTableColumns.make, {
      allHeadersArray: entity.allColumns,
      visibleColumns: match[0],
      setColumns: setColumns,
      getHeading: entity.getHeading,
      defaultColumns: props.defaultColumns,
      showModal: props.showColumnSelector,
      setShowModal: setShowColumnSelector,
      isModalView: isModalView$1,
      orderdColumnBasedOnDefaultCol: orderdColumnBasedOnDefaultCol$1,
      sortingBasedOnDisabled: sortingBasedOnDisabled$1,
      showSerialNumber: showSerialNumber$1,
    });
  } else {
    return null;
  }
}

var ChooseColumns = {
  make: DynamicTableUtils$ChooseColumns,
};

function DynamicTableUtils$ChooseColumnsWrapper(props) {
  var showSerialNumber = props.showSerialNumber;
  var sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var isModalView = props.isModalView;
  var optionalActiveColumnsAtom = props.activeColumnsAtom;
  var isModalView$1 = isModalView !== undefined ? isModalView : true;
  var sortingBasedOnDisabled$1 =
    sortingBasedOnDisabled !== undefined ? sortingBasedOnDisabled : true;
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : true;
  if (optionalActiveColumnsAtom !== undefined) {
    return React.createElement(AddDataAttributes.make, {
      attributes: [["data-table", "dynamicTableChooseColumn"]],
      children: React.createElement(DynamicTableUtils$ChooseColumns, {
        entity: props.entity,
        totalResults: props.totalResults,
        defaultColumns: props.defaultColumns,
        activeColumnsAtom: optionalActiveColumnsAtom,
        setShowColumnSelector: props.setShowColumnSelector,
        showColumnSelector: props.showColumnSelector,
        isModalView: isModalView$1,
        sortingBasedOnDisabled: sortingBasedOnDisabled$1,
        showSerialNumber: showSerialNumber$1,
      }),
    });
  } else {
    return null;
  }
}

var ChooseColumnsWrapper = {
  make: DynamicTableUtils$ChooseColumnsWrapper,
};

export {
  tableHeadingClass,
  visibilityColFunc,
  useDateFormatConvertor,
  filteredData,
  convertStrCellToFloat,
  convertFloatCellToStr,
  defaultRefetchFn,
  refetchContext,
  RefetchContextProvider,
  TableHeading,
  TableLoadingErrorIndicator,
  TableDataLoadingIndicator,
  ChooseColumns,
  ChooseColumnsWrapper,
};
/* refetchContext Not a pure module */
