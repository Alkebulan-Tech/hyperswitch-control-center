// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as DayJs from "../libraries/DayJs.bs.js";
import * as React from "react";
import * as Calendar from "./Calendar.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function CalendarList(props) {
  var allowedDateRange = props.allowedDateRange;
  var customDisabledFutureDays = props.customDisabledFutureDays;
  var firstCalendar = props.firstCalendar;
  var secondCalendar = props.secondCalendar;
  var setShowMsg = props.setShowMsg;
  var dateRangeLimit = props.dateRangeLimit;
  var disableFutureDates = props.disableFutureDates;
  var disablePastDates = props.disablePastDates;
  var endDate = props.endDate;
  var startDate = props.startDate;
  var cellRenderer = props.cellRenderer;
  var cellHighlighter = props.cellHighlighter;
  var count = props.count;
  var onDateClick = props.onDateClick;
  var year = props.year;
  var month = props.month;
  var calendarContaierStyle = props.calendarContaierStyle;
  var changeHighlightCellStyle = props.changeHighlightCellStyle;
  var changeHighlightCellStyle$1 =
    changeHighlightCellStyle !== undefined ? changeHighlightCellStyle : "";
  var calendarContaierStyle$1 =
    calendarContaierStyle !== undefined ? calendarContaierStyle : "";
  var count$1 = count !== undefined ? count : 1;
  var startDate$1 = startDate !== undefined ? startDate : "";
  var endDate$1 = endDate !== undefined ? endDate : "";
  var disablePastDates$1 =
    disablePastDates !== undefined ? disablePastDates : true;
  var disableFutureDates$1 =
    disableFutureDates !== undefined ? disableFutureDates : false;
  var secondCalendar$1 = secondCalendar !== undefined ? secondCalendar : false;
  var firstCalendar$1 = firstCalendar !== undefined ? firstCalendar : false;
  var customDisabledFutureDays$1 =
    customDisabledFutureDays !== undefined ? customDisabledFutureDays : 0.0;
  var match = React.useState(function () {
    return "";
  });
  var setHoverdDate = match[1];
  var hoverdDate = match[0];
  var months = [
    /* Jan */ 0, /* Feb */ 1, /* Mar */ 2, /* Apr */ 3, /* May */ 4,
    /* Jun */ 5, /* Jul */ 6, /* Aug */ 7, /* Sep */ 8, /* Oct */ 9,
    /* Nov */ 10, /* Dec */ 11,
  ];
  var getMonthFromFloat = function (value) {
    var valueInt = value | 0;
    return Core__Option.getOr(months[valueInt], /* Jan */ 0);
  };
  var getMonthInStr = function (mon) {
    switch (mon) {
      case /* Jan */ 0:
        return "January, ";
      case /* Feb */ 1:
        return "February, ";
      case /* Mar */ 2:
        return "March, ";
      case /* Apr */ 3:
        return "April, ";
      case /* May */ 4:
        return "May, ";
      case /* Jun */ 5:
        return "June, ";
      case /* Jul */ 6:
        return "July, ";
      case /* Aug */ 7:
        return "August, ";
      case /* Sep */ 8:
        return "September, ";
      case /* Oct */ 9:
        return "October, ";
      case /* Nov */ 10:
        return "November, ";
      case /* Dec */ 11:
        return "December, ";
    }
  };
  var startMonth;
  if (month !== undefined) {
    startMonth = months.indexOf(month) | 0;
  } else {
    var tMonth = new Date().getMonth() | 0;
    startMonth = disableFutureDates$1 && count$1 > 1 ? tMonth - 1.0 : tMonth;
  }
  var startYear = year !== undefined ? year : new Date().getFullYear();
  var match$1 = React.useState(function () {
    return new Date(startYear, startMonth);
  });
  var setCurrDate = match$1[1];
  var currDateIm = match$1[0];
  var handleChangeMonthBy = function (month) {
    var currDateTemp = new Date(currDateIm.valueOf());
    var newDate = new Date(
      currDateTemp.setMonth(((currDateTemp.getMonth() | 0) + month) | 0),
    );
    Curry._1(setCurrDate, function (param) {
      return newDate;
    });
  };
  var dummyRow = Core__Array.make(count$1, 1);
  return React.createElement(
    "div",
    {
      className:
        "flex flex-1 flex-row justify-center overflow-auto bg-jp-gray-50 dark:bg-jp-gray-950 rounded border border-jp-gray-500 dark:border-jp-gray-960 select-none " +
        calendarContaierStyle$1 +
        "",
    },
    dummyRow.map(function (_item, i) {
      var currDateTemp = new Date(currDateIm.valueOf());
      var tempDate = currDateTemp.setMonth(
        ((currDateTemp.getMonth() | 0) + i) | 0,
      );
      var tempMonth = disableFutureDates$1
        ? new Date(
            DayJs.getDayJsForJsDate(new Date(tempDate)).toString(),
          ).getMonth()
        : new Date(tempDate).getMonth();
      var tempYear = new Date(tempDate).getFullYear();
      var showLeft = i === 0 && !secondCalendar$1;
      var showRight = ((i + 1) | 0) === dummyRow.length && !firstCalendar$1;
      var monthAndYear = getMonthInStr(getMonthFromFloat(tempMonth)).concat(
        tempYear.toString(),
      );
      var iconClass =
        "inline-block text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25 cursor-pointer";
      return React.createElement(
        "div",
        {
          key: i.toString(),
        },
        React.createElement(
          "div",
          {
            className: "flex flex-row justify-between items-center p-3",
          },
          showLeft
            ? React.createElement(
                React.Fragment,
                undefined,
                React.createElement(Icon.make, {
                  name: "angle-double-left",
                  size: 24,
                  className: iconClass,
                  onClick: function (param) {
                    handleChangeMonthBy(-12);
                  },
                }),
                React.createElement(Icon.make, {
                  name: "chevron-left",
                  className: iconClass,
                  onClick: function (param) {
                    handleChangeMonthBy(-1);
                  },
                }),
              )
            : null,
          React.createElement(AddDataAttributes.make, {
            attributes: [["data-calendar-date", monthAndYear]],
            children: React.createElement(
              "div",
              {
                className:
                  "font-bold text-sm md:text-base text-jp-gray-800 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
              },
              monthAndYear,
            ),
          }),
          showRight
            ? React.createElement(
                React.Fragment,
                undefined,
                React.createElement(Icon.make, {
                  name: "chevron-right",
                  className: iconClass,
                  onClick: function (param) {
                    handleChangeMonthBy(1);
                  },
                }),
                React.createElement(Icon.make, {
                  name: "angle-double-right",
                  size: 24,
                  className: iconClass,
                  onClick: function (param) {
                    handleChangeMonthBy(12);
                  },
                }),
              )
            : null,
        ),
        JsxPPXReactSupport.createElementWithKey(i.toString(), Calendar.make, {
          changeHighlightCellStyle: changeHighlightCellStyle$1,
          month: getMonthFromFloat(tempMonth),
          year: tempYear | 0,
          onDateClick: onDateClick,
          hoverdDate: hoverdDate,
          setHoverdDate: setHoverdDate,
          showTitle: false,
          cellHighlighter: cellHighlighter,
          cellRenderer: cellRenderer,
          startDate: startDate$1,
          endDate: endDate$1,
          disablePastDates: disablePastDates$1,
          disableFutureDates: disableFutureDates$1,
          dateRangeLimit: dateRangeLimit,
          setShowMsg: setShowMsg,
          customDisabledFutureDays: customDisabledFutureDays$1,
          allowedDateRange: allowedDateRange,
        }),
      );
    }),
  );
}

var make = CalendarList;

export { make };
/* Icon Not a pure module */
