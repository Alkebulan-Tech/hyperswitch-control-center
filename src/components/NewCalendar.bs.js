// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import Dayjs from "dayjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Int from "@rescript/core/src/Core__Int.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as ReactWindow from "react-window";
import * as DateTimeUtils from "../utils/DateTimeUtils.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function defaultCellHighlighter(param) {
  return {
    highlightSelf: false,
    highlightLeft: false,
    highlightRight: false,
  };
}

function defaultCellRenderer(obj) {
  if (obj === undefined) {
    return "";
  }
  var day = obj.split("-");
  return Core__Option.getOr(day[2], "");
}

function NewCalendar$TableRow(props) {
  var setIsDateClicked = props.setIsDateClicked;
  var windowIndex = props.windowIndex;
  var setShowMsg = props.setShowMsg;
  var dateRangeLimit = props.dateRangeLimit;
  var customDisabledFutureDays = props.customDisabledFutureDays;
  var disableFutureDates = props.disableFutureDates;
  var disablePastDates = props.disablePastDates;
  var setHoverdDate = props.setHoverdDate;
  var hoverdDate = props.hoverdDate;
  var endDate = props.endDate;
  var startDate = props.startDate;
  var cellRenderer = props.cellRenderer;
  var cellHighlighter = props.cellHighlighter;
  var onDateClick = props.onDateClick;
  var year = props.year;
  var month = props.month;
  var item = props.item;
  var changeHighlightCellStyle = props.changeHighlightCellStyle;
  var changeHighlightCellStyle$1 =
    changeHighlightCellStyle !== undefined ? changeHighlightCellStyle : "";
  var cellHighlighter$1 =
    cellHighlighter !== undefined ? cellHighlighter : defaultCellHighlighter;
  var cellRenderer$1 =
    cellRenderer !== undefined ? cellRenderer : defaultCellRenderer;
  var startDate$1 = startDate !== undefined ? startDate : "";
  var endDate$1 = endDate !== undefined ? endDate : "";
  var disablePastDates$1 =
    disablePastDates !== undefined ? disablePastDates : true;
  var disableFutureDates$1 =
    disableFutureDates !== undefined ? disableFutureDates : false;
  var customDisabledFutureDays$1 =
    customDisabledFutureDays !== undefined ? customDisabledFutureDays : 0.0;
  var customTimezoneToISOString =
    TimeZoneHook.useCustomTimeZoneToIsoString(undefined);
  if (Caml_obj.equal(item, Core__Array.make(7, ""))) {
    return React.createElement("tr", {
      className: "h-0",
    });
  } else {
    return React.createElement(
      React.Fragment,
      undefined,
      React.createElement(
        "tr",
        {
          className: "transition duration-300 ease-in-out",
        },
        item.map(function (obj, cellIndex) {
          var date = new Date(
            Curry._6(
              customTimezoneToISOString,
              String(year),
              String(month + 1.0),
              String(LogicUtils.isEmptyString(obj) ? "01" : obj),
              "00",
              "00",
              "00",
            ),
          );
          var dateToday = new Date();
          var todayInitial = dateToday.setHours(0.0, 0.0, 0.0, 0.0);
          var isInCustomDisable =
            customDisabledFutureDays$1 > 0.0
              ? date.getTime() - todayInitial <=
                customDisabledFutureDays$1 * 24.0 * 3600.0 * 1000.0
              : false;
          var isFutureDate = disablePastDates$1
            ? todayInitial - date.getTime() <= 0.0
            : todayInitial - date.getTime() < 0.0;
          var isInLimit =
            dateRangeLimit !== undefined &&
            LogicUtils.isNonEmptyString(startDate$1)
              ? date.getTime() - new Date(startDate$1).getTime() <
                ((dateRangeLimit - 1) * 24 * 60 * 60 - 60) * 1000
              : true;
          var onClick = function (_evt) {
            if (setIsDateClicked !== undefined) {
              Curry._1(setIsDateClicked, function (param) {
                return true;
              });
            }
            var isClickDisabled =
              (LogicUtils.isEmptyString(endDate$1) && !isInLimit) ||
              (isFutureDate ? disableFutureDates$1 : disablePastDates$1) ||
              (customDisabledFutureDays$1 > 0.0 && isInCustomDisable);
            if (!isClickDisabled && onDateClick !== undefined) {
              return Curry._1(
                onDateClick,
                Dayjs(date.toISOString()).format("YYYY-MM-DD"),
              );
            }
          };
          var hSelf = Curry._1(
            cellHighlighter$1,
            Dayjs(date.toString()).format("YYYY-MM-DD"),
          );
          var dayClass =
            (isFutureDate && disableFutureDates$1) ||
            (customDisabledFutureDays$1 > 0.0 && isInCustomDisable) ||
            (!isFutureDate && disablePastDates$1) ||
            (LogicUtils.isEmptyString(endDate$1) && !isInLimit)
              ? "cursor-not-allowed"
              : "cursor-default";
          var getDate = function (date) {
            return new Date(
              Number(Core__Option.getOr(date[0], "0")),
              Number(String(Number(Core__Option.getOr(date[1], "0")) - 1.0)),
              Number(Core__Option.getOr(date[2], "")),
            );
          };
          var today = Dayjs(new Date().toString()).format("YYYY-MM-DD");
          var renderingDate = Dayjs(
            getDate([
              year.toString(),
              (month + 1.0).toString(),
              obj,
            ]).toString(),
          ).format("YYYY-MM-DD");
          var isTodayHighlight =
            today === renderingDate &&
            startDate$1 !== today &&
            endDate$1 !== today;
          var textColor = isTodayHighlight
            ? "bg-jp-2-light-primary-100 rounded-full"
            : "text-jp-gray-900 text-opacity-75 dark:text-opacity-75";
          var classN =
            "h-10 w-10 p-0  text-center " +
            textColor +
            "  dark:text-jp-gray-text_darktheme  " +
            dayClass +
            "";
          var selectedcellClass =
            "h-10 w-10 flex flex-1 justify-center items-center bg-blue-500 bg-opacity-100 dark:bg-blue-500 dark:bg-opacity-100 text-white rounded-full ";
          var c2 =
            LogicUtils.isNonEmptyString(obj) && hSelf.highlightSelf
              ? selectedcellClass
              : "h-10 w-10";
          var shouldHighlight = function (
            startDate,
            endDate,
            obj,
            month,
            year,
          ) {
            var cellSelectedHiglight =
              "h-full w-full flex flex-1 justify-center items-center  dark:bg-opacity-100 text-gray-600 dark:text-gray-400";
            var cellHoverHighlight =
              "h-full w-full flex flex-1 justify-center items-center  dark:bg-opacity-100";
            if (!LogicUtils.isNonEmptyString(startDate)) {
              return "h-full w-full";
            }
            var parsedStartDate = getDate(startDate.split("-"));
            var zObj = getDate([year, month, obj]);
            if (LogicUtils.isNonEmptyString(obj)) {
              var z = getDate([year, month, obj]);
              if (!LogicUtils.isNonEmptyString(endDate)) {
                if (Caml_obj.equal(z, parsedStartDate)) {
                  return (
                    "" +
                    selectedcellClass +
                    " " +
                    changeHighlightCellStyle$1 +
                    ""
                  );
                } else if (
                  LogicUtils.isNonEmptyString(hoverdDate) &&
                  LogicUtils.isEmptyString(endDate) &&
                  Caml_obj.greaterthan(z, parsedStartDate) &&
                  Caml_obj.lessequal(z, new Date(hoverdDate)) &&
                  !(
                    (isFutureDate && disableFutureDates$1) ||
                    (!isFutureDate && disablePastDates$1) ||
                    (LogicUtils.isEmptyString(endDate) && !isInLimit)
                  )
                ) {
                  return (
                    "" +
                    cellHoverHighlight +
                    " bg-jp-2-light-primary-100 dark:bg-jp-2-dark-primary-100 " +
                    (cellIndex === 0 ? "rounded-l-full" : "") +
                    " " +
                    (cellIndex === 6 ? "rounded-r-full" : "") +
                    ""
                  );
                } else {
                  return "h-full w-full";
                }
              }
              var parsedEndDate = getDate(endDate.split("-"));
              if (
                Caml_obj.equal(z, parsedStartDate) ||
                Caml_obj.equal(z, parsedEndDate)
              ) {
                return selectedcellClass;
              } else if (
                Caml_obj.greaterthan(z, parsedStartDate) &&
                Caml_obj.lessthan(z, parsedEndDate)
              ) {
                return (
                  "" +
                  cellSelectedHiglight +
                  " bg-jp-2-light-primary-100  dark:bg-jp-2-dark-primary-100 " +
                  (cellIndex === 0 ? "rounded-l-full" : "") +
                  " " +
                  (cellIndex === 6 ? "rounded-r-full" : "") +
                  ""
                );
              } else {
                return "h-full w-full";
              }
            }
            if (!LogicUtils.isNonEmptyString(endDate)) {
              if (
                LogicUtils.isNonEmptyString(hoverdDate) &&
                LogicUtils.isEmptyString(endDate) &&
                Caml_obj.greaterthan(zObj, parsedStartDate) &&
                Caml_obj.lessequal(zObj, new Date(hoverdDate)) &&
                !(
                  (isFutureDate && disableFutureDates$1) ||
                  (!isFutureDate && disablePastDates$1) ||
                  (LogicUtils.isEmptyString(endDate) && !isInLimit)
                )
              ) {
                return (
                  "" +
                  cellHoverHighlight +
                  "\n                      " +
                  (cellIndex === 0
                    ? "bg-gradient-to-r from-jp-2-light-primary-100/0 to-jp-2-light-primary-100/100"
                    : cellIndex === 6
                      ? "bg-gradient-to-r from-jp-2-light-primary-100/100 to-jp-2-light-primary-100/0"
                      : "bg-jp-2-light-primary-100  dark:bg-jp-2-dark-primary-100 ") +
                  "\n                      \n                       "
                );
              } else {
                return "h-full w-full";
              }
            }
            var parsedEndDate$1 = getDate(endDate.split("-"));
            if (
              Caml_obj.greaterthan(zObj, parsedStartDate) &&
              Caml_obj.lessthan(zObj, parsedEndDate$1)
            ) {
              return (
                "" +
                cellSelectedHiglight +
                "\n                      " +
                (cellIndex === 0
                  ? "bg-gradient-to-r from-jp-2-light-primary-100/0 to-jp-2-light-primary-100/100"
                  : cellIndex === 6
                    ? "bg-gradient-to-r from-jp-2-light-primary-100/100 to-jp-2-light-primary-100/0"
                    : "bg-jp-2-light-primary-100  dark:bg-jp-2-dark-primary-100 ") +
                "\n                      \n                       "
              );
            } else {
              return "h-full w-full ";
            }
          };
          var shouldHighlightBackground = function (
            startDate,
            endDate,
            obj,
            month,
            year,
          ) {
            if (
              !(
                LogicUtils.isNonEmptyString(startDate) &&
                LogicUtils.isNonEmptyString(obj)
              )
            ) {
              return "";
            }
            var parsedStartDate = getDate(startDate.split("-"));
            var z = getDate([year, month, obj]);
            if (!LogicUtils.isNonEmptyString(endDate)) {
              if (
                LogicUtils.isNonEmptyString(hoverdDate) &&
                Caml_obj.equal(z, parsedStartDate)
              ) {
                return "bg-jp-2-light-primary-100 dark:bg-jp-2-dark-primary-100  rounded-l-full hover:rounded-l-full";
              } else {
                return "";
              }
            }
            var parsedEndDate = getDate(endDate.split("-"));
            if (
              Caml_obj.equal(z, parsedStartDate) &&
              Caml_obj.notequal(parsedStartDate, parsedEndDate)
            ) {
              return "bg-jp-2-light-primary-100 dark:bg-jp-2-dark-primary-100  rounded-l-full hover:rounded-l-full";
            } else if (
              Caml_obj.equal(z, parsedEndDate) &&
              Caml_obj.notequal(parsedStartDate, parsedEndDate)
            ) {
              return "bg-jp-2-light-primary-100 dark:bg-jp-2-dark-primary-100  rounded-r-full  hover:rounded-r-full flex justify-between";
            } else {
              return "";
            }
          };
          var highlightBgClass = shouldHighlightBackground(
            startDate$1,
            endDate$1,
            obj,
            (month + 1.0).toString(),
            year.toString(),
          );
          var c3 = shouldHighlight(
            startDate$1,
            endDate$1,
            obj,
            (month + 1.0).toString(),
            year.toString(),
          );
          return React.createElement(
            "td",
            {
              key:
                "" + windowIndex.toString() + "X" + cellIndex.toString() + "",
              className:
                "" + classN + " " + highlightBgClass + " text-sm font-normal",
              onClick: onClick,
              onMouseOut: function (evt) {
                Curry._1(setHoverdDate, function (param) {
                  return "";
                });
              },
              onMouseOver: function (param) {
                var date$1 = Dayjs(date.toString()).format("YYYY-MM-DD");
                var parsedDate = getDate(date$1.split("-"));
                Curry._1(setHoverdDate, function (param) {
                  return parsedDate.toString();
                });
                if (setShowMsg !== undefined) {
                  if (
                    LogicUtils.isNonEmptyString(hoverdDate) &&
                    ((!isInLimit &&
                      LogicUtils.isEmptyString(endDate$1) &&
                      !isFutureDate &&
                      disableFutureDates$1) ||
                      (!disableFutureDates$1 &&
                        !isInLimit &&
                        LogicUtils.isEmptyString(endDate$1)))
                  ) {
                    return Curry._1(setShowMsg, function (param) {
                      return true;
                    });
                  } else {
                    return Curry._1(setShowMsg, function (param) {
                      return false;
                    });
                  }
                }
              },
            },
            React.createElement(AddDataAttributes.make, {
              attributes: [
                [
                  "data-calender-date",
                  hSelf.highlightSelf ||
                  LogicUtils.isNonEmptyString(startDate$1)
                    ? "selected"
                    : "normal",
                ],
                [
                  "data-calender-date-disabled",
                  (isFutureDate && disableFutureDates$1) ||
                  (customDisabledFutureDays$1 > 0.0 && isInCustomDisable) ||
                  (!isFutureDate && disablePastDates$1) ||
                  (LogicUtils.isEmptyString(endDate$1) && !isInLimit)
                    ? "disabled"
                    : "enabled",
                ],
              ],
              children: React.createElement(
                "span",
                {
                  className:
                    "" +
                    (LogicUtils.isEmptyString(startDate$1) ? c2 : c3) +
                    " " +
                    (isTodayHighlight
                      ? "flex flex-col justify-center items-center pl-0.5"
                      : "") +
                    "",
                },
                Curry._1(
                  cellRenderer$1,
                  LogicUtils.isEmptyString(obj)
                    ? undefined
                    : Dayjs(date.toString()).format("YYYY-MM-D"),
                ),
                isTodayHighlight
                  ? React.createElement("div", {
                      className: "bg-blue-500 h-1.5 w-1.5 rounded-full",
                    })
                  : null,
              ),
            }),
          );
        }),
      ),
      props.rowIndex < 5
        ? React.createElement("tr", {
            className: "h-1",
          })
        : null,
    );
  }
}

var TableRow = {
  defaultCellHighlighter: defaultCellHighlighter,
  defaultCellRenderer: defaultCellRenderer,
  make: NewCalendar$TableRow,
};

function NewCalendar(props) {
  var setIsDateClicked = props.setIsDateClicked;
  var isFutureDate = props.isFutureDate;
  var customDisabledFutureDays = props.customDisabledFutureDays;
  var showHead = props.showHead;
  var setShowMsg = props.setShowMsg;
  var dateRangeLimit = props.dateRangeLimit;
  var disableFutureDates = props.disableFutureDates;
  var disablePastDates = props.disablePastDates;
  var endDate = props.endDate;
  var startDate = props.startDate;
  var cellRenderer = props.cellRenderer;
  var cellHighlighter = props.cellHighlighter;
  var setHoverdDate = props.setHoverdDate;
  var hoverdDate = props.hoverdDate;
  var onDateClick = props.onDateClick;
  var year = props.year;
  var month = props.month;
  var changeHighlightCellStyle = props.changeHighlightCellStyle;
  var changeHighlightCellStyle$1 =
    changeHighlightCellStyle !== undefined ? changeHighlightCellStyle : "";
  var startDate$1 = startDate !== undefined ? startDate : "";
  var endDate$1 = endDate !== undefined ? endDate : "";
  var disablePastDates$1 =
    disablePastDates !== undefined ? disablePastDates : true;
  var disableFutureDates$1 =
    disableFutureDates !== undefined ? disableFutureDates : false;
  var showHead$1 = showHead !== undefined ? showHead : true;
  var customDisabledFutureDays$1 =
    customDisabledFutureDays !== undefined ? customDisabledFutureDays : 0.0;
  var isFutureDate$1 = isFutureDate !== undefined ? isFutureDate : true;
  var heading = ["Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat"];
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var totalMonths = disablePastDates$1
    ? 1
    : (((Math.imul((year - 1970) | 0, 12) +
        (DateTimeUtils.months.indexOf(month) | 0)) |
        0) +
        1) |
      0;
  var futureMonths = isFutureDate$1 && !disableFutureDates$1 ? 120 : 0;
  var match = React.useState(function () {
    return "";
  });
  var setLastStartDate = match[1];
  var lastStartDate = match[0];
  var fn = React.useRef(function (param, param$1) {});
  var getMonthInStr = function (mon) {
    switch (mon) {
      case /* Jan */ 0:
        return "January ";
      case /* Feb */ 1:
        return "February ";
      case /* Mar */ 2:
        return "March ";
      case /* Apr */ 3:
        return "April ";
      case /* May */ 4:
        return "May ";
      case /* Jun */ 5:
        return "June ";
      case /* Jul */ 6:
        return "July ";
      case /* Aug */ 7:
        return "August ";
      case /* Sep */ 8:
        return "September ";
      case /* Oct */ 9:
        return "October ";
      case /* Nov */ 10:
        return "November ";
      case /* Dec */ 11:
        return "December ";
    }
  };
  React.useEffect(function () {
    Curry._2(fn.current, (totalMonths - 1) | 0, "center");
  }, []);
  React.useEffect(
    function () {
      var currentMonth = ((DateTimeUtils.months.indexOf(month) | 0) + 1) | 0;
      if (startDate$1 !== lastStartDate) {
        var startYear = LogicUtils.isNonEmptyString(startDate$1)
          ? Dayjs(startDate$1).format("YYYY")
          : "";
        var startMonth = Core__Option.getOr(
          Core__Int.fromString(
            undefined,
            LogicUtils.isNonEmptyString(startDate$1)
              ? Dayjs(startDate$1).format("MM")
              : "",
          ),
          currentMonth,
        );
        var startYearDiff =
          (year -
            Core__Option.getOr(
              Core__Int.fromString(undefined, startYear),
              2022,
            )) |
          0;
        var startIndex =
          (Math.imul(12, startYearDiff) + ((currentMonth - startMonth) | 0)) |
          0;
        if (LogicUtils.isNonEmptyString(startDate$1)) {
          Curry._2(
            fn.current,
            (((totalMonths - startIndex) | 0) - 1) | 0,
            "center",
          );
        }
        Curry._1(setLastStartDate, function (param) {
          return startDate$1;
        });
      } else {
        var endYear = LogicUtils.isNonEmptyString(endDate$1)
          ? Dayjs(endDate$1).format("YYYY")
          : "";
        var endMonth = Core__Option.getOr(
          Core__Int.fromString(
            undefined,
            LogicUtils.isNonEmptyString(endDate$1)
              ? Dayjs(endDate$1).format("MM")
              : "",
          ),
          currentMonth,
        );
        var endYearDiff =
          (year -
            Core__Option.getOr(
              Core__Int.fromString(undefined, endYear),
              2022,
            )) |
          0;
        var endIndex =
          (Math.imul(12, endYearDiff) + ((currentMonth - endMonth) | 0)) | 0;
        if (LogicUtils.isNonEmptyString(endDate$1)) {
          Curry._2(
            fn.current,
            (((totalMonths - endIndex) | 0) - 1) | 0,
            "center",
          );
        }
      }
    },
    [startDate$1, endDate$1],
  );
  var rows = function (index) {
    var windowIndex =
      (((totalMonths - LogicUtils.getInt(index, "index", 0)) | 0) - 1) | 0;
    var newMonth = Dayjs().subtract(windowIndex, "month").month();
    var newYear = Dayjs().subtract(windowIndex, "month").year();
    var updatedMonth = Core__Option.getOr(
      DateTimeUtils.months[newMonth],
      /* Jan */ 0,
    );
    var firstDay = new Date(
      newYear,
      DateTimeUtils.months.indexOf(updatedMonth),
    ).getDay();
    var daysInMonth;
    switch (updatedMonth) {
      case /* Feb */ 1:
        daysInMonth = LogicUtils.checkLeapYear(newYear) ? 29 : 28;
        break;
      case /* Apr */ 3:
      case /* Jun */ 5:
      case /* Sep */ 8:
      case /* Nov */ 10:
        daysInMonth = 30;
        break;
      case /* Jan */ 0:
      case /* Mar */ 2:
      case /* May */ 4:
      case /* Jul */ 6:
      case /* Aug */ 7:
      case /* Oct */ 9:
      case /* Dec */ 11:
        daysInMonth = 31;
        break;
    }
    var dummyRow = Core__Array.make(6, Core__Array.make(7, ""));
    var rowMapper = function (row, indexRow) {
      return row.map(function (_item, index) {
        var subFactor = firstDay | 0;
        if (indexRow === 0 && index < (firstDay | 0)) {
          return "";
        } else if (indexRow === 0) {
          return (
            (((indexRow + ((index + 1) | 0)) | 0) - subFactor) |
            0
          ).toString();
        } else if (
          ((((Math.imul(indexRow, 7) + ((index + 1) | 0)) | 0) - subFactor) |
            0) >
          daysInMonth
        ) {
          return "";
        } else {
          return (
            (((Math.imul(indexRow, 7) + ((index + 1) | 0)) | 0) - subFactor) |
            0
          ).toString();
        }
      });
    };
    var rowInfo = dummyRow.map(rowMapper);
    return React.createElement(
      "div",
      {
        style: LogicUtils.getJsonObjectFromDict(index, "style"),
      },
      React.createElement(
        "div",
        {
          className: "font-normal text-fs-16 text-[#344054] leading-6 mt-5",
        },
        "" + getMonthInStr(updatedMonth) + " " + newYear.toString() + "",
      ),
      React.createElement(
        "table",
        {
          className: "table-auto min-w-full",
        },
        React.createElement(
          "tbody",
          undefined,
          rowInfo.map(function (item, rowIndex) {
            return JsxPPXReactSupport.createElementWithKey(
              rowIndex.toString(),
              NewCalendar$TableRow,
              {
                changeHighlightCellStyle: changeHighlightCellStyle$1,
                item: item,
                month: DateTimeUtils.months.indexOf(updatedMonth),
                year: newYear,
                rowIndex: rowIndex,
                onDateClick: onDateClick,
                cellHighlighter: cellHighlighter,
                cellRenderer: cellRenderer,
                startDate: startDate$1,
                endDate: endDate$1,
                hoverdDate: hoverdDate,
                setHoverdDate: setHoverdDate,
                disablePastDates: disablePastDates$1,
                disableFutureDates: disableFutureDates$1,
                customDisabledFutureDays: customDisabledFutureDays$1,
                dateRangeLimit: dateRangeLimit,
                setShowMsg: setShowMsg,
                windowIndex: windowIndex,
                setIsDateClicked: setIsDateClicked,
              },
            );
          }),
        ),
      ),
    );
  };
  return React.createElement(
    "div",
    {
      className:
        "text-sm px-2 pb-2 font-inter-style flex flex-col items-center",
    },
    React.createElement(
      "div",
      {
        className: "border-b-2",
      },
      showHead$1
        ? React.createElement(
            "div",
            {
              className: "flex flex-row justify-between",
            },
            heading.map(function (item, i) {
              return React.createElement(
                "div",
                {
                  key: i.toString(),
                  className: "w-10",
                },
                React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-1 justify-center pb-2.5 pt-0.5 text-jp-gray-700 dark:text-jp-gray-text_darktheme dark:text-opacity-50",
                  },
                  isMobileView ? item.charAt(0) : item,
                ),
              );
            }),
          )
        : null,
    ),
    React.createElement(ReactWindow.VariableSizeList, {
      ref: function (el) {
        fn.current = function (param, param$1) {
          el.scrollToItem(param, param$1);
        };
      },
      children: rows,
      height: 290,
      itemCount: (totalMonths + futureMonths) | 0,
      itemSize: function (param) {
        return 290;
      },
      width: 300,
    }),
  );
}

var make = NewCalendar;

export { TableRow, make };
/* dayjs Not a pure module */
