// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as SnackBarState from "../hooks/SnackBarState.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function SnackBarContainer$Snackbar(props) {
  var hideSnackbar = props.hideSnackbar;
  var snackbarProps = props.snackbarProps;
  var borderCss =
    snackbarProps.snackbarType !== /* General */ 0 ? "border-l-4" : "";
  var match = snackbarProps.snackbarType;
  var borderColor;
  switch (match) {
    case /* Success */ 1:
      borderColor = "border-jp-2-light-green-700";
      break;
    case /* Error */ 2:
      borderColor = "border-jp-2-light-red-700";
      break;
    case /* Warning */ 3:
      borderColor = "border-jp-2-light-orange-600";
      break;
    case /* General */ 0:
    case /* Information */ 4:
      borderColor = "border-jp-2-primary-300";
      break;
  }
  var match$1 = snackbarProps.snackbarType;
  var snackbarIconName;
  switch (match$1) {
    case /* General */ 0:
      snackbarIconName = "";
      break;
    case /* Success */ 1:
      snackbarIconName = "success-snackbar";
      break;
    case /* Error */ 2:
      snackbarIconName = "error-snackbar";
      break;
    case /* Warning */ 3:
      snackbarIconName = "warning-snackbar";
      break;
    case /* Information */ 4:
      snackbarIconName = "info-snackbar";
      break;
  }
  var leftIcon =
    snackbarProps.snackbarType !== /* General */ 0
      ? React.createElement(
          "div",
          undefined,
          React.createElement(Icon.make, {
            name: snackbarIconName,
            size: 24,
          }),
        )
      : null;
  var handleClick = React.useCallback(
    function (_ev) {
      var fn = snackbarProps.onClose;
      if (fn !== undefined) {
        Curry._1(fn, undefined);
      }
      Curry._1(hideSnackbar, snackbarProps.snackbarKey);
    },
    [hideSnackbar],
  );
  return React.createElement(
    "div",
    {
      className:
        "p-3 pr-4 m-2 mr-3 shadow-lg z-50 pointer-events-auto bg-jp-2-light-gray-1800 max-w-md rounded " +
        borderCss +
        " " +
        borderColor +
        "",
    },
    React.createElement(
      "div",
      {
        className: "flex flex-row gap-2",
      },
      leftIcon,
      React.createElement(
        "div",
        {
          className: "flex flex-col gap-4",
        },
        React.createElement(
          "div",
          {
            className: "gap-0",
          },
          React.createElement(
            "div",
            {
              className:
                "font-semibold text-fs-16 mb-2 text-jp-2-dark-gray-2000",
            },
            snackbarProps.heading,
          ),
          React.createElement(
            "div",
            {
              className:
                "font-normal text-fs-14 leading-5 text-jp-2-light-gray-600",
            },
            snackbarProps.body,
          ),
        ),
        snackbarProps.actionElement,
      ),
      React.createElement(
        "div",
        undefined,
        React.createElement(
          "button",
          {
            className: " hover:text-jp-gray-900 pl-5",
            onClick: handleClick,
          },
          React.createElement(Icon.make, {
            name: "close-snackbar",
            size: 16,
          }),
        ),
      ),
    ),
  );
}

var Snackbar = {
  make: SnackBarContainer$Snackbar,
};

function SnackBarContainer(props) {
  var match = Recoil.useRecoilState(SnackBarState.openSnackbar);
  var setOpenSnackbar = match[1];
  var hideSnackbar = React.useCallback(
    function (key) {
      setOpenSnackbar(function (prevArr) {
        return prevArr.filter(function (snackbarProps) {
          return snackbarProps.snackbarKey !== key;
        });
      });
    },
    [setOpenSnackbar],
  );
  return React.createElement(
    "div",
    {
      className: "relative",
    },
    props.children,
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className:
            "absolute inset-0 overflow-scroll flex flex-col pointer-events-none m-4 items-end grid justify-end content-end no-scrollbar",
        },
        React.createElement(
          "div",
          {
            className:
              "flex flex-col font-inter-style pointer-events-auto w-auto self-start w-max max-w-4xl",
          },
          match[0].map(function (snackbarProps) {
            return JsxPPXReactSupport.createElementWithKey(
              snackbarProps.snackbarKey,
              SnackBarContainer$Snackbar,
              {
                snackbarProps: snackbarProps,
                hideSnackbar: hideSnackbar,
              },
            );
          }),
        ),
      ),
    ),
  );
}

var make = SnackBarContainer;

export { Snackbar, make };
/* Icon Not a pure module */
