// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Tick from "./custom-icons/Tick.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Loader from "./Loader.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as BoolInput from "./form/BoolInput.bs.js";
import * as RadioIcon from "./custom-icons/RadioIcon.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as BottomModal from "./BottomModal.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as SearchInput from "./SearchInput.bs.js";
import * as CheckBoxIcon from "./custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Core__String from "@rescript/core/src/Core__String.bs.js";
import * as OutsideClick from "../hooks/OutsideClick.bs.js";
import * as ConfigContext from "../context/ConfigContext.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RippleEffectBackground from "./RippleEffectBackground.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";
import * as DropdownTextWeighContextWrapper from "../context/DropdownTextWeighContextWrapper.bs.js";

function regex(a, searchString) {
  var searchStringNew = searchString
    .replace(/[<>\[\]';|?*\\]/g, "")
    .replace(/\(/g, "\\(")
    .replace(/\+/g, "\\+")
    .replace(/\)/g, "\\)")
    .replace(/\./g, "");
  return new RegExp("(.*)(" + a + "" + searchStringNew + ")(.*)", "i");
}

function SelectBox$ListItem(props) {
  var textColorClass = props.textColorClass;
  var textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var showToolTipOptions = props.showToolTipOptions;
  var iconStroke = props.iconStroke;
  var checkboxDimension = props.checkboxDimension;
  var toggleProps = props.toggleProps;
  var selectClass = props.selectClass;
  var optionClass = props.optionClass;
  var showDescriptionAsTool = props.showDescriptionAsTool;
  var textOverflowClass = props.textOverflowClass;
  var customSelectStyle = props.customSelectStyle;
  var listFlexDirection = props.listFlexDirection;
  var customMarginStyle = props.customMarginStyle;
  var customLabelStyle = props.customLabelStyle;
  var description = props.description;
  var isMobileView = props.isMobileView;
  var serialNumber = props.serialNumber;
  var customStyle = props.customStyle;
  var showToggle = props.showToggle;
  var leftVacennt = props.leftVacennt;
  var icon = props.icon;
  var isDisabled = props.isDisabled;
  var labelValue = props.labelValue;
  var fill = props.fill;
  var text = props.text;
  var onClick = props.onClick;
  var isSelected = props.isSelected;
  var isSelectedStateMinus = props.isSelectedStateMinus;
  var optionSize = props.optionSize;
  var multiSelect = props.multiSelect;
  var searchString = props.searchString;
  var isDropDown = props.isDropDown;
  var optionSize$1 = optionSize !== undefined ? optionSize : /* Small */ 0;
  var isSelectedStateMinus$1 =
    isSelectedStateMinus !== undefined ? isSelectedStateMinus : false;
  var fill$1 = fill !== undefined ? fill : "#0EB025";
  var labelValue$1 = labelValue !== undefined ? labelValue : "";
  var isDisabled$1 = isDisabled !== undefined ? isDisabled : false;
  var leftVacennt$1 = leftVacennt !== undefined ? leftVacennt : false;
  var showToggle$1 = showToggle !== undefined ? showToggle : false;
  var customStyle$1 = customStyle !== undefined ? customStyle : "";
  var serialNumber$1 =
    serialNumber !== undefined
      ? Caml_option.valFromOption(serialNumber)
      : undefined;
  var isMobileView$1 = isMobileView !== undefined ? isMobileView : false;
  var description$1 =
    description !== undefined
      ? Caml_option.valFromOption(description)
      : undefined;
  var customLabelStyle$1 =
    customLabelStyle !== undefined
      ? Caml_option.valFromOption(customLabelStyle)
      : undefined;
  var customMarginStyle$1 =
    customMarginStyle !== undefined ? customMarginStyle : "mx-3 py-2 gap-2";
  var listFlexDirection$1 =
    listFlexDirection !== undefined ? listFlexDirection : "";
  var customSelectStyle$1 =
    customSelectStyle !== undefined ? customSelectStyle : "";
  var showDescriptionAsTool$1 =
    showDescriptionAsTool !== undefined ? showDescriptionAsTool : true;
  var optionClass$1 = optionClass !== undefined ? optionClass : "";
  var selectClass$1 = selectClass !== undefined ? selectClass : "";
  var toggleProps$1 = toggleProps !== undefined ? toggleProps : "";
  var checkboxDimension$1 =
    checkboxDimension !== undefined ? checkboxDimension : "";
  var iconStroke$1 = iconStroke !== undefined ? iconStroke : "";
  var showToolTipOptions$1 =
    showToolTipOptions !== undefined ? showToolTipOptions : false;
  var textEllipsisForDropDownOptions$1 =
    textEllipsisForDropDownOptions !== undefined
      ? textEllipsisForDropDownOptions
      : false;
  var textColorClass$1 = textColorClass !== undefined ? textColorClass : "";
  var match = React.useContext(ConfigContext.configContext);
  var font = match.globalUIConfig.font;
  var match$1 = labelValue$1.length;
  var labelText = match$1 !== 0 ? labelValue$1 : text;
  var match$2 = React.useState(function () {
    return isSelected;
  });
  var setToggleSelect = match$2[1];
  var listText;
  if (LogicUtils.isEmptyString(searchString)) {
    listText = [text];
  } else {
    var r = text.match(regex("\\b", searchString));
    if (r !== null) {
      listText = Belt_Array.keepMap(r.slice(1), function (x) {
        return x;
      });
    } else {
      var a = text.match(regex("_", searchString));
      listText =
        a !== null
          ? Belt_Array.keepMap(a.slice(1), function (x) {
              return x;
            })
          : [text];
    }
  }
  var customMarginStyle$2 = isMobileView$1
    ? "py-2 gap-2"
    : isDropDown
      ? customMarginStyle$1
      : "mr-3 py-2 gap-2";
  var backgroundClass = showToggle$1
    ? ""
    : isSelected && LogicUtils.isNonEmptyString(customStyle$1)
      ? customSelectStyle$1
      : isDropDown && isSelected && !isDisabled$1
        ? "md:bg-jp-gray-100 md:dark:bg-jp-gray-text_darktheme md:dark:bg-opacity-3 dark:hover:text-white dark:text-white transition ease-[cubic-bezier(0.33, 1, 0.68, 1)]"
        : "hover:bg-jp-gray-100 dark:hover:bg-jp-gray-text_darktheme dark:hover:bg-opacity-10 dark:hover:text-white dark:text-white";
  var justifyClass = isDropDown ? "justify-between" : "";
  var selectedClass = isSelected
    ? "text-opacity-100 dark:text-opacity-100"
    : isDisabled$1
      ? "text-opacity-50 dark:text-opacity-50"
      : "text-opacity-75 dark:text-opacity-75";
  var leftElementClass = leftVacennt$1 ? "px-4 " : "";
  var labelStyle = Core__Option.isSome(customLabelStyle$1)
    ? Core__Option.getOr(customLabelStyle$1, "")
    : "";
  var onToggleSelect = function (val) {
    if (!isDisabled$1) {
      return Curry._1(setToggleSelect, function (param) {
        return val;
      });
    }
  };
  React.useEffect(
    function () {
      Curry._1(setToggleSelect, function (param) {
        return isSelected;
      });
    },
    [isSelected],
  );
  var cursorClass =
    showToggle$1 || !isDropDown
      ? ""
      : isDisabled$1
        ? "cursor-not-allowed"
        : "cursor-pointer";
  var paddingClass = showToggle$1 ? "pr-6 mr-4" : "pr-2";
  var onClickTemp = showToggle$1 ? function (param) {} : onClick;
  var parentRef = React.useRef(null);
  var textColor = LogicUtils.isNonEmptyString(textColorClass$1)
    ? textColorClass$1
    : "text-jp-gray-900 dark:text-jp-gray-text_darktheme";
  var toggleClass = showToggle$1 ? "" : multiSelect ? "pr-2" : "pl-2";
  var optionIconStroke = "";
  var optionTextSize =
    !isDropDown && optionSize$1 === /* Large */ 1 ? "text-fs-16" : "text-base";
  var searchMatchTextColor =
    "dark:" +
    font.textColor.primaryNormal +
    " " +
    font.textColor.primaryNormal +
    "";
  var optionDescPadding =
    optionSize$1 === /* Small */ 0
      ? showToggle$1
        ? "pl-12"
        : "pl-7"
      : showToggle$1
        ? "pl-15"
        : "pl-9";
  var overFlowTextCustomClass =
    textOverflowClass !== undefined ? textOverflowClass : "overflow-hidden";
  var customCss = LogicUtils.isEmptyString(listFlexDirection$1)
    ? "flex-row " + paddingClass + ""
    : listFlexDirection$1;
  RippleEffectBackground.useLinearRippleHook(parentRef, isDropDown);
  var tmp;
  if (typeof icon === "number") {
    tmp = null;
  } else {
    switch (icon.TAG | 0) {
      case /* FontAwesome */ 0:
        tmp = React.createElement(Icon.make, {
          name: icon._0,
          size: 20,
          className:
            "align-middle " +
            (LogicUtils.isEmptyString(iconStroke$1)
              ? optionIconStroke
              : iconStroke$1) +
            " ",
        });
        break;
      case /* CustomIcon */ 1:
        tmp = icon._0;
        break;
      case /* CustomRightIcon */ 2:
        tmp = null;
        break;
      case /* Euler */ 3:
        tmp = React.createElement(Icon.make, {
          name: icon._0,
          size: 12,
          className: "align-middle " + optionIconStroke + "",
        });
        break;
    }
  }
  var tmp$1;
  tmp$1 =
    typeof icon === "number" || icon.TAG !== /* CustomRightIcon */ 2
      ? null
      : icon._0;
  var comp = React.createElement(AddDataAttributes.make, {
    attributes: [
      ["data-dropdown-numeric", ((props.dataId + 1) | 0).toString()],
      ["data-dropdown-value", labelText],
      ["data-dropdown-value-selected", isSelected ? "True" : "False"],
    ],
    children: React.createElement(
      "div",
      {
        ref: Caml_option.some(parentRef),
        className:
          "flex  relative mx-2 md:mx-0 my-3 md:my-0 pr-2 md:pr-0 md:w-full items-center font-medium  " +
          overFlowTextCustomClass +
          "  " +
          textColor +
          " " +
          justifyClass +
          " " +
          cursorClass +
          " " +
          backgroundClass +
          " " +
          selectedClass +
          " " +
          customStyle$1 +
          "  " +
          customCss +
          " ",
        onClick: onClickTemp,
      },
      isDropDown
        ? multiSelect && !isMobileView$1
          ? React.createElement(
              "span",
              {
                className: "pl-3",
              },
              React.createElement(CheckBoxIcon.make, {
                isSelected: isSelected,
                isDisabled: isDisabled$1,
                isSelectedStateMinus: isSelectedStateMinus$1,
              }),
            )
          : null
        : showToggle$1
          ? React.createElement(
              "div",
              {
                className: toggleClass + toggleProps$1,
                onClick: onClick,
              },
              React.createElement(BoolInput.BaseComponent.make, {
                isSelected: match$2[0],
                setIsSelected: onToggleSelect,
                size: optionSize$1,
                isDisabled: isDisabled$1,
              }),
            )
          : multiSelect
            ? React.createElement(
                "span",
                {
                  className: toggleClass,
                },
                LogicUtils.isNonEmptyString(checkboxDimension$1)
                  ? React.createElement(CheckBoxIcon.make, {
                      isSelected: isSelected,
                      isDisabled: isDisabled$1,
                      size: optionSize$1,
                      isSelectedStateMinus: isSelectedStateMinus$1,
                      checkboxDimension: checkboxDimension$1,
                    })
                  : React.createElement(CheckBoxIcon.make, {
                      isSelected: isSelected,
                      isDisabled: isDisabled$1,
                      size: optionSize$1,
                      isSelectedStateMinus: isSelectedStateMinus$1,
                    }),
              )
            : React.createElement(
                "div",
                {
                  className: toggleClass,
                },
                React.createElement(RadioIcon.make, {
                  isSelected: isSelected,
                  size: optionSize$1,
                  fill: fill$1,
                  isDisabled: isDisabled$1,
                }),
              ),
      React.createElement(
        "div",
        {
          className:
            "flex flex-row group " +
            optionTextSize +
            " w-full text-left items-center " +
            customMarginStyle$2 +
            " overflow-hidden",
        },
        React.createElement(
          "div",
          {
            className:
              "" +
              leftElementClass +
              "  flex w-full overflow-x-auto whitespace-pre " +
              labelStyle +
              "",
          },
          tmp,
          React.createElement(
            "div",
            {
              className: "w-full",
            },
            listText
              .filter(LogicUtils.isNonEmptyString)
              .map(function (item, i) {
                if (
                  (item.toLowerCase() === searchString.toLowerCase() ||
                    item.toLowerCase() ===
                      ("_" + searchString).toLowerCase()) &&
                  searchString.length > 0
                ) {
                  return JsxPPXReactSupport.createElementWithKey(
                    i.toString(),
                    AddDataAttributes.make,
                    {
                      attributes: [["data-searched-text", item]],
                      children: React.createElement(
                        "mark",
                        {
                          key: i.toString(),
                          className:
                            "" + searchMatchTextColor + " bg-transparent",
                        },
                        item,
                      ),
                    },
                  );
                }
                var className = isSelected
                  ? "" + selectClass$1 + ""
                  : "" + optionClass$1 + "";
                var textClass = textEllipsisForDropDownOptions$1
                  ? "" + className + " text-ellipsis overflow-hidden "
                  : className;
                var selectOptions = JsxPPXReactSupport.createElementWithKey(
                  i.toString(),
                  AddDataAttributes.make,
                  {
                    attributes: [["data-text", labelText]],
                    children: React.createElement(
                      "span",
                      {
                        key: i.toString(),
                        className: textClass,
                        value: labelText,
                      },
                      item,
                    ),
                  },
                );
                if (showToolTipOptions$1) {
                  return JsxPPXReactSupport.createElementWithKey(
                    i.toString(),
                    ToolTip.make,
                    {
                      description: item,
                      toolTipFor: Caml_option.some(selectOptions),
                      contentAlign: /* Default */ 3,
                      justifyClass: "justify-start",
                    },
                  );
                } else {
                  return selectOptions;
                }
              }),
          ),
        ),
        tmp$1,
      ),
      isMobileView$1 && isDropDown
        ? multiSelect
          ? React.createElement(CheckBoxIcon.make, {
              isSelected: isSelected,
            })
          : React.createElement(RadioIcon.make, {
              isSelected: isSelected,
              isDisabled: isDisabled$1,
            })
        : isDropDown
          ? React.createElement(
              "div",
              {
                className: "mr-2",
              },
              React.createElement(Tick.make, {
                isSelected: isSelected,
              }),
            )
          : null,
      serialNumber$1 !== undefined
        ? React.createElement(AddDataAttributes.make, {
            attributes: [["data-badge-value", serialNumber$1]],
            children: React.createElement(
              "div",
              {
                className:
                  "mr-2 py-0.5 px-2 bg-blue-500 text-white font-semibold rounded-full",
              },
              serialNumber$1,
            ),
          })
        : null,
    ),
  });
  return React.createElement(
    React.Fragment,
    undefined,
    description$1 !== undefined
      ? isDropDown
        ? showDescriptionAsTool$1
          ? React.createElement(ToolTip.make, {
              description: description$1,
              toolTipFor: Caml_option.some(comp),
              contentAlign: /* Default */ 3,
              justifyClass: "justify-start",
            })
          : React.createElement(
              "div",
              undefined,
              comp,
              React.createElement("div", undefined, description$1),
            )
        : React.createElement(
            React.Fragment,
            undefined,
            comp,
            React.createElement(
              "div",
              {
                className:
                  "text-jp-2-light-gray-1100 font-normal -mt-2 " +
                  optionDescPadding +
                  " " +
                  optionTextSize +
                  "",
              },
              description$1,
            ),
          )
      : comp,
  );
}

var ListItem = {
  make: SelectBox$ListItem,
};

function makeNonOptional(dropdownOption) {
  return {
    label: dropdownOption.label,
    value: dropdownOption.value,
    isDisabled: Core__Option.getOr(dropdownOption.isDisabled, false),
    icon: Core__Option.getOr(dropdownOption.icon, /* NoIcon */ 0),
    description: dropdownOption.description,
    iconStroke: Core__Option.getOr(dropdownOption.iconStroke, ""),
    textColor: Core__Option.getOr(dropdownOption.textColor, ""),
    optGroup: Core__Option.getOr(dropdownOption.optGroup, "-"),
  };
}

function useTransformed(options) {
  return React.useMemo(
    function () {
      return options.map(makeNonOptional);
    },
    [options],
  );
}

function makeOptions(options) {
  return options.map(function (str) {
    return {
      label: str,
      value: str,
    };
  });
}

function SelectBox$BaseSelect(props) {
  var preservedAppliedOptions = props.preservedAppliedOptions;
  var wrapBasis = props.wrapBasis;
  var onItemSelect = props.onItemSelect;
  var dropdownClassName = props.dropdownClassName;
  var checkboxDimension = props.checkboxDimension;
  var customSelectAllStyle = props.customSelectAllStyle;
  var showSelectCountButton = props.showSelectCountButton;
  var toggleProps = props.toggleProps;
  var selectClass = props.selectClass;
  var optionClass = props.optionClass;
  var showDescriptionAsTool = props.showDescriptionAsTool;
  var onApply = props.onApply;
  var listFlexDirection = props.listFlexDirection;
  var customMarginStyle = props.customMarginStyle;
  var sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var dropdownCustomWidth = props.dropdownCustomWidth;
  var setShowDropDown = props.setShowDropDown;
  var hasApplyButton = props.hasApplyButton;
  var customSearchStyle = props.customSearchStyle;
  var isModalView = props.isModalView;
  var isMobileView = props.isMobileView;
  var allSelectType = props.allSelectType;
  var hideBorder = props.hideBorder;
  var deselectDisable = props.deselectDisable;
  var disableSelect = props.disableSelect;
  var customMargin = props.customMargin;
  var customStyle = props.customStyle;
  var showSearchIcon = props.showSearchIcon;
  var searchInputPlaceHolder = props.searchInputPlaceHolder;
  var optionRigthElement = props.optionRigthElement;
  var searchable = props.searchable;
  var maxHeight = props.maxHeight;
  var showSelectionAsChips = props.showSelectionAsChips;
  var heading = props.heading;
  var showSerialNumber = props.showSerialNumber;
  var showToggle = props.showToggle;
  var customLabelStyle = props.customLabelStyle;
  var isHorizontal = props.isHorizontal;
  var showClearAll = props.showClearAll;
  var onBlur = props.onBlur;
  var values = props.value;
  var onSelect = props.onSelect;
  var isSelectedStateMinus = props.isSelectedStateMinus;
  var optionSize = props.optionSize;
  var options = props.options;
  var isDropDown = props.isDropDown;
  var showDropDown = props.showDropDown;
  var showSelectAll = props.showSelectAll;
  var showSelectAll$1 = showSelectAll !== undefined ? showSelectAll : true;
  var showDropDown$1 = showDropDown !== undefined ? showDropDown : false;
  var isDropDown$1 = isDropDown !== undefined ? isDropDown : true;
  var optionSize$1 = optionSize !== undefined ? optionSize : /* Small */ 0;
  var isSelectedStateMinus$1 =
    isSelectedStateMinus !== undefined ? isSelectedStateMinus : false;
  var showClearAll$1 = showClearAll !== undefined ? showClearAll : true;
  var isHorizontal$1 = isHorizontal !== undefined ? isHorizontal : false;
  var showToggle$1 = showToggle !== undefined ? showToggle : false;
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : false;
  var heading$1 = heading !== undefined ? heading : "Some heading";
  var showSelectionAsChips$1 =
    showSelectionAsChips !== undefined ? showSelectionAsChips : true;
  var maxHeight$1 = maxHeight !== undefined ? maxHeight : "md:max-h-72";
  var searchInputPlaceHolder$1 =
    searchInputPlaceHolder !== undefined ? searchInputPlaceHolder : "";
  var showSearchIcon$1 = showSearchIcon !== undefined ? showSearchIcon : true;
  var customStyle$1 = customStyle !== undefined ? customStyle : "";
  var customMargin$1 = customMargin !== undefined ? customMargin : "";
  var disableSelect$1 = disableSelect !== undefined ? disableSelect : false;
  var hideBorder$1 = hideBorder !== undefined ? hideBorder : false;
  var allSelectType$1 =
    allSelectType !== undefined ? allSelectType : /* Icon */ 0;
  var isMobileView$1 = isMobileView !== undefined ? isMobileView : false;
  var isModalView$1 = isModalView !== undefined ? isModalView : false;
  var customSearchStyle$1 =
    customSearchStyle !== undefined
      ? customSearchStyle
      : "bg-jp-gray-100 dark:bg-jp-gray-950 p-2";
  var hasApplyButton$1 = hasApplyButton !== undefined ? hasApplyButton : false;
  var dropdownCustomWidth$1 =
    dropdownCustomWidth !== undefined
      ? dropdownCustomWidth
      : "w-full md:max-w-md min-w-[10rem]";
  var sortingBasedOnDisabled$1 =
    sortingBasedOnDisabled !== undefined ? sortingBasedOnDisabled : true;
  var customMarginStyle$1 =
    customMarginStyle !== undefined ? customMarginStyle : "mx-3 py-2 gap-2";
  var listFlexDirection$1 =
    listFlexDirection !== undefined ? listFlexDirection : "";
  var showDescriptionAsTool$1 =
    showDescriptionAsTool !== undefined ? showDescriptionAsTool : true;
  var optionClass$1 = optionClass !== undefined ? optionClass : "";
  var selectClass$1 = selectClass !== undefined ? selectClass : "";
  var toggleProps$1 = toggleProps !== undefined ? toggleProps : "";
  var showSelectCountButton$1 =
    showSelectCountButton !== undefined ? showSelectCountButton : false;
  var customSelectAllStyle$1 =
    customSelectAllStyle !== undefined ? customSelectAllStyle : "";
  var checkboxDimension$1 =
    checkboxDimension !== undefined ? checkboxDimension : "";
  var dropdownClassName$1 =
    dropdownClassName !== undefined ? dropdownClassName : "";
  var onItemSelect$1 =
    onItemSelect !== undefined ? onItemSelect : function (param, param$1) {};
  var wrapBasis$1 = wrapBasis !== undefined ? wrapBasis : "";
  var preservedAppliedOptions$1 =
    preservedAppliedOptions !== undefined ? preservedAppliedOptions : [];
  var match = React.useContext(ConfigContext.configContext);
  var font = match.globalUIConfig.font;
  var match$1 = React.useState(function () {
    return "";
  });
  var setSearchString = match$1[1];
  var searchString = match$1[0];
  var maxHeight$2 = maxHeight$1.includes("72") ? "md:max-h-66.5" : maxHeight$1;
  var saneValue = React.useMemo(
    function () {
      var jsonArr = Core__JSON.Decode.array(values);
      if (jsonArr !== undefined) {
        return LogicUtils.getStrArrayFromJsonArray(jsonArr);
      } else {
        return [];
      }
    },
    [values],
  );
  var initialSelectedOptions = React.useMemo(function () {
    return options.filter(function (item) {
      return saneValue.includes(item.value);
    });
  }, []);
  options.sort(function (item1, item2) {
    var item1Index = initialSelectedOptions.findIndex(function (item) {
      return item.label === item1.label;
    });
    var item2Index = initialSelectedOptions.findIndex(function (item) {
      return item.label === item2.label;
    });
    if (item1Index <= item2Index) {
      return 1;
    } else {
      return -1;
    }
  });
  var transformedOptions = useTransformed(options);
  var match$2 = React.useState(function () {
    return transformedOptions;
  });
  var setFilteredOptions = match$2[1];
  var filteredOptions = match$2[0];
  React.useEffect(
    function () {
      Curry._1(setFilteredOptions, function (param) {
        return transformedOptions;
      });
    },
    [transformedOptions],
  );
  React.useEffect(
    function () {
      var shouldDisplay = function (option) {
        var match = option.label.match(regex("\\b", searchString));
        if (match !== null) {
          return true;
        }
        var match$1 = option.label.match(regex("_", searchString));
        return match$1 !== null;
      };
      var filterOptions = options.filter(shouldDisplay).map(makeNonOptional);
      Curry._1(setFilteredOptions, function (param) {
        return filterOptions;
      });
    },
    [searchString],
  );
  var handleSearch = function (str) {
    Curry._1(setSearchString, function (param) {
      return str;
    });
  };
  var selectAll = function (select, _ev) {
    var newValues;
    if (select) {
      var newVal = filteredOptions
        .filter(function (x) {
          if (x.isDisabled) {
            return false;
          } else {
            return !saneValue.includes(x.value);
          }
        })
        .map(function (x) {
          return x.value;
        });
      newValues = saneValue.concat(newVal);
    } else {
      newValues = [];
    }
    Curry._1(onSelect, newValues);
    if (onBlur !== undefined) {
      return Curry._1(onBlur, new FocusEvent("blur"));
    }
  };
  var borderClass = hideBorder$1
    ? ""
    : isDropDown$1
      ? "bg-white border dark:bg-jp-gray-lightgray_background border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 rounded  shadow-generic_shadow dark:shadow-generic_shadow_dark animate-textTransition transition duration-400"
      : showToggle$1
        ? "bg-white border rounded dark:bg-jp-gray-darkgray_background border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 rounded  "
        : "";
  var minWidth = isDropDown$1 ? "min-w-65" : "";
  var widthClass = showToggle$1
    ? ""
    : isMobileView$1
      ? "w-full"
      : "" + minWidth + " " + dropdownCustomWidth$1 + "";
  var textIconPresent = options.some(function (op) {
    return Core__Option.getOr(op.icon, /* NoIcon */ 0) !== /* NoIcon */ 0;
  });
  if (sortingBasedOnDisabled$1) {
    options.toSorted(function (m1, m2) {
      var m1Disabled = Core__Option.getOr(m1.isDisabled, false);
      var m2Disabled = Core__Option.getOr(m2.isDisabled, false);
      if (m1Disabled === m2Disabled) {
        return 0;
      } else if (m1Disabled) {
        return 1;
      } else {
        return -1;
      }
    });
  }
  var noOfSelected = saneValue.length;
  var applyBtnDisabled =
    noOfSelected === preservedAppliedOptions$1.length &&
    Core__Array.reduce(saneValue, true, function (acc, val) {
      if (preservedAppliedOptions$1.includes(val)) {
        return acc;
      } else {
        return false;
      }
    });
  var searchRef = React.useRef(null);
  var selectBtnRef = Core__Option.map(
    props.insertselectBtnRef,
    function (prim) {
      return prim;
    },
  );
  var clearBtnRef = Core__Option.map(props.insertclearBtnRef, function (prim) {
    return prim;
  });
  var match$3 = React.useState(function () {
    return false;
  });
  var setChooseAllToggleSelected = match$3[1];
  var isChooseAllToggleSelected = match$3[0];
  var gapClass = optionRigthElement !== undefined ? "flex gap-4" : "";
  var onClick = function (ev) {
    if (setShowDropDown !== undefined) {
      Curry._1(setShowDropDown, function (param) {
        return false;
      });
    }
    if (onApply !== undefined) {
      return Curry._1(onApply, ev);
    }
  };
  React.useEffect(
    function () {
      Core__Option.forEach(
        Caml_option.nullable_to_opt(searchRef.current),
        function (input) {
          input.focus();
        },
      );
    },
    [searchRef.current, showDropDown$1],
  );
  React.useEffect(
    function () {
      if (noOfSelected === options.length) {
        Curry._1(setChooseAllToggleSelected, function (param) {
          return true;
        });
      } else {
        Curry._1(setChooseAllToggleSelected, function (param) {
          return false;
        });
      }
    },
    [noOfSelected, options],
  );
  var toggleSelectAll = function (val) {
    if (!disableSelect$1) {
      selectAll(val, "");
      return Curry._1(setChooseAllToggleSelected, function (param) {
        return val;
      });
    }
  };
  var disabledClass = disableSelect$1 ? "cursor-not-allowed" : "";
  var marginClass = LogicUtils.isEmptyString(customMargin$1)
    ? "mt-4"
    : customMargin$1;
  var dropdownAnimation = showDropDown$1
    ? "animate-textTransition transition duration-400"
    : "animate-textTransitionOff transition duration-400";
  var searchInputUI = React.createElement(
    "div",
    {
      className: "" + customSearchStyle$1 + " pb-0",
    },
    React.createElement(
      "div",
      {
        className: "pb-2 z-50",
      },
      React.createElement(SearchInput.make, {
        onChange: handleSearch,
        inputText: searchString,
        placeholder: LogicUtils.isEmptyString(searchInputPlaceHolder$1)
          ? "Search..."
          : searchInputPlaceHolder$1,
        searchRef: searchRef,
        showSearchIcon: showSearchIcon$1,
      }),
    ),
  );
  var animationClass = isModalView$1 ? "" : dropdownAnimation;
  var outerClass = isModalView$1
    ? "h-full"
    : isDropDown$1
      ? "overflow-auto"
      : "";
  var tmp;
  if (showSelectAll$1 && isDropDown$1) {
    if (isMobileView$1) {
      if (isMobileView$1) {
        var partial_arg = noOfSelected !== options.length;
        tmp = React.createElement(
          "div",
          {
            className:
              "flex " +
              (isHorizontal$1 ? "flex-col" : "flex-row") +
              " justify-between pr-4 pl-5 pt-6 pb-1 text-base font-semibold " +
              font.textColor.primaryNormal +
              " cursor-pointer",
            onClick: function (param) {
              return selectAll(partial_arg, param);
            },
          },
          "SELECT ALL",
          React.createElement(CheckBoxIcon.make, {
            isSelected: noOfSelected === options.length,
          }),
        );
      } else {
        var clearAllCondition = noOfSelected > 0;
        var partial_arg$1 = noOfSelected === 0;
        tmp = React.createElement(UIUtils.RenderIf.make, {
          condition:
            filteredOptions.length > 1 &&
            Core__Option.isNone(
              filteredOptions.find(function (item) {
                return item.value === "Loading...";
              }),
            ),
          children: React.createElement(
            "div",
            {
              className:
                "flex px-3 pt-2 pb-1 mx-1 rounded-lg gap-3 text-jp-2-gray-300 items-center text-fs-14 font-medium cursor-pointer",
              onClick: function (param) {
                return selectAll(partial_arg$1, param);
              },
            },
            React.createElement(CheckBoxIcon.make, {
              isSelected: noOfSelected !== 0,
              size: optionSize$1,
              isSelectedStateMinus: clearAllCondition,
            }),
            clearAllCondition ? "Clear All" : "Select All",
          ),
        });
      }
    } else {
      tmp = React.createElement(
        "div",
        {
          className:
            "" +
            customSearchStyle$1 +
            " border-b border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 z-index: 50",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-row justify-between",
          },
          React.createElement(
            "div",
            {
              ref: selectBtnRef,
              onClick: function (param) {
                return selectAll(true, param);
              },
            },
            React.createElement(Button.make, {
              buttonState:
                noOfSelected !== options.length
                  ? /* Normal */ 0
                  : /* Disabled */ 2,
              text: "SELECT ALL",
              buttonType: /* NonFilled */ 4,
              buttonSize: /* Small */ 2,
              customButtonStyle: "w-32 text-fs-11 mx-1",
            }),
          ),
          React.createElement(
            "div",
            {
              ref: clearBtnRef,
              onClick: function (param) {
                return selectAll(false, param);
              },
            },
            React.createElement(Button.make, {
              buttonState:
                noOfSelected !== 0 && showClearAll$1
                  ? /* Normal */ 0
                  : /* Disabled */ 2,
              text: "CLEAR ALL",
              buttonType: /* NonFilled */ 4,
              buttonSize: /* Small */ 2,
              customButtonStyle: "w-32 text-fs-11 mx-1",
            }),
          ),
        ),
        noOfSelected !== options.length &&
          noOfSelected !== 0 &&
          showSelectionAsChips$1
          ? React.createElement(
              "div",
              {
                className:
                  "text-sm text-gray-500 text-start mt-1 ml-1.5 font-bold",
              },
              "" +
                noOfSelected.toString() +
                " items selected out of " +
                options.length.toString() +
                " options",
            )
          : null,
      );
    }
  } else {
    tmp = null;
  }
  return React.createElement(
    "div",
    {
      className:
        "" +
        widthClass +
        " " +
        outerClass +
        " " +
        borderClass +
        " " +
        animationClass +
        " " +
        dropdownClassName$1 +
        "",
      id: "neglectTopbarTheme",
    },
    searchable !== undefined
      ? searchable
        ? searchInputUI
        : null
      : isDropDown$1 && options.length > 5
        ? searchInputUI
        : null,
    tmp,
    showToggle$1
      ? React.createElement(
          "div",
          undefined,
          React.createElement(
            "div",
            {
              className: "grid grid-cols-2 items-center " + marginClass + "",
            },
            React.createElement(
              "div",
              {
                className:
                  "ml-5 font-bold text-fs-16 text-jp-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50",
              },
              heading$1,
            ),
            showSelectAll$1
              ? React.createElement(
                  "div",
                  {
                    className: "flex  mr-5 justify-end",
                  },
                  allSelectType$1
                    ? React.createElement(AddDataAttributes.make, {
                        attributes: [
                          [
                            "data-select-box",
                            isChooseAllToggleSelected
                              ? "deselectAll"
                              : "selectAll",
                          ],
                        ],
                        children: React.createElement(
                          "div",
                          {
                            className:
                              "font-semibold " +
                              font.textColor.primaryNormal +
                              " " +
                              disabledClass +
                              " " +
                              customSelectAllStyle$1 +
                              "",
                            onClick: function (param) {
                              toggleSelectAll(!isChooseAllToggleSelected);
                            },
                          },
                          isChooseAllToggleSelected
                            ? "Deselect All"
                            : "Select All",
                        ),
                      })
                    : React.createElement(BoolInput.BaseComponent.make, {
                        isSelected: isChooseAllToggleSelected,
                        setIsSelected: toggleSelectAll,
                        size: optionSize$1,
                        isDisabled: disableSelect$1,
                      }),
                )
              : null,
          ),
          hideBorder$1
            ? null
            : React.createElement("div", {
                className:
                  "my-2 bg-jp-gray-lightmode_steelgray dark:bg-jp-gray-960  ",
                style: {
                  height: "1px",
                },
              }),
        )
      : null,
    React.createElement(
      "div",
      {
        className:
          "overflow-auto  " +
          (isHorizontal$1 ? "flex flex-row grow" : "") +
          "  " +
          (showToggle$1 ? "ml-3" : maxHeight$2) +
          "" +
          (LogicUtils.isEmptyString(wrapBasis$1)
            ? ""
            : " flex flex-wrap justify-between"),
      },
      filteredOptions.length === 0
        ? React.createElement(
            "div",
            {
              className: "flex justify-center items-center m-4",
            },
            "No matching records found",
          )
        : Core__Option.isSome(
              filteredOptions.find(function (item) {
                return item.value === "Loading...";
              }),
            )
          ? React.createElement(Loader.make, {})
          : filteredOptions.map(function (item, indx) {
              var valueToConsider = item.value;
              var index = saneValue.findIndex(function (sv) {
                return sv === valueToConsider;
              });
              var prevItem = filteredOptions[(indx - 1) | 0];
              var isPrevSelected =
                prevItem !== undefined
                  ? saneValue.findIndex(function (sv) {
                      return sv === prevItem.value;
                    }) > -1
                  : false;
              var nextItem = filteredOptions[(indx + 1) | 0];
              var isNextSelected =
                nextItem !== undefined
                  ? saneValue.findIndex(function (sv) {
                      return sv === nextItem.value;
                    }) > -1
                  : false;
              var isSelected = index > -1;
              var serialNumber =
                isSelected && showSerialNumber$1
                  ? ((index + 1) | 0).toString()
                  : undefined;
              var leftVacennt =
                isDropDown$1 && textIconPresent && item.icon === /* NoIcon */ 0;
              var partial_arg = item.isDisabled || disableSelect$1;
              return React.createElement(
                "div",
                {
                  key: item.value,
                  className: "" + gapClass + " " + wrapBasis$1 + "",
                },
                React.createElement(SelectBox$ListItem, {
                  isDropDown: isDropDown$1,
                  searchString: searchString,
                  multiSelect: true,
                  optionSize: optionSize$1,
                  isSelectedStateMinus: isSelectedStateMinus$1,
                  isSelected: isSelected,
                  isPrevSelected: isPrevSelected,
                  isNextSelected: isNextSelected,
                  onClick: function (param) {
                    if (partial_arg) {
                      return;
                    }
                    var data;
                    if (saneValue.includes(valueToConsider)) {
                      var values = Core__Option.getOr(deselectDisable, false)
                        ? saneValue
                        : saneValue.filter(function (x) {
                            return x !== valueToConsider;
                          });
                      Curry._2(onItemSelect$1, param, valueToConsider);
                      data = values;
                    } else {
                      data = saneValue.concat([valueToConsider]);
                    }
                    Curry._1(onSelect, data);
                    if (onBlur !== undefined) {
                      return Curry._1(onBlur, new FocusEvent("blur"));
                    }
                  },
                  text: item.label,
                  labelValue: item.label,
                  isDisabled: item.isDisabled || disableSelect$1,
                  icon: item.icon,
                  leftVacennt: leftVacennt,
                  showToggle: showToggle$1,
                  customStyle: customStyle$1,
                  serialNumber: Caml_option.some(serialNumber),
                  isMobileView: isMobileView$1,
                  description: Caml_option.some(item.description),
                  customLabelStyle: Caml_option.some(customLabelStyle),
                  customMarginStyle: customMarginStyle$1,
                  listFlexDirection: listFlexDirection$1,
                  dataId: indx,
                  showDescriptionAsTool: showDescriptionAsTool$1,
                  optionClass: optionClass$1,
                  selectClass: selectClass$1,
                  toggleProps: toggleProps$1,
                  checkboxDimension: checkboxDimension$1,
                  iconStroke: item.iconStroke,
                }),
                optionRigthElement !== undefined
                  ? Caml_option.valFromOption(optionRigthElement)
                  : null,
              );
            }),
    ),
    hasApplyButton$1
      ? React.createElement(Button.make, {
          buttonState: applyBtnDisabled ? /* Disabled */ 2 : /* Normal */ 0,
          text: "Apply",
          buttonType: /* Primary */ 0,
          flattenTop: false,
          onClick: onClick,
          customButtonStyle: "w-full items-center",
        })
      : React.createElement(UIUtils.RenderIf.make, {
          condition:
            isDropDown$1 && noOfSelected > 0 && showSelectCountButton$1,
          children: React.createElement(Button.make, {
            text: "Select " + noOfSelected.toString() + "",
            buttonType: /* Primary */ 0,
            flattenTop: true,
            onClick: onClick,
            customButtonStyle: "w-full items-center",
          }),
        }),
  );
}

var BaseSelect = {
  make: SelectBox$BaseSelect,
};

function SelectBox$BaseSelectButton(props) {
  var showSearchIcon = props.showSearchIcon;
  var searchInputPlaceHolder = props.searchInputPlaceHolder;
  var hideAssignBtn = props.hideAssignBtn;
  var isMobileView = props.isMobileView;
  var disableSelect = props.disableSelect;
  var onAssignClick = props.onAssignClick;
  var setShowDropDown = props.setShowDropDown;
  var onBlur = props.onBlur;
  var deselectDisable = props.deselectDisable;
  var value = props.value;
  var onSelect = props.onSelect;
  var isSelectedStateMinus = props.isSelectedStateMinus;
  var optionSize = props.optionSize;
  var isHorizontal = props.isHorizontal;
  var isDropDown = props.isDropDown;
  var showDropDown = props.showDropDown;
  var showDropDown$1 = showDropDown !== undefined ? showDropDown : false;
  var isDropDown$1 = isDropDown !== undefined ? isDropDown : true;
  var isHorizontal$1 = isHorizontal !== undefined ? isHorizontal : false;
  var optionSize$1 = optionSize !== undefined ? optionSize : /* Small */ 0;
  var isSelectedStateMinus$1 =
    isSelectedStateMinus !== undefined ? isSelectedStateMinus : false;
  var deselectDisable$1 =
    deselectDisable !== undefined ? deselectDisable : false;
  var disableSelect$1 = disableSelect !== undefined ? disableSelect : false;
  var isMobileView$1 = isMobileView !== undefined ? isMobileView : false;
  var hideAssignBtn$1 = hideAssignBtn !== undefined ? hideAssignBtn : false;
  var searchInputPlaceHolder$1 =
    searchInputPlaceHolder !== undefined ? searchInputPlaceHolder : "";
  var showSearchIcon$1 = showSearchIcon !== undefined ? showSearchIcon : true;
  var options = useTransformed(props.options);
  var match = React.useState(function () {
    return "";
  });
  var setSearchString = match[1];
  var searchString = match[0];
  var match$1 = React.useState(function () {
    return "";
  });
  var setItemData = match$1[1];
  var itemdata = match$1[0];
  var match$2 = React.useState(function () {
    return false;
  });
  var setAssignButtonState = match$2[1];
  var searchRef = React.useRef(null);
  React.useEffect(
    function () {
      Core__Option.forEach(
        Caml_option.nullable_to_opt(searchRef.current),
        function (input) {
          input.focus();
        },
      );
    },
    [searchRef.current, showDropDown$1],
  );
  var handleSearch = function (str) {
    Curry._1(setSearchString, function (param) {
      return str;
    });
  };
  var searchable = isDropDown$1 && options.length > 5;
  var width = isHorizontal$1 ? "w-auto" : "w-full md:w-72";
  var inlineClass = isHorizontal$1 ? "inline-flex" : "";
  var textIconPresent = options.some(function (op) {
    return op.icon !== /* NoIcon */ 0;
  });
  var optionsOuterClass = isDropDown$1 ? "md:max-h-72 overflow-auto" : "";
  var overflowClass = isDropDown$1 ? "overflow-auto" : "";
  return React.createElement(
    "div",
    {
      className:
        "bg-white dark:bg-jp-gray-lightgray_background " +
        width +
        " " +
        overflowClass +
        " font-medium flex flex-col " +
        (showDropDown$1
          ? "animate-textTransition transition duration-400"
          : "animate-textTransitionOff transition duration-400") +
        "",
    },
    searchable
      ? React.createElement(
          "div",
          {
            className:
              "" +
              props.customSearchStyle +
              " border-b border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 ",
          },
          React.createElement(
            "div",
            {
              className: "pb-2",
            },
            React.createElement(SearchInput.make, {
              onChange: handleSearch,
              inputText: searchString,
              placeholder: LogicUtils.isEmptyString(searchInputPlaceHolder$1)
                ? "Search..."
                : searchInputPlaceHolder$1,
              searchRef: searchRef,
              showSearchIcon: showSearchIcon$1,
            }),
          ),
        )
      : null,
    React.createElement(
      "div",
      {
        className: "" + optionsOuterClass + "  " + inlineClass + "",
      },
      options.map(function (option, i) {
        var str = Core__JSON.Decode.string(value);
        var isSelected = str !== undefined ? option.value === str : false;
        var match = option.label.match(regex("\\b", searchString));
        var shouldDisplay;
        if (match !== null) {
          shouldDisplay = true;
        } else {
          var match$1 = option.label.match(regex("_", searchString));
          shouldDisplay = match$1 !== null;
        }
        var leftVacennt =
          isDropDown$1 && textIconPresent && option.icon === /* NoIcon */ 0;
        if (!shouldDisplay) {
          return null;
        }
        var partial_arg = option.value;
        return JsxPPXReactSupport.createElementWithKey(
          i.toString(),
          SelectBox$ListItem,
          {
            isDropDown: isDropDown$1,
            searchString: searchString,
            multiSelect: false,
            optionSize: optionSize$1,
            isSelectedStateMinus: isSelectedStateMinus$1,
            isSelected: isSelected,
            onClick: function (param) {
              if (disableSelect$1) {
                return;
              }
              var isSelected = Core__Option.mapOr(
                Core__JSON.Decode.string(value),
                false,
                function (str) {
                  return partial_arg === str;
                },
              );
              if (isSelected && !deselectDisable$1) {
                Curry._1(onSelect, "");
              } else {
                Curry._1(setItemData, function (param) {
                  return partial_arg;
                });
                Curry._1(onSelect, partial_arg);
              }
              Curry._1(setAssignButtonState, function (param) {
                return true;
              });
              if (onBlur !== undefined) {
                return Curry._1(onBlur, new FocusEvent("blur"));
              }
            },
            text: option.label,
            labelValue: option.label,
            icon: option.icon,
            leftVacennt: leftVacennt,
            isMobileView: isMobileView$1,
            dataId: i,
            iconStroke: option.iconStroke,
          },
        );
      }),
    ),
    hideAssignBtn$1
      ? null
      : React.createElement(
          "div",
          {
            className: "px-3 py-3",
            id: "neglectTopbarTheme",
          },
          React.createElement(Button.make, {
            buttonState: match$2[0] ? /* Normal */ 0 : /* Disabled */ 2,
            text: "Assign",
            isSelectBoxButton: isDropDown$1,
            buttonType: /* Primary */ 0,
            buttonSize: /* Small */ 2,
            onClick: function (param) {
              if (onAssignClick !== undefined) {
                Curry._1(onAssignClick, itemdata);
              }
              if (setShowDropDown !== undefined) {
                return Curry._1(setShowDropDown, function (param) {
                  return false;
                });
              }
            },
            allowButtonTextMinWidth: props.allowButtonTextMinWidth,
          }),
        ),
  );
}

var BaseSelectButton = {
  make: SelectBox$BaseSelectButton,
};

function SelectBox$RenderListItemInBaseRadio(props) {
  var customMarginStyleOfListItem = props.customMarginStyleOfListItem;
  var isHorizontal = props.isHorizontal;
  var textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var showToolTipOptions = props.showToolTipOptions;
  var textOverflowClass = props.textOverflowClass;
  var customSelectStyle = props.customSelectStyle;
  var listFlexDirection = props.listFlexDirection;
  var isMobileView = props.isMobileView;
  var customStyle = props.customStyle;
  var fill = props.fill;
  var onItemClick = props.onItemClick;
  var isSelectedStateMinus = props.isSelectedStateMinus;
  var optionSize = props.optionSize;
  var searchString = props.searchString;
  var textIconPresent = props.textIconPresent;
  var isDropDown = props.isDropDown;
  var descriptionOnHover = props.descriptionOnHover;
  var value = props.value;
  var customMarginStyleOfListItem$1 =
    customMarginStyleOfListItem !== undefined
      ? customMarginStyleOfListItem
      : "mx-3 py-2 gap-2";
  return props.newOptions.map(function (option, i) {
    var str = Core__JSON.Decode.string(value);
    var isSelected = str !== undefined ? option.value === str : false;
    var description = descriptionOnHover ? option.description : undefined;
    var leftVacennt =
      isDropDown && textIconPresent && option.icon === /* NoIcon */ 0;
    var listItemComponent = JsxPPXReactSupport.createElementWithKey(
      i.toString(),
      SelectBox$ListItem,
      {
        isDropDown: isDropDown,
        searchString: searchString,
        multiSelect: false,
        optionSize: optionSize,
        isSelectedStateMinus: isSelectedStateMinus,
        isSelected: isSelected,
        onClick: Curry._2(onItemClick, option.value, option.isDisabled),
        text: option.label,
        fill: fill,
        labelValue: option.label,
        isDisabled: option.isDisabled,
        icon: option.icon,
        leftVacennt: leftVacennt,
        customStyle: customStyle,
        isMobileView: isMobileView,
        description: Caml_option.some(description),
        customMarginStyle: customMarginStyleOfListItem$1,
        listFlexDirection: listFlexDirection,
        customSelectStyle: customSelectStyle,
        textOverflowClass: textOverflowClass,
        dataId: i,
        iconStroke: option.iconStroke,
        showToolTipOptions: showToolTipOptions,
        textEllipsisForDropDownOptions: textEllipsisForDropDownOptions,
        textColorClass: option.textColor,
      },
    );
    if (descriptionOnHover) {
      return listItemComponent;
    }
    var str$1 = option.description;
    if (str$1 !== undefined) {
      return React.createElement(
        "div",
        {
          key: i.toString(),
          className: "flex flex-row",
        },
        listItemComponent,
        React.createElement(UIUtils.RenderIf.make, {
          condition: !isHorizontal,
          children: React.createElement(ToolTip.make, {
            description: str$1,
            toolTipFor: Caml_option.some(
              React.createElement(
                "div",
                {
                  className: "py-4 px-4",
                },
                React.createElement(Icon.make, {
                  name: "info-circle",
                  size: 12,
                }),
              ),
            ),
          }),
        }),
      );
    } else {
      return listItemComponent;
    }
  });
}

var RenderListItemInBaseRadio = {
  make: SelectBox$RenderListItemInBaseRadio,
};

function getHashMappedOptionValues(options) {
  return Core__Array.reduce(options, {}, function (acc, ele) {
    if (Core__Option.isNone(acc[ele.optGroup])) {
      acc[ele.optGroup] = [ele];
    } else {
      Core__Option.getOr(acc[ele.optGroup], []).push(ele);
    }
    return acc;
  });
}

function getSortedKeys(hashMappedOptions) {
  return Object.keys(hashMappedOptions).toSorted(function (a, b) {
    if (a === "-") {
      return 1;
    } else if (b === "-") {
      return -1;
    } else {
      return Core__String.compare(a, b);
    }
  });
}

function SelectBox$BaseRadio(props) {
  var textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var showToolTipOptions = props.showToolTipOptions;
  var showSearchIcon = props.showSearchIcon;
  var searchInputPlaceHolder = props.searchInputPlaceHolder;
  var textOverflowClass = props.textOverflowClass;
  var maxHeight = props.maxHeight;
  var customSelectStyle = props.customSelectStyle;
  var baseComponentCustomStyle = props.baseComponentCustomStyle;
  var listFlexDirection = props.listFlexDirection;
  var setExtSearchString = props.setExtSearchString;
  var setSelectedString = props.setSelectedString;
  var selectedString = props.selectedString;
  var fullLength = props.fullLength;
  var showMatchingRecordsText = props.showMatchingRecordsText;
  var dropdownCustomWidth = props.dropdownCustomWidth;
  var addDynamicValue = props.addDynamicValue;
  var descriptionOnHover = props.descriptionOnHover;
  var customSearchStyle = props.customSearchStyle;
  var isMobileView = props.isMobileView;
  var searchable = props.searchable;
  var customStyle = props.customStyle;
  var fill = props.fill;
  var onBlur = props.onBlur;
  var deselectDisable = props.deselectDisable;
  var value = props.value;
  var onSelect = props.onSelect;
  var isSelectedStateMinus = props.isSelectedStateMinus;
  var optionSize = props.optionSize;
  var options = props.options;
  var isHorizontal = props.isHorizontal;
  var isDropDown = props.isDropDown;
  var showDropDown = props.showDropDown;
  var showDropDown$1 = showDropDown !== undefined ? showDropDown : false;
  var isDropDown$1 = isDropDown !== undefined ? isDropDown : true;
  var isHorizontal$1 = isHorizontal !== undefined ? isHorizontal : false;
  var optionSize$1 = optionSize !== undefined ? optionSize : /* Small */ 0;
  var isSelectedStateMinus$1 =
    isSelectedStateMinus !== undefined ? isSelectedStateMinus : false;
  var deselectDisable$1 =
    deselectDisable !== undefined ? deselectDisable : false;
  var fill$1 = fill !== undefined ? fill : "#0EB025";
  var customStyle$1 = customStyle !== undefined ? customStyle : "";
  var isMobileView$1 = isMobileView !== undefined ? isMobileView : false;
  var customSearchStyle$1 =
    customSearchStyle !== undefined
      ? customSearchStyle
      : "bg-jp-gray-100 dark:bg-jp-gray-950 p-2";
  var descriptionOnHover$1 =
    descriptionOnHover !== undefined ? descriptionOnHover : false;
  var addDynamicValue$1 =
    addDynamicValue !== undefined ? addDynamicValue : false;
  var dropdownCustomWidth$1 =
    dropdownCustomWidth !== undefined ? dropdownCustomWidth : "w-80";
  var showMatchingRecordsText$1 =
    showMatchingRecordsText !== undefined ? showMatchingRecordsText : true;
  var fullLength$1 = fullLength !== undefined ? fullLength : false;
  var selectedString$1 = selectedString !== undefined ? selectedString : "";
  var setSelectedString$1 =
    setSelectedString !== undefined ? setSelectedString : function (param) {};
  var setExtSearchString$1 =
    setExtSearchString !== undefined ? setExtSearchString : function (param) {};
  var listFlexDirection$1 =
    listFlexDirection !== undefined ? listFlexDirection : "";
  var baseComponentCustomStyle$1 =
    baseComponentCustomStyle !== undefined ? baseComponentCustomStyle : "";
  var customSelectStyle$1 =
    customSelectStyle !== undefined ? customSelectStyle : "";
  var maxHeight$1 = maxHeight !== undefined ? maxHeight : "md:max-h-72";
  var searchInputPlaceHolder$1 =
    searchInputPlaceHolder !== undefined ? searchInputPlaceHolder : "";
  var showSearchIcon$1 = showSearchIcon !== undefined ? showSearchIcon : true;
  var showToolTipOptions$1 =
    showToolTipOptions !== undefined ? showToolTipOptions : false;
  var textEllipsisForDropDownOptions$1 =
    textEllipsisForDropDownOptions !== undefined
      ? textEllipsisForDropDownOptions
      : false;
  var options$1 = React.useMemo(
    function () {
      return options.map(makeNonOptional);
    },
    [options],
  );
  var hashMappedOptions = getHashMappedOptionValues(options$1);
  var isNonGrouped =
    Core__Option.getOr(hashMappedOptions["-"], []).length === options$1.length;
  var match = React.useState(function () {
    return getSortedKeys(hashMappedOptions);
  });
  var setOptgroupKeys = match[1];
  var match$1 = React.useState(function () {
    return "";
  });
  var setSearchString = match$1[1];
  var searchString = match$1[0];
  React.useEffect(
    function () {
      Curry._1(setExtSearchString$1, function (param) {
        return searchString;
      });
    },
    [searchString],
  );
  OutsideClick.useOutsideClick(
    {
      TAG: /* ArrayOfRef */ 0,
      _0: [Core__Option.getOr(props.dropdownRef, React.useRef(null))],
    },
    undefined,
    showDropDown$1,
    undefined,
    function (param) {
      Curry._1(setSearchString, function (param) {
        return "";
      });
    },
    undefined,
  );
  var onItemClick = function (itemData, isDisabled, _ev) {
    if (isDisabled) {
      return;
    }
    var isSelected = Core__Option.mapOr(
      Core__JSON.Decode.string(value),
      false,
      function (str) {
        return itemData === str;
      },
    );
    if (isSelected && !deselectDisable$1) {
      Curry._1(setSelectedString$1, function (param) {
        return "";
      });
      Curry._1(onSelect, "");
    } else {
      if (
        addDynamicValue$1 &&
        !options$1
          .map(function (item) {
            return item.value;
          })
          .includes(itemData)
      ) {
        Curry._1(setSelectedString$1, function (param) {
          return itemData;
        });
      } else if (LogicUtils.isNonEmptyString(selectedString$1)) {
        Curry._1(setSelectedString$1, function (param) {
          return "";
        });
      }
      Curry._1(onSelect, itemData);
    }
    Curry._1(setSearchString, function (param) {
      return "";
    });
    if (onBlur !== undefined) {
      return Curry._1(onBlur, new FocusEvent("blur"));
    }
  };
  var handleSearch = function (str) {
    Curry._1(setSearchString, function (param) {
      return str;
    });
  };
  var isSearchable =
    isDropDown$1 &&
    (searchable !== undefined ? searchable : options$1.length > 5);
  var widthClass =
    isMobileView$1 || !isSearchable
      ? "w-auto"
      : fullLength$1
        ? "w-full"
        : dropdownCustomWidth$1;
  var searchRef = React.useRef(null);
  var width =
    isHorizontal$1 || !isDropDown$1 || LogicUtils.isEmptyString(customStyle$1)
      ? widthClass
      : customStyle$1;
  var inlineClass = isHorizontal$1 ? "inline-flex" : "";
  var textIconPresent = options$1.some(function (op) {
    return op.icon !== /* NoIcon */ 0;
  });
  React.useEffect(
    function () {
      Core__Option.forEach(
        Caml_option.nullable_to_opt(searchRef.current),
        function (input) {
          input.focus();
        },
      );
    },
    [searchRef.current, showDropDown$1],
  );
  var dropDownbgClass = isDropDown$1 ? "bg-white" : "";
  var newOptions = React.useMemo(
    function () {
      var options$2 = LogicUtils.isNonEmptyString(selectedString$1)
        ? options$1.concat(makeOptions([selectedString$1]).map(makeNonOptional))
        : options$1;
      if (searchString.length !== 0) {
        var options$3 = options$2.filter(function (option) {
          var match = option.label.match(regex("\\b", searchString));
          if (match !== null) {
            return true;
          }
          var match$1 = option.label.match(regex("_", searchString));
          return match$1 !== null;
        });
        if (
          addDynamicValue$1 &&
          !options$3
            .map(function (item) {
              return item.value;
            })
            .includes(searchString)
        ) {
          if (isNonGrouped) {
            return options$3.concat(
              makeOptions([searchString]).map(makeNonOptional),
            );
          } else {
            return options$3;
          }
        }
        var hashMappedSearchedOptions = getHashMappedOptionValues(options$3);
        var optgroupKeysForSearch = getSortedKeys(hashMappedSearchedOptions);
        Curry._1(setOptgroupKeys, function (param) {
          return optgroupKeysForSearch;
        });
        return options$3;
      }
      Curry._1(setOptgroupKeys, function (param) {
        return getSortedKeys(hashMappedOptions);
      });
      return options$2;
    },
    [searchString, options$1, selectedString$1],
  );
  var overflowClass = isDropDown$1 ? "overflow-auto" : "";
  var searchInputUI = React.createElement(
    "div",
    {
      className:
        "" +
        customSearchStyle$1 +
        " border-b border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 ",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(SearchInput.make, {
        onChange: handleSearch,
        inputText: searchString,
        placeholder: LogicUtils.isEmptyString(searchInputPlaceHolder$1)
          ? "Search..."
          : searchInputPlaceHolder$1,
        searchRef: searchRef,
        showSearchIcon: showSearchIcon$1,
      }),
    ),
  );
  return React.createElement(
    "div",
    {
      className:
        "" +
        dropDownbgClass +
        "  dark:bg-jp-gray-lightgray_background " +
        width +
        " " +
        overflowClass +
        " font-medium flex flex-col " +
        (showDropDown$1
          ? "animate-textTransition transition duration-400"
          : "animate-textTransitionOff transition duration-400") +
        "",
    },
    searchable !== undefined
      ? React.createElement(UIUtils.RenderIf.make, {
          condition: searchable,
          children: searchInputUI,
        })
      : React.createElement(UIUtils.RenderIf.make, {
          condition:
            isDropDown$1 && (options$1.length > 5 || addDynamicValue$1),
          children: searchInputUI,
        }),
    React.createElement(
      "div",
      {
        className:
          "" +
          maxHeight$1 +
          "  " +
          overflowClass +
          " text-fs-13 font-semibold text-jp-gray-900 text-opacity-75 dark:text-jp-gray-text_darktheme dark:text-opacity-75 " +
          inlineClass +
          " " +
          baseComponentCustomStyle$1 +
          "",
      },
      newOptions.length === 0 && showMatchingRecordsText$1
        ? React.createElement(
            "div",
            {
              className: "flex justify-center items-center m-4",
            },
            "No matching records found",
          )
        : isNonGrouped
          ? React.createElement(SelectBox$RenderListItemInBaseRadio, {
              newOptions: newOptions,
              value: value,
              descriptionOnHover: descriptionOnHover$1,
              isDropDown: isDropDown$1,
              textIconPresent: textIconPresent,
              searchString: searchString,
              optionSize: optionSize$1,
              isSelectedStateMinus: isSelectedStateMinus$1,
              onItemClick: onItemClick,
              fill: fill$1,
              customStyle: customStyle$1,
              isMobileView: isMobileView$1,
              listFlexDirection: listFlexDirection$1,
              customSelectStyle: customSelectStyle$1,
              textOverflowClass: textOverflowClass,
              showToolTipOptions: showToolTipOptions$1,
              textEllipsisForDropDownOptions: textEllipsisForDropDownOptions$1,
              isHorizontal: isHorizontal$1,
            })
          : match[0].map(function (ele, index) {
              return JsxPPXReactSupport.createElementVariadicWithKey(
                index.toString(),
                React.Fragment,
                {
                  children: null,
                },
                [
                  React.createElement(
                    "h2",
                    {
                      className: "p-3 font-bold",
                    },
                    ele,
                  ),
                  React.createElement(SelectBox$RenderListItemInBaseRadio, {
                    newOptions: Core__Option.getOr(
                      getHashMappedOptionValues(newOptions)[ele],
                      [],
                    ),
                    value: value,
                    descriptionOnHover: descriptionOnHover$1,
                    isDropDown: isDropDown$1,
                    textIconPresent: textIconPresent,
                    searchString: searchString,
                    optionSize: optionSize$1,
                    isSelectedStateMinus: isSelectedStateMinus$1,
                    onItemClick: onItemClick,
                    fill: fill$1,
                    customStyle: customStyle$1,
                    isMobileView: isMobileView$1,
                    listFlexDirection: listFlexDirection$1,
                    customSelectStyle: customSelectStyle$1,
                    textOverflowClass: textOverflowClass,
                    showToolTipOptions: showToolTipOptions$1,
                    textEllipsisForDropDownOptions:
                      textEllipsisForDropDownOptions$1,
                    isHorizontal: isHorizontal$1,
                    customMarginStyleOfListItem: "ml-8 mx-3 py-2 gap-2",
                  }),
                ],
              );
            }),
    ),
  );
}

var BaseRadio = {
  make: SelectBox$BaseRadio,
};

function SelectBox$BaseDropdown(props) {
  var showSearchIcon = props.showSearchIcon;
  var searchInputPlaceHolder = props.searchInputPlaceHolder;
  var dropdownClassName = props.dropdownClassName;
  var showBtnTextToolTip = props.showBtnTextToolTip;
  var textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var showToolTipOptions = props.showToolTipOptions;
  var showSelectCountButton = props.showSelectCountButton;
  var buttonClickFn = props.buttonClickFn;
  var showAllSelectedOptions = props.showAllSelectedOptions;
  var onApply = props.onApply;
  var isPhoneDropdown = props.isPhoneDropdown;
  var ellipsisOnly = props.ellipsisOnly;
  var listFlexDirection = props.listFlexDirection;
  var setExtSearchString = props.setExtSearchString;
  var setSelectedString = props.setSelectedString;
  var selectedString = props.selectedString;
  var buttonStyleOnDropDownOpened = props.buttonStyleOnDropDownOpened;
  var dropdownCustomWidth = props.dropdownCustomWidth;
  var hasApplyButton = props.hasApplyButton;
  var showMatchingRecordsText = props.showMatchingRecordsText;
  var addDynamicValue = props.addDynamicValue;
  var descriptionOnHover = props.descriptionOnHover;
  var customButton = props.customButton;
  var showCustomBtnAtEnd = props.showCustomBtnAtEnd;
  var dropDownCustomBtnClick = props.dropDownCustomBtnClick;
  var searchable = props.searchable;
  var showNameAsToolTip = props.showNameAsToolTip;
  var showToolTip = props.showToolTip;
  var showSelectionAsChips = props.showSelectionAsChips;
  var customSearchStyle = props.customSearchStyle;
  var customStyle = props.customStyle;
  var marginTop = props.marginTop;
  var addButton = props.addButton;
  var fixedDropDownDirection = props.fixedDropDownDirection;
  var customButtonStyle = props.customButtonStyle;
  var fullLength = props.fullLength;
  var autoApply = props.autoApply;
  var defaultLeftIcon = props.defaultLeftIcon;
  var disableSelect = props.disableSelect;
  var baseComponentMethod = props.baseComponentMethod;
  var baseComponent = props.baseComponent;
  var buttonType = props.buttonType;
  var deselectDisable = props.deselectDisable;
  var isSelectedStateMinus = props.isSelectedStateMinus;
  var optionSize = props.optionSize;
  var options = props.options;
  var showSelectAll = props.showSelectAll;
  var showClearAll = props.showClearAll;
  var input = props.input;
  var allowMultiSelect = props.allowMultiSelect;
  var buttonSize = props.buttonSize;
  var buttonText = props.buttonText;
  var buttonSize$1 = buttonSize !== undefined ? buttonSize : /* Small */ 2;
  var showClearAll$1 = showClearAll !== undefined ? showClearAll : true;
  var showSelectAll$1 = showSelectAll !== undefined ? showSelectAll : true;
  var optionSize$1 = optionSize !== undefined ? optionSize : /* Small */ 0;
  var isSelectedStateMinus$1 =
    isSelectedStateMinus !== undefined ? isSelectedStateMinus : false;
  var buttonType$1 =
    buttonType !== undefined ? buttonType : /* SecondaryFilled */ 3;
  var disableSelect$1 = disableSelect !== undefined ? disableSelect : false;
  var defaultLeftIcon$1 =
    defaultLeftIcon !== undefined ? defaultLeftIcon : /* NoIcon */ 0;
  var autoApply$1 = autoApply !== undefined ? autoApply : true;
  var fullLength$1 = fullLength !== undefined ? fullLength : false;
  var customButtonStyle$1 =
    customButtonStyle !== undefined ? customButtonStyle : "";
  var addButton$1 = addButton !== undefined ? addButton : false;
  var marginTop$1 = marginTop !== undefined ? marginTop : "mt-12";
  var customStyle$1 = customStyle !== undefined ? customStyle : "";
  var customSearchStyle$1 =
    customSearchStyle !== undefined
      ? customSearchStyle
      : "bg-jp-gray-100 dark:bg-jp-gray-950 p-2";
  var showSelectionAsChips$1 =
    showSelectionAsChips !== undefined ? showSelectionAsChips : true;
  var showToolTip$1 = showToolTip !== undefined ? showToolTip : false;
  var showNameAsToolTip$1 =
    showNameAsToolTip !== undefined ? showNameAsToolTip : false;
  var dropDownCustomBtnClick$1 =
    dropDownCustomBtnClick !== undefined ? dropDownCustomBtnClick : false;
  var showCustomBtnAtEnd$1 =
    showCustomBtnAtEnd !== undefined ? showCustomBtnAtEnd : false;
  var customButton$1 =
    customButton !== undefined ? Caml_option.valFromOption(customButton) : null;
  var descriptionOnHover$1 =
    descriptionOnHover !== undefined ? descriptionOnHover : false;
  var addDynamicValue$1 =
    addDynamicValue !== undefined ? addDynamicValue : false;
  var showMatchingRecordsText$1 =
    showMatchingRecordsText !== undefined ? showMatchingRecordsText : true;
  var hasApplyButton$1 = hasApplyButton !== undefined ? hasApplyButton : false;
  var buttonStyleOnDropDownOpened$1 =
    buttonStyleOnDropDownOpened !== undefined
      ? buttonStyleOnDropDownOpened
      : "";
  var selectedString$1 = selectedString !== undefined ? selectedString : "";
  var setSelectedString$1 =
    setSelectedString !== undefined ? setSelectedString : function (param) {};
  var setExtSearchString$1 =
    setExtSearchString !== undefined ? setExtSearchString : function (param) {};
  var listFlexDirection$1 =
    listFlexDirection !== undefined ? listFlexDirection : "";
  var ellipsisOnly$1 = ellipsisOnly !== undefined ? ellipsisOnly : false;
  var isPhoneDropdown$1 =
    isPhoneDropdown !== undefined ? isPhoneDropdown : false;
  var showAllSelectedOptions$1 =
    showAllSelectedOptions !== undefined ? showAllSelectedOptions : true;
  var showSelectCountButton$1 =
    showSelectCountButton !== undefined ? showSelectCountButton : false;
  var showToolTipOptions$1 =
    showToolTipOptions !== undefined ? showToolTipOptions : false;
  var textEllipsisForDropDownOptions$1 =
    textEllipsisForDropDownOptions !== undefined
      ? textEllipsisForDropDownOptions
      : false;
  var showBtnTextToolTip$1 =
    showBtnTextToolTip !== undefined ? showBtnTextToolTip : false;
  var dropdownClassName$1 =
    dropdownClassName !== undefined ? dropdownClassName : "";
  var searchInputPlaceHolder$1 =
    searchInputPlaceHolder !== undefined ? searchInputPlaceHolder : "";
  var showSearchIcon$1 = showSearchIcon !== undefined ? showSearchIcon : true;
  var transformedOptions = useTransformed(options);
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var isSelectTextDark = React.useContext(
    DropdownTextWeighContextWrapper.selectedTextWeightContext,
  );
  var isFilterSection = React.useContext(
    TableFilterSectionContext.filterSectionContext,
  );
  var showBorder = isFilterSection && !isMobileView ? false : props.showBorder;
  var dropdownOuterClass =
    "border border-jp-gray-lightmode_steelgray border-opacity-75 dark:border-jp-gray-960 rounded  shadow-generic_shadow dark:shadow-generic_shadow_dark";
  var isMobileView$1 = MatchMedia.useMobileChecker(undefined);
  var match = React.useState(function () {
    return false;
  });
  var setShowDropDown = match[1];
  var showDropDown = match[0];
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsGrowDown = match$1[1];
  var isGrowDown = match$1[0];
  var match$2 = React.useState(function () {
    return true;
  });
  var setIsInitialRender = match$2[1];
  var isInitialRender = match$2[0];
  var selectBoxRef = React.useRef(null);
  var dropdownRef = React.useRef(null);
  var selectBtnRef = React.useRef(null);
  var match$3 = React.useState(function () {
    return LogicUtils.getStrArryFromJson(input.value);
  });
  var setPreservedAppliedOptions = match$3[1];
  var preservedAppliedOptions = match$3[0];
  var onApply$1 = function (ev) {
    if (onApply !== undefined) {
      Curry._1(onApply, ev);
    }
    Curry._1(setPreservedAppliedOptions, function (param) {
      return LogicUtils.getStrArryFromJson(input.value);
    });
  };
  var clearBtnRef = React.useRef(null);
  var insertselectBtnRef = function (element) {
    if (!(element == null)) {
      selectBtnRef.current = element;
      return;
    }
  };
  React.useEffect(
    function () {
      Curry._1(setShowDropDown, function (param) {
        return false;
      });
    },
    [dropDownCustomBtnClick$1],
  );
  var insertclearBtnRef = function (element) {
    if (!(element == null)) {
      clearBtnRef.current = element;
      return;
    }
  };
  var refs = autoApply$1
    ? [selectBoxRef, dropdownRef]
    : [selectBoxRef, dropdownRef, selectBtnRef, clearBtnRef];
  OutsideClick.useOutsideClick(
    {
      TAG: /* ArrayOfRef */ 0,
      _0: refs,
    },
    undefined,
    showDropDown,
    undefined,
    function (param) {
      Curry._1(setShowDropDown, function (param) {
        return false;
      });
      if (hasApplyButton$1) {
        return Curry._1(input.onChange, preservedAppliedOptions);
      }
    },
    undefined,
  );
  var onClick = function (param) {
    if (buttonClickFn !== undefined) {
      Curry._1(buttonClickFn, input.name);
    }
    Curry._1(setShowDropDown, function (param) {
      return !showDropDown;
    });
    Curry._1(setIsGrowDown, function (param) {
      return true;
    });
    setTimeout(function (param) {
      Curry._1(setIsGrowDown, function (param) {
        return false;
      });
    }, 250);
    if (isInitialRender) {
      return Curry._1(setIsInitialRender, function (param) {
        return false;
      });
    }
  };
  var match$4;
  if (allowMultiSelect) {
    match$4 = [buttonText, defaultLeftIcon$1, ""];
  } else {
    var str = Core__JSON.Decode.string(input.value);
    if (str !== undefined) {
      var x = transformedOptions.find(function (x) {
        return x.value === str;
      });
      match$4 =
        x !== undefined
          ? [x.label, x.icon, x.iconStroke]
          : [buttonText, defaultLeftIcon$1, ""];
    } else {
      match$4 = [buttonText, defaultLeftIcon$1, ""];
    }
  }
  var dropDirection = React.useMemo(
    function () {
      if (fixedDropDownDirection !== undefined) {
        return fixedDropDownDirection;
      } else {
        return Core__Option.getOr(
          Core__Option.flatMap(
            Core__Option.flatMap(
              Caml_option.nullable_to_opt(selectBoxRef.current),
              function (elem) {
                return elem.getClientRects()["0"];
              },
            ),
            function (firstEl) {
              var bottomVacent =
                ((window.innerHeight - (firstEl.bottom | 0)) | 0) > 375;
              var topVacent = (firstEl.top | 0) > 470;
              var rightVacent =
                ((window.innerWidth - (firstEl.left | 0)) | 0) > 270;
              var leftVacent = (firstEl.right | 0) > 270;
              return bottomVacent
                ? rightVacent
                  ? /* BottomRight */ 2
                  : leftVacent
                    ? /* BottomLeft */ 0
                    : /* BottomMiddle */ 1
                : topVacent
                  ? rightVacent
                    ? /* TopRight */ 5
                    : leftVacent
                      ? /* TopLeft */ 3
                      : /* TopMiddle */ 4
                  : rightVacent
                    ? /* BottomRight */ 2
                    : leftVacent
                      ? /* BottomLeft */ 0
                      : /* BottomMiddle */ 1;
            },
          ),
          /* BottomMiddle */ 1,
        );
      }
    },
    [showDropDown],
  );
  var flexWrapper;
  switch (dropDirection) {
    case /* BottomLeft */ 0:
      flexWrapper = "flex-row-reverse flex-wrap";
      break;
    case /* BottomMiddle */ 1:
      flexWrapper = "flex-row flex-wrap justify-center";
      break;
    case /* BottomRight */ 2:
      flexWrapper = "flex-row flex-wrap";
      break;
    case /* TopLeft */ 3:
      flexWrapper = "flex-row-reverse flex-wrap-reverse";
      break;
    case /* TopMiddle */ 4:
      flexWrapper = "flex-row flex-wrap-reverse justify-center";
      break;
    case /* TopRight */ 5:
      flexWrapper = "flex-row flex-wrap-reverse";
      break;
  }
  var marginBottom = dropDirection !== 3 && dropDirection < 5 ? "" : "mb-12";
  var onRadioOptionSelect = function (_ev) {
    Curry._1(input.onChange, _ev);
    if (addButton$1) {
      return Curry._1(setShowDropDown, function (param) {
        return true;
      });
    } else {
      return Curry._1(setShowDropDown, function (param) {
        return false;
      });
    }
  };
  var allSellectedOptions = React.useMemo(
    function () {
      return Core__Option.getOr(
        LogicUtils.getNonEmptyString(
          Belt_Array.keepMap(
            Belt_Array.keepMap(
              Core__Option.getOr(Core__JSON.Decode.array(input.value), []),
              Core__JSON.Decode.string,
            ),
            function (str) {
              return Core__Option.map(
                transformedOptions.find(function (x) {
                  return x.value === str;
                }),
                function (x) {
                  return x.label;
                },
              );
            },
          ).join(", "),
        ),
        buttonText,
      );
    },
    [transformedOptions, input.value],
  );
  var title = showAllSelectedOptions$1 ? allSellectedOptions : buttonText;
  var badgeForSelect = React.useMemo(
    function () {
      var count = Core__Option.getOr(
        Core__JSON.Decode.array(input.value),
        [],
      ).length;
      var condition = count > 1;
      return {
        value: count.toString(),
        color: condition ? /* BadgeBlue */ 2 : /* NoBadge */ 8,
      };
    },
    [input.value],
  );
  var widthClass = isMobileView$1
    ? "w-full"
    : Core__Option.getOr(dropdownCustomWidth, "");
  var optionsElement = allowMultiSelect
    ? React.createElement(SelectBox$BaseSelect, {
        showSelectAll: showSelectAll$1,
        showDropDown: showDropDown,
        isDropDown: true,
        options: options,
        optionSize: optionSize$1,
        onSelect: input.onChange,
        value: input.value,
        onBlur: input.onBlur,
        showClearAll: showClearAll$1,
        insertselectBtnRef: insertselectBtnRef,
        insertclearBtnRef: insertclearBtnRef,
        showSelectionAsChips: showSelectionAsChips$1,
        maxHeight: props.maxHeight,
        searchable: searchable,
        searchInputPlaceHolder: searchInputPlaceHolder$1,
        showSearchIcon: showSearchIcon$1,
        customStyle: customStyle$1,
        disableSelect: disableSelect$1,
        deselectDisable: deselectDisable,
        isMobileView: isMobileView$1,
        hasApplyButton: hasApplyButton$1,
        setShowDropDown: setShowDropDown,
        dropdownCustomWidth: dropdownCustomWidth,
        sortingBasedOnDisabled: props.sortingBasedOnDisabled,
        customMarginStyle: props.customMarginStyle,
        listFlexDirection: listFlexDirection$1,
        onApply: onApply$1,
        showSelectCountButton: showSelectCountButton$1,
        dropdownClassName: dropdownClassName$1,
        preservedAppliedOptions: preservedAppliedOptions,
      })
    : addButton$1
      ? React.createElement(SelectBox$BaseSelectButton, {
          showDropDown: showDropDown,
          isDropDown: true,
          isHorizontal: false,
          options: options,
          optionSize: optionSize$1,
          isSelectedStateMinus: isSelectedStateMinus$1,
          onSelect: onRadioOptionSelect,
          value: input.value,
          deselectDisable: deselectDisable,
          onBlur: input.onBlur,
          setShowDropDown: setShowDropDown,
          onAssignClick: props.onAssignClick,
          customSearchStyle: customSearchStyle$1,
          disableSelect: disableSelect$1,
          isMobileView: isMobileView$1,
          hideAssignBtn: true,
          searchInputPlaceHolder: searchInputPlaceHolder$1,
          showSearchIcon: showSearchIcon$1,
        })
      : React.createElement(SelectBox$BaseRadio, {
          showDropDown: showDropDown,
          isDropDown: true,
          isHorizontal: false,
          options: options,
          optionSize: optionSize$1,
          isSelectedStateMinus: isSelectedStateMinus$1,
          onSelect: onRadioOptionSelect,
          value: input.value,
          deselectDisable: deselectDisable,
          onBlur: input.onBlur,
          customStyle: customStyle$1,
          searchable: searchable,
          isMobileView: isMobileView$1,
          descriptionOnHover: descriptionOnHover$1,
          addDynamicValue: addDynamicValue$1,
          dropdownCustomWidth: dropdownCustomWidth,
          dropdownRef: dropdownRef,
          showMatchingRecordsText: showMatchingRecordsText$1,
          fullLength: fullLength$1,
          selectedString: selectedString$1,
          setSelectedString: setSelectedString$1,
          setExtSearchString: setExtSearchString$1,
          listFlexDirection: listFlexDirection$1,
          searchInputPlaceHolder: searchInputPlaceHolder$1,
          showSearchIcon: showSearchIcon$1,
          showToolTipOptions: showToolTipOptions$1,
          textEllipsisForDropDownOptions: textEllipsisForDropDownOptions$1,
        });
  var selectButtonText = showSelectionAsChips$1
    ? LogicUtils.isNonEmptyString(selectedString$1)
      ? selectedString$1
      : match$4[0]
    : title;
  var buttonIcon = React.createElement(Icon.make, {
    name: "angle-down",
    size: 14,
    className:
      "transition duration-[250ms] ease-out-[cubic-bezier(0.33, 1, 0.68, 1)] " +
      (showDropDown ? "-rotate-180" : "") +
      "",
  });
  var textStyle =
    isSelectTextDark && selectButtonText !== buttonText
      ? "text-black dark:text-white"
      : props.textStyle;
  var tmp;
  if (baseComponent !== undefined) {
    tmp = React.createElement(
      "span",
      {
        onClick: onClick,
      },
      Caml_option.valFromOption(baseComponent),
    );
  } else if (baseComponentMethod !== undefined) {
    tmp = React.createElement(
      "span",
      {
        onClick: onClick,
      },
      Curry._1(baseComponentMethod, showDropDown),
    );
  } else if (buttonType$1 !== 7) {
    var selectButton = React.createElement(AddDataAttributes.make, {
      attributes: [["data-dropdown-for", buttonText]],
      children: React.createElement(
        "div",
        undefined,
        React.createElement(Button.make, {
          buttonState: disableSelect$1 ? /* Disabled */ 2 : /* Normal */ 0,
          text: selectButtonText,
          isSelectBoxButton: true,
          buttonType: /* Dropdown */ 12,
          isDropdownOpen: showDropDown,
          buttonSize: buttonSize$1,
          leftIcon: match$4[1],
          rightIcon: {
            TAG: /* CustomIcon */ 1,
            _0: buttonIcon,
          },
          showBorder: showBorder,
          onClick: onClick,
          textStyle: textStyle,
          iconBorderColor: match$4[2],
          fullLength: fullLength$1,
          customButtonStyle:
            "" +
            customButtonStyle$1 +
            " " +
            (showDropDown ? buttonStyleOnDropDownOpened$1 : "") +
            " transition duration-[250ms] ease-out-[cubic-bezier(0.33, 1, 0.68, 1)]",
          textStyleClass: props.textStyleClass,
          allowButtonTextMinWidth: props.allowButtonTextMinWidth,
          badge: showSelectionAsChips$1
            ? {
                value: (0).toString(),
                color: /* NoBadge */ 8,
              }
            : badgeForSelect,
          ellipsisOnly: ellipsisOnly$1 || !showSelectionAsChips$1,
          isPhoneDropdown: isPhoneDropdown$1,
          showBtnTextToolTip: showBtnTextToolTip$1,
        }),
      ),
    });
    tmp =
      showToolTip$1 &&
      input.value !== "" &&
      !showDropDown &&
      showNameAsToolTip$1
        ? React.createElement(ToolTip.make, {
            description: showNameAsToolTip$1
              ? "Select " + LogicUtils.snakeToTitle(input.name) + ""
              : LogicUtils.getStrArryFromJson(input.value).join(",\n"),
            toolTipFor: Caml_option.some(selectButton),
            tooltipWidthClass: "",
            toolTipPosition: /* Bottom */ 1,
          })
        : selectButton;
  } else {
    tmp = React.createElement(Button.make, {
      buttonState: disableSelect$1 ? /* Disabled */ 2 : /* Normal */ 0,
      text: buttonText,
      isSelectBoxButton: true,
      buttonType: buttonType$1,
      buttonSize: buttonSize$1,
      leftIcon: Core__Option.getOr(props.customButtonLeftIcon, {
        TAG: /* FontAwesome */ 0,
        _0: "plus",
      }),
      showBorder: showBorder,
      onClick: onClick,
      textStyle: textStyle,
      customIconMargin: props.customButtonIconMargin,
      textWeight: props.buttonTextWeight,
      fullLength: fullLength$1,
      customButtonStyle: customButtonStyle$1,
      customTextPaddingClass: props.customTextPaddingClass,
      customPaddingClass: props.customButtonPaddingClass,
      customBackColor: props.customBackColor,
    });
  }
  var tmp$1;
  if (
    allowMultiSelect &&
    !props.hideMultiSelectButtons &&
    showSelectionAsChips$1
  ) {
    var jsonArr = Core__JSON.Decode.array(input.value);
    tmp$1 =
      jsonArr !== undefined
        ? LogicUtils.getStrArrayFromJsonArray(jsonArr).map(function (str, i) {
            var actualValueIndex = options
              .map(function (x) {
                return x.value;
              })
              .findIndex(function (item) {
                return item === str;
              });
            if (actualValueIndex === -1) {
              return null;
            }
            var ele = options[actualValueIndex];
            var match =
              ele !== undefined
                ? [ele.label, Core__Option.getOr(ele.icon, /* NoIcon */ 0)]
                : ["", /* NoIcon */ 0];
            return React.createElement(
              "div",
              {
                key: i.toString(),
                className: "m-2",
              },
              React.createElement(Button.make, {
                buttonFor: buttonText,
                text: match[0],
                isSelectBoxButton: true,
                buttonSize: /* Small */ 2,
                leftIcon: match[1],
                rightIcon: {
                  TAG: /* FontAwesome */ 0,
                  _0: "times",
                },
                onClick: function (param) {
                  var str$1 = transformedOptions.find(function (option) {
                    return option.value === str;
                  });
                  var actualValue = str$1 !== undefined ? str$1.value : "";
                  var jsonArr = Core__JSON.Decode.array(input.value);
                  return Curry._1(
                    input.onChange,
                    jsonArr !== undefined
                      ? LogicUtils.getStrArrayFromJsonArray(jsonArr).filter(
                          function (str) {
                            return str !== actualValue;
                          },
                        )
                      : [],
                  );
                },
              }),
            );
          })
        : null;
  } else {
    tmp$1 = null;
  }
  return React.createElement(
    "div",
    {
      className: "flex relative  flex-row  flex-wrap",
    },
    React.createElement(
      "div",
      {
        className:
          "flex relative " +
          flexWrapper +
          " " +
          (fullLength$1 ? "w-full" : "") +
          "",
      },
      React.createElement(
        "div",
        {
          ref: Caml_option.some(selectBoxRef),
          className: "text-opacity-50 " + (fullLength$1 ? "w-full" : "") + "",
        },
        tmp,
      ),
      showDropDown
        ? isMobileView$1
          ? React.createElement(BottomModal.make, {
              onCloseClick: onClick,
              children: optionsElement,
              headerText: buttonText,
            })
          : React.createElement(AddDataAttributes.make, {
              attributes: [["data-dropdown", "dropdown"]],
              children: React.createElement(
                "div",
                {
                  ref: Caml_option.some(dropdownRef),
                  className:
                    "" +
                    marginTop$1 +
                    " absolute " +
                    (isGrowDown ? "animate-growDown" : "") +
                    " " +
                    (dropDirection === /* BottomLeft */ 0 ||
                    dropDirection === /* BottomMiddle */ 1 ||
                    dropDirection === /* BottomRight */ 2
                      ? "origin-top"
                      : "origin-bottom") +
                    " " +
                    dropdownOuterClass +
                    " z-20 " +
                    marginBottom +
                    " bg-gray-50 dark:bg-jp-gray-950 " +
                    (fullLength$1 ? "w-full" : "") +
                    "",
                },
                optionsElement,
                showCustomBtnAtEnd$1 ? customButton$1 : null,
              ),
            })
        : !isInitialRender && isGrowDown && !isMobileView$1
          ? React.createElement(
              "div",
              {
                ref: Caml_option.some(dropdownRef),
                className:
                  "" +
                  marginTop$1 +
                  " absolute animate-growUp " +
                  widthClass +
                  " " +
                  (dropDirection === /* BottomLeft */ 0 ||
                  dropDirection === /* BottomMiddle */ 1 ||
                  dropDirection === /* BottomRight */ 2
                    ? "origin-top"
                    : "origin-bottom") +
                  " " +
                  dropdownOuterClass +
                  " z-20 " +
                  marginBottom +
                  " bg-gray-50 dark:bg-jp-gray-950",
              },
              optionsElement,
            )
          : null,
    ),
    tmp$1,
  );
}

var BaseDropdown = {
  make: SelectBox$BaseDropdown,
};

function SelectBox$InfraSelectBox(props) {
  var showTickMark = props.showTickMark;
  var nonSelectedClass = props.nonSelectedClass;
  var selectedClass = props.selectedClass;
  var borderRadius = props.borderRadius;
  var allowMultiSelect = props.allowMultiSelect;
  var deselectDisable = props.deselectDisable;
  var input = props.input;
  var deselectDisable$1 =
    deselectDisable !== undefined ? deselectDisable : false;
  var allowMultiSelect$1 =
    allowMultiSelect !== undefined ? allowMultiSelect : true;
  var borderRadius$1 =
    borderRadius !== undefined ? borderRadius : "rounded-full";
  var selectedClass$1 =
    selectedClass !== undefined
      ? selectedClass
      : "border-jp-gray-600 dark:border-jp-gray-800 text-jp-gray-850 dark:text-jp-gray-400";
  var nonSelectedClass$1 =
    nonSelectedClass !== undefined
      ? nonSelectedClass
      : "border-jp-gray-900 dark:border-jp-gray-300 text-jp-gray-900 dark:text-jp-gray-300 font-semibold";
  var showTickMark$1 = showTickMark !== undefined ? showTickMark : true;
  var transformedOptions = useTransformed(props.options);
  var values = input.value;
  var saneValue = React.useMemo(
    function () {
      var jsonArr = Core__JSON.Decode.array(values);
      if (jsonArr !== undefined) {
        return LogicUtils.getStrArrayFromJsonArray(jsonArr);
      } else {
        return [];
      }
    },
    [values],
  );
  return React.createElement(
    "div",
    {
      className:
        "md:max-h-72 overflow-auto font-medium flex flex-wrap gap-y-4 gap-x-2.5",
    },
    transformedOptions.map(function (option, i) {
      var isSelected = saneValue.includes(option.value);
      var selectedClass$2 = isSelected ? selectedClass$1 : nonSelectedClass$1;
      return React.createElement(
        "div",
        {
          key: i.toString(),
          className:
            "px-4 py-1 border " +
            borderRadius$1 +
            " flex flex-row gap-2 items-center cursor-pointer " +
            selectedClass$2 +
            "",
          onClick: function (param) {
            var itemDataValue = option.value;
            var isDisabled = option.isDisabled;
            if (!isDisabled) {
              if (allowMultiSelect$1) {
                return Curry._1(
                  input.onChange,
                  saneValue.includes(itemDataValue)
                    ? deselectDisable$1
                      ? saneValue
                      : saneValue.filter(function (x) {
                          return x !== itemDataValue;
                        })
                    : saneValue.concat([itemDataValue]),
                );
              } else {
                return Curry._1(input.onChange, [itemDataValue]);
              }
            }
          },
        },
        isSelected && showTickMark$1
          ? React.createElement(Icon.make, {
              name: "check",
              size: 12,
              className:
                "align-middle font-thin text-jp-gray-900 dark:text-jp-gray-300",
            })
          : null,
        option.label,
      );
    }),
  );
}

var InfraSelectBox = {
  make: SelectBox$InfraSelectBox,
};

function SelectBox$ChipFilterSelectBox(props) {
  var customStyleForChips = props.customStyleForChips;
  var isTickRequired = props.isTickRequired;
  var allowMultiSelect = props.allowMultiSelect;
  var deselectDisable = props.deselectDisable;
  var input = props.input;
  var deselectDisable$1 =
    deselectDisable !== undefined ? deselectDisable : false;
  var allowMultiSelect$1 =
    allowMultiSelect !== undefined ? allowMultiSelect : true;
  var isTickRequired$1 = isTickRequired !== undefined ? isTickRequired : true;
  var customStyleForChips$1 =
    customStyleForChips !== undefined ? customStyleForChips : "";
  var transformedOptions = useTransformed(props.options);
  var values = input.value;
  var saneValue = React.useMemo(
    function () {
      return LogicUtils.getStrArrayFromJsonArray(
        LogicUtils.getArrayFromJson(values, []),
      );
    },
    [values],
  );
  return React.createElement(
    "div",
    {
      className: "md:max-h-72 overflow-auto font-medium flex flex-wrap gap-4 ",
    },
    transformedOptions.map(function (option, i) {
      var isSelected = saneValue.includes(option.value);
      var selectedClass = isSelected
        ? "flex items-center m-2 bg-blue-400 dark:text-gray-800 border-gray-300 inline-block text-s px-2 py-1 rounded-2xl"
        : " m-2 bg-gray-200 dark:text-gray-800 border-jp-gray-800 inline-block text-s px-2 py-1 rounded-2xl";
      var chipsCss = LogicUtils.isEmptyString(customStyleForChips$1)
        ? selectedClass
        : customStyleForChips$1;
      return React.createElement(
        "div",
        {
          key: i.toString(),
          className:
            "px-4 py-1 mr-1 mt-0.5 border rounded-full flex flex-row gap-2 items-center cursor-pointer " +
            chipsCss +
            "",
          onClick: function (param) {
            var itemDataValue = option.value;
            var isDisabled = option.isDisabled;
            if (!isDisabled) {
              if (allowMultiSelect$1) {
                return Curry._1(
                  input.onChange,
                  saneValue.includes(itemDataValue)
                    ? deselectDisable$1
                      ? saneValue
                      : saneValue.filter(function (x) {
                          return x !== itemDataValue;
                        })
                    : saneValue.concat([itemDataValue]),
                );
              } else {
                return Curry._1(input.onChange, [itemDataValue]);
              }
            }
          },
        },
        isTickRequired$1
          ? isSelected
            ? React.createElement(Icon.make, {
                name: "check-circle",
                size: 9,
                className: "fill-blue-150 mr-1 mt-0.5",
              })
            : React.createElement(Icon.make, {
                name: "check-circle",
                size: 9,
                className: "fill-gray-150 mr-1 mt-0.5",
              })
          : null,
        option.label,
      );
    }),
  );
}

var ChipFilterSelectBox = {
  make: SelectBox$ChipFilterSelectBox,
};

function SelectBox(props) {
  var wrapBasis = props.wrapBasis;
  var onItemSelect = props.onItemSelect;
  var dropdownClassName = props.dropdownClassName;
  var showBtnTextToolTip = props.showBtnTextToolTip;
  var textEllipsisForDropDownOptions = props.textEllipsisForDropDownOptions;
  var showToolTipOptions = props.showToolTipOptions;
  var checkboxDimension = props.checkboxDimension;
  var showSelectCountButton = props.showSelectCountButton;
  var toggleProps = props.toggleProps;
  var selectClass = props.selectClass;
  var optionClass = props.optionClass;
  var showDescriptionAsTool = props.showDescriptionAsTool;
  var showAllSelectedOptions = props.showAllSelectedOptions;
  var onApply = props.onApply;
  var hasApplyButton = props.hasApplyButton;
  var isPhoneDropdown = props.isPhoneDropdown;
  var customSelectStyle = props.customSelectStyle;
  var ellipsisOnly = props.ellipsisOnly;
  var baseComponentCustomStyle = props.baseComponentCustomStyle;
  var listFlexDirection = props.listFlexDirection;
  var buttonStyleOnDropDownOpened = props.buttonStyleOnDropDownOpened;
  var setExtSearchString = props.setExtSearchString;
  var customMarginStyle = props.customMarginStyle;
  var dropdownCustomWidth = props.dropdownCustomWidth;
  var descriptionOnHover = props.descriptionOnHover;
  var customButton = props.customButton;
  var showMatchingRecordsText = props.showMatchingRecordsText;
  var addDynamicValue = props.addDynamicValue;
  var dropDownCustomBtnClick = props.dropDownCustomBtnClick;
  var showCustomBtnAtEnd = props.showCustomBtnAtEnd;
  var showNameAsToolTip = props.showNameAsToolTip;
  var showToolTip = props.showToolTip;
  var customMargin = props.customMargin;
  var showSearchIcon = props.showSearchIcon;
  var searchInputPlaceHolder = props.searchInputPlaceHolder;
  var customSearchStyle = props.customSearchStyle;
  var allSelectType = props.allSelectType;
  var hideBorder = props.hideBorder;
  var fill = props.fill;
  var searchable = props.searchable;
  var maxHeight = props.maxHeight;
  var showToggle = props.showToggle;
  var showSelectionAsChips = props.showSelectionAsChips;
  var customStyle = props.customStyle;
  var marginTop = props.marginTop;
  var textStyle = props.textStyle;
  var customButtonStyle = props.customButtonStyle;
  var fullLength = props.fullLength;
  var disableSelect = props.disableSelect;
  var buttonType = props.buttonType;
  var showSelectAll = props.showSelectAll;
  var showClearAll = props.showClearAll;
  var deselectDisable = props.deselectDisable;
  var isHorizontal = props.isHorizontal;
  var isSelectedStateMinus = props.isSelectedStateMinus;
  var optionSize = props.optionSize;
  var options = props.options;
  var hideMultiSelectButtons = props.hideMultiSelectButtons;
  var isDropDown = props.isDropDown;
  var allowMultiSelect = props.allowMultiSelect;
  var buttonText = props.buttonText;
  var input = props.input;
  var buttonText$1 = buttonText !== undefined ? buttonText : "Normal Selection";
  var allowMultiSelect$1 =
    allowMultiSelect !== undefined ? allowMultiSelect : false;
  var isDropDown$1 = isDropDown !== undefined ? isDropDown : true;
  var hideMultiSelectButtons$1 =
    hideMultiSelectButtons !== undefined ? hideMultiSelectButtons : false;
  var optionSize$1 = optionSize !== undefined ? optionSize : /* Small */ 0;
  var isSelectedStateMinus$1 =
    isSelectedStateMinus !== undefined ? isSelectedStateMinus : false;
  var isHorizontal$1 = isHorizontal !== undefined ? isHorizontal : false;
  var deselectDisable$1 =
    deselectDisable !== undefined ? deselectDisable : false;
  var showClearAll$1 = showClearAll !== undefined ? showClearAll : true;
  var showSelectAll$1 = showSelectAll !== undefined ? showSelectAll : true;
  var buttonType$1 =
    buttonType !== undefined ? buttonType : /* SecondaryFilled */ 3;
  var disableSelect$1 = disableSelect !== undefined ? disableSelect : false;
  var fullLength$1 = fullLength !== undefined ? fullLength : false;
  var customButtonStyle$1 =
    customButtonStyle !== undefined ? customButtonStyle : "";
  var textStyle$1 = textStyle !== undefined ? textStyle : "";
  var marginTop$1 = marginTop !== undefined ? marginTop : "mt-12";
  var customStyle$1 = customStyle !== undefined ? customStyle : "";
  var showSelectionAsChips$1 =
    showSelectionAsChips !== undefined ? showSelectionAsChips : true;
  var showToggle$1 = showToggle !== undefined ? showToggle : false;
  var fill$1 = fill !== undefined ? fill : "#0EB025";
  var hideBorder$1 = hideBorder !== undefined ? hideBorder : false;
  var allSelectType$1 =
    allSelectType !== undefined ? allSelectType : /* Icon */ 0;
  var customSearchStyle$1 =
    customSearchStyle !== undefined
      ? customSearchStyle
      : "bg-jp-gray-100 dark:bg-jp-gray-950 p-2";
  var showSearchIcon$1 = showSearchIcon !== undefined ? showSearchIcon : true;
  var customMargin$1 = customMargin !== undefined ? customMargin : "";
  var showToolTip$1 = showToolTip !== undefined ? showToolTip : false;
  var showNameAsToolTip$1 =
    showNameAsToolTip !== undefined ? showNameAsToolTip : false;
  var showCustomBtnAtEnd$1 =
    showCustomBtnAtEnd !== undefined ? showCustomBtnAtEnd : false;
  var dropDownCustomBtnClick$1 =
    dropDownCustomBtnClick !== undefined ? dropDownCustomBtnClick : false;
  var addDynamicValue$1 =
    addDynamicValue !== undefined ? addDynamicValue : false;
  var showMatchingRecordsText$1 =
    showMatchingRecordsText !== undefined ? showMatchingRecordsText : true;
  var customButton$1 =
    customButton !== undefined ? Caml_option.valFromOption(customButton) : null;
  var descriptionOnHover$1 =
    descriptionOnHover !== undefined ? descriptionOnHover : false;
  var setExtSearchString$1 =
    setExtSearchString !== undefined ? setExtSearchString : function (param) {};
  var buttonStyleOnDropDownOpened$1 =
    buttonStyleOnDropDownOpened !== undefined
      ? buttonStyleOnDropDownOpened
      : "";
  var listFlexDirection$1 =
    listFlexDirection !== undefined ? listFlexDirection : "";
  var baseComponentCustomStyle$1 =
    baseComponentCustomStyle !== undefined ? baseComponentCustomStyle : "";
  var ellipsisOnly$1 = ellipsisOnly !== undefined ? ellipsisOnly : false;
  var customSelectStyle$1 =
    customSelectStyle !== undefined ? customSelectStyle : "";
  var isPhoneDropdown$1 =
    isPhoneDropdown !== undefined ? isPhoneDropdown : false;
  var showDescriptionAsTool$1 =
    showDescriptionAsTool !== undefined ? showDescriptionAsTool : true;
  var optionClass$1 = optionClass !== undefined ? optionClass : "";
  var selectClass$1 = selectClass !== undefined ? selectClass : "";
  var toggleProps$1 = toggleProps !== undefined ? toggleProps : "";
  var showSelectCountButton$1 =
    showSelectCountButton !== undefined ? showSelectCountButton : false;
  var checkboxDimension$1 =
    checkboxDimension !== undefined ? checkboxDimension : "";
  var showToolTipOptions$1 =
    showToolTipOptions !== undefined ? showToolTipOptions : false;
  var textEllipsisForDropDownOptions$1 =
    textEllipsisForDropDownOptions !== undefined
      ? textEllipsisForDropDownOptions
      : false;
  var showBtnTextToolTip$1 =
    showBtnTextToolTip !== undefined ? showBtnTextToolTip : false;
  var dropdownClassName$1 =
    dropdownClassName !== undefined ? dropdownClassName : "";
  var onItemSelect$1 =
    onItemSelect !== undefined ? onItemSelect : function (param, param$1) {};
  var wrapBasis$1 = wrapBasis !== undefined ? wrapBasis : "";
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var match = React.useState(function () {
    return "";
  });
  if (isDropDown$1) {
    return React.createElement(SelectBox$BaseDropdown, {
      buttonText: buttonText$1,
      buttonSize: props.buttonSize,
      allowMultiSelect: allowMultiSelect$1,
      input: input,
      showClearAll: showClearAll$1,
      showSelectAll: showSelectAll$1,
      options: options,
      optionSize: optionSize$1,
      isSelectedStateMinus: isSelectedStateMinus$1,
      hideMultiSelectButtons: hideMultiSelectButtons$1,
      deselectDisable: deselectDisable$1,
      buttonType: buttonType$1,
      baseComponent: props.baseComponent,
      baseComponentMethod: props.baseComponentMethod,
      disableSelect: disableSelect$1,
      textStyle: textStyle$1,
      buttonTextWeight: props.buttonTextWeight,
      defaultLeftIcon: props.leftIcon,
      fullLength: fullLength$1,
      customButtonStyle: customButtonStyle$1,
      fixedDropDownDirection: props.fixedDropDownDirection,
      marginTop: marginTop$1,
      customStyle: customStyle$1,
      customSearchStyle: customSearchStyle$1,
      showSelectionAsChips: showSelectionAsChips$1,
      showToolTip: showToolTip$1,
      showNameAsToolTip: showNameAsToolTip$1,
      searchable: searchable,
      showBorder: props.showBorder,
      dropDownCustomBtnClick: dropDownCustomBtnClick$1,
      showCustomBtnAtEnd: showCustomBtnAtEnd$1,
      customButton: Caml_option.some(customButton$1),
      descriptionOnHover: descriptionOnHover$1,
      addDynamicValue: addDynamicValue$1,
      showMatchingRecordsText: showMatchingRecordsText$1,
      hasApplyButton: hasApplyButton,
      dropdownCustomWidth: dropdownCustomWidth,
      allowButtonTextMinWidth: props.allowButtonTextMinWidth,
      customMarginStyle: customMarginStyle,
      customButtonLeftIcon: props.customButtonLeftIcon,
      customTextPaddingClass: props.customTextPaddingClass,
      customButtonPaddingClass: props.customButtonPaddingClass,
      customButtonIconMargin: props.customButtonIconMargin,
      textStyleClass: props.textStyleClass,
      buttonStyleOnDropDownOpened: buttonStyleOnDropDownOpened$1,
      selectedString: match[0],
      setSelectedString: match[1],
      setExtSearchString: setExtSearchString$1,
      listFlexDirection: listFlexDirection$1,
      ellipsisOnly: ellipsisOnly$1,
      isPhoneDropdown: isPhoneDropdown$1,
      onApply: onApply,
      showAllSelectedOptions: showAllSelectedOptions,
      buttonClickFn: props.buttonClickFn,
      showSelectCountButton: showSelectCountButton$1,
      maxHeight: maxHeight,
      customBackColor: props.customBackColor,
      showToolTipOptions: showToolTipOptions$1,
      textEllipsisForDropDownOptions: textEllipsisForDropDownOptions$1,
      showBtnTextToolTip: showBtnTextToolTip$1,
      dropdownClassName: dropdownClassName$1,
      searchInputPlaceHolder: searchInputPlaceHolder,
      showSearchIcon: showSearchIcon$1,
    });
  } else if (allowMultiSelect$1) {
    return React.createElement(SelectBox$BaseSelect, {
      showSelectAll: showSelectAll$1,
      isDropDown: isDropDown$1,
      options: options,
      optionSize: optionSize$1,
      isSelectedStateMinus: isSelectedStateMinus$1,
      onSelect: input.onChange,
      value: input.value,
      onBlur: input.onBlur,
      showClearAll: showClearAll$1,
      isHorizontal: isHorizontal$1,
      customLabelStyle: props.customLabelStyle,
      showToggle: showToggle$1,
      heading: buttonText$1,
      showSelectionAsChips: showSelectionAsChips$1,
      maxHeight: maxHeight,
      searchable: searchable,
      optionRigthElement: props.optionRigthElement,
      searchInputPlaceHolder: searchInputPlaceHolder,
      showSearchIcon: showSearchIcon$1,
      customStyle: customStyle$1,
      customMargin: customMargin$1,
      disableSelect: disableSelect$1,
      hideBorder: hideBorder$1,
      allSelectType: allSelectType$1,
      isMobileView: isMobileView,
      customSearchStyle: customSearchStyle$1,
      hasApplyButton: hasApplyButton,
      dropdownCustomWidth: dropdownCustomWidth,
      customMarginStyle: customMarginStyle,
      listFlexDirection: listFlexDirection$1,
      onApply: onApply,
      showAllSelectedOptions: showAllSelectedOptions,
      showDescriptionAsTool: showDescriptionAsTool$1,
      optionClass: optionClass$1,
      selectClass: selectClass$1,
      toggleProps: toggleProps$1,
      customSelectAllStyle: props.customSelectAllStyle,
      checkboxDimension: checkboxDimension$1,
      dropdownClassName: dropdownClassName$1,
      onItemSelect: onItemSelect$1,
      wrapBasis: wrapBasis$1,
    });
  } else {
    return React.createElement(SelectBox$BaseRadio, {
      isDropDown: isDropDown$1,
      isHorizontal: isHorizontal$1,
      options: options,
      optionSize: optionSize$1,
      isSelectedStateMinus: isSelectedStateMinus$1,
      onSelect: input.onChange,
      value: input.value,
      deselectDisable: deselectDisable$1,
      onBlur: input.onBlur,
      fill: fill$1,
      customStyle: customStyle$1,
      searchable: searchable,
      isMobileView: isMobileView,
      customSearchStyle: customSearchStyle$1,
      descriptionOnHover: descriptionOnHover$1,
      listFlexDirection: listFlexDirection$1,
      baseComponentCustomStyle: baseComponentCustomStyle$1,
      customSelectStyle: customSelectStyle$1,
      maxHeight: maxHeight,
      searchInputPlaceHolder: searchInputPlaceHolder,
      showSearchIcon: showSearchIcon$1,
      showToolTipOptions: showToolTipOptions$1,
    });
  }
}

var make = SelectBox;

export {
  regex,
  ListItem,
  makeNonOptional,
  useTransformed,
  makeOptions,
  BaseSelect,
  BaseSelectButton,
  RenderListItemInBaseRadio,
  getHashMappedOptionValues,
  getSortedKeys,
  BaseRadio,
  BaseDropdown,
  InfraSelectBox,
  ChipFilterSelectBox,
  make,
};
/* Icon Not a pure module */
