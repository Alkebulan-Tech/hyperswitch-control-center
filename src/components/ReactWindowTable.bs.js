// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Table from "./Table.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Recoil from "../libraries/Recoil.bs.js";
import * as Recoil$1 from "recoil";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as TableUtils from "./TableUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as NoDataFound from "./NoDataFound.bs.js";
import * as CheckBoxIcon from "./custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ReactWindow from "react-window";
import * as DictionaryUtils from "../utils/DictionaryUtils.bs.js";
import * as DatatableContext from "../context/DatatableContext.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as DynamicTableUtils from "./DynamicTableUtils.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as LoadedTableContext from "../context/LoadedTableContext.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";
import * as DataTableFilterOpenContext from "../context/DataTableFilterOpenContext.bs.js";

var checkBoxPropDefaultVal_selectedData = [];

function checkBoxPropDefaultVal_setSelectedData(param) {}

var checkBoxPropDefaultVal = {
  showCheckBox: false,
  selectedData: checkBoxPropDefaultVal_selectedData,
  setSelectedData: checkBoxPropDefaultVal_setSelectedData,
};

function ReactWindowTable$FilterRow(props) {
  var cellWidth = props.cellWidth;
  var borderClass =
    props.isLast || props.removeVerticalLines
      ? " border-jp-gray-light_table_border_color dark:border-jp-gray-960"
      : " border-r border-jp-gray-light_table_border_color dark:border-jp-gray-960";
  return React.createElement(
    "div",
    {
      className:
        "flex flex-row group h-full border-t dark:border-jp-gray-960 " +
        cellWidth +
        " bg-white dark:bg-jp-gray-lightgray_background hover:bg-jp-gray-table_hover dark:hover:bg-jp-gray-100 dark:hover:bg-opacity-10 transition duration-300 ease-in-out text-fs-13 text-jp-gray-900 text-opacity-75 dark:text-jp-gray-text_darktheme dark:text-opacity-75",
    },
    props.hideFilter
      ? null
      : React.createElement(
          "div",
          {
            key: props.cellIndex.toString(),
            className:
              "h-full p-0 align-top " +
              borderClass +
              " " +
              props.tableDataBorderClass +
              " " +
              cellWidth +
              "",
          },
          React.createElement(
            "div",
            {
              className: "h-full box-border py-3 px-3",
            },
            React.createElement(TableUtils.TableFilterCell.make, {
              cell: props.item,
            }),
          ),
        ),
  );
}

var FilterRow = {
  make: ReactWindowTable$FilterRow,
};

function ReactWindowTable$NewCell(props) {
  var showCheckBox = props.showCheckBox;
  var customCellColor = props.customCellColor;
  var customSerialNoColumn = props.customSerialNoColumn;
  var showSerialNumber = props.showSerialNumber;
  var columnWidthArr = props.columnWidthArr;
  var highlightText = props.highlightText;
  var handleExpand = props.handleExpand;
  var expandedIndexArr = props.expandedIndexArr;
  var setExpandedIndexArr = props.setExpandedIndexArr;
  var onMouseLeave = props.onMouseLeave;
  var onMouseEnter = props.onMouseEnter;
  var collapseTableRow = props.collapseTableRow;
  var tableDataBorderClass = props.tableDataBorderClass;
  var highlightEnabledFieldsArray = props.highlightEnabledFieldsArray;
  var removeVerticalLines = props.removeVerticalLines;
  var onRowClick = props.onRowClick;
  var rowIndex = props.rowIndex;
  var item = props.item;
  var tableDataBorderClass$1 =
    tableDataBorderClass !== undefined ? tableDataBorderClass : "";
  var collapseTableRow$1 =
    collapseTableRow !== undefined ? collapseTableRow : false;
  var highlightText$1 = highlightText !== undefined ? highlightText : "";
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : false;
  var customSerialNoColumn$1 =
    customSerialNoColumn !== undefined ? customSerialNoColumn : false;
  var customCellColor$1 = customCellColor !== undefined ? customCellColor : "";
  var showCheckBox$1 = showCheckBox !== undefined ? showCheckBox : false;
  var onClick = React.useCallback(
    function (_ev) {
      var isRangeSelected = window.getSelection().type === "Range";
      if (onRowClick !== undefined && !isRangeSelected) {
        return Curry._1(onRowClick, rowIndex);
      }
    },
    [onRowClick, rowIndex],
  );
  var isCurrentRowExpanded = React.useMemo(
    function () {
      return expandedIndexArr.includes(rowIndex);
    },
    [expandedIndexArr],
  );
  var onMouseEnter$1 = React.useCallback(
    function (_ev) {
      if (onMouseEnter !== undefined) {
        return Curry._1(onMouseEnter, rowIndex);
      }
    },
    [onMouseEnter, rowIndex],
  );
  var onMouseLeave$1 = React.useCallback(
    function (_ev) {
      if (onMouseLeave !== undefined) {
        return Curry._1(onMouseLeave, rowIndex);
      }
    },
    [onMouseLeave, rowIndex],
  );
  var colsLen = item.length;
  var cursorClass = props.onRowClickPresent ? "cursor-pointer" : "";
  var customcellColouredCellCheck = item
    .map(function (obj) {
      if (obj.TAG === /* CustomCell */ 10) {
        return obj._1.split(",").includes("true");
      } else {
        return false;
      }
    })
    .includes(true);
  var customcellColouredCell =
    customcellColouredCellCheck &&
    LogicUtils.isNonEmptyString(customCellColor$1)
      ? customCellColor$1
      : "bg-white hover:bg-jp-gray-table_hover dark:hover:bg-jp-gray-850";
  return React.createElement(
    "div",
    {
      className:
        "h-full " +
        customcellColouredCell +
        " border-t border-jp-gray-light_table_border_color dark:border-jp-gray-960 dark:bg-jp-gray-lightgray_background transition duration-300 ease-in-out ",
      style: props.style,
    },
    React.createElement(
      "div",
      {
        className:
          "flex flex-row group rounded-md " +
          cursorClass +
          "  text-fs-13 text-jp-gray-900 dark:text-jp-gray-text_darktheme dark:text-opacity-75 overflow-hidden break-words",
        onClick: onClick,
        onMouseEnter: onMouseEnter$1,
        onMouseLeave: onMouseLeave$1,
      },
      item.map(function (obj, cellIndex) {
        var cellWidth =
          cellIndex === ((colsLen - 1) | 0)
            ? "w-full"
            : (showCheckBox$1 && cellIndex === 0) ||
                (showSerialNumber$1 && cellIndex === 0) ||
                (showSerialNumber$1 && showCheckBox$1 && cellIndex === 1)
              ? "w-24"
              : Core__Option.getOr(
                  columnWidthArr[cellIndex],
                  "" +
                    (cellIndex === 0 && customSerialNoColumn$1
                      ? "w-24"
                      : "w-64") +
                    "",
                );
        var overflowStyle = cellIndex === colsLen ? "overflow-hidden" : "";
        var isLast = cellIndex === ((colsLen - 1) | 0);
        var paddingClass;
        paddingClass = obj.TAG === /* Link */ 8 ? "pt-2" : "py-3";
        var highlightCell = highlightEnabledFieldsArray.includes(cellIndex);
        var borderClass =
          isLast || removeVerticalLines
            ? "border-jp-gray-light_table_border_color dark:border-jp-gray-960"
            : "border-r border-jp-gray-light_table_border_color dark:border-jp-gray-960";
        var cursorI = cellIndex === 0 ? "cursor-pointer" : "";
        return React.createElement(
          "div",
          {
            key: cellIndex.toString(),
            className:
              "" +
              cellWidth +
              " " +
              overflowStyle +
              "  h-auto align-top " +
              borderClass +
              "  " +
              (highlightCell ? "hover:font-bold" : "") +
              " " +
              tableDataBorderClass$1 +
              " \n                " +
              (collapseTableRow$1 ? cursorI : "") +
              "",
            onClick: function (param) {
              if (collapseTableRow$1 && cellIndex === 0) {
                Curry._2(handleExpand, rowIndex, true);
                if (isCurrentRowExpanded) {
                  return Curry._1(setExpandedIndexArr, function (prev) {
                    return prev.filter(function (item) {
                      return Caml_obj.notequal(item, rowIndex);
                    });
                  });
                } else {
                  return Curry._1(setExpandedIndexArr, function (prev) {
                    return prev.concat([rowIndex]);
                  });
                }
              }
            },
          },
          React.createElement(
            "div",
            {
              className:
                "" + cellWidth + " h-full box-border pl-4 " + paddingClass + "",
            },
            collapseTableRow$1
              ? React.createElement(
                  "div",
                  {
                    className: "flex flex-row gap-4 items-center",
                  },
                  cellIndex === 0
                    ? React.createElement(Icon.make, {
                        name: isCurrentRowExpanded
                          ? "caret-down"
                          : "caret-right",
                        size: 14,
                      })
                    : null,
                  React.createElement(TableUtils.TableCell.make, {
                    cell: obj,
                    highlightText: highlightText$1,
                    hideShowMore: true,
                  }),
                )
              : React.createElement(TableUtils.TableCell.make, {
                  cell: obj,
                  highlightText: highlightText$1,
                }),
          ),
        );
      }),
    ),
    isCurrentRowExpanded
      ? React.createElement(
          "div",
          {
            className: "dark:border-jp-gray-dark_disable_border_color ml-10",
          },
          Curry._1(props.expandedRow, undefined),
        )
      : null,
  );
}

var NewCell = {
  make: ReactWindowTable$NewCell,
};

function ReactWindowTable$ReactWindowTableComponent(props) {
  var showCheckBox = props.showCheckBox;
  var customCellColor = props.customCellColor;
  var customSerialNoColumn = props.customSerialNoColumn;
  var showSerialNumber = props.showSerialNumber;
  var columnWidth = props.columnWidth;
  var highlightText = props.highlightText;
  var onMouseLeave = props.onMouseLeave;
  var onMouseEnter = props.onMouseEnter;
  var actualData = props.actualData;
  var setSelectAllCheckBox = props.setSelectAllCheckBox;
  var selectAllCheckBox = props.selectAllCheckBox;
  var rowItemHeight = props.rowItemHeight;
  var getIndex = props.getIndex;
  var getRowDetails = props.getRowDetails;
  var collapseTableRow = props.collapseTableRow;
  var tableDataBorderClass = props.tableDataBorderClass;
  var tableBorderClass = props.tableBorderClass;
  var tableheadingClass = props.tableheadingClass;
  var sortedObj = props.sortedObj;
  var setSortedObj = props.setSortedObj;
  var showScrollBar = props.showScrollBar;
  var removeVerticalLines = props.removeVerticalLines;
  var onRowClickPresent = props.onRowClickPresent;
  var onRowClick = props.onRowClick;
  var rows = props.rows;
  var heading = props.heading;
  var heading$1 = heading !== undefined ? heading : [];
  var onRowClickPresent$1 =
    onRowClickPresent !== undefined ? onRowClickPresent : false;
  var removeVerticalLines$1 =
    removeVerticalLines !== undefined ? removeVerticalLines : true;
  var showScrollBar$1 = showScrollBar !== undefined ? showScrollBar : false;
  var tableheadingClass$1 =
    tableheadingClass !== undefined ? tableheadingClass : "";
  var tableBorderClass$1 =
    tableBorderClass !== undefined ? tableBorderClass : "";
  var tableDataBorderClass$1 =
    tableDataBorderClass !== undefined ? tableDataBorderClass : "";
  var collapseTableRow$1 =
    collapseTableRow !== undefined ? collapseTableRow : false;
  var rowItemHeight$1 = rowItemHeight !== undefined ? rowItemHeight : 100;
  var highlightText$1 = highlightText !== undefined ? highlightText : "";
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : false;
  var customSerialNoColumn$1 =
    customSerialNoColumn !== undefined ? customSerialNoColumn : false;
  var customCellColor$1 = customCellColor !== undefined ? customCellColor : "";
  var showCheckBox$1 = showCheckBox !== undefined ? showCheckBox : false;
  var getIndex$1 = function (rowIndex) {
    if (getIndex !== undefined) {
      return Curry._1(getIndex, rowIndex);
    }
  };
  var fn = React.useRef(function (param, param$1) {});
  var match = React.useState(function () {
    return [];
  });
  var setExpandedIndexArr = match[1];
  var expandedIndexArr = match[0];
  var handleExpand = function (index, bool) {
    Curry._2(fn.current, index, bool);
  };
  React.useEffect(
    function () {
      Curry._1(setExpandedIndexArr, function (param) {
        return [];
      });
      Curry._2(fn.current, 0, true);
    },
    [rows.length],
  );
  var headingsLen = heading$1.length;
  var widthClass = props.fullWidth ? "min-w-full" : "";
  var scrollBarClass = showScrollBar$1 ? "show-scrollbar" : "no-scrollbar";
  var filterPresent = Core__Option.isSome(
    heading$1.find(function (head) {
      return head.showFilter;
    }),
  );
  var highlightEnabledFieldsArray = Core__Array.reduceWithIndex(
    heading$1,
    [],
    function (acc, item, index) {
      if (item.highlightCellOnHover) {
        acc.push(index);
      }
      return acc;
    },
  );
  var colFilt = Core__Option.getOr(props.columnFilterRow, []);
  var colFilter = showCheckBox$1
    ? [
        {
          TAG: /* TextFilter */ 1,
          _0: "",
        },
      ].concat(colFilt)
    : colFilt;
  var arr =
    columnWidth !== undefined
      ? columnWidth
      : heading$1.map(function (param, i) {
          if (i === 0 && customSerialNoColumn$1) {
            return "w-24";
          } else {
            return "w-64";
          }
        });
  var headingReact =
    heading$1.length !== 0
      ? React.createElement(
          "div",
          {
            className: "sticky z-10 top-0 ",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-row",
            },
            heading$1.map(function (item, i) {
              var isFirstCol = i === 0;
              var isLastCol = i === ((headingsLen - 1) | 0);
              var cellWidth =
                i === ((heading$1.length - 1) | 0)
                  ? "w-full"
                  : (showCheckBox$1 && i === 0) ||
                      (showSerialNumber$1 && i === 0) ||
                      (showSerialNumber$1 && showCheckBox$1 && i === 1)
                    ? "w-24"
                    : Core__Option.getOr(
                        arr[i],
                        "" +
                          (isFirstCol && customSerialNoColumn$1
                            ? "w-24"
                            : "w-64") +
                          "",
                      );
              var roundedClass = isFirstCol
                ? "rounded-tl"
                : isLastCol
                  ? "rounded-tr"
                  : "";
              var borderClass = isLastCol
                ? ""
                : removeVerticalLines$1
                  ? "border-jp-gray-500 dark:border-jp-gray-960"
                  : "border-r border-jp-gray-500 dark:border-jp-gray-960";
              var isAllSelected = Core__Option.isSome(selectAllCheckBox);
              var isSelectedStateMinus = selectAllCheckBox === /* PARTIAL */ 1;
              var setIsSelected = function (isAllSelected) {
                if (setSelectAllCheckBox !== undefined) {
                  return Curry._1(setSelectAllCheckBox, function (param) {
                    if (isAllSelected) {
                      return /* ALL */ 0;
                    }
                  });
                }
              };
              var tmp;
              if (item.showFilter || item.showSort) {
                var tmp$1;
                if (item.showSort) {
                  var order =
                    sortedObj !== undefined && sortedObj.key === item.key
                      ? sortedObj.order
                      : /* NONE */ 2;
                  tmp$1 = React.createElement(AddDataAttributes.make, {
                    attributes: [["data-table", "tableSort"]],
                    children: React.createElement(
                      "div",
                      {
                        className: "cursor-pointer text-gray-300 pl-4",
                        onClick: function (_ev) {
                          if (setSortedObj !== undefined) {
                            return Curry._1(setSortedObj, function (param) {
                              return {
                                key: item.key,
                                order:
                                  order === /* DEC */ 1
                                    ? /* INC */ 0
                                    : /* DEC */ 1,
                              };
                            });
                          }
                        },
                      },
                      React.createElement(TableUtils.SortIcons.make, {
                        order: order,
                        size: 13,
                      }),
                    ),
                  });
                } else {
                  tmp$1 = null;
                }
                tmp = React.createElement(
                  "div",
                  {
                    className: "flex flex-row items-center",
                  },
                  tmp$1,
                );
              } else {
                tmp = null;
              }
              var len = colFilter.length;
              var fitlerRows = colFilter[i];
              return React.createElement(
                "div",
                {
                  key: i.toString(),
                  className:
                    " " +
                    cellWidth +
                    " " +
                    borderClass +
                    " justify-between items-center  bg-white dark:bg-jp-gray-darkgray_background text-opacity-75 dark:text-jp-gray-text_darktheme dark:text-opacity-75 whitespace-pre select-none " +
                    roundedClass +
                    " " +
                    tableheadingClass$1 +
                    "",
                },
                React.createElement(
                  "div",
                  {
                    className:
                      "flex flex-row " +
                      cellWidth +
                      " pl-2 py-4 bg-gradient-to-b from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950  dark:to-jp-gray-950 text-jp-gray-900",
                  },
                  React.createElement(
                    "div",
                    {
                      className: "",
                    },
                    React.createElement(
                      "div",
                      {
                        className: "flex flex-row",
                      },
                      React.createElement(
                        "div",
                        {
                          className: "font-bold text-fs-13",
                        },
                        item.title,
                      ),
                      React.createElement(UIUtils.RenderIf.make, {
                        condition: Core__Option.isSome(item.description),
                        children: React.createElement(
                          "div",
                          {
                            className: "text-sm text-gray-500 mx-2",
                          },
                          React.createElement(ToolTip.make, {
                            description: Core__Option.getOr(
                              item.description,
                              "",
                            ),
                            toolTipPosition: /* Bottom */ 1,
                          }),
                        ),
                      }),
                    ),
                    React.createElement(UIUtils.RenderIf.make, {
                      condition: Core__Option.getOr(
                        item.showMultiSelectCheckBox,
                        false,
                      ),
                      children: React.createElement(
                        "div",
                        {
                          className: " mt-1 mr-2",
                        },
                        React.createElement(CheckBoxIcon.make, {
                          isSelected: isAllSelected,
                          setIsSelected: setIsSelected,
                          isSelectedStateMinus: isSelectedStateMinus,
                          checkboxDimension: "h-4 w-4",
                        }),
                      ),
                    }),
                    React.createElement(UIUtils.RenderIf.make, {
                      condition: Core__Option.isSome(item.data),
                      children: React.createElement(
                        "div",
                        {
                          className:
                            "flex justify-start font-bold text-fs-10 whitespace-pre text-ellipsis overflow-x-hidden",
                        },
                        Core__Option.getOr(item.data, ""),
                      ),
                    }),
                  ),
                  tmp,
                ),
                React.createElement(
                  "div",
                  undefined,
                  fitlerRows !== undefined
                    ? React.createElement(ReactWindowTable$FilterRow, {
                        item: fitlerRows,
                        hideFilter: showCheckBox$1 && isFirstCol,
                        removeVerticalLines: removeVerticalLines$1,
                        tableDataBorderClass: tableDataBorderClass$1,
                        isLast: i === ((len - 1) | 0),
                        cellIndex: i,
                        cellWidth: cellWidth,
                      })
                    : null,
                ),
              );
            }),
          ),
        )
      : null;
  var rows$1 = function (index) {
    if (rows.length === 0) {
      return null;
    }
    var rowIndex = LogicUtils.getInt(index, "index", 0);
    getIndex$1(rowIndex);
    var item = Core__Option.getOr(rows[rowIndex], []);
    var style = LogicUtils.getJsonObjectFromDict(index, "style");
    return React.createElement(
      React.Fragment,
      undefined,
      JsxPPXReactSupport.createElementWithKey(
        rowIndex.toString(),
        ReactWindowTable$NewCell,
        {
          item: item,
          rowIndex: rowIndex,
          onRowClick: onRowClick,
          onRowClickPresent: onRowClickPresent$1,
          removeVerticalLines: removeVerticalLines$1,
          highlightEnabledFieldsArray: highlightEnabledFieldsArray,
          tableDataBorderClass: tableDataBorderClass$1,
          collapseTableRow: collapseTableRow$1,
          expandedRow: function (param) {
            if (actualData !== undefined && getRowDetails !== undefined) {
              return Curry._1(
                getRowDetails,
                Core__Option.getOr(actualData[rowIndex], null),
              );
            } else {
              return null;
            }
          },
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave,
          style: style,
          setExpandedIndexArr: setExpandedIndexArr,
          expandedIndexArr: expandedIndexArr,
          handleExpand: handleExpand,
          highlightText: highlightText$1,
          columnWidthArr: arr,
          showSerialNumber: showSerialNumber$1,
          customSerialNoColumn: customSerialNoColumn$1,
          customCellColor: customCellColor$1,
          showCheckBox: showCheckBox$1,
        },
      ),
    );
  };
  return React.createElement(
    "div",
    {
      className: " overflow-x-scroll " + scrollBarClass + "",
      style: {
        minHeight: filterPresent ? "30rem" : "",
      },
    },
    React.createElement(
      "div",
      {
        className:
          "w-max	" +
          widthClass +
          " h-full border border-jp-gray-940 border-opacity-50 dark:border-jp-gray-960 rounded-lg " +
          tableBorderClass$1 +
          "",
        colSpan: 0,
      },
      React.createElement(
        "div",
        {
          className: "bg-white dark:bg-jp-gray-lightgray_background",
        },
        headingReact,
        React.createElement(ReactWindow.VariableSizeList, {
          ref: function (el) {
            fn.current = function (param, param$1) {
              el.resetAfterIndex(param, param$1);
            };
          },
          children: rows$1,
          height: props.tableHeight,
          overscanCount: 6,
          itemCount: rows.length,
          itemSize: function (index) {
            if (expandedIndexArr.includes(index)) {
              return 500;
            } else {
              return rowItemHeight$1;
            }
          },
        }),
      ),
    ),
  );
}

var ReactWindowTableComponent = {
  make: ReactWindowTable$ReactWindowTableComponent,
};

var sortAtom = Recoil.atom("sortAtom", {});

function useSortedObj(title, defaultSort) {
  var match = Recoil$1.useRecoilState(sortAtom);
  var setDict = match[1];
  var filters = match[0][title];
  var match$1 = React.useState(function () {
    return defaultSort;
  });
  var setSortedObj = match$1[1];
  var sortedObj = match$1[0];
  React.useEffect(function () {
    if (filters !== undefined) {
      var match = filters.sortType;
      var sortObj_key = filters.sortKey;
      var sortObj_order = match ? /* DEC */ 1 : /* INC */ 0;
      var sortObj = {
        key: sortObj_key,
        order: sortObj_order,
      };
      Curry._1(setSortedObj, function (param) {
        return sortObj;
      });
    }
  }, []);
  React.useEffect(
    function () {
      if (sortedObj !== undefined) {
        var match = sortedObj.order;
        var sortOb_sortKey = sortedObj.key;
        var sortOb_sortType = match !== 1 ? /* ASC */ 0 : /* DSC */ 1;
        var sortOb = {
          sortKey: sortOb_sortKey,
          sortType: sortOb_sortType,
        };
        setDict(function (dict) {
          var nDict = Object.fromEntries(Object.entries(dict));
          nDict[title] = sortOb;
          return nDict;
        });
      }
    },
    [sortedObj],
  );
  return [sortedObj, setSortedObj];
}

function sortArray(originalData, key, sortOrder) {
  var getValue = function (val) {
    if (val === undefined) {
      return "";
    }
    var x = Caml_option.valFromOption(val);
    var _str = Core__JSON.Classify.classify(x);
    if (typeof _str === "number") {
      return "";
    }
    switch (_str.TAG | 0) {
      case /* Bool */ 0:
        if (_str._0) {
          return "true";
        } else {
          return "false";
        }
      case /* String */ 1:
      case /* Number */ 2:
        return x;
      default:
        return "";
    }
  };
  originalData.toSorted(function (i1, i2) {
    var item1 = LogicUtils.safeParse(
      Core__Option.getOr(JSON.stringify(i1), ""),
    );
    var item2 = LogicUtils.safeParse(
      Core__Option.getOr(JSON.stringify(i2), ""),
    );
    var val1 = Core__Option.flatMap(
      Core__JSON.Decode.object(item1),
      function (dict) {
        return dict[key];
      },
    );
    var val2 = Core__Option.flatMap(
      Core__JSON.Decode.object(item2),
      function (dict) {
        return dict[key];
      },
    );
    var value1 = getValue(val1);
    var value2 = getValue(val2);
    if (value1 === value2) {
      return 0;
    } else if (Caml_obj.greaterthan(value1, value2)) {
      if (sortOrder === /* DEC */ 1) {
        return 1;
      } else {
        return -1;
      }
    } else if (sortOrder === /* DEC */ 1) {
      return -1;
    } else {
      return 1;
    }
  });
  return originalData;
}

function ReactWindowTable(props) {
  var fullWidth = props.fullWidth;
  var filterWithIdOnly = props.filterWithIdOnly;
  var customSerialNoColumn = props.customSerialNoColumn;
  var tableHeight = props.tableHeight;
  var highlightText = props.highlightText;
  var activeColumnsAtom = props.activeColumnsAtom;
  var onMouseLeave = props.onMouseLeave;
  var onMouseEnter = props.onMouseEnter;
  var checkBoxProps = props.checkBoxProps;
  var rowItemHeight = props.rowItemHeight;
  var collapseTableRow = props.collapseTableRow;
  var tableDataBorderClass = props.tableDataBorderClass;
  var tableBorderClass = props.tableBorderClass;
  var tableheadingClass = props.tableheadingClass;
  var tableLocalFilter = props.tableLocalFilter;
  var dataNotFoundComponent = props.dataNotFoundComponent;
  var tableDataLoading = props.tableDataLoading;
  var hideTitle = props.hideTitle;
  var downloadCsv = props.downloadCsv;
  var removeVerticalLines = props.removeVerticalLines;
  var onEntityClick = props.onEntityClick;
  var entity = props.entity;
  var totalResults = props.totalResults;
  var showSerialNumber = props.showSerialNumber;
  var bottomActions = props.bottomActions;
  var rightTitleElement = props.rightTitleElement;
  var tableActions = props.tableActions;
  var visibleColumns = props.visibleColumns;
  var title = props.title;
  var actualData = props.actualData;
  var rightTitleElement$1 =
    rightTitleElement !== undefined
      ? Caml_option.valFromOption(rightTitleElement)
      : null;
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : false;
  var removeVerticalLines$1 =
    removeVerticalLines !== undefined ? removeVerticalLines : true;
  var hideTitle$1 = hideTitle !== undefined ? hideTitle : false;
  var tableDataLoading$1 =
    tableDataLoading !== undefined ? tableDataLoading : false;
  var tableLocalFilter$1 =
    tableLocalFilter !== undefined ? tableLocalFilter : false;
  var tableheadingClass$1 =
    tableheadingClass !== undefined ? tableheadingClass : "";
  var tableBorderClass$1 =
    tableBorderClass !== undefined ? tableBorderClass : "";
  var tableDataBorderClass$1 =
    tableDataBorderClass !== undefined ? tableDataBorderClass : "";
  var collapseTableRow$1 =
    collapseTableRow !== undefined ? collapseTableRow : false;
  var rowItemHeight$1 = rowItemHeight !== undefined ? rowItemHeight : 100;
  var checkBoxProps$1 =
    checkBoxProps !== undefined ? checkBoxProps : checkBoxPropDefaultVal;
  var highlightText$1 = highlightText !== undefined ? highlightText : "";
  var tableHeight$1 = tableHeight !== undefined ? tableHeight : 500;
  var customSerialNoColumn$1 =
    customSerialNoColumn !== undefined ? customSerialNoColumn : false;
  var filterWithIdOnly$1 =
    filterWithIdOnly !== undefined ? filterWithIdOnly : false;
  var fullWidth$1 = fullWidth !== undefined ? fullWidth : true;
  var match = React.useState(function () {
    return {};
  });
  var setColumnFilterOrig = match[1];
  var columnFilter = match[0];
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var dateFormatConvertor = DynamicTableUtils.useDateFormatConvertor(undefined);
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowColumnSelector = match$1[1];
  var chooseCols = React.createElement(
    DynamicTableUtils.ChooseColumnsWrapper.make,
    {
      entity: entity,
      totalResults: totalResults,
      defaultColumns: entity.defaultColumns,
      activeColumnsAtom: activeColumnsAtom,
      setShowColumnSelector: setShowColumnSelector,
      showColumnSelector: match$1[0],
    },
  );
  var filterSection = React.createElement(
    "div",
    {
      className: "flex flex-row gap-4",
    },
    chooseCols,
  );
  var customizeColumn =
    Core__Option.isSome(Caml_option.some(activeColumnsAtom)) &&
    Core__Option.isSome(entity.allColumns) &&
    actualData.length > 0
      ? React.createElement(Button.make, {
          text: "Customize Columns",
          buttonType: /* SecondaryFilled */ 3,
          buttonSize: /* Small */ 2,
          leftIcon: {
            TAG: /* CustomIcon */ 1,
            _0: React.createElement(Icon.make, {
              name: "vertical_slider",
              size: 15,
              className: "mr-1",
            }),
          },
          showBorder: false,
          onClick: function (param) {
            Curry._1(setShowColumnSelector, function (param) {
              return true;
            });
          },
          textStyle: "",
          customButtonStyle: "",
        })
      : null;
  var setColumnFilter = React.useMemo(
    function () {
      return function (param, param$1) {
        return Curry._1(setColumnFilterOrig, function (oldFitlers) {
          var newObj = Object.fromEntries(Object.entries(oldFitlers));
          var filterValue = param$1.filter(function (item) {
            return LogicUtils.isNonEmptyString(String(item));
          });
          if (filterValue.length === 0) {
            return Object.fromEntries(
              Object.entries(newObj).filter(function (entry) {
                return entry[0] !== param;
              }),
            );
          } else {
            newObj[param] = filterValue;
            return newObj;
          }
        });
      };
    },
    [setColumnFilterOrig],
  );
  var filterValue = React.useMemo(
    function () {
      return [columnFilter, setColumnFilter];
    },
    [columnFilter, setColumnFilter],
  );
  var match$2 = React.useState(function () {
    return {};
  });
  var setIsFilterOpenOrig = match$2[1];
  var isFilterOpen = match$2[0];
  var setIsFilterOpen = React.useMemo(
    function () {
      return function (param, param$1) {
        return Curry._1(setIsFilterOpenOrig, function (oldFitlers) {
          var newObj = DictionaryUtils.copyOfDict(oldFitlers);
          newObj[param] = param$1;
          return newObj;
        });
      };
    },
    [setColumnFilterOrig],
  );
  var filterOpenValue = React.useMemo(
    function () {
      return [isFilterOpen, setIsFilterOpen];
    },
    [isFilterOpen, setIsFilterOpen],
  );
  var heading = Core__Option.getOr(visibleColumns, entity.defaultColumns).map(
    entity.getHeading,
  );
  if (showSerialNumber$1) {
    heading.unshift(
      Table.makeHeaderInfo(
        "serial_number",
        "S.No",
        /* NumericType */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    );
  }
  if (checkBoxProps$1.showCheckBox) {
    heading.unshift(
      Table.makeHeaderInfo(
        "select",
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        true,
        undefined,
        undefined,
        undefined,
      ),
    );
  }
  var getShowLink = entity.getShowLink;
  var match$3 = useSortedObj(title, props.defaultSort);
  var sortedObj = match$3[0];
  var columToConsider = React.useMemo(
    function () {
      var match = entity.allColumns;
      if (match !== undefined) {
        return match;
      } else if (visibleColumns !== undefined) {
        return visibleColumns;
      } else {
        return entity.defaultColumns;
      }
    },
    [entity.allColumns, visibleColumns, entity.defaultColumns],
  );
  var columnFilterRow = React.useMemo(
    function () {
      if (!tableLocalFilter$1) {
        return;
      }
      var columnFilterRow = Core__Option.getOr(
        visibleColumns,
        entity.defaultColumns,
      ).map(function (item) {
        var headingEntity = Curry._1(entity.getHeading, item);
        var key = headingEntity.key;
        var dataType = headingEntity.dataType;
        var dictArrObj = {};
        var columnFilterCopy = DictionaryUtils.deleteKey(columnFilter, key);
        var newValues = Belt_Array.keepMap(
          DynamicTableUtils.filteredData(
            actualData,
            columnFilterCopy,
            visibleColumns,
            entity,
            dateFormatConvertor,
          ),
          function (item) {
            if (item == null) {
              return;
            } else {
              return Caml_option.some(item);
            }
          },
        );
        if (columToConsider !== undefined) {
          newValues.forEach(function (rows) {
            columToConsider.forEach(function (item) {
              var heading = Curry._1(entity.getHeading, item);
              var key = heading.key;
              var dataType = heading.dataType;
              var num = Curry._2(entity.getCell, rows, item);
              var value;
              switch (num.TAG | 0) {
                case /* CustomCell */ 10:
                  value = DynamicTableUtils.convertStrCellToFloat(
                    dataType,
                    num._1,
                  );
                  break;
                case /* StartEndDate */ 6:
                case /* InputField */ 7:
                case /* TrimmedText */ 12:
                case /* DropDown */ 14:
                  value = DynamicTableUtils.convertStrCellToFloat(dataType, "");
                  break;
                case /* Currency */ 3:
                case /* Progress */ 9:
                case /* DeltaPercentage */ 13:
                case /* Numeric */ 15:
                  value = DynamicTableUtils.convertFloatCellToStr(
                    dataType,
                    num._0,
                  );
                  break;
                case /* Label */ 0:
                case /* ColoredText */ 16:
                  value = DynamicTableUtils.convertStrCellToFloat(
                    dataType,
                    num._0.title,
                  );
                  break;
                default:
                  value = DynamicTableUtils.convertStrCellToFloat(
                    dataType,
                    num._0,
                  );
              }
              var arr = dictArrObj[key];
              if (arr !== undefined) {
                dictArrObj[key] = arr.concat([value]);
              } else {
                dictArrObj[key] = [value];
              }
            });
          });
        }
        var filterValueArray = Core__Option.getOr(dictArrObj[key], []);
        if (dataType < 2) {
          return {
            TAG: /* TextFilter */ 1,
            _0: key,
          };
        }
        if (dataType >= 5) {
          return {
            TAG: /* DropDownFilter */ 0,
            _0: key,
            _1: filterValueArray,
          };
        }
        var newArr = filterValueArray
          .map(function (item) {
            return Core__Option.getOr(Core__JSON.Decode.$$float(item), 0);
          })
          .toSorted(LogicUtils.numericArraySortComperator);
        var lengthOfArr = newArr.length;
        if (lengthOfArr >= 2) {
          return {
            TAG: /* Range */ 2,
            _0: key,
            _1: Core__Option.getOr(newArr[0], 0),
            _2: Core__Option.getOr(newArr[(lengthOfArr - 1) | 0], 0),
          };
        } else if (lengthOfArr >= 1) {
          return {
            TAG: /* Range */ 2,
            _0: key,
            _1: Core__Option.getOr(newArr[0], 0),
            _2: Core__Option.getOr(newArr[0], 0),
          };
        } else {
          return {
            TAG: /* Range */ 2,
            _0: key,
            _1: 0.0,
            _2: 0.0,
          };
        }
      });
      return showSerialNumber$1 && tableLocalFilter$1
        ? [
            {
              TAG: /* Range */ 2,
              _0: "s_no",
              _1: 0,
              _2: actualData.length,
            },
          ].concat(columnFilterRow)
        : columnFilterRow;
    },
    [actualData, columToConsider, totalResults, visibleColumns, columnFilter],
  );
  var actualData$1 = tableLocalFilter$1
    ? DynamicTableUtils.filteredData(
        actualData,
        columnFilter,
        visibleColumns,
        entity,
        dateFormatConvertor,
      )
    : actualData;
  var filteredData = React.useMemo(
    function () {
      if (sortedObj !== undefined) {
        return sortArray(actualData$1, sortedObj.key, sortedObj.order);
      } else {
        return actualData$1;
      }
    },
    [sortedObj, props.customGetObjects, actualData$1, entity.getObjects],
  );
  var selectAllCheckBox = React.useMemo(
    function () {
      var selectedRowDataLength = checkBoxProps$1.selectedData.length;
      var isCompleteDataSelected =
        selectedRowDataLength === filteredData.length;
      if (isCompleteDataSelected) {
        return /* ALL */ 0;
      } else if (checkBoxProps$1.selectedData.length === 0) {
        return;
      } else {
        return /* PARTIAL */ 1;
      }
    },
    [checkBoxProps$1.selectedData, filteredData],
  );
  var setSelectAllCheckBox = React.useCallback(
    function (v) {
      var match = Curry._1(v, selectAllCheckBox);
      if (match !== undefined && !match) {
        return Curry._1(checkBoxProps$1.setSelectedData, function (param) {
          return filteredData.map(function (prim) {
            return prim;
          });
        });
      }
      Curry._1(checkBoxProps$1.setSelectedData, function (param) {
        return [];
      });
    },
    [selectAllCheckBox],
  );
  React.useEffect(
    function () {
      if (selectAllCheckBox === /* ALL */ 0) {
        Curry._1(checkBoxProps$1.setSelectedData, function (param) {
          return filteredData.map(function (prim) {
            return prim;
          });
        });
      } else if (selectAllCheckBox === undefined) {
        Curry._1(checkBoxProps$1.setSelectedData, function (param) {
          return [];
        });
      }
    },
    [selectAllCheckBox],
  );
  var sNoArr = Core__Option.getOr(columnFilter["s_no"], []);
  var rows = Belt_Array.keepMap(
    filteredData.map(function (nullableItem, index) {
      var actualRows;
      if (nullableItem == null) {
        actualRows = [];
      } else {
        var visibleCell = Core__Option.getOr(
          visibleColumns,
          entity.defaultColumns,
        ).map(function (colType) {
          return Curry._2(entity.getCell, nullableItem, colType);
        });
        var startPoint = Core__Option.getOr(sNoArr[0], 1);
        var endPoint = Core__Option.getOr(sNoArr[1], 1);
        var jsonIndex = (index + 1) | 0;
        actualRows =
          sNoArr.length > 0 &&
          !(
            Caml_obj.lessequal(startPoint, jsonIndex) &&
            Caml_obj.greaterequal(endPoint, jsonIndex)
          )
            ? []
            : visibleCell;
      }
      var getIdFromJson = function (json) {
        var selectedPlanDict = Core__Option.getOr(
          Core__JSON.Decode.object(json),
          {},
        );
        return LogicUtils.getString(selectedPlanDict, "id", "");
      };
      var setIsSelected = function (isSelected) {
        if (isSelected) {
          return Curry._1(checkBoxProps$1.setSelectedData, function (prev) {
            return prev.concat([nullableItem]);
          });
        } else {
          return Curry._1(checkBoxProps$1.setSelectedData, function (prev) {
            if (filterWithIdOnly$1) {
              return prev.filter(function (item) {
                return getIdFromJson(item) !== getIdFromJson(nullableItem);
              });
            } else {
              return prev.filter(function (item) {
                return item !== nullableItem;
              });
            }
          });
        }
      };
      if (showSerialNumber$1 && actualRows.length > 0) {
        actualRows.unshift({
          TAG: /* Numeric */ 15,
          _0: (1 + index) | 0,
          _1: function (val) {
            return val.toString();
          },
        });
      }
      if (checkBoxProps$1.showCheckBox) {
        var selectedRowIndex = checkBoxProps$1.selectedData.findIndex(
          function (item) {
            if (filterWithIdOnly$1) {
              return getIdFromJson(item) === getIdFromJson(nullableItem);
            } else {
              return Caml_obj.equal(item, nullableItem);
            }
          },
        );
        actualRows.unshift({
          TAG: /* CustomCell */ 10,
          _0: React.createElement(
            "div",
            {
              onClick: function (ev) {
                ev.stopPropagation();
              },
            },
            React.createElement(CheckBoxIcon.make, {
              isSelected: selectedRowIndex !== -1,
              setIsSelected: setIsSelected,
              checkboxDimension: "h-4 w-4",
            }),
          ),
          _1: LogicUtils.getStringFromBool(selectedRowIndex !== -1),
        });
      }
      return actualRows;
    }),
    function (item) {
      if (item.length === 0) {
        return;
      } else {
        return item;
      }
    },
  );
  var dataExists = rows.length > 0;
  var heading$1 = heading.map(function (head, index) {
    var getValue = function (row) {
      return Core__Option.mapOr(row[index], "", Table.getTableCellValue);
    };
    var ele = rows[0];
    var $$default = ele !== undefined ? getValue(ele) : "";
    return {
      key: head.key,
      title: head.title,
      dataType: head.dataType,
      showSort:
        head.showSort &&
        dataExists &&
        (totalResults === rows.length
          ? rows.some(function (row) {
              return getValue(row) !== $$default;
            })
          : true),
      showFilter: head.showFilter,
      highlightCellOnHover: head.highlightCellOnHover,
      headerElement: head.headerElement,
      description: head.description,
      data: head.data,
      isMandatory: head.isMandatory,
      showMultiSelectCheckBox: head.showMultiSelectCheckBox,
      hideOnShrink: head.hideOnShrink,
      customWidth: head.customWidth,
    };
  });
  var handleRowClick = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal === undefined) {
        return;
      }
      var value = Caml_option.valFromOption(actualVal);
      if (onEntityClick !== undefined) {
        return Curry._1(onEntityClick, value);
      }
      if (getShowLink === undefined) {
        return;
      }
      var link = Curry._1(getShowLink, value);
      RescriptReactRouter.push(
        LogicUtils.isNonEmptyString(url.search)
          ? "" + link + "?" + url.search + ""
          : link,
      );
    },
    [filteredData, getShowLink, onEntityClick, url.search],
  );
  var handleMouseEnter = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal !== undefined && onMouseEnter !== undefined) {
        return Curry._1(onMouseEnter, Caml_option.valFromOption(actualVal));
      }
    },
    [filteredData, getShowLink, onMouseEnter, url.search],
  );
  var handleMouseLeave = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal !== undefined && onMouseLeave !== undefined) {
        return Curry._1(onMouseLeave, Caml_option.valFromOption(actualVal));
      }
    },
    [filteredData, getShowLink, onMouseLeave, url.search],
  );
  var tmp;
  if (totalResults > 0) {
    var children = React.createElement(
      ReactWindowTable$ReactWindowTableComponent,
      {
        heading: heading$1,
        rows: rows,
        onRowClick: handleRowClick,
        onRowClickPresent:
          Core__Option.isSome(onEntityClick) ||
          Core__Option.isSome(getShowLink),
        fullWidth: fullWidth$1,
        removeVerticalLines: removeVerticalLines$1,
        showScrollBar: false,
        setSortedObj: match$3[1],
        sortedObj: sortedObj,
        columnFilterRow: columnFilterRow,
        tableheadingClass: tableheadingClass$1,
        tableBorderClass: tableBorderClass$1,
        tableDataBorderClass: tableDataBorderClass$1,
        collapseTableRow: collapseTableRow$1,
        getRowDetails: props.getRowDetails,
        getIndex: props.getIndex,
        rowItemHeight: rowItemHeight$1,
        selectAllCheckBox: selectAllCheckBox,
        setSelectAllCheckBox: setSelectAllCheckBox,
        actualData: actualData$1,
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeave,
        highlightText: highlightText$1,
        tableHeight: tableHeight$1,
        columnWidth: props.columnWidth,
        showSerialNumber: showSerialNumber$1,
        customSerialNoColumn: customSerialNoColumn$1,
        customCellColor: props.customCellColor,
        showCheckBox: checkBoxProps$1.showCheckBox,
      },
    );
    tmp = React.createElement(
      "div",
      undefined,
      tableLocalFilter$1
        ? React.createElement(DatatableContext.make, {
            value: filterValue,
            children: React.createElement(DataTableFilterOpenContext.make, {
              value: filterOpenValue,
              children: children,
            }),
          })
        : children,
    );
  } else {
    tmp =
      totalResults === 0 && !tableDataLoading$1
        ? dataNotFoundComponent !== undefined
          ? Caml_option.valFromOption(dataNotFoundComponent)
          : React.createElement(NoDataFound.make, {
              message: "No Data Available",
              renderType: /* Painting */ 1,
            })
        : null;
  }
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-loaded-table", title]],
    children: React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className:
            " bg-gray-50 dark:bg-jp-gray-darkgray_background empty:hidden",
          style: {
            zIndex: "2",
          },
        },
        React.createElement(
          "div",
          {
            className: "flex flex-row justify-between items-center mt-4 mb-2",
          },
          hideTitle$1
            ? null
            : React.createElement(DynamicTableUtils.TableHeading.make, {
                title: title,
                noVerticalMargin: true,
                description: props.description,
              }),
          customizeColumn,
        ),
        rightTitleElement$1,
        React.createElement(
          "div",
          {
            className: "flex flex-row my-2",
          },
          React.createElement(TableFilterSectionContext.make, {
            children: React.createElement(
              "div",
              {
                className: "flex-1",
              },
              React.Children.map(filterSection, function (element) {
                if (element === null) {
                  return null;
                } else {
                  return React.createElement(
                    "div",
                    {
                      className: "pb-3",
                    },
                    element,
                  );
                }
              }),
            ),
            isFilterSection: true,
          }),
          React.createElement(
            "div",
            {
              className: "flex flex-row",
            },
            tableActions !== undefined
              ? React.createElement(LoadedTableContext.make, {
                  value: actualData$1,
                  children: Caml_option.valFromOption(tableActions),
                })
              : null,
          ),
        ),
      ),
      tmp,
      tableDataLoading$1
        ? React.createElement(
            DynamicTableUtils.TableDataLoadingIndicator.make,
            {
              showWithData: rows.length !== 0,
            },
          )
        : null,
      bottomActions !== undefined
        ? React.createElement(LoadedTableContext.make, {
            value: actualData$1,
            children: Caml_option.valFromOption(bottomActions),
          })
        : null,
      downloadCsv !== undefined
        ? React.createElement(
            "div",
            {
              className: "flex justify-end mt-4 mb-2 ",
            },
            React.createElement(LoadedTableContext.make, {
              value: actualData$1,
              children: Caml_option.valFromOption(downloadCsv),
            }),
          )
        : null,
    ),
  });
}

var make = ReactWindowTable;

export {
  checkBoxPropDefaultVal,
  FilterRow,
  NewCell,
  ReactWindowTableComponent,
  sortAtom,
  useSortedObj,
  sortArray,
  make,
};
/* sortAtom Not a pure module */
