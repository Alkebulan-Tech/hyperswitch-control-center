// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Recoil from "recoil";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as RemoteFilter from "./RemoteFilter.bs.js";
import * as ConfigContext from "../context/ConfigContext.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as ThemeProvider from "../context/ThemeProvider.bs.js";
import * as AnalyticsAtoms from "../screens/analyticsScreens/AnalyticsAtoms.bs.js";
import React$1 from "@monaco-editor/react";

function DynamicFilter$CustomFilters(props) {
  var currentFilterValue = props.currentFilterValue;
  var setCustomFilter = props.setCustomFilter;
  var tabNames = props.tabNames;
  var setShowModal = props.setShowModal;
  var match = React.useState(function () {
    return "";
  });
  var setErrMessage = match[1];
  var errMessage = match[0];
  var match$1 = Recoil.useRecoilState(AnalyticsAtoms.completionProvider);
  var setCompletionDisposable = match$1[1];
  var completionDisposable = match$1[0];
  var match$2 = ThemeProvider.useTheme(undefined);
  var theme = match$2 ? "vs-dark" : "light";
  var match$3 = React.useState(function () {
    return currentFilterValue;
  });
  var setLocalData = match$3[1];
  var localData = match$3[0];
  var placeholderText =
    "ex: payment_method_type = 'UPI' and payment_method_type in ('WALLET', 'UPI') or currency not in ('GBP', 'AED') and auth_type != 'OTP'";
  var match$4 = React.useState(function () {
    return placeholderText;
  });
  var setPlaceHolder = match$4[1];
  var placeholderTextSt = match$4[0];
  var onSubmit = function (param) {
    Curry._1(setCustomFilter, localData);
    Curry._1(setShowModal, function (param) {
      return false;
    });
  };
  var onChange = function (str) {
    if (LogicUtils.isEmptyString(str)) {
      Curry._1(setPlaceHolder, function (param) {
        return placeholderText;
      });
    }
    Curry._1(setLocalData, function (param) {
      return str;
    });
  };
  React.useEffect(
    function () {
      Curry._1(setErrMessage, function (param) {
        return "";
      });
      if (localData.includes('"')) {
        Curry._1(setErrMessage, function (str) {
          return "" + str + " Please use ' instead of \".";
        });
      }
      var validatorArr = localData
        .replace(/ AND /gi, "@@")
        .replace(/ OR /gi, "@@")
        .split("@@");
      validatorArr.forEach(function (ele) {
        var mArr = ele
          .replace(/ != /gi, "@@")
          .replace(/ > /gi, "@@")
          .replace(/ < /gi, "@@")
          .replace(/ >= /gi, "@@")
          .replace(/ <= /gi, "@@")
          .replace(/ = /gi, "@@")
          .replace(/ IN /gi, "@@")
          .replace(/ NOT IN /gi, "@@")
          .replace(/ LIKE /gi, "@@")
          .split("@@");
        var firstEle = Core__Option.getOr(mArr[0], "");
        if (
          LogicUtils.isNonEmptyString(firstEle) &&
          tabNames.indexOf(firstEle.trim().toLowerCase()) < 0
        ) {
          return Curry._1(setErrMessage, function (str) {
            return "" + str + " " + firstEle + " is not a valid dimension.";
          });
        }
      });
    },
    [localData],
  );
  var beforeMount = function (monaco) {
    var provideCompletionItems = function (model, position) {
      var word = model.getWordUntilPosition(position);
      var range_startLineNumber = position.lineNumber;
      var range_endLineNumber = position.lineNumber;
      var range_startColumn = word.startColumn;
      var range_endColumn = word.endColumn;
      var range = {
        startLineNumber: range_startLineNumber,
        endLineNumber: range_endLineNumber,
        startColumn: range_startColumn,
        endColumn: range_endColumn,
      };
      var createSuggest = function (range) {
        return tabNames.map(function (val) {
          return {
            label: val,
            insertText: val,
            range: range,
          };
        });
      };
      return {
        suggestions: createSuggest(range),
      };
    };
    if (completionDisposable !== undefined) {
      return;
    } else {
      return setCompletionDisposable(function (param) {
        return Caml_option.some(
          monaco.languages.registerCompletionItemProvider("sql", {
            provideCompletionItems: provideCompletionItems,
          }),
        );
      });
    }
  };
  var match$5 = React.useState(function () {
    return false;
  });
  var setMouseEnter = match$5[1];
  return React.createElement(
    "div",
    {
      className: "border-t border-gray-200 p-5",
      onKeyPress: function (param) {
        Curry._1(setMouseEnter, function (param) {
          return true;
        });
      },
      onClick: function (param) {
        Curry._1(setPlaceHolder, function (param) {
          return "";
        });
      },
      onMouseLeave: function (param) {
        Curry._1(setMouseEnter, function (param) {
          return false;
        });
      },
    },
    LogicUtils.isNonEmptyString(placeholderTextSt) &&
      LogicUtils.isEmptyString(localData) &&
      !match$5[0]
      ? React.createElement(
          "div",
          {
            className: "monaco-placeholder text-black opacity-50 ml-6 ",
          },
          placeholderTextSt,
        )
      : null,
    React.createElement(React$1, {
      height: "40vh",
      theme: theme,
      language: "sql",
      onChange: onChange,
      value: localData,
      beforeMount: beforeMount,
      options: {
        emptySelectionClipboard: true,
        wordWrap: "on",
        lineNumbers: "off",
        minimap: {
          enabled: false,
        },
        roundedSelection: false,
      },
    }),
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "span",
        {
          className: "flex break-words text-red-800",
        },
        LogicUtils.isEmptyString(errMessage) ? null : errMessage,
      ),
      React.createElement(
        "div",
        {
          className: "mt-6",
        },
        React.createElement(Button.make, {
          buttonState: LogicUtils.isEmptyString(errMessage)
            ? /* Normal */ 0
            : /* Disabled */ 2,
          text: "Apply Filter",
          buttonType: /* Primary */ 0,
          buttonSize: /* Small */ 2,
          onClick: onSubmit,
        }),
      ),
    ),
  );
}

var CustomFilters = {
  make: DynamicFilter$CustomFilters,
};

function DynamicFilter(props) {
  var refreshFilters = props.refreshFilters;
  var revampedFilter = props.revampedFilter;
  var showSelectFiltersSearch = props.showSelectFiltersSearch;
  var filtersDisplayOption = props.filtersDisplayOption;
  var filterFieldsPortalName = props.filterFieldsPortalName;
  var customFilterKey = props.customFilterKey;
  var moduleName = props.moduleName;
  var filterButtonStyle = props.filterButtonStyle;
  var customViewTop = props.customViewTop;
  var tabNames = props.tabNames;
  var initialFilters = props.initialFilters;
  var customViewTop$1 =
    customViewTop !== undefined
      ? Caml_option.valFromOption(customViewTop)
      : null;
  var filterButtonStyle$1 =
    filterButtonStyle !== undefined ? filterButtonStyle : "";
  var moduleName$1 = moduleName !== undefined ? moduleName : "";
  var customFilterKey$1 = customFilterKey !== undefined ? customFilterKey : "";
  var filterFieldsPortalName$1 =
    filterFieldsPortalName !== undefined
      ? filterFieldsPortalName
      : "navbarSecondRow";
  var filtersDisplayOption$1 =
    filtersDisplayOption !== undefined ? filtersDisplayOption : true;
  var showSelectFiltersSearch$1 =
    showSelectFiltersSearch !== undefined ? showSelectFiltersSearch : false;
  var revampedFilter$1 = revampedFilter !== undefined ? revampedFilter : false;
  var refreshFilters$1 = refreshFilters !== undefined ? refreshFilters : true;
  var match = React.useContext(ConfigContext.configContext);
  var localFilters = initialFilters.filter(function (item) {
    return Core__Option.isSome(item.localFilter);
  });
  var remoteOptions = props.options.filter(function (item) {
    return Core__Option.isNone(item.localFilter);
  });
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowModal = match$1[1];
  var match$2 = React.useContext(FilterContext.filterContext);
  var removeKeys = match$2.removeKeys;
  var updateExistingKeys = match$2.updateExistingKeys;
  var currentCustomFilterValue = Core__Option.getOr(
    match$2.filterValue[customFilterKey$1],
    "",
  );
  var setCustomFilter = function (customFilter) {
    Curry._1(
      updateExistingKeys,
      Object.fromEntries([[customFilterKey$1, customFilter]]),
    );
  };
  var customFilters = LogicUtils.isNonEmptyString(customFilterKey$1)
    ? React.createElement(
        React.Fragment,
        undefined,
        React.createElement(
          "div",
          {
            className: "mx-2",
          },
          React.createElement(Button.make, {
            text: "Add Custom Filters",
            buttonType: /* FilterAdd */ 7,
            buttonSize: /* Small */ 2,
            leftIcon: {
              TAG: /* CustomIcon */ 1,
              _0: React.createElement(Icon.make, {
                name: "add_custom_img",
                size: 14,
              }),
            },
            showBorder: false,
            onClick: function (_ev) {
              Curry._1(setShowModal, function (param) {
                return true;
              });
            },
            textStyle:
              "" + match.globalUIConfig.font.textColor.primaryNormal + "",
          }),
        ),
        React.createElement(Modal.make, {
          showModal: match$1[0],
          setShowModal: setShowModal,
          children: React.createElement(DynamicFilter$CustomFilters, {
            setShowModal: setShowModal,
            tabNames: tabNames,
            moduleName: moduleName$1,
            setCustomFilter: setCustomFilter,
            currentFilterValue: currentCustomFilterValue,
          }),
          modalHeading: "Add Custom Filter",
          modalClass: "w-full md:w-2/3 mx-auto",
        }),
      )
    : null;
  var clearFilters = function (param) {
    Curry._1(removeKeys, [customFilterKey$1].concat(tabNames));
  };
  return React.createElement(
    "div",
    {
      className: "flex-1 ml-1",
    },
    React.createElement(RemoteFilter.make, {
      defaultFilters: "",
      fixedFilters: props.initialFixedFilters,
      requiredSearchFieldsList: [],
      refreshFilters: refreshFilters$1,
      remoteFilters: initialFilters,
      remoteOptions: remoteOptions,
      localOptions: [],
      localFilters: localFilters,
      popupFilterFields: props.popupFilterFields,
      tableName: moduleName$1,
      autoApply: false,
      showExtraFiltersInline: true,
      addFilterStyle: "pt-4",
      filterButtonStyle: filterButtonStyle$1,
      tooltipStyling: "",
      showClearFilterButton: true,
      defaultFilterKeys: props.defaultFilterKeys,
      customView: Caml_option.some(customFilters),
      customViewTop: Caml_option.some(customViewTop$1),
      updateUrlWith: props.updateUrlWith,
      clearFilters: clearFilters,
      filterFieldsPortalName: filterFieldsPortalName$1,
      initalCount: LogicUtils.isNonEmptyString(currentCustomFilterValue)
        ? 1
        : 0,
      showFiltersBtn: filtersDisplayOption$1,
      hideFiltersDefaultValue: props.hideFiltersDefaultValue,
      showSelectFiltersSearch: showSelectFiltersSearch$1,
      disableURIdecode: true,
      revampedFilter: revampedFilter$1,
    }),
  );
}

var make = DynamicFilter;

export { CustomFilters, make };
/* Icon Not a pure module */
