// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as InfraCalendar from "./InfraCalendar.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

var startYear = {
  contents: 2016,
};

var years = [];

while ((new Date().getFullYear() | 0) >= startYear.contents) {
  years.push(startYear.contents);
  startYear.contents = (startYear.contents + 1) | 0;
}

years.reverse();

var months = [
  /* Jan */ 0, /* Feb */ 1, /* Mar */ 2, /* Apr */ 3, /* May */ 4, /* Jun */ 5,
  /* Jul */ 6, /* Aug */ 7, /* Sep */ 8, /* Oct */ 9, /* Nov */ 10,
  /* Dec */ 11,
];

function getMonthInStr(mon) {
  switch (mon) {
    case /* Jan */ 0:
      return "January, ";
    case /* Feb */ 1:
      return "February, ";
    case /* Mar */ 2:
      return "March, ";
    case /* Apr */ 3:
      return "April, ";
    case /* May */ 4:
      return "May, ";
    case /* Jun */ 5:
      return "June, ";
    case /* Jul */ 6:
      return "July, ";
    case /* Aug */ 7:
      return "August, ";
    case /* Sep */ 8:
      return "September, ";
    case /* Oct */ 9:
      return "October, ";
    case /* Nov */ 10:
      return "November, ";
    case /* Dec */ 11:
      return "December, ";
  }
}

function getMonthFromFloat(value) {
  var valueInt = value | 0;
  return Core__Option.getOr(months[valueInt], /* Jan */ 0);
}

function InfraCalendarList$YearItem(props) {
  var tempMonth = props.tempMonth;
  var setCurrDate = props.setCurrDate;
  var handleChangeMonthBy = props.handleChangeMonthBy;
  var year = props.year;
  var tempYear = props.tempYear;
  var isSelected = year === tempYear;
  var yearRef = React.useRef(null);
  React.useEffect(
    function () {
      if (isSelected) {
        var element = yearRef.current;
        if (!(element == null)) {
          element.scrollIntoView();
        }
      }
    },
    [isSelected],
  );
  return React.createElement(
    "li",
    {
      ref: Caml_option.some(yearRef),
      className:
        "p-2 " +
        (year === (tempYear | 0)
          ? "bg-blue-600 text-white"
          : "dark:hover:bg-jp-gray-900 hover:bg-jp-gray-100") +
        " cursor-pointer bg-opacity-100",
      value: year.toString(),
      onClick: function (e) {
        var tar = e.currentTarget.value;
        var yearDiff = (tar - tempYear) | 0;
        if (yearDiff !== 0) {
          Curry._1(handleChangeMonthBy, Math.imul(yearDiff, 12));
          return Curry._1(setCurrDate, function (param) {
            return new Date(tar, tempMonth);
          });
        }
      },
    },
    year.toString(),
  );
}

var YearItem = {
  make: InfraCalendarList$YearItem,
};

function InfraCalendarList$MonthItem(props) {
  var setCurrDate = props.setCurrDate;
  var handleChangeMonthBy = props.handleChangeMonthBy;
  var tempYear = props.tempYear;
  var tempMonth = props.tempMonth;
  var index = props.index;
  var isSelected = index === tempMonth;
  var monthRef = React.useRef(null);
  React.useEffect(
    function () {
      if (isSelected) {
        var element = monthRef.current;
        if (!(element == null)) {
          element.scrollIntoView();
        }
      }
    },
    [isSelected],
  );
  return React.createElement(
    "li",
    {
      ref: Caml_option.some(monthRef),
      className:
        "p-2 px-4 " +
        (index === (tempMonth | 0)
          ? "bg-blue-600 text-white"
          : "dark:hover:bg-jp-gray-900 hover:bg-jp-gray-100") +
        "  cursor-pointer",
      value: index.toString(),
      onClick: function (e) {
        var tar = e.currentTarget.value;
        var monthDiff = (tar - tempMonth) | 0;
        if (monthDiff !== 0) {
          Curry._1(handleChangeMonthBy, monthDiff);
          return Curry._1(setCurrDate, function (param) {
            return new Date(tempYear, tar);
          });
        }
      },
    },
    getMonthInStr(props.mon).replace(/,/g, ""),
  );
}

var MonthItem = {
  make: InfraCalendarList$MonthItem,
};

function InfraCalendarList(props) {
  var setCurrDate = props.setCurrDate;
  var handleChangeMonthBy = props.handleChangeMonthBy;
  var disableFutureDates = props.disableFutureDates;
  var disablePastDates = props.disablePastDates;
  var endDate = props.endDate;
  var startDate = props.startDate;
  var startDate$1 = startDate !== undefined ? startDate : "";
  var endDate$1 = endDate !== undefined ? endDate : "";
  var disablePastDates$1 =
    disablePastDates !== undefined ? disablePastDates : true;
  var disableFutureDates$1 =
    disableFutureDates !== undefined ? disableFutureDates : false;
  var currDateTemp = new Date(props.currDateIm.valueOf());
  var tempDate = currDateTemp.setMonth(currDateTemp.getMonth() | 0);
  var tempMonth = new Date(tempDate).getMonth();
  var tempYear = new Date(tempDate).getFullYear();
  return React.createElement(
    "span",
    {
      className:
        "flex flex-1 flex-row overflow-auto border-t border-b dark:border-jp-gray-900 select-none",
    },
    React.createElement(
      "span",
      undefined,
      props.monthYearListVisibility
        ? React.createElement(
            "div",
            {
              className: "flex text-jp-gray-600 justify-between w-80",
            },
            React.createElement(
              "ul",
              {
                className: "w-1/2 h-80 overflow-scroll",
              },
              months.map(function (mon, i) {
                return JsxPPXReactSupport.createElementWithKey(
                  i.toString(),
                  InfraCalendarList$MonthItem,
                  {
                    index: i,
                    tempMonth: tempMonth,
                    tempYear: tempYear,
                    handleChangeMonthBy: handleChangeMonthBy,
                    setCurrDate: setCurrDate,
                    mon: mon,
                  },
                );
              }),
            ),
            React.createElement(
              "ul",
              {
                className: "w-1/2",
              },
              years.map(function (year, i) {
                return JsxPPXReactSupport.createElementWithKey(
                  i.toString(),
                  InfraCalendarList$YearItem,
                  {
                    tempYear: tempYear,
                    year: year,
                    handleChangeMonthBy: handleChangeMonthBy,
                    setCurrDate: setCurrDate,
                    tempMonth: tempMonth,
                  },
                );
              }),
            ),
          )
        : React.createElement(InfraCalendar.make, {
            month: getMonthFromFloat(tempMonth),
            year: tempYear | 0,
            onDateClick: props.onDateClick,
            showTitle: false,
            cellHighlighter: props.cellHighlighter,
            cellRenderer: props.cellRenderer,
            startDate: startDate$1,
            endDate: endDate$1,
            disablePastDates: disablePastDates$1,
            disableFutureDates: disableFutureDates$1,
          }),
    ),
  );
}

var make = InfraCalendarList;

export {
  startYear,
  years,
  months,
  getMonthInStr,
  getMonthFromFloat,
  YearItem,
  MonthItem,
  make,
};
/*  Not a pure module */
