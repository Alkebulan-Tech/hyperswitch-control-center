// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Tick from "./custom-icons/Tick.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as BottomModal from "./BottomModal.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConfigContext from "../context/ConfigContext.bs.js";
import * as React$1 from "@headlessui/react";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function HeadlessUISelectBox(props) {
  var closeListOnClick = props.closeListOnClick;
  var textClass = props.textClass;
  var showBottomUp = props.showBottomUp;
  var deSelectAllowed = props.deSelectAllowed;
  var dropDownClass = props.dropDownClass;
  var className = props.className;
  var dropdownPosition = props.dropdownPosition;
  var children = props.children;
  var options = props.options;
  var setValue = props.setValue;
  var value = props.value;
  var value$1 =
    value !== undefined
      ? value
      : {
          TAG: /* String */ 0,
          _0: "",
        };
  var dropdownPosition$1 =
    dropdownPosition !== undefined ? dropdownPosition : /* Left */ 0;
  var className$1 = className !== undefined ? className : "";
  var dropDownClass$1 = dropDownClass !== undefined ? dropDownClass : "w-52";
  var deSelectAllowed$1 =
    deSelectAllowed !== undefined ? deSelectAllowed : true;
  var showBottomUp$1 = showBottomUp !== undefined ? showBottomUp : false;
  var textClass$1 = textClass !== undefined ? textClass : "text-sm";
  var closeListOnClick$1 =
    closeListOnClick !== undefined ? closeListOnClick : false;
  var match = React.useContext(ConfigContext.configContext);
  var textColor = match.globalUIConfig.font.textColor;
  var dropdownPositionClass = dropdownPosition$1 !== 0 ? "left-0" : "right-0";
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowList = match$1[1];
  var showList = match$1[0];
  var closeClick = function (param) {
    Curry._1(setShowList, function (param) {
      return !showList;
    });
  };
  return React.createElement(
    "div",
    {
      className: "text-left",
    },
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-testid", "profile"]],
      children: React.createElement(React$1.Menu, {
        as: "div",
        className: "relative inline-block text-left",
        children: function (menuProps) {
          return React.createElement(
            "div",
            undefined,
            React.createElement(React$1.Menu.Button, {
              className: className$1,
              children: function (buttonProps) {
                return children;
              },
            }),
            React.createElement(React$1.Transition, {
              as: "span",
              enter: "transition ease-out duration-100",
              enterFrom: "transform opacity-0 scale-95",
              enterTo: "transform opacity-100 scale-100",
              leave: "transition ease-in duration-75",
              leaveFrom: "transform opacity-100 scale-100",
              leaveTo: "transform opacity-0 scale-95",
              children: Caml_option.some(
                showBottomUp$1
                  ? React.createElement(BottomModal.make, {
                      onCloseClick: closeClick,
                      children: React.createElement(React$1.Menu.Items, {
                        className:
                          "w-full p-1 origin-top-right bg-white dark:bg-jp-gray-950 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none",
                        children: function (props) {
                          return options.map(function (option, index) {
                            var selected;
                            selected =
                              value$1.TAG === /* String */ 0
                                ? value$1._0 === option.value
                                : value$1._0.includes(option.value);
                            var disabledClass = option.isDisabled
                              ? "disabled cursor-not-allowed"
                              : "";
                            return JsxPPXReactSupport.createElementWithKey(
                              index.toString(),
                              React$1.Menu.Item,
                              {
                                children: function (props) {
                                  var isCloseIcon =
                                    props.active && deSelectAllowed$1;
                                  var iconName = option.leftIcon;
                                  var tmp;
                                  if (typeof iconName === "number") {
                                    tmp = null;
                                  } else {
                                    switch (iconName.TAG | 0) {
                                      case /* FontAwesome */ 0:
                                        tmp = React.createElement(Icon.make, {
                                          name: iconName._0,
                                          size: 14,
                                          className:
                                            "align-middle " +
                                            Belt_Option.getWithDefault(
                                              option.customIconStyle,
                                              "",
                                            ) +
                                            "",
                                        });
                                        break;
                                      case /* CustomIcon */ 1:
                                        tmp = iconName._0;
                                        break;
                                      case /* CustomRightIcon */ 2:
                                        tmp = null;
                                        break;
                                      case /* Euler */ 3:
                                        tmp = React.createElement(Icon.make, {
                                          name: iconName._0,
                                          size: 12,
                                          className: "align-middle",
                                        });
                                        break;
                                    }
                                  }
                                  var iconName$1 = option.rightIcon;
                                  var tmp$1;
                                  if (typeof iconName$1 === "number") {
                                    tmp$1 = null;
                                  } else {
                                    switch (iconName$1.TAG | 0) {
                                      case /* FontAwesome */ 0:
                                        tmp$1 = React.createElement(Icon.make, {
                                          name: iconName$1._0,
                                          size: 12,
                                          className:
                                            "align-middle " +
                                            Belt_Option.getWithDefault(
                                              option.customIconStyle,
                                              "",
                                            ) +
                                            "",
                                        });
                                        break;
                                      case /* CustomIcon */ 1:
                                        tmp$1 = iconName$1._0;
                                        break;
                                      case /* CustomRightIcon */ 2:
                                        tmp$1 = null;
                                        break;
                                      case /* Euler */ 3:
                                        tmp$1 = React.createElement(Icon.make, {
                                          name: iconName$1._0,
                                          size: 12,
                                          className: "align-middle",
                                        });
                                        break;
                                    }
                                  }
                                  return React.createElement(
                                    "div",
                                    {
                                      className:
                                        "group flex flex-row items-center justify-between rounded-md w-full p-3 text-fs-14 font-normal cursor-pointer " +
                                        (props.active
                                          ? "bg-gray-100 dark:bg-gray-700"
                                          : "") +
                                        " " +
                                        disabledClass +
                                        "",
                                      disabled: option.isDisabled,
                                      onClick: function (ev) {
                                        if (!closeListOnClick$1) {
                                          ev.stopPropagation();
                                          ev.preventDefault();
                                        }
                                        Curry._1(setValue, option.value);
                                      },
                                    },
                                    React.createElement(
                                      "div",
                                      {
                                        className:
                                          "flex flex-row items-center gap-2",
                                      },
                                      tmp,
                                      React.createElement(
                                        AddDataAttributes.make,
                                        {
                                          attributes: [
                                            ["data-options", option.label],
                                          ],
                                          children: React.createElement(
                                            "div",
                                            {
                                              className:
                                                Belt_Option.getWithDefault(
                                                  option.customTextStyle,
                                                  "",
                                                ),
                                            },
                                            React.createElement(
                                              "span",
                                              {
                                                className: selected
                                                  ? "" +
                                                    textColor.primaryNormal +
                                                    " font-semibold"
                                                  : "",
                                              },
                                              option.label,
                                            ),
                                          ),
                                        },
                                      ),
                                      tmp$1,
                                    ),
                                    React.createElement(UIUtils.RenderIf.make, {
                                      condition: selected,
                                      children: isCloseIcon
                                        ? React.createElement(Icon.make, {
                                            name: "close",
                                            size: 10,
                                            className: "text-red-500 mr-1",
                                          })
                                        : React.createElement(Tick.make, {
                                            isSelected: selected,
                                          }),
                                    }),
                                  );
                                },
                              },
                            );
                          });
                        },
                      }),
                      headerText: "Select Action",
                    })
                  : React.createElement(React$1.Menu.Items, {
                      className:
                        "absolute z-10 " +
                        dropdownPositionClass +
                        " mt-2 p-1 origin-top-right bg-white dark:bg-jp-gray-950 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none " +
                        dropDownClass$1 +
                        "",
                      children: function (props) {
                        return options.map(function (option, index) {
                          var selected;
                          selected =
                            value$1.TAG === /* String */ 0
                              ? value$1._0 === option.value
                              : value$1._0.includes(option.value);
                          var disabledClass = option.isDisabled
                            ? "disabled cursor-not-allowed"
                            : "";
                          return JsxPPXReactSupport.createElementWithKey(
                            index.toString(),
                            React$1.Menu.Item,
                            {
                              children: function (props) {
                                var iconName = option.leftIcon;
                                var tmp;
                                if (typeof iconName === "number") {
                                  tmp = null;
                                } else {
                                  switch (iconName.TAG | 0) {
                                    case /* FontAwesome */ 0:
                                      tmp = React.createElement(Icon.make, {
                                        name: iconName._0,
                                        size: 12,
                                        className:
                                          "align-middle " +
                                          Core__Option.getOr(
                                            option.customIconStyle,
                                            "",
                                          ) +
                                          "",
                                      });
                                      break;
                                    case /* CustomIcon */ 1:
                                      tmp = iconName._0;
                                      break;
                                    case /* CustomRightIcon */ 2:
                                      tmp = null;
                                      break;
                                    case /* Euler */ 3:
                                      tmp = React.createElement(Icon.make, {
                                        name: iconName._0,
                                        size: 12,
                                        className: "align-middle",
                                      });
                                      break;
                                  }
                                }
                                var iconName$1 = option.rightIcon;
                                var tmp$1;
                                if (typeof iconName$1 === "number") {
                                  tmp$1 = null;
                                } else {
                                  switch (iconName$1.TAG | 0) {
                                    case /* FontAwesome */ 0:
                                      tmp$1 = React.createElement(Icon.make, {
                                        name: iconName$1._0,
                                        size: 12,
                                        className:
                                          "align-middle " +
                                          Core__Option.getOr(
                                            option.customIconStyle,
                                            "",
                                          ) +
                                          "",
                                      });
                                      break;
                                    case /* CustomIcon */ 1:
                                      tmp$1 = iconName$1._0;
                                      break;
                                    case /* CustomRightIcon */ 2:
                                      tmp$1 = null;
                                      break;
                                    case /* Euler */ 3:
                                      tmp$1 = React.createElement(Icon.make, {
                                        name: iconName$1._0,
                                        size: 12,
                                        className: "align-middle",
                                      });
                                      break;
                                  }
                                }
                                return React.createElement(
                                  "div",
                                  {
                                    className:
                                      "group flex flex-row items-center justify-between rounded-md w-full p-2 " +
                                      textClass$1 +
                                      " cursor-pointer " +
                                      (props.active
                                        ? "bg-gray-100 dark:bg-gray-700"
                                        : "") +
                                      " " +
                                      disabledClass +
                                      "",
                                    disabled: option.isDisabled,
                                    onClick: function (ev) {
                                      if (!closeListOnClick$1) {
                                        ev.stopPropagation();
                                        ev.preventDefault();
                                      }
                                      Curry._1(setValue, option.value);
                                    },
                                  },
                                  React.createElement(
                                    "div",
                                    {
                                      className:
                                        "flex flex-row items-center gap-2",
                                    },
                                    tmp,
                                    React.createElement(
                                      AddDataAttributes.make,
                                      {
                                        attributes: [
                                          ["data-options", option.label],
                                        ],
                                        children: React.createElement(
                                          "div",
                                          {
                                            className: Core__Option.getOr(
                                              option.customTextStyle,
                                              "",
                                            ),
                                          },
                                          React.createElement(
                                            "span",
                                            {
                                              className: selected
                                                ? "" +
                                                  textColor.primaryNormal +
                                                  " font-semibold"
                                                : "",
                                            },
                                            option.label,
                                          ),
                                        ),
                                      },
                                    ),
                                    tmp$1,
                                  ),
                                  selected
                                    ? props.active && deSelectAllowed$1
                                      ? React.createElement(Icon.make, {
                                          name: "close",
                                          size: 10,
                                          className: "text-red-500 mr-1",
                                        })
                                      : React.createElement(Tick.make, {
                                          isSelected: selected,
                                        })
                                    : null,
                                );
                              },
                            },
                          );
                        });
                      },
                    }),
              ),
            }),
          );
        },
      }),
    }),
  );
}

var make = HeadlessUISelectBox;

export { make };
/* Icon Not a pure module */
