// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Loadericon from "./custom-icons/Loadericon.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConfigContext from "../context/ConfigContext.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as ButtonGroupContext from "../context/ButtonGroupContext.bs.js";
import * as RippleEffectBackground from "./RippleEffectBackground.bs.js";

function useGetBgColor(
  buttonType,
  buttonState,
  showBorder,
  isDropdownOpenOpt,
  isPhoneDropdownOpt,
  param,
) {
  var isDropdownOpen =
    isDropdownOpenOpt !== undefined ? isDropdownOpenOpt : false;
  var isPhoneDropdown =
    isPhoneDropdownOpt !== undefined ? isPhoneDropdownOpt : false;
  var config = React.useContext(ConfigContext.configContext);
  var buttonConfig = config.globalUIConfig.button.backgroundColor;
  switch (buttonType) {
    case /* Primary */ 0:
      switch (buttonState) {
        case /* Loading */ 1:
          return buttonConfig.primaryLoading;
        case /* Disabled */ 2:
          return buttonConfig.primaryDisabled;
        case /* NoHover */ 3:
          return buttonConfig.primaryNoHover;
        case /* Normal */ 0:
        case /* Focused */ 4:
          return buttonConfig.primaryNormal;
      }
    case /* Secondary */ 1:
      switch (buttonState) {
        case /* Loading */ 1:
          if (showBorder) {
            return "bg-jp-gray-button_gray  dark:bg-jp-gray-darkgray_background";
          } else {
            return "bg-jp-gray-lightmode_steelgray bg-opacity-40 dark:bg-jp-gray-950 dark:bg-opacity-100";
          }
        case /* Disabled */ 2:
          if (showBorder) {
            return "bg-jp-gray-300 dark:bg-gray-800 dark:bg-opacity-10";
          } else {
            return "px-4";
          }
        case /* NoHover */ 3:
          return "bg-jp-gray-button_gray text-jp-gray-900 text-opacity-50  hover:bg-jp-gray-secondary_hover hover:text-jp-gray-890  dark:bg-jp-gray-darkgray_background dark:text-jp-gray-text_darktheme focus:outline-none dark:text-opacity-50 ";
        case /* Normal */ 0:
        case /* Focused */ 4:
          if (showBorder) {
            return "bg-jp-gray-button_gray text-jp-gray-900 text-opacity-75 hover:bg-jp-gray-secondary_hover hover:text-jp-gray-890  dark:bg-jp-gray-darkgray_background  dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
          } else {
            return "text-jp-gray-900 hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-40 dark:bg-jp-gray-darkgray_background dark:text-jp-gray-text_darktheme dark:text-opacity-50 dark:hover:bg-jp-gray-950 focus:outline-none";
          }
      }
    case /* PrimaryOutline */ 2:
      return buttonConfig.primaryOutline;
    case /* SecondaryFilled */ 3:
      switch (buttonState) {
        case /* Loading */ 1:
          return "bg-jp-gray-200 dark:bg-jp-gray-800 dark:bg-opacity-10";
        case /* Disabled */ 2:
          return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case /* NoHover */ 3:
          return "bg-gradient-to-b overflow-x-scroll from-jp-gray-200 to-jp-gray-300 dark:from-jp-gray-950 dark:to-jp-gray-950 dark:gray-text_darktheme focus:outline-none dark:text-opacity-50 text-opacity-50";
        case /* Normal */ 0:
        case /* Focused */ 4:
          return "bg-gradient-to-b from-jp-gray-250 to-jp-gray-200 dark:from-jp-gray-950 dark:to-jp-gray-950 hover:shadow dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
      }
    case /* NonFilled */ 4:
      switch (buttonState) {
        case /* Loading */ 1:
          return "bg-jp-gray-200 dark:bg-jp-gray-800 dark:bg-opacity-10";
        case /* Disabled */ 2:
          return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case /* NoHover */ 3:
          return "hover:bg-jp-gray-600 hover:bg-opacity-40 dark:hover:bg-jp-gray-950 dark:hover:bg-opacity-100 dark:text-jp-gray-text_darktheme focus:outline-none dark:text-opacity-50 text-opacity-50";
        case /* Normal */ 0:
        case /* Focused */ 4:
          return "hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-40 dark:hover:bg-jp-gray-950 dark:hover:bg-opacity-100 dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
      }
    case /* Pagination */ 5:
      switch (buttonState) {
        case /* Loading */ 1:
          return "border-left-1 border-right-1 font-normal border-left-1 bg-jp-gray-200 dark:bg-jp-gray-800 dark:bg-opacity-10";
        case /* Disabled */ 2:
          return "border-left-1 border-right-1 font-normal border-left-1 bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case /* NoHover */ 3:
          return "bg-white border-left-1 border-right-1 font-normal text-jp-gray-900 text-opacity-75 hover:text-jp-gray-900 dark:text-jp-gray-text_darktheme dark:text-opacity-75";
        case /* Normal */ 0:
        case /* Focused */ 4:
          return "border-left-1 opacity-80 border-right-1 font-normal border-left-1 text-jp-gray-900 text-opacity-50 hover:text-jp-gray-900 focus:outline-none";
      }
    case /* Pill */ 6:
      switch (buttonState) {
        case /* Loading */ 1:
          if (showBorder) {
            return "bg-white dark:bg-jp-gray-darkgray_background";
          } else {
            return "bg-jp-gray-600 bg-opacity-40 dark:bg-jp-gray-950 dark:bg-opacity-100";
          }
        case /* Disabled */ 2:
          if (showBorder) {
            return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
          } else {
            return "px-4";
          }
        case /* NoHover */ 3:
          return "bg-white text-jp-gray-900 text-opacity-50 dark:bg-jp-gray-darkgray_background dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
        case /* Normal */ 0:
        case /* Focused */ 4:
          return "bg-white text-jp-gray-900 text-opacity-50 hover:shadow hover:text-opacity-75 dark:bg-jp-gray-darkgray_background dark:text-jp-gray-text_darktheme dark:text-opacity-50 focus:outline-none";
      }
    case /* FilterAdd */ 7:
      switch (buttonState) {
        case /* Loading */ 1:
          return "bg-jp-gray-200 dark:bg-jp-gray-800 dark:bg-opacity-10";
        case /* Disabled */ 2:
          return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case /* NoHover */ 3:
          return "hover:bg-jp-gray-600 hover:bg-opacity-40 dark:hover:bg-jp-gray-950 dark:hover:bg-opacity-100 dark:text-blue-500  focus:outline-none dark:text-opacity-100 text-opacity-50";
        case /* Normal */ 0:
        case /* Focused */ 4:
          return "hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-40 dark:hover:bg-jp-gray-950 dark:hover:bg-opacity-100 text-blue-500 dark:text-blue-500 dark:text-opacity-100 focus:outline-none";
      }
    case /* Delete */ 8:
      switch (buttonState) {
        case /* Loading */ 1:
          return "bg-red-960";
        case /* Disabled */ 2:
          return "bg-jp-gray-300 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
        case /* NoHover */ 3:
          return "bg-gradient-to-t from-red-960 to-red-800  hover:from-red-960 hover:to-red-960 focus:outline-none dark:text-opacity-50 text-opacity-50";
        case /* Normal */ 0:
        case /* Focused */ 4:
          return "bg-red-960   hover:from-red-960 hover:to-red-950 focus:outline-none";
      }
    case /* Transparent */ 9:
      switch (buttonState) {
        case /* Loading */ 1:
        case /* NoHover */ 3:
          return "bg-gray-50   hover:bg-gray-200 focus:outline-none";
        case /* Normal */ 0:
        case /* Disabled */ 2:
        case /* Focused */ 4:
          return "bg-gray-50   hover:bg-gray-200 dark:bg-jp-gray-darkgray_background focus:outline-none";
      }
    case /* SelectTransparent */ 10:
      switch (buttonState) {
        case /* Loading */ 1:
        case /* Disabled */ 2:
        case /* NoHover */ 3:
          return "bg-gray-100   hover:bg-blue-200 focus:outline-none";
        case /* Normal */ 0:
        case /* Focused */ 4:
          return "bg-blue-100   hover:bg-blue-200  dark:bg-black focus:outline-none";
      }
    case /* DarkPurple */ 11:
      switch (buttonState) {
        case /* Normal */ 0:
        case /* Loading */ 1:
        case /* Disabled */ 2:
        case /* NoHover */ 3:
        case /* Focused */ 4:
          return "bg-[#4F54EF] dark:bg-black focus:outline-none";
      }
    case /* Dropdown */ 12:
      var hoverCss = isPhoneDropdown ? "" : "hover:bg-jp-2-light-gray-100";
      var color = isDropdownOpen
        ? showBorder
          ? "bg-jp-2-light-gray-100 shadow-jp-2-sm-gray-focus"
          : isPhoneDropdown
            ? "bg-transparent"
            : "bg-jp-2-light-gray-100"
        : isPhoneDropdown
          ? ""
          : "bg-white";
      if (buttonState !== 2) {
        return (
          "" +
          color +
          " " +
          hoverCss +
          " focus:outline-none dark:active:shadow-none"
        );
      } else {
        return "bg-gray-200 dark:bg-jp-gray-950 dark:bg-opacity-50 border dark:border-jp-gray-disabled_border dark:border-opacity-50";
      }
  }
}

function useGetTextColor(
  buttonType,
  buttonState,
  showBorder,
  isDropdownOpenOpt,
  isPhoneDropdownOpt,
  param,
) {
  var isDropdownOpen =
    isDropdownOpenOpt !== undefined ? isDropdownOpenOpt : false;
  var isPhoneDropdown =
    isPhoneDropdownOpt !== undefined ? isPhoneDropdownOpt : false;
  var config = React.useContext(ConfigContext.configContext);
  var textConfig = config.globalUIConfig.button.textColor;
  switch (buttonType) {
    case /* Primary */ 0:
      if (buttonState !== 2) {
        return textConfig.primaryNormal;
      } else {
        return textConfig.primaryDisabled;
      }
    case /* Secondary */ 1:
      if (buttonState >= 3) {
        return "text-jp-gray-950 hover:text-black dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
      }
      switch (buttonState) {
        case /* Normal */ 0:
          return "text-jp-gray-950 hover:text-black dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
        case /* Loading */ 1:
          return "text-jp-gray-950 hover:text-black dark:text-jp-gray-text_darktheme dark:text-opacity-75";
        case /* Disabled */ 2:
          return "text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25";
      }
    case /* PrimaryOutline */ 2:
      return textConfig.primaryOutline;
    case /* SecondaryFilled */ 3:
      if (buttonState >= 3) {
        return "text-jp-gray-800 hover:text-black dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
      }
      switch (buttonState) {
        case /* Normal */ 0:
          return "text-jp-gray-800 hover:text-black dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
        case /* Loading */ 1:
          return "text-jp-gray-800 hover:text-black dark:text-jp-gray-text_darktheme dark:text-opacity-75";
        case /* Disabled */ 2:
          return "text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25";
      }
    case /* NonFilled */ 4:
    case /* Pagination */ 5:
    case /* Pill */ 6:
      break;
    case /* Transparent */ 9:
      return "text-gray-400";
    case /* FilterAdd */ 7:
    case /* SelectTransparent */ 10:
      return "text-blue-500";
    case /* Delete */ 8:
    case /* DarkPurple */ 11:
      return "text-white";
    case /* Dropdown */ 12:
      var exit = 0;
      if (buttonState >= 3) {
        exit = 2;
      } else {
        switch (buttonState) {
          case /* Normal */ 0:
            exit = 2;
            break;
          case /* Loading */ 1:
          case /* Disabled */ 2:
            return "text-jp-2-light-gray-600";
        }
      }
      if (exit === 2) {
        if (isDropdownOpen) {
          if (showBorder || isPhoneDropdown) {
            return "text-jp-2-light-gray-2000";
          } else {
            return "text-jp-2-light-gray-1700";
          }
        } else {
          return "text-jp-2-light-gray-1200 hover:text-jp-2-light-gray-2000";
        }
      }
      break;
  }
  if (buttonState >= 3) {
    return "text-jp-gray-900 text-opacity-50 hover:text-opacity-100 dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
  }
  switch (buttonState) {
    case /* Normal */ 0:
      return "text-jp-gray-900 text-opacity-50 hover:text-opacity-100 dark:text-jp-gray-text_darktheme dark:hover:text-jp-gray-text_darktheme dark:hover:text-opacity-75";
    case /* Loading */ 1:
      return "text-jp-gray-900 text-opacity-50 hover:text-opacity-100 dark:text-jp-gray-text_darktheme dark:text-opacity-75";
    case /* Disabled */ 2:
      return "text-jp-gray-600 dark:text-jp-gray-text_darktheme dark:text-opacity-25";
  }
}

function Button(props) {
  var dataTestId = props.dataTestId;
  var toolTipPosition = props.toolTipPosition;
  var showBtnTextToolTip = props.showBtnTextToolTip;
  var isPhoneDropdown = props.isPhoneDropdown;
  var isRelative = props.isRelative;
  var ellipsisOnly = props.ellipsisOnly;
  var buttonRightText = props.buttonRightText;
  var badge = props.badge;
  var allowButtonTextMinWidth = props.allowButtonTextMinWidth;
  var textStyleClass = props.textStyleClass;
  var customButtonStyle = props.customButtonStyle;
  var disableRipple = props.disableRipple;
  var fullLength = props.fullLength;
  var textWeight = props.textWeight;
  var iconBorderColor = props.iconBorderColor;
  var iconColor = props.iconColor;
  var textStyle = props.textStyle;
  var onClick = props.onClick;
  var onEnterPress = props.onEnterPress;
  var flattenTop = props.flattenTop;
  var flattenBottom = props.flattenBottom;
  var type_ = props.type_;
  var showBorder = props.showBorder;
  var rightIcon = props.rightIcon;
  var leftIcon = props.leftIcon;
  var isDropdownOpen = props.isDropdownOpen;
  var buttonType = props.buttonType;
  var isSelectBoxButton = props.isSelectBoxButton;
  var text = props.text;
  var buttonState = props.buttonState;
  var loadingText = props.loadingText;
  var buttonFor = props.buttonFor;
  var buttonFor$1 = buttonFor !== undefined ? buttonFor : "";
  var loadingText$1 = loadingText !== undefined ? loadingText : "Loading..";
  var buttonState$1 = buttonState !== undefined ? buttonState : /* Normal */ 0;
  var isSelectBoxButton$1 =
    isSelectBoxButton !== undefined ? isSelectBoxButton : false;
  var buttonType$1 =
    buttonType !== undefined ? buttonType : /* SecondaryFilled */ 3;
  var isDropdownOpen$1 = isDropdownOpen !== undefined ? isDropdownOpen : false;
  var leftIcon$1 = leftIcon !== undefined ? leftIcon : /* NoIcon */ 0;
  var rightIcon$1 = rightIcon !== undefined ? rightIcon : /* NoIcon */ 0;
  var showBorder$1 = showBorder !== undefined ? showBorder : true;
  var type_$1 = type_ !== undefined ? type_ : "button";
  var flattenBottom$1 = flattenBottom !== undefined ? flattenBottom : false;
  var flattenTop$1 = flattenTop !== undefined ? flattenTop : false;
  var onEnterPress$1 = onEnterPress !== undefined ? onEnterPress : true;
  var textStyle$1 = textStyle !== undefined ? textStyle : "";
  var iconColor$1 = iconColor !== undefined ? iconColor : "";
  var iconBorderColor$1 = iconBorderColor !== undefined ? iconBorderColor : "";
  var fullLength$1 = fullLength !== undefined ? fullLength : false;
  var disableRipple$1 = disableRipple !== undefined ? disableRipple : false;
  var customButtonStyle$1 =
    customButtonStyle !== undefined ? customButtonStyle : "";
  var allowButtonTextMinWidth$1 =
    allowButtonTextMinWidth !== undefined ? allowButtonTextMinWidth : true;
  var badge$1 =
    badge !== undefined
      ? badge
      : {
          value: (1).toString(),
          color: /* NoBadge */ 8,
        };
  var ellipsisOnly$1 = ellipsisOnly !== undefined ? ellipsisOnly : false;
  var isRelative$1 = isRelative !== undefined ? isRelative : true;
  var isPhoneDropdown$1 =
    isPhoneDropdown !== undefined ? isPhoneDropdown : false;
  var showBtnTextToolTip$1 =
    showBtnTextToolTip !== undefined ? showBtnTextToolTip : false;
  var toolTipPosition$1 =
    toolTipPosition !== undefined ? toolTipPosition : /* Top */ 0;
  var dataTestId$1 = dataTestId !== undefined ? dataTestId : "";
  var parentRef = React.useRef(null);
  var dummyRef = React.useRef(null);
  var buttonRef = disableRipple$1 ? dummyRef : parentRef;
  RippleEffectBackground.useHorizontalRippleHook(buttonRef);
  if (isPhoneDropdown$1) {
  }
  var customTextOverFlowClass =
    textStyleClass !== undefined ? textStyleClass : "overflow-hidden";
  var buttonType$2 = buttonType$1 !== 3 ? buttonType$1 : /* Secondary */ 1;
  var buttonSize = Core__Option.getOr(
    props.buttonSize,
    MatchMedia.useMatchMedia("(max-width: 800px)")
      ? /* Small */ 2
      : /* Medium */ 1,
  );
  var lengthStyle = fullLength$1 ? "w-full justify-between" : "";
  var badgeColor;
  if (buttonState$1 !== 2) {
    var match = badge$1.color;
    switch (match) {
      case /* BadgeGreen */ 0:
        badgeColor = "bg-green-950 dark:bg-opacity-50";
        break;
      case /* BadgeRed */ 1:
        badgeColor = "bg-red-960 dark:bg-opacity-50";
        break;
      case /* BadgeBlue */ 2:
        badgeColor = "bg-blue-500 dark:bg-opacity-50";
        break;
      case /* BadgeGray */ 3:
        badgeColor = "bg-blue-table_gray";
        break;
      case /* BadgeOrange */ 4:
        badgeColor = "bg-orange-950 dark:bg-opacity-50";
        break;
      case /* BadgeYellow */ 5:
        badgeColor = "bg-blue-table_yellow";
        break;
      case /* BadgeDarkGreen */ 6:
        badgeColor = "bg-green-700";
        break;
      case /* BadgeDarkRed */ 7:
        badgeColor = "bg-red-400";
        break;
      case /* NoBadge */ 8:
        badgeColor = "hidden";
        break;
    }
  } else {
    badgeColor = "bg-slate-300";
  }
  var badgeTextColor;
  if (buttonState$1 !== 2) {
    var match$1 = badge$1.color;
    switch (match$1) {
      case /* BadgeOrange */ 4:
        badgeTextColor = "text-white";
        break;
      case /* BadgeGray */ 3:
      case /* BadgeYellow */ 5:
        badgeTextColor = "text-jp-gray-900";
        break;
      default:
        badgeTextColor = "text-white";
    }
  } else {
    badgeTextColor = "text-white";
  }
  var heightClass = Core__Option.getOr(props.customHeightClass, "h-fit");
  var cursorType;
  if (buttonState$1 >= 3) {
    cursorType = "cursor-pointer";
  } else {
    switch (buttonState$1) {
      case /* Normal */ 0:
        cursorType = "cursor-pointer";
        break;
      case /* Loading */ 1:
        cursorType = "cursor-wait";
        break;
      case /* Disabled */ 2:
        cursorType = "cursor-not-allowed";
        break;
    }
  }
  var tmp;
  switch (buttonSize) {
    case /* Large */ 0:
      tmp = "py-3 px-4";
      break;
    case /* Medium */ 1:
      tmp =
        buttonType$2 === /* Pagination */ 5 ? "py-3 px-4 mr-1" : "py-3 px-4";
      break;
    case /* Small */ 2:
      tmp = buttonType$2 !== 5 ? "py-3 px-4" : "py-3 px-4 mr-1";
      break;
    case /* XSmall */ 3:
      tmp = "p-2";
      break;
  }
  var paddingClass = Core__Option.getOr(props.customPaddingClass, tmp);
  var tmp$1;
  switch (buttonSize) {
    case /* Large */ 0:
    case /* Medium */ 1:
    case /* Small */ 2:
    case /* XSmall */ 3:
      tmp$1 = "px-1";
      break;
  }
  var textPaddingClass = Core__Option.getOr(
    props.customTextPaddingClass,
    tmp$1,
  );
  var tmp$2;
  switch (buttonSize) {
    case /* Large */ 0:
      tmp$2 = "text-fs-16";
      break;
    case /* Medium */ 1:
      tmp$2 = "text-body";
      break;
    case /* Small */ 2:
      tmp$2 = "text-fs-13";
      break;
    case /* XSmall */ 3:
      tmp$2 = "text-fs-11";
      break;
  }
  var textSize = Core__Option.getOr(props.customTextSize, tmp$2);
  var ellipsisClass = ellipsisOnly$1 ? "truncate" : "";
  var ellipsisParentClass = ellipsisOnly$1 ? "max-w-[250px] md:max-w-xs" : "";
  var tmp$3;
  switch (buttonSize) {
    case /* Large */ 0:
      tmp$3 = 18;
      break;
    case /* Medium */ 1:
      tmp$3 = 16;
      break;
    case /* Small */ 2:
      tmp$3 = 14;
      break;
    case /* XSmall */ 3:
      tmp$3 = 12;
      break;
  }
  var iconSize = Core__Option.getOr(props.customIconSize, tmp$3);
  var strokeColor = "";
  var iconPadding = buttonSize >= 2 ? "pl-1" : "";
  var iconMargin = Core__Option.getOr(
    props.customIconMargin,
    buttonSize >= 2 ? "ml-1" : "mx-1",
  );
  var rightIconSpacing = buttonSize >= 2 ? "mt-0.5 px-1" : "mx-1 mt-0.5";
  var badgeSpacing =
    buttonSize >= 2 ? "px-2 mb-0.5 mr-0.5" : "px-2 mb-1 mr-0.5";
  var badgeTextSize = buttonSize >= 2 ? "text-sm" : "text-base";
  var backColor = useGetBgColor(
    buttonType$2,
    buttonState$1,
    showBorder$1,
    isDropdownOpen$1,
    isPhoneDropdown$1,
    undefined,
  );
  var textColor = useGetTextColor(
    buttonType$2,
    buttonState$1,
    showBorder$1,
    isDropdownOpen$1,
    isPhoneDropdown$1,
    undefined,
  );
  var match$2 = React.useContext(ButtonGroupContext.buttonGroupContext);
  var isLast = match$2.isLast;
  var isFirst = match$2.isFirst;
  var roundedBottom = flattenBottom$1 ? "rounded-b-none" : "";
  var roundedTop = flattenTop$1 ? "rounded-t-none" : "";
  var roundedDirection =
    isFirst && isLast
      ? "rounded"
      : isFirst
        ? "rounded-l-md"
        : isLast
          ? "rounded-r-md"
          : buttonType$2 === /* Pagination */ 5
            ? "rounded-md"
            : "";
  var roundedClass =
    "" + roundedDirection + " " + roundedBottom + " " + roundedTop + "";
  var borderWidth =
    showBorder$1 || (buttonType$2 === /* Dropdown */ 12 && !(isFirst && isLast))
      ? isFirst && isLast
        ? "border"
        : isFirst
          ? "border focus:border-r"
          : isLast
            ? "border  focus:border-l"
            : "border border-x-1 focus:border-x"
      : "border-0";
  var borderStyle;
  var exit = 0;
  switch (buttonType$2) {
    case /* Primary */ 0:
      borderStyle =
        buttonState$1 !== 2 && showBorder$1 ? "" + borderWidth + "" : "";
      break;
    case /* PrimaryOutline */ 2:
      borderStyle = "border-2";
      break;
    case /* SecondaryFilled */ 3:
      if (buttonState$1 >= 3) {
        borderStyle =
          "" + borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
      } else {
        switch (buttonState$1) {
          case /* Normal */ 0:
            borderStyle =
              "" + borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
            break;
          case /* Loading */ 1:
            borderStyle =
              "" +
              borderWidth +
              " border-jp-gray-600 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-100 ";
            break;
          case /* Disabled */ 2:
            borderStyle = "";
            break;
        }
      }
      break;
    case /* Pill */ 6:
      if (showBorder$1) {
        if (buttonState$1 >= 3) {
          borderStyle =
            "" + borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
        } else {
          switch (buttonState$1) {
            case /* Normal */ 0:
              borderStyle =
                "" +
                borderWidth +
                " border-jp-gray-500 dark:border-jp-gray-960";
              break;
            case /* Loading */ 1:
              borderStyle =
                "" +
                borderWidth +
                " border-jp-gray-600 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-100";
              break;
            case /* Disabled */ 2:
              borderStyle = "";
              break;
          }
        }
      } else if (buttonState$1 >= 3) {
        borderStyle = borderWidth;
      } else {
        switch (buttonState$1) {
          case /* Normal */ 0:
          case /* Loading */ 1:
            borderStyle = borderWidth;
            break;
          case /* Disabled */ 2:
            borderStyle = "";
            break;
        }
      }
      break;
    case /* FilterAdd */ 7:
      borderStyle = "border-0";
      break;
    case /* Delete */ 8:
      if (buttonState$1 >= 3) {
        borderStyle =
          "" + borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
      } else {
        switch (buttonState$1) {
          case /* Normal */ 0:
            borderStyle =
              "" + borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
            break;
          case /* Loading */ 1:
            borderStyle =
              "" +
              borderWidth +
              " border-jp-gray-600 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-100 ";
            break;
          case /* Disabled */ 2:
            borderStyle = "";
            break;
        }
      }
      break;
    case /* Transparent */ 9:
      borderStyle = "border border-jp-2-light-gray-400";
      break;
    case /* SelectTransparent */ 10:
      borderStyle = "border border-1 border-blue-500";
      break;
    case /* NonFilled */ 4:
    case /* Pagination */ 5:
    case /* DarkPurple */ 11:
      exit = 1;
      break;
    case /* Secondary */ 1:
    case /* Dropdown */ 12:
      exit = 2;
      break;
  }
  switch (exit) {
    case 1:
      if (buttonState$1 >= 3) {
        borderStyle =
          "" + borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
      } else {
        switch (buttonState$1) {
          case /* Normal */ 0:
            borderStyle =
              "" + borderWidth + " border-jp-gray-500 dark:border-jp-gray-960";
            break;
          case /* Loading */ 1:
            borderStyle =
              "" +
              borderWidth +
              " border-jp-gray-600 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-100 ";
            break;
          case /* Disabled */ 2:
            borderStyle = "";
            break;
        }
      }
      break;
    case 2:
      if (showBorder$1) {
        if (buttonState$1 >= 3) {
          borderStyle =
            "" +
            borderWidth +
            " border-border_gray dark:border-jp-gray-960 dark:border-opacity-100";
        } else {
          switch (buttonState$1) {
            case /* Normal */ 0:
              borderStyle =
                "" +
                borderWidth +
                " border-border_gray dark:border-jp-gray-960 dark:border-opacity-100";
              break;
            case /* Loading */ 1:
              borderStyle = "" + borderWidth + " border-border_gray";
              break;
            case /* Disabled */ 2:
              borderStyle = "";
              break;
          }
        }
      } else if (buttonState$1 >= 3) {
        borderStyle = borderWidth;
      } else {
        switch (buttonState$1) {
          case /* Normal */ 0:
          case /* Loading */ 1:
            borderStyle = borderWidth;
            break;
          case /* Disabled */ 2:
            borderStyle = "";
            break;
        }
      }
      break;
  }
  var dis;
  switch (buttonState$1) {
    case /* Loading */ 1:
    case /* Disabled */ 2:
      dis = true;
      break;
    case /* Normal */ 0:
    case /* NoHover */ 3:
    case /* Focused */ 4:
      dis = false;
      break;
  }
  var loaderIconColor = buttonType$2 !== 0 ? undefined : "text-white";
  var handleClick = function (ev) {
    if (onClick !== undefined) {
      return Curry._1(onClick, ev);
    }
  };
  var textWeight$1 =
    textWeight !== undefined ? textWeight : "text-sm font-medium leading-5";
  var textId = Core__Option.getOr(text, "");
  var iconId;
  if (typeof leftIcon$1 === "number") {
    if (typeof rightIcon$1 === "number") {
      iconId = "";
    } else {
      switch (rightIcon$1.TAG | 0) {
        case /* CustomIcon */ 1:
          iconId = "CustomIcon";
          break;
        case /* CustomRightIcon */ 2:
          iconId = "CustomRightIcon";
          break;
        case /* FontAwesome */ 0:
        case /* Euler */ 3:
          iconId = rightIcon$1._0;
          break;
      }
    }
  } else {
    switch (leftIcon$1.TAG | 0) {
      case /* CustomIcon */ 1:
        iconId = "CustomIcon";
        break;
      case /* CustomRightIcon */ 2:
        iconId = "CustomRightIcon";
        break;
      case /* FontAwesome */ 0:
      case /* Euler */ 3:
        iconId = leftIcon$1._0;
        break;
    }
  }
  var dataAttrKey = isSelectBoxButton$1 ? "data-value" : "data-button-for";
  var dataAttrStr = LogicUtils.isEmptyString(textId)
    ? iconId
    : LogicUtils.toCamelCase(textId.concat(buttonFor$1));
  var relativeClass = isRelative$1 ? "relative" : "";
  var conditionalButtonStyles =
    "" +
    (allowButtonTextMinWidth$1 ? "min-w-min" : "") +
    " " +
    Core__Option.getOr(props.customBackColor, backColor) +
    " " +
    Core__Option.getOr(props.customRoundedClass, roundedClass) +
    "";
  var customJustifyStyle = customButtonStyle$1.includes("justify")
    ? ""
    : "justify-center";
  var tmp$4;
  if (buttonState$1 === /* Loading */ 1) {
    tmp$4 = React.createElement(
      "span",
      {
        className: iconPadding,
      },
      React.createElement(
        "span",
        {
          className: "flex items-center mx-2 animate-spin",
        },
        React.createElement(Loadericon.make, {
          iconColor: loaderIconColor,
          size: iconSize,
        }),
      ),
    );
  } else if (typeof leftIcon$1 === "number") {
    tmp$4 = null;
  } else {
    switch (leftIcon$1.TAG | 0) {
      case /* FontAwesome */ 0:
        tmp$4 = React.createElement(
          "span",
          {
            className:
              "flex items-center " +
              iconColor$1 +
              " " +
              iconMargin +
              " " +
              iconPadding +
              "",
          },
          React.createElement(Icon.make, {
            name: leftIcon$1._0,
            size: iconSize,
            className:
              "align-middle " + strokeColor + " " + iconBorderColor$1 + "",
          }),
        );
        break;
      case /* CustomIcon */ 1:
        tmp$4 = React.createElement(
          "span",
          {
            className: "flex items-center " + iconMargin + "",
          },
          leftIcon$1._0,
        );
        break;
      case /* CustomRightIcon */ 2:
        tmp$4 = null;
        break;
      case /* Euler */ 3:
        tmp$4 = React.createElement(
          "span",
          {
            className:
              "flex items-center " + iconColor$1 + " " + iconMargin + "",
          },
          React.createElement(Icon.make, {
            name: leftIcon$1._0,
            size: iconSize,
            className: "align-middle " + strokeColor + "",
          }),
        );
        break;
    }
  }
  var tmp$5;
  if (text !== undefined && !LogicUtils.isEmptyString(text)) {
    var btnContent = React.createElement(AddDataAttributes.make, {
      attributes: [["data-button-text", text]],
      children: React.createElement(
        "div",
        {
          className:
            "" +
            textPaddingClass +
            " " +
            textSize +
            " " +
            textWeight$1 +
            " " +
            ellipsisClass +
            " whitespace-pre " +
            textStyle$1 +
            "",
        },
        buttonState$1 === /* Loading */ 1 ? loadingText$1 : text,
      ),
    });
    tmp$5 = showBtnTextToolTip$1
      ? React.createElement(
          "div",
          {
            className: ellipsisParentClass,
          },
          React.createElement(ToolTip.make, {
            description: Core__Option.getOr(props.tooltipText, ""),
            toolTipFor: Caml_option.some(btnContent),
            toolTipPosition: toolTipPosition$1,
            contentAlign: /* Default */ 3,
            justifyClass: "justify-start",
          }),
        )
      : React.createElement(
          "div",
          {
            className: ellipsisParentClass,
          },
          btnContent,
        );
  } else {
    tmp$5 = null;
  }
  var match$3 = badge$1.color;
  var tmp$6;
  if (typeof rightIcon$1 === "number") {
    tmp$6 = null;
  } else {
    switch (rightIcon$1.TAG | 0) {
      case /* FontAwesome */ 0:
        tmp$6 = React.createElement(
          "span",
          {
            className: "flex items-center " + rightIconSpacing + "",
          },
          React.createElement(Icon.make, {
            name: rightIcon$1._0,
            size: iconSize,
            className: "align-middle " + strokeColor + "",
          }),
        );
        break;
      case /* CustomIcon */ 1:
        tmp$6 = React.createElement(
          "span",
          {
            className: "flex items-center " + iconPadding + " ",
          },
          rightIcon$1._0,
        );
        break;
      case /* CustomRightIcon */ 2:
        tmp$6 = null;
        break;
      case /* Euler */ 3:
        tmp$6 = React.createElement(
          "span",
          {
            className: "flex items-center " + iconMargin + "",
          },
          React.createElement(Icon.make, {
            name: rightIcon$1._0,
            size: iconSize,
            className: "align-middle " + strokeColor + "",
          }),
        );
        break;
    }
  }
  return React.createElement(AddDataAttributes.make, {
    attributes: [
      [dataAttrKey, dataAttrStr],
      ["data-testid", dataTestId$1],
    ],
    children: React.createElement(
      "button",
      {
        ref: Caml_option.some(parentRef),
        className:
          "flex group " +
          customButtonStyle$1 +
          " " +
          customJustifyStyle +
          " " +
          relativeClass +
          " " +
          heightClass +
          " " +
          conditionalButtonStyles +
          " items-center " +
          borderStyle +
          "   " +
          cursorType +
          " " +
          paddingClass +
          " " +
          lengthStyle +
          "   " +
          customTextOverFlowClass +
          " " +
          textColor +
          "",
        disabled: dis,
        type: type_$1,
        onKeyPress: function (e) {
          if (!onEnterPress$1) {
            e.preventDefault();
            return;
          }
        },
        onKeyUp: function (e) {
          e.preventDefault();
        },
        onClick: handleClick,
      },
      tmp$4,
      tmp$5,
      match$3 >= 8
        ? null
        : React.createElement(AddDataAttributes.make, {
            attributes: [["data-badge-value", badge$1.value]],
            children: React.createElement(
              "span",
              {
                className:
                  "flex items-center " +
                  rightIconSpacing +
                  " " +
                  badgeColor +
                  " " +
                  badgeTextColor +
                  " " +
                  badgeSpacing +
                  " " +
                  badgeTextSize +
                  "  rounded-full",
              },
              badge$1.value,
            ),
          }),
      buttonRightText !== undefined
        ? React.createElement(UIUtils.RenderIf.make, {
            condition: !LogicUtils.isEmptyString(buttonRightText),
            children: React.createElement(
              "span",
              {
                className:
                  "text-jp-2-light-primary-600 font-semibold text-fs-14",
              },
              buttonRightText,
            ),
          })
        : null,
      tmp$6,
    ),
  });
}

var make = Button;

export { useGetBgColor, useGetTextColor, make };
/* Icon Not a pure module */
