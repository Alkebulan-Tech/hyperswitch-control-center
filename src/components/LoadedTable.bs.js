// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Table from "./Table.bs.js";
import * as React from "react";
import * as Portal from "./portal/Portal.bs.js";
import * as Recoil from "../libraries/Recoil.bs.js";
import * as Recoil$1 from "recoil";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as CardTable from "../screens/componentsDemo/CardTable.bs.js";
import * as Paginator from "./Paginator.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.js";
import * as GlobalVars from "../utils/GlobalVars.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as PopUpState from "../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as DesktopView from "./DesktopView.bs.js";
import * as NoDataFound from "./NoDataFound.bs.js";
import * as CheckBoxIcon from "./custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as NewThemeUtils from "./NewThemeUtils.bs.js";
import * as PortalCapture from "./portal/PortalCapture.bs.js";
import * as DictionaryUtils from "../utils/DictionaryUtils.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as DatatableContext from "../context/DatatableContext.bs.js";
import * as JsonFlattenUtils from "../utils/JsonFlattenUtils.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as DynamicTableUtils from "./DynamicTableUtils.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as LoadedTableContext from "../context/LoadedTableContext.bs.js";
import * as AdvancedSearchModal from "./AdvancedSearchModal.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as AdvancedSearchComponent from "./AdvancedSearchComponent.bs.js";
import * as TableFilterSectionContext from "../context/TableFilterSectionContext.bs.js";
import * as DataTableFilterOpenContext from "../context/DataTableFilterOpenContext.bs.js";

var checkBoxPropDefaultVal_selectedData = [];

function checkBoxPropDefaultVal_setSelectedData(param) {}

var checkBoxPropDefaultVal = {
  showCheckBox: false,
  selectedData: checkBoxPropDefaultVal_selectedData,
  setSelectedData: checkBoxPropDefaultVal_setSelectedData,
};

var sortAtom = Recoil.atom("sortAtom", {});

var backgroundClass = "bg-gray-50 dark:bg-jp-gray-darkgray_background";

function useSortedObj(title, defaultSort) {
  var match = Recoil$1.useRecoilState(sortAtom);
  var setDict = match[1];
  var filters = match[0][title];
  var match$1 = React.useState(function () {
    return defaultSort;
  });
  var setSortedObj = match$1[1];
  var sortedObj = match$1[0];
  React.useEffect(function () {
    if (filters !== undefined) {
      var match = filters.sortType;
      var sortObj_key = filters.sortKey;
      var sortObj_order = match ? /* DEC */ 1 : /* INC */ 0;
      var sortObj = {
        key: sortObj_key,
        order: sortObj_order,
      };
      Curry._1(setSortedObj, function (param) {
        return sortObj;
      });
    }
  }, []);
  React.useEffect(
    function () {
      if (sortedObj !== undefined) {
        var match = sortedObj.order;
        var sortOb_sortKey = sortedObj.key;
        var sortOb_sortType = match !== 1 ? /* ASC */ 0 : /* DSC */ 1;
        var sortOb = {
          sortKey: sortOb_sortKey,
          sortType: sortOb_sortType,
        };
        setDict(function (dict) {
          var nDict = Object.fromEntries(Object.entries(dict));
          nDict[title] = sortOb;
          return nDict;
        });
      }
    },
    [sortedObj],
  );
  return [sortedObj, setSortedObj];
}

function sortArray(originalData, key, sortOrder) {
  var getValue = function (val) {
    if (val === undefined) {
      return "";
    }
    var x = Caml_option.valFromOption(val);
    var str = Core__JSON.Classify.classify(x);
    if (typeof str === "number") {
      return "";
    }
    switch (str.TAG | 0) {
      case /* Bool */ 0:
        if (str._0) {
          return "true";
        } else {
          return "false";
        }
      case /* String */ 1:
        return str._0.toLowerCase();
      case /* Number */ 2:
        return x;
      default:
        return "";
    }
  };
  originalData.toSorted(function (i1, i2) {
    var item1 = LogicUtils.safeParse(
      Core__Option.getOr(JSON.stringify(i1), ""),
    );
    var item2 = LogicUtils.safeParse(
      Core__Option.getOr(JSON.stringify(i2), ""),
    );
    var val1 = Core__Option.flatMap(
      Core__JSON.Decode.object(JsonFlattenUtils.flattenObject(item1, true)),
      function (dict) {
        return dict[key];
      },
    );
    var val2 = Core__Option.flatMap(
      Core__JSON.Decode.object(JsonFlattenUtils.flattenObject(item2, true)),
      function (dict) {
        return dict[key];
      },
    );
    var value1 = getValue(val1);
    var value2 = getValue(val2);
    if (value1 === "" || value2 === "") {
      if (value1 === value2) {
        return 0;
      } else if (value2 === "") {
        if (sortOrder === /* DEC */ 1) {
          return 1;
        } else {
          return -1;
        }
      } else if (sortOrder === /* DEC */ 1) {
        return -1;
      } else {
        return 1;
      }
    } else if (value1 === value2) {
      return 0;
    } else if (Caml_obj.greaterthan(value1, value2)) {
      if (sortOrder === /* DEC */ 1) {
        return 1;
      } else {
        return -1;
      }
    } else if (sortOrder === /* DEC */ 1) {
      return -1;
    } else {
      return 1;
    }
  });
  return originalData;
}

var table_pageDetails = Recoil.atom("table_pageDetails", {});

function LoadedTable(props) {
  var tableHeadingTextClass = props.tableHeadingTextClass;
  var tableDataBackgroundClass = props.tableDataBackgroundClass;
  var noScrollbar = props.noScrollbar;
  var defaultResultsPerPage = props.defaultResultsPerPage;
  var showResultsPerPageSelector = props.showResultsPerPageSelector;
  var setExtFilteredDataLength = props.setExtFilteredDataLength;
  var minTableHeightClass = props.minTableHeightClass;
  var fixLastCol = props.fixLastCol;
  var lastColClass = props.lastColClass;
  var lastHeadingClass = props.lastHeadingClass;
  var paginationClass = props.paginationClass;
  var checkBoxProps = props.checkBoxProps;
  var ellipseClass = props.ellipseClass;
  var customMoneyStyle = props.customMoneyStyle;
  var isEllipsisTextRelative = props.isEllipsisTextRelative;
  var tableActionBorder = props.tableActionBorder;
  var noDataMsg = props.noDataMsg;
  var customFilterRowStyle = props.customFilterRowStyle;
  var labelMargin = props.labelMargin;
  var showTableOnMobileView = props.showTableOnMobileView;
  var maxTableHeight = props.maxTableHeight;
  var headingCenter = props.headingCenter;
  var isHighchartLegend = props.isHighchartLegend;
  var rowCustomClass = props.rowCustomClass;
  var isAnalyticsModule = props.isAnalyticsModule;
  var allowNullableRows = props.allowNullableRows;
  var rowHeightClass = props.rowHeightClass;
  var clearFormatting = props.clearFormatting;
  var enableEqualWidthCol = props.enableEqualWidthCol;
  var highlightText = props.highlightText;
  var frozenUpto = props.frozenUpto;
  var onMouseLeave = props.onMouseLeave;
  var onMouseEnter = props.onMouseEnter;
  var collapseTableRow = props.collapseTableRow;
  var tableDataBorderClass = props.tableDataBorderClass;
  var tableBorderClass = props.tableBorderClass;
  var tableheadingClass = props.tableheadingClass;
  var tableLocalFilter = props.tableLocalFilter;
  var renderCard = props.renderCard;
  var dataNotFoundComponent = props.dataNotFoundComponent;
  var advancedSearchComponent = props.advancedSearchComponent;
  var dataLoading = props.dataLoading;
  var tableDataLoading = props.tableDataLoading;
  var ignoreHeaderBg = props.ignoreHeaderBg;
  var hideTitle = props.hideTitle;
  var ignoreUrlUpdate = props.ignoreUrlUpdate;
  var showPagination = props.showPagination;
  var evenVertivalLines = props.evenVertivalLines;
  var removeHorizontalLines = props.removeHorizontalLines;
  var showFilterBorder = props.showFilterBorder;
  var filters = props.filters;
  var currrentFetchCount = props.currrentFetchCount;
  var onEntityDoubleClick = props.onEntityDoubleClick;
  var onEntityClick = props.onEntityClick;
  var entity = props.entity;
  var handleRefetch = props.handleRefetch;
  var setOffset = props.setOffset;
  var offset = props.offset;
  var resultsPerPage = props.resultsPerPage;
  var totalResults = props.totalResults;
  var actualData = props.actualData;
  var showSerialNumber = props.showSerialNumber;
  var bottomActions = props.bottomActions;
  var clearFormattedDataButton = props.clearFormattedDataButton;
  var rightTitleElement = props.rightTitleElement;
  var hideFilterTopPortals = props.hideFilterTopPortals;
  var isTableActionBesideFilters = props.isTableActionBesideFilters;
  var tableActions = props.tableActions;
  var titleSize = props.titleSize;
  var title = props.title;
  var visibleColumns = props.visibleColumns;
  var titleSize$1 = titleSize !== undefined ? titleSize : /* Large */ 3;
  var isTableActionBesideFilters$1 =
    isTableActionBesideFilters !== undefined
      ? isTableActionBesideFilters
      : false;
  var hideFilterTopPortals$1 =
    hideFilterTopPortals !== undefined ? hideFilterTopPortals : true;
  var rightTitleElement$1 =
    rightTitleElement !== undefined
      ? Caml_option.valFromOption(rightTitleElement)
      : null;
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : false;
  var showFilterBorder$1 =
    showFilterBorder !== undefined ? showFilterBorder : false;
  var removeHorizontalLines$1 =
    removeHorizontalLines !== undefined ? removeHorizontalLines : false;
  var evenVertivalLines$1 =
    evenVertivalLines !== undefined ? evenVertivalLines : false;
  var showPagination$1 = showPagination !== undefined ? showPagination : true;
  var ignoreUrlUpdate$1 =
    ignoreUrlUpdate !== undefined ? ignoreUrlUpdate : false;
  var hideTitle$1 = hideTitle !== undefined ? hideTitle : false;
  var ignoreHeaderBg$1 = ignoreHeaderBg !== undefined ? ignoreHeaderBg : false;
  var tableDataLoading$1 =
    tableDataLoading !== undefined ? tableDataLoading : false;
  var dataLoading$1 = dataLoading !== undefined ? dataLoading : false;
  var tableLocalFilter$1 =
    tableLocalFilter !== undefined ? tableLocalFilter : false;
  var tableheadingClass$1 =
    tableheadingClass !== undefined ? tableheadingClass : "";
  var tableBorderClass$1 =
    tableBorderClass !== undefined ? tableBorderClass : "";
  var tableDataBorderClass$1 =
    tableDataBorderClass !== undefined ? tableDataBorderClass : "";
  var collapseTableRow$1 =
    collapseTableRow !== undefined ? collapseTableRow : false;
  var highlightText$1 = highlightText !== undefined ? highlightText : "";
  var enableEqualWidthCol$1 =
    enableEqualWidthCol !== undefined ? enableEqualWidthCol : false;
  var clearFormatting$1 =
    clearFormatting !== undefined ? clearFormatting : false;
  var rowHeightClass$1 = rowHeightClass !== undefined ? rowHeightClass : "";
  var allowNullableRows$1 =
    allowNullableRows !== undefined ? allowNullableRows : false;
  var isAnalyticsModule$1 =
    isAnalyticsModule !== undefined ? isAnalyticsModule : false;
  var rowCustomClass$1 = rowCustomClass !== undefined ? rowCustomClass : "";
  var isHighchartLegend$1 =
    isHighchartLegend !== undefined ? isHighchartLegend : false;
  var headingCenter$1 = headingCenter !== undefined ? headingCenter : false;
  var maxTableHeight$1 = maxTableHeight !== undefined ? maxTableHeight : "";
  var showTableOnMobileView$1 =
    showTableOnMobileView !== undefined ? showTableOnMobileView : false;
  var labelMargin$1 = labelMargin !== undefined ? labelMargin : "";
  var customFilterRowStyle$1 =
    customFilterRowStyle !== undefined ? customFilterRowStyle : "";
  var noDataMsg$1 = noDataMsg !== undefined ? noDataMsg : "No Data Available";
  var tableActionBorder$1 =
    tableActionBorder !== undefined ? tableActionBorder : "";
  var isEllipsisTextRelative$1 =
    isEllipsisTextRelative !== undefined ? isEllipsisTextRelative : true;
  var customMoneyStyle$1 =
    customMoneyStyle !== undefined ? customMoneyStyle : "";
  var ellipseClass$1 = ellipseClass !== undefined ? ellipseClass : "";
  var checkBoxProps$1 =
    checkBoxProps !== undefined ? checkBoxProps : checkBoxPropDefaultVal;
  var paginationClass$1 = paginationClass !== undefined ? paginationClass : "";
  var lastHeadingClass$1 =
    lastHeadingClass !== undefined ? lastHeadingClass : "";
  var lastColClass$1 = lastColClass !== undefined ? lastColClass : "";
  var fixLastCol$1 = fixLastCol !== undefined ? fixLastCol : false;
  var minTableHeightClass$1 =
    minTableHeightClass !== undefined ? minTableHeightClass : "";
  var showResultsPerPageSelector$1 =
    showResultsPerPageSelector !== undefined
      ? showResultsPerPageSelector
      : true;
  var defaultResultsPerPage$1 =
    defaultResultsPerPage !== undefined ? defaultResultsPerPage : true;
  var noScrollbar$1 = noScrollbar !== undefined ? noScrollbar : false;
  var tableDataBackgroundClass$1 =
    tableDataBackgroundClass !== undefined ? tableDataBackgroundClass : "";
  var tableHeadingTextClass$1 =
    tableHeadingTextClass !== undefined ? tableHeadingTextClass : "";
  var showPopUp = PopUpState.useShowPopUp(undefined);
  React.useEffect(function () {
    if (LogicUtils.isEmptyString(title) && GlobalVars.isLocalhost) {
      Curry._1(showPopUp, {
        heading: "Title cannot be empty!",
        description:
          "Please put valid title and use hideTitle prop to hide the title as offset recoil uses title",
        popUpType: [/* Denied */ 5, /* WithIcon */ 0],
        handleConfirm: {
          text: "OK",
        },
      });
    }
  }, []);
  var resultsPerPage$1 =
    resultsPerPage > 10 && defaultResultsPerPage$1 ? 10 : resultsPerPage;
  var defaultValue = {
    offset: offset,
    resultsPerPage: resultsPerPage$1,
  };
  var match = React.useState(function () {
    return true;
  });
  var setFirstRender = match[1];
  var firstRender = match[0];
  var setPageDetails = Recoil$1.useSetRecoilState(table_pageDetails);
  var pageDetailDict = Recoil$1.useRecoilValue(table_pageDetails);
  var pageDetail = Core__Option.getOr(pageDetailDict[title], defaultValue);
  var match$1 = React.useState(function () {});
  var setSelectAllCheckBox = match$1[1];
  var selectAllCheckBox = match$1[0];
  var newSetOffset = function (offsetVal) {
    var val = pageDetailDict[title];
    var value =
      val !== undefined
        ? {
            offset: Curry._1(offsetVal, 0),
            resultsPerPage: val.resultsPerPage,
          }
        : {
            offset: Curry._1(offsetVal, 0),
            resultsPerPage: resultsPerPage$1,
          };
    var newDict = Object.fromEntries(Object.entries(pageDetailDict));
    newDict[title] = value;
    Curry._1(setOffset, function (param) {
      return Curry._1(offsetVal, 0);
    });
    setPageDetails(function (param) {
      return newDict;
    });
  };
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  React.useEffect(
    function () {
      Curry._1(setFirstRender, function (param) {
        return false;
      });
      Curry._1(setOffset, function (param) {
        return pageDetail.offset;
      });
    },
    [Core__List.toArray(url.path).join("/")],
  );
  React.useEffect(
    function () {
      if (pageDetail.offset !== offset && !firstRender) {
        var val = pageDetailDict[title];
        var value =
          val !== undefined
            ? {
                offset: offset,
                resultsPerPage: val.resultsPerPage,
              }
            : {
                offset: offset,
                resultsPerPage: resultsPerPage$1,
              };
        var newDict = Object.fromEntries(Object.entries(pageDetailDict));
        newDict[title] = value;
        setPageDetails(function (param) {
          return newDict;
        });
      }
    },
    [offset],
  );
  var setLocalResultsPerPageOrig = function (localResultsPerPage) {
    var val = pageDetailDict[title];
    var value =
      val !== undefined
        ? totalResults > val.offset || tableDataLoading$1
          ? {
              offset: val.offset,
              resultsPerPage: Curry._1(localResultsPerPage, 0),
            }
          : {
              offset: 0,
              resultsPerPage: resultsPerPage$1,
            }
        : {
            offset: offset,
            resultsPerPage: Curry._1(localResultsPerPage, 0),
          };
    var newDict = Object.fromEntries(Object.entries(pageDetailDict));
    newDict[title] = value;
    setPageDetails(function (param) {
      return newDict;
    });
  };
  var match$2 = React.useState(function () {
    return {};
  });
  var setColumnFilterOrig = match$2[1];
  var columnFilter = match$2[0];
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var url$1 = RescriptReactRouter.useUrl(undefined, undefined);
  var dateFormatConvertor = DynamicTableUtils.useDateFormatConvertor(undefined);
  var match$3 = React.useState(function () {
    if (isMobileView && !showTableOnMobileView$1) {
      return /* Card */ 1;
    } else {
      return /* Table */ 0;
    }
  });
  var setDataView = match$3[1];
  var localResultsPerPage = pageDetail.resultsPerPage;
  var setColumnFilter = React.useMemo(
    function () {
      return function (param, param$1) {
        return Curry._1(setColumnFilterOrig, function (oldFitlers) {
          var newObj = Object.fromEntries(Object.entries(oldFitlers));
          var filterValue = param$1.filter(function (item) {
            return LogicUtils.isNonEmptyString(String(item));
          });
          if (filterValue.length === 0) {
            return Object.fromEntries(
              Object.entries(newObj).filter(function (entry) {
                return entry[0] !== param;
              }),
            );
          } else {
            newObj[param] = filterValue;
            return newObj;
          }
        });
      };
    },
    [setColumnFilterOrig],
  );
  React.useEffect(
    function () {
      if (Caml_obj.notequal(columnFilter, {})) {
        newSetOffset(function (param) {
          return 0;
        });
      }
    },
    [columnFilter],
  );
  var filterValue = React.useMemo(
    function () {
      return [columnFilter, setColumnFilter];
    },
    [columnFilter, setColumnFilter],
  );
  var match$4 = React.useState(function () {
    return {};
  });
  var setIsFilterOpenOrig = match$4[1];
  var isFilterOpen = match$4[0];
  var setIsFilterOpen = React.useMemo(
    function () {
      return function (param, param$1) {
        return Curry._1(setIsFilterOpenOrig, function (oldFitlers) {
          var newObj = DictionaryUtils.copyOfDict(oldFitlers);
          newObj[param] = param$1;
          return newObj;
        });
      };
    },
    [setColumnFilterOrig],
  );
  var filterOpenValue = React.useMemo(
    function () {
      return [isFilterOpen, setIsFilterOpen];
    },
    [isFilterOpen, setIsFilterOpen],
  );
  var heading = Core__Option.getOr(visibleColumns, entity.defaultColumns).map(
    entity.getHeading,
  );
  var handleRemoveLines = Core__Option.getOr(props.removeVerticalLines, true);
  if (showSerialNumber$1) {
    heading.unshift(
      Table.makeHeaderInfo(
        "serial_number",
        "S.No",
        /* NumericType */ 3,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
      ),
    );
  }
  if (checkBoxProps$1.showCheckBox) {
    heading.unshift(
      Table.makeHeaderInfo(
        "select",
        "",
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        true,
        undefined,
        undefined,
        undefined,
      ),
    );
  }
  var setLocalResultsPerPage = React.useCallback(
    function (fn) {
      setLocalResultsPerPageOrig(function (prev) {
        var newVal = Curry._1(fn, prev);
        if (newVal === 0) {
          return localResultsPerPage;
        } else {
          return newVal;
        }
      });
    },
    [setLocalResultsPerPageOrig],
  );
  var searchFields = entity.searchFields;
  var getShowLink = entity.getShowLink;
  var match$5 = useSortedObj(title, props.defaultSort);
  var sortedObj = match$5[0];
  React.useEffect(
    function () {
      Curry._1(setDataView, function (_prev) {
        if (isMobileView && !showTableOnMobileView$1) {
          return /* Card */ 1;
        } else {
          return /* Table */ 0;
        }
      });
    },
    [isMobileView],
  );
  var defaultOffset = Math.imul(
    Caml_int32.div(totalResults, localResultsPerPage),
    localResultsPerPage,
  );
  var offsetVal = offset < totalResults ? offset : defaultOffset;
  var offsetVal$1 = ignoreUrlUpdate$1 ? offset : offsetVal;
  React.useEffect(
    function () {
      if (
        offset > currrentFetchCount &&
        offset <= totalResults &&
        !tableDataLoading$1 &&
        handleRefetch !== undefined
      ) {
        Curry._1(handleRefetch, undefined);
      }
    },
    [offset, currrentFetchCount, totalResults, tableDataLoading$1],
  );
  var actualData$1 = React.useMemo(
    function () {
      if (tableLocalFilter$1) {
        return DynamicTableUtils.filteredData(
          actualData,
          columnFilter,
          visibleColumns,
          entity,
          dateFormatConvertor,
        );
      } else {
        return actualData;
      }
    },
    [actualData, columnFilter, visibleColumns, entity, dateFormatConvertor],
  );
  var columnFilterRow = React.useMemo(
    function () {
      if (!tableLocalFilter$1) {
        return;
      }
      var columnFilterRow = Core__Option.getOr(
        visibleColumns,
        entity.defaultColumns,
      ).map(function (item) {
        var headingEntity = Curry._1(entity.getHeading, item);
        var key = headingEntity.key;
        var dataType = headingEntity.dataType;
        var filterValueArray = [];
        var columnFilterCopy = DictionaryUtils.deleteKey(columnFilter, key);
        var actualData$2 = Object.keys(columnFilter).includes(headingEntity.key)
          ? actualData
          : actualData$1;
        DynamicTableUtils.filteredData(
          actualData$2,
          columnFilterCopy,
          visibleColumns,
          entity,
          dateFormatConvertor,
        ).forEach(function (rows) {
          if (rows == null) {
            return;
          }
          var num = Curry._2(entity.getCell, rows, item);
          var value;
          switch (num.TAG | 0) {
            case /* CustomCell */ 10:
              value = DynamicTableUtils.convertStrCellToFloat(dataType, num._1);
              break;
            case /* StartEndDate */ 6:
            case /* InputField */ 7:
            case /* TrimmedText */ 12:
            case /* DropDown */ 14:
              value = DynamicTableUtils.convertStrCellToFloat(dataType, "");
              break;
            case /* Currency */ 3:
            case /* Progress */ 9:
            case /* DeltaPercentage */ 13:
            case /* Numeric */ 15:
              value = DynamicTableUtils.convertFloatCellToStr(dataType, num._0);
              break;
            case /* Label */ 0:
            case /* ColoredText */ 16:
              value = DynamicTableUtils.convertStrCellToFloat(
                dataType,
                num._0.title,
              );
              break;
            default:
              value = DynamicTableUtils.convertStrCellToFloat(dataType, num._0);
          }
          filterValueArray.push(value);
        });
        if (dataType < 2) {
          return {
            TAG: /* TextFilter */ 1,
            _0: key,
          };
        }
        if (dataType >= 5) {
          return {
            TAG: /* DropDownFilter */ 0,
            _0: key,
            _1: filterValueArray,
          };
        }
        var newArr = filterValueArray.map(function (item) {
          return Core__Option.getOr(Core__JSON.Decode.$$float(item), 0);
        });
        if (newArr.length >= 1) {
          return {
            TAG: /* Range */ 2,
            _0: key,
            _1: Caml_splice_call.spliceApply(Math.min, [newArr]),
            _2: Caml_splice_call.spliceApply(Math.max, [newArr]),
          };
        } else {
          return {
            TAG: /* Range */ 2,
            _0: key,
            _1: 0.0,
            _2: 0.0,
          };
        }
      });
      return showSerialNumber$1 && tableLocalFilter$1
        ? [
            {
              TAG: /* Range */ 2,
              _0: "s_no",
              _1: 0,
              _2: actualData$1.length,
            },
          ].concat(columnFilterRow)
        : columnFilterRow;
    },
    [actualData$1, totalResults, visibleColumns, columnFilter],
  );
  var filteredDataLength =
    Object.keys(columnFilter).length !== 0 ? actualData$1.length : totalResults;
  React.useEffect(
    function () {
      if (setExtFilteredDataLength !== undefined) {
        Curry._1(setExtFilteredDataLength, function (param) {
          return filteredDataLength;
        });
      }
    },
    [filteredDataLength],
  );
  var filteredData = React.useMemo(
    function () {
      if (sortedObj !== undefined) {
        return sortArray(actualData$1, sortedObj.key, sortedObj.order);
      } else {
        return actualData$1;
      }
    },
    [sortedObj, props.customGetObjects, actualData$1, entity.getObjects],
  );
  React.useEffect(
    function () {
      var selectedRowDataLength = checkBoxProps$1.selectedData.length;
      var isCompleteDataSelected =
        selectedRowDataLength === filteredData.length;
      if (isCompleteDataSelected) {
        Curry._1(setSelectAllCheckBox, function (param) {
          return /* ALL */ 0;
        });
      } else if (checkBoxProps$1.selectedData.length === 0) {
        Curry._1(setSelectAllCheckBox, function (param) {});
      } else {
        Curry._1(setSelectAllCheckBox, function (param) {
          return /* PARTIAL */ 1;
        });
      }
    },
    [checkBoxProps$1.selectedData, filteredData],
  );
  React.useEffect(
    function () {
      if (selectAllCheckBox === /* ALL */ 0) {
        Curry._1(checkBoxProps$1.setSelectedData, function (param) {
          return filteredData.map(function (ele) {
            return ele;
          });
        });
      } else if (selectAllCheckBox === undefined) {
        Curry._1(checkBoxProps$1.setSelectedData, function (param) {
          return [];
        });
      }
    },
    [selectAllCheckBox],
  );
  var sNoArr = Core__Option.getOr(columnFilter["s_no"], []);
  var nullableRows = filteredData.map(function (nullableItem, index) {
    var actualRows;
    if (nullableItem == null) {
      actualRows = [];
    } else {
      var visibleCell = Core__Option.getOr(
        visibleColumns,
        entity.defaultColumns,
      ).map(function (colType) {
        return Curry._2(entity.getCell, nullableItem, colType);
      });
      var startPoint = Core__Option.getOr(sNoArr[0], 1);
      var endPoint = Core__Option.getOr(sNoArr[1], 1);
      var jsonIndex = (index + 1) | 0;
      actualRows =
        sNoArr.length > 0 &&
        !(
          Caml_obj.lessequal(startPoint, jsonIndex) &&
          Caml_obj.greaterequal(endPoint, jsonIndex)
        )
          ? []
          : visibleCell;
    }
    var setIsSelected = function (isSelected) {
      if (isSelected) {
        return Curry._1(checkBoxProps$1.setSelectedData, function (prev) {
          return prev.concat([nullableItem]);
        });
      } else {
        return Curry._1(checkBoxProps$1.setSelectedData, function (prev) {
          return prev.filter(function (item) {
            return item !== nullableItem;
          });
        });
      }
    };
    if (actualRows.length > 0) {
      if (showSerialNumber$1) {
        actualRows.unshift({
          TAG: /* Numeric */ 15,
          _0: (1 + index) | 0,
          _1: function (val) {
            return val.toString();
          },
        });
      }
      if (checkBoxProps$1.showCheckBox) {
        var selectedRowIndex = checkBoxProps$1.selectedData.findIndex(
          function (item) {
            return item === nullableItem;
          },
        );
        actualRows.unshift({
          TAG: /* CustomCell */ 10,
          _0: React.createElement(
            "div",
            {
              onClick: function (ev) {
                ev.stopPropagation();
              },
            },
            React.createElement(CheckBoxIcon.make, {
              isSelected: selectedRowIndex !== -1,
              setIsSelected: setIsSelected,
              checkboxDimension: "h-4 w-4",
            }),
          ),
          _1: LogicUtils.getStringFromBool(selectedRowIndex !== -1),
        });
      }
    }
    return actualRows;
  });
  var rows = allowNullableRows$1
    ? nullableRows
    : Belt_Array.keepMap(nullableRows, function (item) {
        if (item.length === 0) {
          return;
        } else {
          return item;
        }
      });
  var dataExists = rows.length > 0;
  var heading$1 = heading.map(function (head, index) {
    var getValue = function (row) {
      return Core__Option.mapOr(row[index], "", Table.getTableCellValue);
    };
    var ele = rows[0];
    var $$default = ele !== undefined ? getValue(ele) : "";
    return {
      key: head.key,
      title: head.title,
      dataType: head.dataType,
      showSort:
        head.showSort &&
        dataExists &&
        (totalResults === rows.length
          ? rows.some(function (row) {
              return getValue(row) !== $$default;
            })
          : true),
      showFilter: head.showFilter,
      highlightCellOnHover: head.highlightCellOnHover,
      headerElement: head.headerElement,
      description: head.description,
      data: head.data,
      isMandatory: head.isMandatory,
      showMultiSelectCheckBox: head.showMultiSelectCheckBox,
      hideOnShrink: head.hideOnShrink,
      customWidth: head.customWidth,
    };
  });
  var paginatedData = filteredData.slice(
    offsetVal$1,
    (offsetVal$1 + localResultsPerPage) | 0,
  );
  var rows$1 = rows.slice(offsetVal$1, (offsetVal$1 + localResultsPerPage) | 0);
  var handleRowClick = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal === undefined) {
        return;
      }
      var value = Caml_option.valFromOption(actualVal);
      if (onEntityClick !== undefined) {
        return Curry._1(onEntityClick, value);
      }
      if (getShowLink === undefined) {
        return;
      }
      var link = Curry._1(getShowLink, value);
      RescriptReactRouter.push(
        LogicUtils.isNonEmptyString(url$1.search)
          ? "" + link + "?" + url$1.search + ""
          : link,
      );
    },
    [filteredData, getShowLink, onEntityClick, url$1.search],
  );
  var onRowDoubleClick = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal === undefined) {
        return;
      }
      var value = Caml_option.valFromOption(actualVal);
      if (onEntityDoubleClick !== undefined) {
        return Curry._1(onEntityDoubleClick, value);
      }
      if (getShowLink === undefined) {
        return;
      }
      var link = Curry._1(getShowLink, value);
      RescriptReactRouter.push(
        LogicUtils.isNonEmptyString(url$1.search)
          ? "" + link + "?" + url$1.search + ""
          : link,
      );
    },
    [filteredData, getShowLink, onEntityDoubleClick, url$1.search],
  );
  var handleMouseEnter = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal !== undefined && onMouseEnter !== undefined) {
        return Curry._1(onMouseEnter, Caml_option.valFromOption(actualVal));
      }
    },
    [filteredData, getShowLink, onMouseEnter, url$1.search],
  );
  var handleMouseLeaeve = React.useCallback(
    function (index) {
      var ele = filteredData[index];
      var actualVal =
        ele !== undefined
          ? Caml_option.nullable_to_opt(Caml_option.valFromOption(ele))
          : undefined;
      if (actualVal !== undefined && onMouseLeave !== undefined) {
        return Curry._1(onMouseLeave, Caml_option.valFromOption(actualVal));
      }
    },
    [filteredData, getShowLink, onMouseLeave, url$1.search],
  );
  var match$6;
  if (totalResults > 0) {
    var paginationUI = showPagination$1
      ? React.createElement(AddDataAttributes.make, {
          attributes: [["data-paginator", "dynamicTablePaginator"]],
          children: React.createElement(Paginator.make, {
            totalResults: filteredDataLength,
            offset: offsetVal$1,
            resultsPerPage: localResultsPerPage,
            setOffset: newSetOffset,
            handleRefetch: handleRefetch,
            currrentFetchCount: currrentFetchCount,
            downloadCsv: props.downloadCsv,
            actualData: actualData$1,
            tableDataLoading: tableDataLoading$1,
            setResultsPerPage: setLocalResultsPerPage,
            paginationClass: paginationClass$1,
            showResultsPerPageSelector: showResultsPerPageSelector$1,
          }),
        })
      : null;
    var isMinHeightRequired =
      noScrollbar$1 ||
      (tableLocalFilter$1 &&
        rows$1.length <= 5 &&
        Core__Option.isNone(frozenUpto));
    var scrollBarClass = Core__Array.reduce(
      Object.values(isFilterOpen),
      false,
      function (acc, item) {
        if (item) {
          return true;
        } else {
          return acc;
        }
      },
    )
      ? ""
      : "" +
        (isMinHeightRequired
          ? noScrollbar$1
            ? ""
            : "overflow-x-scroll"
          : "overflow-scroll") +
        "";
    var tmp;
    if (match$3[0]) {
      tmp =
        renderCard !== undefined
          ? React.createElement(
              "div",
              {
                className: "overflow-auto flex flex-col",
              },
              Belt_Array.keepMap(paginatedData, function (prim) {
                if (prim == null) {
                  return;
                } else {
                  return Caml_option.some(prim);
                }
              }).map(function (item, rowIndex) {
                return Curry._3(
                  renderCard,
                  (rowIndex + offset) | 0,
                  item,
                  handleRowClick,
                );
              }),
            )
          : React.createElement(CardTable.make, {
              heading: heading$1,
              rows: rows$1,
              offset: offsetVal$1,
              onRowClick: handleRowClick,
              isAnalyticsModule: isAnalyticsModule$1,
            });
    } else {
      var children = React.createElement(Table.make, {
        title: title,
        heading: heading$1,
        rows: rows$1,
        offset: offsetVal$1,
        onRowClick: handleRowClick,
        onRowDoubleClick: onRowDoubleClick,
        onRowClickPresent:
          Core__Option.isSome(onEntityClick) ||
          Core__Option.isSome(getShowLink),
        removeVerticalLines: handleRemoveLines,
        removeHorizontalLines: removeHorizontalLines$1,
        evenVertivalLines: evenVertivalLines$1,
        setSortedObj: match$5[1],
        sortedObj: sortedObj,
        setFilterObj: props.setFilterObj,
        filterObj: props.filterObj,
        columnFilterRow: columnFilterRow,
        tableheadingClass: tableheadingClass$1,
        tableBorderClass: tableBorderClass$1,
        tableDataBorderClass: tableDataBorderClass$1,
        collapseTableRow: collapseTableRow$1,
        getRowDetails: props.getRowDetails,
        actualData: actualData$1,
        onExpandClickData: props.onExpandClickData,
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeaeve,
        highlightText: highlightText$1,
        heightHeadingClass: props.heightHeadingClass,
        frozenUpto: frozenUpto,
        clearFormatting: clearFormatting$1,
        rowHeightClass: rowHeightClass$1,
        isMinHeightRequired: isMinHeightRequired,
        rowCustomClass: rowCustomClass$1,
        enableEqualWidthCol: enableEqualWidthCol$1,
        isHighchartLegend: isHighchartLegend$1,
        headingCenter: headingCenter$1,
        filterIcon: props.filterIcon,
        filterDropdownClass: props.filterDropdownClass,
        maxTableHeight: maxTableHeight$1,
        labelMargin: labelMargin$1,
        customFilterRowStyle: customFilterRowStyle$1,
        selectAllCheckBox: selectAllCheckBox,
        setSelectAllCheckBox: setSelectAllCheckBox,
        isEllipsisTextRelative: isEllipsisTextRelative$1,
        customMoneyStyle: customMoneyStyle$1,
        ellipseClass: ellipseClass$1,
        selectedRowColor: props.selectedRowColor,
        lastHeadingClass: lastHeadingClass$1,
        showCheckbox: checkBoxProps$1.showCheckBox,
        lastColClass: lastColClass$1,
        fixLastCol: fixLastCol$1,
        headerCustomBgColor: props.headerCustomBgColor,
        alignCellContent: props.alignCellContent,
        minTableHeightClass: minTableHeightClass$1,
        filterDropdownMaxHeight: props.filterDropdownMaxHeight,
        customCellColor: props.customCellColor,
        customBorderClass: props.customBorderClass,
        showborderColor: props.showborderColor,
        tableHeadingTextClass: tableHeadingTextClass$1,
      });
      tmp = tableLocalFilter$1
        ? React.createElement(DatatableContext.make, {
            value: filterValue,
            children: React.createElement(DataTableFilterOpenContext.make, {
              value: filterOpenValue,
              children: children,
            }),
          })
        : children;
    }
    var loadedTable = React.createElement(
      "div",
      {
        className: "no-scrollbar " + scrollBarClass + "",
      },
      tmp,
    );
    match$6 = [loadedTable, paginationUI];
  } else if (totalResults === 0 && !tableDataLoading$1) {
    var noDataTable =
      dataNotFoundComponent !== undefined
        ? Caml_option.valFromOption(dataNotFoundComponent)
        : React.createElement(NoDataFound.make, {
            message: noDataMsg$1,
            renderType: /* Painting */ 1,
            customCssClass: "my-6",
          });
    match$6 = [noDataTable, null];
  } else {
    match$6 = [null, null];
  }
  var tableActionBorder$2 = isMobileView
    ? tableActionBorder$1
    : showFilterBorder$1
      ? "p-2 bg-white dark:bg-black border border-jp-2-light-gray-400 rounded-lg"
      : "";
  var filterBottomPadding = isMobileView ? "" : "pb-3";
  var filtersOuterMargin = hideTitle$1 ? "" : "my-2";
  var tableActionElements = React.createElement(
    "div",
    {
      className: "flex flex-row",
    },
    advancedSearchComponent !== undefined
      ? React.createElement(AdvancedSearchComponent.make, {
          children: Caml_option.valFromOption(advancedSearchComponent),
          setData: props.setData,
          entity: entity,
          setSummary: props.setSummary,
        })
      : React.createElement(UIUtils.RenderIf.make, {
          condition: searchFields.length > 0,
          children: React.createElement(AdvancedSearchModal.make, {
            searchFields: searchFields,
            url: entity.searchUrl,
            entity: entity,
          }),
        }),
    React.createElement(DesktopView.make, {
      children:
        tableActions !== undefined
          ? React.createElement(LoadedTableContext.make, {
              value: actualData$1,
              children: React.createElement(
                "div",
                {
                  className: filterBottomPadding,
                },
                Caml_option.valFromOption(tableActions),
              ),
            })
          : null,
    }),
  );
  var customizeColumsButtons =
    clearFormattedDataButton !== undefined
      ? React.createElement(
          "div",
          {
            className:
              "flex flex-row mobile:gap-7 desktop:gap-10 " +
              filterBottomPadding +
              "",
          },
          Caml_option.valFromOption(clearFormattedDataButton),
          React.createElement(Portal.make, {
            to: "",
            children: rightTitleElement$1,
          }),
        )
      : React.createElement(
          "div",
          {
            className:
              "" +
              (Caml_obj.notequal(rightTitleElement$1, null)
                ? filterBottomPadding
                : "") +
              "",
          },
          React.createElement(Portal.make, {
            to: "",
            children: rightTitleElement$1,
          }),
        );
  var addDataAttributesClass = isHighchartLegend$1
    ? "visibility: hidden"
    : "" + (ignoreHeaderBg$1 ? "" : backgroundClass) + " empty:hidden";
  var dataId = Core__Option.getOr(title.split("-")[0], "");
  var topBottomActions =
    Core__Option.isSome(bottomActions) || !isMobileView
      ? bottomActions
      : tableActions;
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-loaded-table", dataId]],
    children: React.createElement(
      "div",
      {
        className: "w-full",
      },
      React.createElement(
        "div",
        {
          className: addDataAttributesClass,
          style: {
            zIndex: "2",
          },
        },
        React.createElement(
          "div",
          {
            className:
              "flex flex-row justify-between items-center" +
              (hideTitle$1 ? "" : " mt-4 mb-2"),
          },
          React.createElement(
            "div",
            {
              className: "w-full",
            },
            React.createElement(UIUtils.RenderIf.make, {
              condition: !hideTitle$1,
              children: React.createElement(
                NewThemeUtils.NewThemeHeading.make,
                {
                  heading: title,
                  description: props.description,
                  headingSize: titleSize$1,
                  rightActions: Caml_option.some(
                    React.createElement(UIUtils.RenderIf.make, {
                      condition: !isMobileView && !isTableActionBesideFilters$1,
                      children: tableActionElements,
                    }),
                  ),
                  outerMargin: "",
                },
              ),
            }),
          ),
        ),
        React.createElement(UIUtils.RenderIf.make, {
          condition: !hideFilterTopPortals$1,
          children: React.createElement(
            "div",
            {
              className: "flex justify-between items-center",
            },
            JsxPPXReactSupport.createElementWithKey(
              "tableFilterTopLeft-" + title + "",
              PortalCapture.make,
              {
                name: "tableFilterTopLeft-" + title + "",
                customStyle: "flex items-center gap-x-2",
              },
            ),
            JsxPPXReactSupport.createElementWithKey(
              "tableFilterTopRight-" + title + "",
              PortalCapture.make,
              {
                name: "tableFilterTopRight-" + title + "",
                customStyle: "flex flex-row-reverse items-center gap-x-2",
              },
            ),
          ),
        }),
        React.createElement(
          "div",
          {
            className:
              "flex flex-row mobile:flex-wrap items-center " +
              tableActionBorder$2 +
              " " +
              filtersOuterMargin +
              "",
          },
          React.createElement(TableFilterSectionContext.make, {
            children: React.createElement(
              "div",
              {
                className: "flex-1 " + tableDataBackgroundClass$1 + "",
              },
              filters !== undefined
                ? React.Children.map(
                    Caml_option.valFromOption(filters),
                    function (element) {
                      if (element === null) {
                        return null;
                      } else {
                        return React.createElement(
                          "div",
                          {
                            className: filterBottomPadding,
                          },
                          element,
                        );
                      }
                    },
                  )
                : null,
              JsxPPXReactSupport.createElementWithKey(
                "extraFilters-" + title + "",
                PortalCapture.make,
                {
                  name: "extraFilters-" + title + "",
                },
              ),
            ),
            isFilterSection: true,
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition:
              isTableActionBesideFilters$1 || isMobileView || hideTitle$1,
            children: tableActionElements,
          }),
          customizeColumsButtons,
        ),
      ),
      dataLoading$1
        ? React.createElement(
            DynamicTableUtils.TableDataLoadingIndicator.make,
            {
              showWithData: rows$1.length !== 0,
            },
          )
        : match$6[0],
      React.createElement(UIUtils.RenderIf.make, {
        condition: tableDataLoading$1 && !dataLoading$1,
        children: React.createElement(
          DynamicTableUtils.TableDataLoadingIndicator.make,
          {
            showWithData: rows$1.length !== 0,
          },
        ),
      }),
      React.createElement(
        "div",
        {
          className:
            "" +
            (Core__Option.isSome(tableActions) && isMobileView
              ? "flex flex-row-reverse justify-between mb-10 " +
                tableDataBackgroundClass$1 +
                ""
              : tableDataBackgroundClass$1) +
            "",
        },
        match$6[1],
        topBottomActions !== undefined
          ? React.createElement(LoadedTableContext.make, {
              value: actualData$1,
              children: Caml_option.valFromOption(topBottomActions),
            })
          : null,
      ),
    ),
  });
}

var make = LoadedTable;

export {
  checkBoxPropDefaultVal,
  sortAtom,
  backgroundClass,
  useSortedObj,
  sortArray,
  table_pageDetails,
  make,
};
/* sortAtom Not a pure module */
