// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as ButtonGroup from "./ButtonGroup.bs.js";
import * as ConfigContext from "../context/ConfigContext.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function ButtonGroupIp(props) {
  var buttonSize = props.buttonSize;
  var isSeparate = props.isSeparate;
  var isDisabled = props.isDisabled;
  var buttonClass = props.buttonClass;
  var input = props.input;
  var buttonClass$1 = buttonClass !== undefined ? buttonClass : "";
  var isDisabled$1 = isDisabled !== undefined ? isDisabled : false;
  var isSeparate$1 = isSeparate !== undefined ? isSeparate : false;
  var match = React.useContext(ConfigContext.configContext);
  var textColor = match.globalUIConfig.font.textColor;
  var buttonState = isDisabled$1 ? /* Disabled */ 2 : /* Normal */ 0;
  var buttons = props.options.map(function (op, i) {
    var active = LogicUtils.getStringFromJson(input.value, "") === op.value;
    if (isSeparate$1) {
      return JsxPPXReactSupport.createElementWithKey(
        i.toString(),
        Button.make,
        {
          buttonState: buttonState,
          text: op.label,
          buttonType: active ? /* Primary */ 0 : /* SecondaryFilled */ 3,
          buttonSize: buttonSize,
          leftIcon: op.icon,
          onClick: function (param) {
            Curry._1(input.onChange, op.value);
          },
        },
      );
    } else {
      return JsxPPXReactSupport.createElementWithKey(
        i.toString(),
        Button.make,
        {
          buttonState: buttonState,
          text: op.label,
          buttonType: active ? /* SecondaryFilled */ 3 : /* Secondary */ 1,
          buttonSize: buttonSize,
          leftIcon: op.icon,
          onClick: function (param) {
            Curry._1(input.onChange, op.value);
          },
          textStyle: active ? "" + textColor.primaryNormal + "" : "",
          textWeight: active ? "font-semibold" : "font-medium",
          customButtonStyle: active ? "shadow-inner px-0" : "px-0",
        },
      );
    }
  });
  if (isSeparate$1) {
    return React.createElement(
      "div",
      {
        className:
          "flex flex-row gap-4 items-center my-2 " + buttonClass$1 + "",
      },
      buttons,
    );
  } else {
    return React.createElement(ButtonGroup.make, {
      children: buttons,
      wrapperClass: "flex flex-row mr-2 ml-1",
    });
  }
}

var make = ButtonGroupIp;

export { make };
/* react Not a pure module */
