// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function CustomizeNotificationsModal(props) {
  var customIcon = props.customIcon;
  var headerAlignmentClass = props.headerAlignmentClass;
  var isBackdropBlurReq = props.isBackdropBlurReq;
  var overlayBG = props.overlayBG;
  var headingClassOverride = props.headingClassOverride;
  var onCloseClickCustomFun = props.onCloseClickCustomFun;
  var showModalHeadingIconName = props.showModalHeadingIconName;
  var refresh = props.refresh;
  var refreshOutages = props.refreshOutages;
  var showMarkAllRead = props.showMarkAllRead;
  var onMarkAllAsReadClick = props.onMarkAllAsReadClick;
  var showCloseIcon = props.showCloseIcon;
  var iconName = props.iconName;
  var btnRequired = props.btnRequired;
  var modalWidth = props.modalWidth;
  var notificationCount = props.notificationCount;
  var setNotificationCount = props.setNotificationCount;
  var totalNotifications = props.totalNotifications;
  var showLoderButton = props.showLoderButton;
  var submitButtonText = props.submitButtonText;
  var closeOnOutsideClick = props.closeOnOutsideClick;
  var revealFrom = props.revealFrom;
  var headerTextClass = props.headerTextClass;
  var modalHeading = props.modalHeading;
  var modalHeading$1 =
    modalHeading !== undefined ? modalHeading : "Select Options";
  var headerTextClass$1 =
    headerTextClass !== undefined
      ? headerTextClass
      : "text-2xl font-extrabold tracking-tight ml-3.5";
  var revealFrom$1 = revealFrom !== undefined ? revealFrom : /* Right */ 1;
  var closeOnOutsideClick$1 =
    closeOnOutsideClick !== undefined ? closeOnOutsideClick : true;
  var submitButtonText$1 =
    submitButtonText !== undefined ? submitButtonText : "Update";
  var showLoderButton$1 =
    showLoderButton !== undefined ? showLoderButton : false;
  var totalNotifications$1 =
    totalNotifications !== undefined ? totalNotifications : 0;
  var notificationCount$1 =
    notificationCount !== undefined ? notificationCount : 0;
  var modalWidth$1 =
    modalWidth !== undefined ? modalWidth : "w-[430px] !border-none";
  var btnRequired$1 = btnRequired !== undefined ? btnRequired : false;
  var iconName$1 = iconName !== undefined ? iconName : "";
  var showCloseIcon$1 = showCloseIcon !== undefined ? showCloseIcon : true;
  var showMarkAllRead$1 =
    showMarkAllRead !== undefined ? showMarkAllRead : false;
  var refreshOutages$1 = refreshOutages !== undefined ? refreshOutages : false;
  var refresh$1 = refresh !== undefined ? refresh : false;
  var showModalHeadingIconName$1 =
    showModalHeadingIconName !== undefined ? showModalHeadingIconName : "";
  var onCloseClickCustomFun$1 =
    onCloseClickCustomFun !== undefined
      ? onCloseClickCustomFun
      : function (param) {};
  var headingClassOverride$1 =
    headingClassOverride !== undefined ? headingClassOverride : "";
  var overlayBG$1 =
    overlayBG !== undefined
      ? overlayBG
      : "!shadow-xl !blur-none !bg-none !backdrop-blur-none !rounded-none !border-transparent";
  var isBackdropBlurReq$1 =
    isBackdropBlurReq !== undefined ? isBackdropBlurReq : true;
  var headerAlignmentClass$1 =
    headerAlignmentClass !== undefined ? headerAlignmentClass : "flex-row";
  var customIcon$1 =
    customIcon !== undefined
      ? Caml_option.valFromOption(customIcon)
      : undefined;
  var customHeight = btnRequired$1 === false ? "h-full" : "h-screen";
  var customButton = React.createElement(Button.make, {
    buttonState:
      refreshOutages$1 && !refresh$1 ? /* Disabled */ 2 : /* Normal */ 0,
    text: submitButtonText$1,
    buttonType: /* Primary */ 0,
    leftIcon: {
      TAG: /* CustomIcon */ 1,
      _0: React.createElement(Icon.make, {
        name: iconName$1,
        size: 17,
        className:
          "-mr-1 jp-gray-900 fill-opacity-50 dark:jp-gray-text_darktheme ml-3",
      }),
    },
    onClick: props.onSubmitModal,
  });
  return React.createElement(
    Modal.make,
    {
      showModal: props.showModal,
      setShowModal: props.setShowModal,
      children: null,
      modalHeading: modalHeading$1,
      modalClass:
        "" +
        modalWidth$1 +
        " " +
        customHeight +
        " float-right overflow-hidden !bg-white dark:!bg-jp-gray-lightgray_background !rounded-none !shadow-xl !backdrop-blur-none",
      childClass: "p-0 m-0",
      headingClass:
        "py-6 px-2.5 border-b border-solid border-slate-300 dark:border-slate-500 " +
        headingClassOverride$1 +
        "",
      paddingClass: "pt-0 overflow-hidden",
      closeOnOutsideClick: closeOnOutsideClick$1,
      headerTextClass: headerTextClass$1,
      showCloseIcon: showCloseIcon$1,
      showBackIcon: props.showBackIcon,
      onBackClick: props.onBackClick,
      revealFrom: revealFrom$1,
      onCloseClickCustomFun: onCloseClickCustomFun$1,
      overlayBG: overlayBG$1,
      showModalHeadingIconName: showModalHeadingIconName$1,
      headerAlignmentClass: headerAlignmentClass$1,
      isBackdropBlurReq: isBackdropBlurReq$1,
      customIcon: Caml_option.some(customIcon$1),
    },
    showLoderButton$1 && showMarkAllRead$1
      ? React.createElement(
          "div",
          {
            className:
              "text-xs text-sky-500 relative -top-10 left-64 w-fit cursor-pointer",
            onClick: function (param) {
              if (onMarkAllAsReadClick !== undefined) {
                return Curry._1(onMarkAllAsReadClick, undefined);
              }
            },
          },
          "Mark all as read",
        )
      : null,
    React.createElement(
      "div",
      {
        className:
          "overflow-auto p-6 border-b border-solid  border-slate-300 dark:border-slate-500 relative",
        style: {
          height: btnRequired$1 ? "calc(100vh - 9.6rem)" : "100vh",
        },
      },
      props.element,
      showLoderButton$1 && notificationCount$1 > 10
        ? React.createElement(
            "div",
            {
              className: "flex fixed items-center justify-center",
              style: {
                right: "100px",
                top: "100px",
              },
            },
            React.createElement(Button.make, {
              text: "Load Previous",
              rightIcon: {
                TAG: /* FontAwesome */ 0,
                _0: "arrow-up",
              },
              onClick: function (param) {
                if (setNotificationCount !== undefined) {
                  return Curry._1(setNotificationCount, function (param) {
                    return (notificationCount$1 - 10) | 0;
                  });
                }
              },
              customButtonStyle: "rounded-full ",
            }),
          )
        : null,
      ((totalNotifications$1 - notificationCount$1) | 0) > 0 &&
        showLoderButton$1
        ? React.createElement(
            "div",
            {
              className: "sticky bottom-20 flex items-center justify-center",
            },
            React.createElement(Button.make, {
              text: "Load More",
              rightIcon: {
                TAG: /* FontAwesome */ 0,
                _0: "arrow-down",
              },
              onClick: function (param) {
                if (setNotificationCount !== undefined) {
                  return Curry._1(setNotificationCount, function (param) {
                    return (notificationCount$1 + 10) | 0;
                  });
                }
              },
              customButtonStyle: "rounded-full bg-stone-800/50",
            }),
          )
        : null,
    ),
    btnRequired$1
      ? React.createElement(
          "div",
          {
            className: "flex items-center justify-center my-5",
          },
          refreshOutages$1 && !refresh$1
            ? React.createElement(ToolTip.make, {
                description: "kindly wait at least 1 minute to make a refresh",
                toolTipFor: Caml_option.some(customButton),
                toolTipPosition: /* Top */ 0,
              })
            : customButton,
        )
      : null,
  );
}

var make = CustomizeNotificationsModal;

export { make };
/* Icon Not a pure module */
