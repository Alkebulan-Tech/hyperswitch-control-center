// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as DayJs from "../libraries/DayJs.bs.js";
import Dayjs from "dayjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as TextInput from "./form/TextInput.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as NewCalendar from "./NewCalendar.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as DateTimeUtils from "../utils/DateTimeUtils.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function NewCalendarList(props) {
  var customDisabledFutureDays = props.customDisabledFutureDays;
  var setShowMsg = props.setShowMsg;
  var dateRangeLimit = props.dateRangeLimit;
  var disableFutureDates = props.disableFutureDates;
  var disablePastDates = props.disablePastDates;
  var showTime = props.showTime;
  var endDate = props.endDate;
  var startDate = props.startDate;
  var cellRenderer = props.cellRenderer;
  var cellHighlighter = props.cellHighlighter;
  var count = props.count;
  var changeStartDate = props.changeStartDate;
  var changeEndDate = props.changeEndDate;
  var onDateClick = props.onDateClick;
  var year = props.year;
  var month = props.month;
  var calendarContaierStyle = props.calendarContaierStyle;
  var changeHighlightCellStyle = props.changeHighlightCellStyle;
  var changeHighlightCellStyle$1 =
    changeHighlightCellStyle !== undefined ? changeHighlightCellStyle : "";
  var calendarContaierStyle$1 =
    calendarContaierStyle !== undefined ? calendarContaierStyle : "";
  var count$1 = count !== undefined ? count : 1;
  var startDate$1 = startDate !== undefined ? startDate : "";
  var endDate$1 = endDate !== undefined ? endDate : "";
  var showTime$1 = showTime !== undefined ? showTime : false;
  var disablePastDates$1 =
    disablePastDates !== undefined ? disablePastDates : true;
  var disableFutureDates$1 =
    disableFutureDates !== undefined ? disableFutureDates : false;
  var customDisabledFutureDays$1 =
    customDisabledFutureDays !== undefined ? customDisabledFutureDays : 0.0;
  var match = React.useState(function () {
    return "";
  });
  var setFromDate = match[1];
  var fromDate = match[0];
  var match$1 = React.useState(function () {
    return "";
  });
  var setToDate = match$1[1];
  var toDate = match$1[0];
  var match$2 = React.useState(function () {
    return false;
  });
  var setFromDateOnFocus = match$2[1];
  var fromDateOnFocus = match$2[0];
  var match$3 = React.useState(function () {
    return false;
  });
  var setToDateOnFocus = match$3[1];
  var toDateOnFocus = match$3[0];
  var match$4 = React.useState(function () {
    return false;
  });
  var setIsDateClicked = match$4[1];
  var isDateClicked = match$4[0];
  var startYear = year !== undefined ? year : new Date().getFullYear();
  React.useEffect(
    function () {
      var fromDateJs = Dayjs(fromDate);
      var toDateJs = Dayjs(toDate);
      var permittedMaxYears = ((startYear | 0) + 10) | 0;
      var updatedFromDate;
      if (
        LogicUtils.isNonEmptyString(fromDate) &&
        fromDate.length >= 5 &&
        fromDateJs.isValid() &&
        fromDateJs.year() <= permittedMaxYears
      ) {
        try {
          updatedFromDate = fromDateJs.format("YYYY-MM-DD");
        } catch (_error) {
          updatedFromDate = "";
        }
      } else {
        updatedFromDate = "";
      }
      var updatedToDate;
      if (
        LogicUtils.isNonEmptyString(toDate) &&
        toDate.length >= 5 &&
        toDateJs.isValid() &&
        toDateJs.year() <= permittedMaxYears
      ) {
        try {
          updatedToDate = toDateJs.format("YYYY-MM-DD");
        } catch (_error$1) {
          updatedToDate = "";
        }
      } else {
        updatedToDate = "";
      }
      if (
        LogicUtils.isNonEmptyString(updatedFromDate) &&
        updatedFromDate !== startDate$1 &&
        changeStartDate !== undefined
      ) {
        Curry._4(changeStartDate, updatedFromDate, false, false, undefined);
      }
      if (
        LogicUtils.isNonEmptyString(updatedFromDate) &&
        LogicUtils.isNonEmptyString(updatedToDate) &&
        updatedToDate !== endDate$1 &&
        Caml_obj.greaterequal(toDateJs, fromDateJs) &&
        changeEndDate !== undefined
      ) {
        Curry._3(changeEndDate, updatedToDate, false, undefined);
      }
    },
    [fromDate, toDate],
  );
  React.useEffect(
    function () {
      if (LogicUtils.isNonEmptyString(startDate$1) && !fromDateOnFocus) {
        Curry._1(setFromDate, function (param) {
          return Dayjs(startDate$1).format("MMM DD, YYYY");
        });
      }
      if (LogicUtils.isNonEmptyString(endDate$1) && !toDateOnFocus) {
        Curry._1(setToDate, function (param) {
          return Dayjs(endDate$1).format("MMM DD, YYYY");
        });
      } else {
        Curry._1(setToDate, function (param) {
          return "";
        });
      }
    },
    [fromDateOnFocus, toDateOnFocus],
  );
  React.useEffect(
    function () {
      if (isDateClicked) {
        if (LogicUtils.isNonEmptyString(startDate$1) && !fromDateOnFocus) {
          Curry._1(setFromDate, function (param) {
            return Dayjs(startDate$1).format("MMM DD, YYYY");
          });
        }
        if (LogicUtils.isNonEmptyString(endDate$1) && !toDateOnFocus) {
          Curry._1(setToDate, function (param) {
            return Dayjs(endDate$1).format("MMM DD, YYYY");
          });
        } else {
          Curry._1(setToDate, function (param) {
            return "";
          });
        }
        Curry._1(setIsDateClicked, function (param) {
          return false;
        });
      }
    },
    [isDateClicked],
  );
  var match$5 = React.useState(function () {
    return "";
  });
  var setHoverdDate = match$5[1];
  var hoverdDate = match$5[0];
  var getMonthFromFloat = function (value) {
    var valueInt = value | 0;
    return Core__Option.getOr(DateTimeUtils.months[valueInt], /* Jan */ 0);
  };
  var startMonth;
  if (month !== undefined) {
    startMonth = DateTimeUtils.months.indexOf(month) | 0;
  } else {
    var tMonth = new Date().getMonth() | 0;
    startMonth = disableFutureDates$1 && count$1 > 1 ? tMonth - 1.0 : tMonth;
  }
  var match$6 = React.useState(function () {
    return new Date(startYear, startMonth);
  });
  var currDateIm = match$6[0];
  var dummyRow = Core__Array.make(count$1, 1);
  return React.createElement(
    "div",
    {
      className:
        "flex flex-1 flex-row justify-center overflow-auto select-none " +
        calendarContaierStyle$1 +
        "",
    },
    dummyRow.map(function (_item, i) {
      var currDateTemp = new Date(currDateIm.valueOf());
      var tempDate = currDateTemp.setMonth(
        ((currDateTemp.getMonth() | 0) + i) | 0,
      );
      var tempMonth = disableFutureDates$1
        ? new Date(
            DayJs.getDayJsForJsDate(new Date(tempDate)).toString(),
          ).getMonth()
        : new Date(tempDate).getMonth();
      var tempYear = new Date(tempDate).getFullYear();
      var inputFromDate_onBlur = function (param) {
        Curry._1(setFromDateOnFocus, function (param) {
          return false;
        });
      };
      var inputFromDate_onChange = function (ev) {
        var value = ev.target.value;
        Curry._1(setFromDate, function (param) {
          return value;
        });
      };
      var inputFromDate_onFocus = function (param) {
        Curry._1(setFromDateOnFocus, function (param) {
          return true;
        });
      };
      var inputFromDate = {
        name: "fromDate",
        onBlur: inputFromDate_onBlur,
        onChange: inputFromDate_onChange,
        onFocus: inputFromDate_onFocus,
        value: fromDate,
        checked: true,
      };
      var inputtoDate_onBlur = function (param) {
        Curry._1(setToDateOnFocus, function (param) {
          return false;
        });
      };
      var inputtoDate_onChange = function (ev) {
        var value = ev.target.value;
        Curry._1(setToDate, function (param) {
          return value;
        });
      };
      var inputtoDate_onFocus = function (param) {
        Curry._1(setToDateOnFocus, function (param) {
          return true;
        });
      };
      var inputtoDate = {
        name: "toDate",
        onBlur: inputtoDate_onBlur,
        onChange: inputtoDate_onChange,
        onFocus: inputtoDate_onFocus,
        value: toDate,
        checked: true,
      };
      var topPadding = showTime$1 ? "" : "pt-6";
      return React.createElement(
        "div",
        {
          key: i.toString(),
        },
        React.createElement(
          "div",
          {
            className:
              "flex flex-row justify-between items-center px-6 pb-5 " +
              topPadding +
              "",
          },
          React.createElement(TextInput.make, {
            input: inputFromDate,
            placeholder: "From",
            customDashboardClass: "h-11 text-base font-normal shadow-jp-2-xs",
            customStyle: "!text-[#344054] font-inter-style",
          }),
          React.createElement(
            "div",
            {
              className:
                "font-normal text-base text-jp-gray-800 dark:text-jp-gray-text_darktheme dark:text-opacity-75 px-4",
            },
            "-",
          ),
          React.createElement(TextInput.make, {
            input: inputtoDate,
            placeholder: "To",
            customDashboardClass: "h-11 text-base font-normal shadow-jp-2-xs",
            customStyle: "!text-[#344054] font-inter-style",
          }),
        ),
        JsxPPXReactSupport.createElementWithKey(
          i.toString(),
          NewCalendar.make,
          {
            changeHighlightCellStyle: changeHighlightCellStyle$1,
            month: getMonthFromFloat(tempMonth),
            year: tempYear | 0,
            onDateClick: onDateClick,
            hoverdDate: hoverdDate,
            setHoverdDate: setHoverdDate,
            showTitle: false,
            cellHighlighter: cellHighlighter,
            cellRenderer: cellRenderer,
            startDate: startDate$1,
            endDate: endDate$1,
            disablePastDates: disablePastDates$1,
            disableFutureDates: disableFutureDates$1,
            dateRangeLimit: dateRangeLimit,
            setShowMsg: setShowMsg,
            customDisabledFutureDays: customDisabledFutureDays$1,
            setIsDateClicked: setIsDateClicked,
          },
        ),
      );
    }),
  );
}

var make = NewCalendarList;

export { make };
/* DayJs Not a pure module */
