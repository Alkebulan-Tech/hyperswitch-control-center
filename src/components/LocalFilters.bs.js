// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../genericUtils/Form.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as SelectBox from "./SelectBox.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as EntityType from "../entities/EntityType.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "./form/FormRenderer.bs.js";
import * as ReactFinalForm from "../libraries/ReactFinalForm.bs.js";
import * as JsonFlattenUtils from "../utils/JsonFlattenUtils.bs.js";
import * as ReactFinalForm$1 from "react-final-form";
import * as RemoteFiltersUtils from "./RemoteFiltersUtils.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as CustomInputSelectBox from "./CustomInputSelectBox.bs.js";

function LocalFilters$CheckLocalFilters(props) {
  var applyFilters = props.applyFilters;
  var addFilters = props.addFilters;
  var removeFilters = props.removeFilters;
  var checkedFilters = props.checkedFilters;
  var options = props.options;
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var formState = ReactFinalForm$1.useFormState(
    ReactFinalForm.useFormSubscription(["values"]),
  );
  var values = formState.values;
  React.useEffect(
    function () {
      if (formState.dirty) {
        var valuesDict = Core__JSON.Decode.object(formState.values);
        if (valuesDict !== undefined) {
          Curry._1(applyFilters, Caml_option.valFromOption(valuesDict));
        }
      }
    },
    [values],
  );
  var onChangeSelect = function (ev) {
    var newlyAdded = ev.filter(function (newVal) {
      return !checkedFilters.includes(newVal);
    });
    if (newlyAdded.length > 0) {
      return Curry._1(addFilters, newlyAdded);
    } else {
      return Curry._2(removeFilters, ev, values);
    }
  };
  var fieldWrapperClass = isMobileView ? "" : "px-1 flex flex-col";
  var selectOptions = options.map(function (obj) {
    return obj.urlKey;
  });
  return React.createElement(
    "div",
    {
      className: "flex flex-row flex-wrap ",
    },
    React.createElement(FormRenderer.FieldsRenderer.make, {
      fields: props.selectedFiltersList,
      fieldWrapperClass: fieldWrapperClass,
      labelClass: "",
      labelPadding: "",
    }),
    React.createElement(
      "div",
      {
        className:
          "md:justify-between flex flex-row items-center flex-wrap " +
          props.addFilterStyle +
          "",
      },
      options.length > 0
        ? React.createElement(
            "div",
            {
              className: "flex",
            },
            React.createElement(CustomInputSelectBox.make, {
              onChange: onChangeSelect,
              value: checkedFilters.map(function (prim) {
                return prim;
              }),
              buttonText: "Add Filters",
              options: SelectBox.makeOptions(selectOptions),
              allowMultiSelect: true,
              isDropDown: true,
              hideMultiSelectButtons: true,
              buttonType: /* FilterAdd */ 7,
              searchable: props.showSelectFiltersSearch,
            }),
          )
        : null,
    ),
  );
}

var CheckLocalFilters = {
  make: LocalFilters$CheckLocalFilters,
};

function LocalFilters(props) {
  var disableURIdecode = props.disableURIdecode;
  var showSelectFiltersSearch = props.showSelectFiltersSearch;
  var customLocalFilterStyle = props.customLocalFilterStyle;
  var addFilterStyle = props.addFilterStyle;
  var tableName = props.tableName;
  var localSearchFilters = props.localSearchFilters;
  var setLocalSearchFilters = props.setLocalSearchFilters;
  var ignoreUrlUpdate = props.ignoreUrlUpdate;
  var path = props.path;
  var mandatoryRemoteKeys = props.mandatoryRemoteKeys;
  var localOptions = props.localOptions;
  var localFilters = props.localFilters;
  var setOffset = props.setOffset;
  var mandatoryRemoteKeys$1 =
    mandatoryRemoteKeys !== undefined ? mandatoryRemoteKeys : [];
  var path$1 = path !== undefined ? path : "";
  var ignoreUrlUpdate$1 =
    ignoreUrlUpdate !== undefined ? ignoreUrlUpdate : false;
  var localSearchFilters$1 =
    localSearchFilters !== undefined ? localSearchFilters : "";
  var addFilterStyle$1 = addFilterStyle !== undefined ? addFilterStyle : "";
  var customLocalFilterStyle$1 =
    customLocalFilterStyle !== undefined ? customLocalFilterStyle : "";
  var showSelectFiltersSearch$1 =
    showSelectFiltersSearch !== undefined ? showSelectFiltersSearch : false;
  var disableURIdecode$1 =
    disableURIdecode !== undefined ? disableURIdecode : false;
  var defaultFilters = props.entity.defaultFilters;
  var match = React.useState(function () {
    return localFilters.map(function (item) {
      return item.field;
    });
  });
  var setSelectedFiltersList = match[1];
  var selectedFiltersList = match[0];
  var match$1 = React.useState(function () {
    return [];
  });
  var setCheckedFilters = match$1[1];
  var checkedFilters = match$1[0];
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var searchParams = disableURIdecode$1 ? url.search : decodeURI(url.search);
  var match$2 = React.useState(function () {
    return {};
  });
  var setInitialValueJson = match$2[1];
  var initialValueJson = match$2[0];
  var remoteFiltersJson = RemoteFiltersUtils.getInitialValuesFromUrl(
    searchParams,
    props.remoteFilters,
    props.remoteOptions,
    mandatoryRemoteKeys$1,
    undefined,
  );
  var remoteFilterDict = JsonFlattenUtils.flattenObject(
    remoteFiltersJson,
    false,
  );
  React.useEffect(
    function () {
      var searchValues = ignoreUrlUpdate$1
        ? localSearchFilters$1
        : searchParams;
      var initialValues = RemoteFiltersUtils.getInitialValuesFromUrl(
        searchValues,
        localFilters,
        localOptions,
        undefined,
        undefined,
      );
      var localCheckedFilters = checkedFilters.slice();
      var localSelectedFiltersList = selectedFiltersList.slice();
      Object.entries(
        Core__Option.getOr(Core__JSON.Decode.object(initialValues), {}),
      ).forEach(function (entry) {
        var key = entry[0];
        var includes = checkedFilters.includes(key);
        if (includes) {
          return;
        }
        var optionalOption = localOptions.find(function (option) {
          return option.urlKey === key;
        });
        if (optionalOption !== undefined) {
          localSelectedFiltersList.push(optionalOption.field);
          localCheckedFilters.push(key);
          return;
        }
      });
      Curry._1(setCheckedFilters, function (_prev) {
        return localCheckedFilters;
      });
      Curry._1(setSelectedFiltersList, function (_prev) {
        return localSelectedFiltersList;
      });
      Curry._1(setInitialValueJson, function (param) {
        return initialValues;
      });
    },
    [searchParams, localSearchFilters$1],
  );
  var applyFilters = function (valuesDict) {
    RemoteFiltersUtils.applyFilters(
      valuesDict,
      defaultFilters,
      setOffset,
      path$1,
      remoteFilterDict,
      localOptions,
      ignoreUrlUpdate$1,
      setLocalSearchFilters,
      tableName,
      undefined,
      undefined,
    );
  };
  var addFilters = function (newlyAdded) {
    var localCheckedFilters = checkedFilters.slice();
    var localSelectedFiltersList = selectedFiltersList.slice();
    newlyAdded.forEach(function (value) {
      var optionObjArry = localOptions.filter(function (option) {
        return option.urlKey === value;
      });
      var defaultEntityOptionType =
        EntityType.getDefaultEntityOptionType(undefined);
      var optionObj = Core__Option.getOr(
        optionObjArry[0],
        defaultEntityOptionType,
      );
      localSelectedFiltersList.push(optionObj.field);
      localCheckedFilters.push(value);
    });
    Curry._1(setCheckedFilters, function (_prev) {
      return localCheckedFilters;
    });
    Curry._1(setSelectedFiltersList, function (_prev) {
      return localSelectedFiltersList;
    });
  };
  var removeFilters = function (fieldNameArr, values) {
    var toBeRemoved = checkedFilters.filter(function (oldVal) {
      return !fieldNameArr.includes(oldVal);
    });
    var finalFieldList = selectedFiltersList.filter(function (val) {
      return Core__Option.getOr(
        Core__Option.map(val.inputNames[0], function (name) {
          return !toBeRemoved.includes(name);
        }),
        false,
      );
    });
    var filtersAfterRemoving = checkedFilters.filter(function (val) {
      return !toBeRemoved.includes(val);
    });
    var newInitialValues = Object.fromEntries(
      Object.entries(
        Core__Option.getOr(Core__JSON.Decode.object(initialValueJson), {}),
      ).filter(function (entry) {
        return !toBeRemoved.includes(entry[0]);
      }),
    );
    var dict = Core__JSON.Decode.object(values);
    if (dict !== undefined) {
      var dict$1 = Caml_option.valFromOption(dict);
      Object.entries(dict$1).forEach(function (entry) {
        var key = entry[0];
        if (toBeRemoved.includes(key)) {
          dict$1[key] = "";
        }
        applyFilters(dict$1);
      });
    }
    Curry._1(setInitialValueJson, function (param) {
      return newInitialValues;
    });
    Curry._1(setCheckedFilters, function (_prev) {
      return filtersAfterRemoving;
    });
    Curry._1(setSelectedFiltersList, function (_prev) {
      return finalFieldList;
    });
  };
  return React.createElement(
    "div",
    {
      className:
        "bg-transparent flex flex-row " + customLocalFilterStyle$1 + "",
    },
    React.createElement(
      "div",
      undefined,
      React.createElement(Form.make, {
        children: React.createElement(LocalFilters$CheckLocalFilters, {
          options: localOptions,
          checkedFilters: checkedFilters,
          removeFilters: removeFilters,
          addFilters: addFilters,
          applyFilters: applyFilters,
          selectedFiltersList: selectedFiltersList,
          addFilterStyle: addFilterStyle$1,
          showSelectFiltersSearch: showSelectFiltersSearch$1,
        }),
        initialValues: Caml_option.some(initialValueJson),
      }),
    ),
  );
}

var makeFieldInfo = FormRenderer.makeFieldInfo;

var make = LocalFilters;

export { makeFieldInfo, CheckLocalFilters, make };
/* Form Not a pure module */
