// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as React from "react";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as DesktopView from "./DesktopView.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";

function NoDataFound(props) {
  var customMessageCss = props.customMessageCss;
  var customBorderClass = props.customBorderClass;
  var customCssClass = props.customCssClass;
  var children = props.children;
  var renderType = props.renderType;
  var message = props.message;
  var title = props.title;
  var renderType$1 = renderType !== undefined ? renderType : /* InfoBox */ 0;
  var customCssClass$1 = customCssClass !== undefined ? customCssClass : "my-6";
  var customBorderClass$1 =
    customBorderClass !== undefined ? customBorderClass : "";
  var customMessageCss$1 =
    customMessageCss !== undefined ? customMessageCss : "";
  var prefix = LogicUtils.useUrlPrefix(undefined);
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var marginPaddingClass;
  switch (renderType$1) {
    case /* InfoBox */ 0:
      marginPaddingClass = "";
      break;
    case /* Painting */ 1:
      marginPaddingClass = "mt-16 p-16";
      break;
    case /* NotFound */ 2:
      marginPaddingClass = "mt-16 p-5 mb-12";
      break;
    case /* Locked */ 3:
    case /* LoadError */ 4:
      marginPaddingClass = "mt-32 p-16";
      break;
  }
  var marginPaddingClass$1 = isMobileView ? "" : marginPaddingClass;
  var containerClass =
    "flex flex-col " + marginPaddingClass$1 + " container mx-auto items-center";
  var msgCss = isMobileView
    ? "text-l text-center mt-4 " + customMessageCss$1 + ""
    : "px-3 text-2xl mt-32 " + customMessageCss$1 + "";
  var tmp;
  switch (renderType$1) {
    case /* InfoBox */ 0:
      tmp = React.createElement(
        "div",
        {
          className: "flex flex-row items-center",
        },
        React.createElement(Icon.make, {
          name: "no_data",
          size: 18,
          className:
            "opacity-50 hover:opacity-100 dark:brightness-50 dark:opacity-75 dark:invert",
        }),
        React.createElement(
          "div",
          {
            className: "px-3 text-fs-16",
          },
          message,
        ),
      );
      break;
    case /* Painting */ 1:
      tmp = React.createElement(
        "div",
        {
          className: containerClass,
        },
        React.createElement(
          "div",
          {
            className: " mb-8 mt-8 max-w-full h-auto",
          },
          React.createElement("img", {
            src: "/icons/Illustration.svg",
          }),
        ),
        React.createElement(
          "div",
          {
            className: "" + msgCss + "",
          },
          message,
        ),
        React.createElement(
          "div",
          undefined,
          children !== undefined ? Caml_option.valFromOption(children) : null,
        ),
      );
      break;
    case /* NotFound */ 2:
      tmp = React.createElement(
        "div",
        {
          className: containerClass,
        },
        React.createElement(
          "div",
          {
            className: "mb-8 mt-4 max-w-full h-auto",
          },
          React.createElement("img", {
            src: "" + prefix + "/notfound.svg",
          }),
        ),
        React.createElement(
          "div",
          {
            className: "px-3 text-base mt-2",
          },
          message,
        ),
      );
      break;
    case /* Locked */ 3:
      tmp = React.createElement(
        "div",
        {
          className: containerClass,
        },
        React.createElement(
          "div",
          {
            className: "mb-8 mt-8 max-w-full h-auto",
          },
          React.createElement("img", {
            src: "/icons/Locked.svg",
          }),
        ),
        React.createElement(
          "div",
          {
            className: "px-3 text-base",
          },
          message,
        ),
        React.createElement(
          "div",
          undefined,
          children !== undefined ? Caml_option.valFromOption(children) : null,
        ),
      );
      break;
    case /* LoadError */ 4:
      tmp = React.createElement(
        "div",
        {
          className: containerClass,
        },
        React.createElement(
          "div",
          {
            className: "mb-8 mt-8 max-w-full h-auto",
          },
          React.createElement("img", {
            src: "/icons/LoadError.svg",
          }),
        ),
        React.createElement(
          "div",
          {
            className: "px-3 text-base",
          },
          message,
        ),
        React.createElement(
          "div",
          undefined,
          children !== undefined ? Caml_option.valFromOption(children) : null,
        ),
      );
      break;
  }
  return React.createElement(AddDataAttributes.make, {
    attributes: [
      [
        "data-component",
        LogicUtils.stringReplaceAll(message, " ", "-").toLowerCase(),
      ],
    ],
    children: React.createElement(
      "div",
      {
        className: "" + customCssClass$1 + " rounded-md",
      },
      title !== undefined
        ? React.createElement(DesktopView.make, {
            children: React.createElement(
              "div",
              {
                className:
                  "font-bold text-fs-16 text-jp-gray-900 text-opacity-75 mb-4 mt-4 dark:text-white dark:text-opacity-75",
              },
              title,
            ),
          })
        : null,
      React.createElement(
        "div",
        {
          className:
            "border " +
            customBorderClass$1 +
            " bg-white p-3 pl-5 rounded font-semibold text-jp-gray-900 text-opacity-50 dark:bg-jp-gray-lightgray_background dark:text-jp-gray-text_darktheme dark:text-opacity-50 dark:border-jp-gray-no_data_border",
        },
        tmp,
      ),
    ),
  });
}

var make = NoDataFound;

export { make };
/* Icon Not a pure module */
