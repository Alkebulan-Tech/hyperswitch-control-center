// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as SelectBox from "./SelectBox.bs.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as TableUtils from "./TableUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as CheckBoxIcon from "./custom-icons/CheckBoxIcon.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as DataTableFilterOpenContext from "../context/DataTableFilterOpenContext.bs.js";

function Table$TableFilterRow(props) {
  var tableDataBorderClass = props.tableDataBorderClass;
  var evenVertivalLines = props.evenVertivalLines;
  var removeHorizontalLines = props.removeHorizontalLines;
  var removeVerticalLines = props.removeVerticalLines;
  var item = props.item;
  var colsLen = item.length;
  var borderColor =
    "border-jp-gray-light_table_border_color dark:border-jp-gray-960";
  return React.createElement(
    "tr",
    {
      className:
        "filterColumns group rounded-md h-10 bg-white dark:bg-jp-gray-lightgray_background hover:bg-jp-gray-table_hover dark:hover:bg-jp-gray-table_hover_dark transition duration-300 ease-in-out text-fs-13 text-jp-gray-900 text-opacity-75 dark:text-jp-gray-text_darktheme dark:text-opacity-75 " +
        props.customFilterRowStyle +
        "",
    },
    props.showCheckbox ? React.createElement("td", undefined) : null,
    item.map(function (obj, cellIndex) {
      var isLast = cellIndex === ((colsLen - 1) | 0);
      var borderTop = "border-t";
      var borderClass =
        removeHorizontalLines && removeVerticalLines
          ? ""
          : isLast
            ? "" + borderTop + " " + borderColor + ""
            : removeVerticalLines || (evenVertivalLines && cellIndex % 2 === 0)
              ? "" + borderTop + " " + borderColor + ""
              : "" + borderTop + " border-r " + borderColor + "";
      return React.createElement(
        "td",
        {
          key: cellIndex.toString(),
          className:
            "align-top " + borderClass + " " + tableDataBorderClass + "",
        },
        React.createElement(
          "div",
          {
            className: "box-border px-4 py-3",
          },
          React.createElement(TableUtils.TableFilterCell.make, {
            cell: obj,
          }),
        ),
      );
    }),
  );
}

var TableFilterRow = {
  make: Table$TableFilterRow,
};

function Table$TableRow(props) {
  var customCellColor = props.customCellColor;
  var alignCellContent = props.alignCellContent;
  var fixLastCol = props.fixLastCol;
  var lastColClass = props.lastColClass;
  var selectedRowColor = props.selectedRowColor;
  var ellipseClass = props.ellipseClass;
  var customMoneyStyle = props.customMoneyStyle;
  var isEllipsisTextRelative = props.isEllipsisTextRelative;
  var labelMargin = props.labelMargin;
  var isHighchartLegend = props.isHighchartLegend;
  var fixedWidthClass = props.fixedWidthClass;
  var rowCustomClass = props.rowCustomClass;
  var rowHeightClass = props.rowHeightClass;
  var clearFormatting = props.clearFormatting;
  var highlightText = props.highlightText;
  var onMouseLeave = props.onMouseLeave;
  var onMouseEnter = props.onMouseEnter;
  var expandedRow = props.expandedRow;
  var collapseTableRow = props.collapseTableRow;
  var tableDataBorderClass = props.tableDataBorderClass;
  var highlightEnabledFieldsArray = props.highlightEnabledFieldsArray;
  var evenVertivalLines = props.evenVertivalLines;
  var removeHorizontalLines = props.removeHorizontalLines;
  var removeVerticalLines = props.removeVerticalLines;
  var onRowClickPresent = props.onRowClickPresent;
  var onRowDoubleClick = props.onRowDoubleClick;
  var onRowClick = props.onRowClick;
  var rowIndex = props.rowIndex;
  var item = props.item;
  var title = props.title;
  var tableDataBorderClass$1 =
    tableDataBorderClass !== undefined ? tableDataBorderClass : "";
  var collapseTableRow$1 =
    collapseTableRow !== undefined ? collapseTableRow : false;
  var clearFormatting$1 =
    clearFormatting !== undefined ? clearFormatting : false;
  var rowHeightClass$1 = rowHeightClass !== undefined ? rowHeightClass : "";
  var rowCustomClass$1 = rowCustomClass !== undefined ? rowCustomClass : "";
  var isHighchartLegend$1 =
    isHighchartLegend !== undefined ? isHighchartLegend : false;
  var labelMargin$1 = labelMargin !== undefined ? labelMargin : "";
  var isEllipsisTextRelative$1 =
    isEllipsisTextRelative !== undefined ? isEllipsisTextRelative : true;
  var customMoneyStyle$1 =
    customMoneyStyle !== undefined ? customMoneyStyle : "";
  var ellipseClass$1 = ellipseClass !== undefined ? ellipseClass : "";
  var selectedRowColor$1 =
    selectedRowColor !== undefined
      ? selectedRowColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  var lastColClass$1 = lastColClass !== undefined ? lastColClass : "";
  var fixLastCol$1 = fixLastCol !== undefined ? fixLastCol : false;
  var alignCellContent$1 =
    alignCellContent !== undefined ? alignCellContent : "";
  var customCellColor$1 = customCellColor !== undefined ? customCellColor : "";
  var match = React.useState(function () {
    return false;
  });
  var setIsCurrentRowExpanded = match[1];
  var isCurrentRowExpanded = match[0];
  var match$1 = React.useState(function () {
    return null;
  });
  var setExpandedData = match$1[1];
  var actualIndex = (props.offset + rowIndex) | 0;
  var onClick = React.useCallback(
    function (_ev) {
      var isRangeSelected = window.getSelection().type === "Range";
      if (onRowClick !== undefined && !isRangeSelected) {
        return Curry._1(onRowClick, actualIndex);
      }
    },
    [onRowClick, actualIndex],
  );
  var onDoubleClick = React.useCallback(
    function (_ev) {
      if (onRowDoubleClick !== undefined) {
        return Curry._1(onRowDoubleClick, actualIndex);
      }
    },
    [onRowDoubleClick, actualIndex],
  );
  var onMouseEnter$1 = React.useCallback(
    function (_ev) {
      if (onMouseEnter !== undefined) {
        return Curry._1(onMouseEnter, actualIndex);
      }
    },
    [onMouseEnter, actualIndex],
  );
  var onMouseLeave$1 = React.useCallback(
    function (_ev) {
      if (onMouseLeave !== undefined) {
        return Curry._1(onMouseLeave, actualIndex);
      }
    },
    [onMouseLeave, actualIndex],
  );
  var colsLen = item.length;
  var cursorClass = onRowClickPresent ? "cursor-pointer" : "";
  var rowRef = React.useRef(null);
  var coloredRow = Core__Option.isSome(
    item.find(function (obj) {
      if (obj.TAG === /* CustomCell */ 10) {
        return obj._1 === "true";
      } else {
        return false;
      }
    }),
  );
  var bgColor = coloredRow
    ? selectedRowColor$1
    : "bg-white dark:bg-jp-gray-lightgray_background";
  var hoverClass = onRowClickPresent
    ? "hover:bg-jp-gray-table_hover dark:hover:bg-jp-gray-table_hover_dark"
    : "";
  var tableBodyText = isHighchartLegend$1
    ? "group rounded-md " +
      cursorClass +
      " text-fs-10 font-medium dark:text-jp-gray-dark_chart_legend_text jp-gray-light_chart_legend_text pb-4 whitespace-nowrap text-ellipsis overflow-x-hidden"
    : "group rounded-md " +
      cursorClass +
      " " +
      bgColor +
      " text-fs-13  " +
      rowCustomClass$1 +
      " text-jp-gray-900  dark:text-jp-gray-text_darktheme dark:text-opacity-75 " +
      hoverClass +
      " transition duration-300 ease-in-out";
  return React.createElement(
    React.Fragment,
    undefined,
    React.createElement(
      "tr",
      {
        ref: Caml_option.some(rowRef),
        className: tableBodyText,
        onClick: onClick,
        onDoubleClick: onDoubleClick,
        onMouseEnter: onMouseEnter$1,
        onMouseLeave: onMouseLeave$1,
      },
      item.map(function (obj, cellIndex) {
        var isLast = cellIndex === ((colsLen - 1) | 0);
        var showBorderTop;
        showBorderTop = obj.TAG === /* Text */ 1 ? obj._0 !== "-" : true;
        var paddingClass;
        paddingClass = obj.TAG === /* Link */ 8 ? "pt-2" : "py-3";
        var coloredRow;
        coloredRow =
          obj.TAG === /* CustomCell */ 10 ? obj._1 === "true" : false;
        var customColorCell = coloredRow ? customCellColor$1 : "";
        var highlightCell = highlightEnabledFieldsArray.includes(cellIndex);
        var highlightClass = highlightCell ? "hover:font-bold" : "";
        var borderColor =
          "border-jp-gray-light_table_border_color dark:border-jp-gray-960";
        var borderTop = showBorderTop ? "border-t" : "border-t-0";
        var borderClass =
          removeHorizontalLines && removeVerticalLines
            ? ""
            : isLast
              ? "" + borderTop + " " + borderColor + ""
              : removeVerticalLines ||
                  (evenVertivalLines && cellIndex % 2 === 0)
                ? "" + borderTop + " " + borderColor + ""
                : "" + borderTop + " border-r " + borderColor + "";
        var cursorI =
          cellIndex === 0 && collapseTableRow$1 ? "cursor-pointer" : "";
        var isLast$1 = cellIndex === ((colsLen - 1) | 0);
        var lastColProp =
          isLast$1 && fixLastCol$1
            ? "border-l h-full !py-0 flex flex-col justify-center"
            : "";
        var tableRowBorderClass = isHighchartLegend$1
          ? "align-top " +
            highlightClass +
            " " +
            tableDataBorderClass$1 +
            " " +
            cursorI +
            " " +
            rowHeightClass$1 +
            ""
          : isLast$1
            ? "align-top " +
              lastColClass$1 +
              " " +
              borderClass +
              " " +
              highlightClass +
              " " +
              tableDataBorderClass$1 +
              " " +
              cursorI +
              " " +
              rowHeightClass$1 +
              ""
            : "align-top " +
              borderClass +
              " " +
              highlightClass +
              " " +
              tableDataBorderClass$1 +
              " " +
              cursorI +
              " " +
              rowHeightClass$1 +
              "";
        var paddingClass$1 = "px-4 " + paddingClass + "";
        var tableRowPaddingClass = isHighchartLegend$1
          ? "box-border py-1 " + lastColProp + " " + alignCellContent$1 + ""
          : "box-border " +
            paddingClass$1 +
            " " +
            lastColProp +
            " " +
            alignCellContent$1 +
            "";
        var $$location =
          "" +
          title +
          "_tr" +
          ((rowIndex + 1) | 0).toString() +
          "_td" +
          ((cellIndex + 1) | 0).toString() +
          "";
        return JsxPPXReactSupport.createElementWithKey(
          cellIndex.toString(),
          AddDataAttributes.make,
          {
            attributes: [["data-table-location", $$location]],
            children: React.createElement(
              "td",
              {
                key: cellIndex.toString(),
                className:
                  "" + tableRowBorderClass + " " + customColorCell + "",
                style: {
                  width: fixedWidthClass,
                },
                onClick: function (param) {
                  if (collapseTableRow$1 && cellIndex === 0) {
                    Curry._1(setIsCurrentRowExpanded, function (prev) {
                      return !prev;
                    });
                    return Curry._1(setExpandedData, function (param) {
                      return Curry._1(expandedRow, undefined);
                    });
                  }
                },
              },
              React.createElement(
                "div",
                {
                  className: tableRowPaddingClass,
                },
                collapseTableRow$1
                  ? React.createElement(
                      "div",
                      {
                        className: "flex flex-row gap-4 items-center",
                      },
                      cellIndex === 0
                        ? React.createElement(Icon.make, {
                            name: isCurrentRowExpanded
                              ? "caret-down"
                              : "caret-right",
                            size: 14,
                          })
                        : null,
                      React.createElement(TableUtils.TableCell.make, {
                        cell: obj,
                        labelMargin: labelMargin$1,
                        customMoneyStyle: customMoneyStyle$1,
                        highlightText: highlightText,
                        clearFormatting: clearFormatting$1,
                        isEllipsisTextRelative: isEllipsisTextRelative$1,
                        ellipseClass: ellipseClass$1,
                      }),
                    )
                  : React.createElement(TableUtils.TableCell.make, {
                      cell: obj,
                      labelMargin: labelMargin$1,
                      customMoneyStyle: customMoneyStyle$1,
                      highlightText: highlightText,
                      clearFormatting: clearFormatting$1,
                      isEllipsisTextRelative: isEllipsisTextRelative$1,
                      ellipseClass: ellipseClass$1,
                    }),
              ),
            ),
          },
        );
      }),
    ),
    isCurrentRowExpanded
      ? React.createElement(
          "tr",
          {
            className: "dark:border-jp-gray-dark_disable_border_color",
          },
          React.createElement(
            "td",
            {
              className: "",
              colSpan: 12,
            },
            match$1[0],
          ),
        )
      : null,
  );
}

var TableRow = {
  make: Table$TableRow,
};

function Table$SortAction(props) {
  var setSortedObj = props.setSortedObj;
  var sortedObj = props.sortedObj;
  var item = props.item;
  if (!(item.showSort || Core__Option.isSome(props.filterRow))) {
    return null;
  }
  var order =
    sortedObj !== undefined && sortedObj.key === item.key
      ? sortedObj.order
      : /* NONE */ 2;
  var handleSortClick = function (_ev) {
    if (setSortedObj !== undefined) {
      return Curry._1(setSortedObj, function (param) {
        return {
          key: item.key,
          order: order === /* DEC */ 1 ? /* INC */ 0 : /* DEC */ 1,
        };
      });
    }
  };
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-table", "tableSort"]],
    children: React.createElement(
      "div",
      {
        className: "cursor-pointer text-gray-300 pl-4",
        onClick: handleSortClick,
      },
      React.createElement(TableUtils.SortIcons.make, {
        order: order,
        size: props.sortIconSize,
      }),
    ),
  });
}

var SortAction = {
  make: Table$SortAction,
};

function Table$TableHeadingCell(props) {
  var tableHeadingTextClass = props.tableHeadingTextClass;
  var customizeColumnNewTheme = props.customizeColumnNewTheme;
  var filterRow = props.filterRow;
  var headerCustomBgColor = props.headerCustomBgColor;
  var fixLastCol = props.fixLastCol;
  var lastHeadingClass = props.lastHeadingClass;
  var isFrozen = props.isFrozen;
  var setSelectAllCheckBox = props.setSelectAllCheckBox;
  var selectAllCheckBox = props.selectAllCheckBox;
  var filterDropdownClass = props.filterDropdownClass;
  var filterIcon = props.filterIcon;
  var setFilterObj = props.setFilterObj;
  var filterObj = props.filterObj;
  var isHighchartLegend = props.isHighchartLegend;
  var index = props.index;
  var item = props.item;
  var isFrozen$1 = isFrozen !== undefined ? isFrozen : false;
  var lastHeadingClass$1 =
    lastHeadingClass !== undefined ? lastHeadingClass : "";
  var fixLastCol$1 = fixLastCol !== undefined ? fixLastCol : false;
  var tableHeadingTextClass$1 =
    tableHeadingTextClass !== undefined ? tableHeadingTextClass : "";
  var isFirstCol = index === 0;
  var isLastCol = index === ((props.headingArray.length - 1) | 0);
  var setIsSelected = function (isAllSelected) {
    if (setSelectAllCheckBox !== undefined) {
      return Curry._1(setSelectAllCheckBox, function (param) {
        if (isAllSelected) {
          return /* ALL */ 0;
        }
      });
    }
  };
  var headerBgColor = Core__Option.isSome(headerCustomBgColor)
    ? Core__Option.getOr(headerCustomBgColor, "")
    : "bg-offset_white dark:bg-jp-gray-darkgray_background";
  var roundedClass = isFirstCol ? "rounded-tl" : isLastCol ? "rounded-tr" : "";
  var lastColProp =
    isLastCol && fixLastCol$1 ? "sticky right-0 !px-0 !py-0 z-20" : "";
  var borderlastCol =
    isLastCol && fixLastCol$1
      ? "border-l px-4 py-3 h-full justify-center !flex-col"
      : "";
  var tableHeaderClass;
  if (isHighchartLegend) {
    tableHeaderClass =
      "tableHeader " +
      lastColProp +
      " p-0 pb-2 justify-between items-center dark:text-jp-gray-dark_chart_legend_text jp-gray-light_chart_legend_text text-opacity-75 dark:text-opacity-75 whitespace-pre select-none " +
      (isLastCol ? lastHeadingClass$1 : "") +
      "";
  } else {
    var heightHeadingClass2 =
      props.frozenUpto === 0 ? "" : props.heightHeadingClass;
    tableHeaderClass =
      "tableHeader " +
      lastColProp +
      " " +
      Core__Option.getOr(item.customWidth, "") +
      " justify-between items-center text-jp-gray-900 text-opacity-75 dark:text-jp-gray-text_darktheme dark:text-opacity-75 whitespace-pre select-none " +
      headerBgColor +
      " px-4 py-3 " +
      roundedClass +
      " " +
      heightHeadingClass2 +
      " " +
      props.tableheadingClass +
      " " +
      (isLastCol ? lastHeadingClass$1 : "") +
      "";
  }
  var tableHeadingTextClass$2 = isHighchartLegend
    ? "text-fs-11 dark:text-blue-300 text-jp-gray-900 text-opacity-80 dark:text-opacity-100 font-medium not-italic whitespace-nowrap text-ellipsis overflow-x-hidden "
    : "font-bold text-fs-13 " + tableHeadingTextClass$1 + "";
  var isAllSelected = Core__Option.isSome(selectAllCheckBox);
  var isSelectedStateMinus = selectAllCheckBox === /* PARTIAL */ 1;
  var sortIconSize = isHighchartLegend ? 11 : 13;
  var tmp;
  if (customizeColumnNewTheme !== undefined) {
    tmp = React.createElement(
      "div",
      {
        className: "flex flex-row justify-center items-center",
      },
      customizeColumnNewTheme.customizeColumnUi,
    );
  } else {
    var headerElement = item.headerElement;
    var tmp$1;
    if (item.showFilter || item.showSort || Core__Option.isSome(filterRow)) {
      var tmp$2;
      if (item.showFilter) {
        var match;
        if (filterObj !== undefined) {
          var ele = filterObj[index];
          match = ele !== undefined ? [ele.options, ele.selected] : [[], []];
        } else {
          match = [[], []];
        }
        var options = match[0];
        if (options.length > 1) {
          var filterInput_onBlur = function (_ev) {};
          var filterInput_onChange = function (ev) {
            if (setFilterObj !== undefined) {
              return Curry._1(setFilterObj, function (prevFilterObj) {
                return prevFilterObj.map(function (obj) {
                  if (obj.key === index.toString()) {
                    return {
                      key: index.toString(),
                      options: obj.options,
                      selected: ev,
                    };
                  } else {
                    return obj;
                  }
                });
              });
            }
          };
          var filterInput_onFocus = function (_ev) {};
          var filterInput_value = match[1].map(function (prim) {
            return prim;
          });
          var filterInput = {
            name: "filterInput",
            onBlur: filterInput_onBlur,
            onChange: filterInput_onChange,
            onFocus: filterInput_onFocus,
            value: filterInput_value,
            checked: true,
          };
          var icon =
            filterIcon !== undefined
              ? Caml_option.valFromOption(filterIcon)
              : React.createElement(Icon.make, {
                  name: "filter",
                  size: 12,
                  className: "align-middle text-gray-400",
                });
          var dropdownClass =
            filterDropdownClass !== undefined ? filterDropdownClass : "";
          tmp$2 = React.createElement(
            "div",
            {
              className: "" + dropdownClass + "",
            },
            React.createElement(SelectBox.BaseDropdown.make, {
              buttonText: "",
              allowMultiSelect: true,
              input: filterInput,
              options: SelectBox.makeOptions(options),
              hideMultiSelectButtons: true,
              deselectDisable: false,
              baseComponent: Caml_option.some(icon),
              autoApply: false,
              maxHeight: props.filterDropdownMaxHeight,
            }),
          );
        } else {
          tmp$2 = null;
        }
      } else {
        tmp$2 = null;
      }
      tmp$1 = React.createElement(
        "div",
        {
          className: "flex flex-row self-end items-center",
        },
        React.createElement(Table$SortAction, {
          item: item,
          sortedObj: props.sortedObj,
          setSortedObj: props.setSortedObj,
          sortIconSize: sortIconSize,
          isLastCol: isLastCol && !isFrozen$1 && !isFirstCol,
          filterRow: filterRow,
        }),
        tmp$2,
      );
    } else {
      tmp$1 = null;
    }
    tmp = React.createElement(
      "div",
      {
        className:
          "flex flex-row " +
          borderlastCol +
          "  " +
          (props.headingCenter ? "justify-center" : "") +
          "",
      },
      React.createElement(
        "div",
        {
          className: "",
        },
        React.createElement(
          "div",
          {
            className: "flex flex-row",
          },
          React.createElement(UIUtils.RenderIf.make, {
            condition: Core__Option.getOr(item.showMultiSelectCheckBox, false),
            children: React.createElement(
              "div",
              {
                className: " mt-1 mr-2",
              },
              React.createElement(CheckBoxIcon.make, {
                isSelected: isAllSelected,
                setIsSelected: setIsSelected,
                isSelectedStateMinus: isSelectedStateMinus,
                checkboxDimension: "h-4 w-4",
              }),
            ),
          }),
          React.createElement(
            "div",
            {
              className: "flex justify-between items-center",
            },
            headerElement !== undefined
              ? Caml_option.valFromOption(headerElement)
              : React.createElement(
                  "div",
                  {
                    className: tableHeadingTextClass$2,
                  },
                  item.title,
                ),
            React.createElement(UIUtils.RenderIf.make, {
              condition: Core__Option.isSome(item.data),
              children: React.createElement(AddDataAttributes.make, {
                attributes: [
                  ["data-heading-value", Core__Option.getOr(item.data, "")],
                ],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "flex justify-start text-fs-10 font-medium text-gray-400 whitespace-pre text-ellipsis overflow-x-hidden",
                  },
                  " (" + Core__Option.getOr(item.data, "") + ")",
                ),
              }),
            }),
            tmp$1,
          ),
          React.createElement(UIUtils.RenderIf.make, {
            condition: Core__Option.getOr(item.isMandatory, false),
            children: React.createElement(
              "div",
              {
                className: "text-red-400 text-sm ml-1",
              },
              "*",
            ),
          }),
          React.createElement(UIUtils.RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(
              Core__Option.getOr(item.description, ""),
            ),
            children: React.createElement(
              "div",
              {
                className: "text-sm text-gray-500 mx-2",
              },
              React.createElement(ToolTip.make, {
                description: Core__Option.getOr(item.description, ""),
                toolTipPosition: /* Bottom */ 1,
              }),
            ),
          }),
        ),
      ),
    );
  }
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-table-heading", item.title]],
    children: React.createElement(
      "th",
      {
        key: index.toString(),
        className: tableHeaderClass,
        style: {
          width: props.fixedWidthClass,
        },
      },
      tmp,
    ),
  });
}

var TableHeadingCell = {
  make: Table$TableHeadingCell,
};

function Table$TableHeadingRow(props) {
  var tableHeadingTextClass = props.tableHeadingTextClass;
  var customizeColumnNewTheme = props.customizeColumnNewTheme;
  var columnFilterRow = props.columnFilterRow;
  var filterDropdownMaxHeight = props.filterDropdownMaxHeight;
  var headerCustomBgColor = props.headerCustomBgColor;
  var fixLastCol = props.fixLastCol;
  var lastHeadingClass = props.lastHeadingClass;
  var isFrozen = props.isFrozen;
  var setSelectAllCheckBox = props.setSelectAllCheckBox;
  var selectAllCheckBox = props.selectAllCheckBox;
  var filterDropdownClass = props.filterDropdownClass;
  var filterIcon = props.filterIcon;
  var headingCenter = props.headingCenter;
  var setFilterObj = props.setFilterObj;
  var fixedWidthClass = props.fixedWidthClass;
  var filterObj = props.filterObj;
  var setSortedObj = props.setSortedObj;
  var sortedObj = props.sortedObj;
  var tableheadingClass = props.tableheadingClass;
  var heightHeadingClass = props.heightHeadingClass;
  var frozenUpto = props.frozenUpto;
  var isHighchartLegend = props.isHighchartLegend;
  var headingArray = props.headingArray;
  var isFrozen$1 = isFrozen !== undefined ? isFrozen : false;
  var lastHeadingClass$1 =
    lastHeadingClass !== undefined ? lastHeadingClass : "";
  var fixLastCol$1 = fixLastCol !== undefined ? fixLastCol : false;
  var tableHeadingTextClass$1 =
    tableHeadingTextClass !== undefined ? tableHeadingTextClass : "";
  if (headingArray.length !== 0) {
    return React.createElement(
      "thead",
      undefined,
      React.createElement(
        "tr",
        undefined,
        headingArray.map(function (item, i) {
          var columnFilterRow$1 = Core__Option.getOr(columnFilterRow, []);
          var filterRow = columnFilterRow$1[i];
          return JsxPPXReactSupport.createElementWithKey(
            i.toString(),
            Table$TableHeadingCell,
            {
              item: item,
              index: i,
              headingArray: headingArray,
              isHighchartLegend: isHighchartLegend,
              frozenUpto: frozenUpto,
              heightHeadingClass: heightHeadingClass,
              tableheadingClass: tableheadingClass,
              sortedObj: sortedObj,
              setSortedObj: setSortedObj,
              filterObj: filterObj,
              fixedWidthClass: fixedWidthClass,
              setFilterObj: setFilterObj,
              headingCenter: headingCenter,
              filterIcon: filterIcon,
              filterDropdownClass: filterDropdownClass,
              filterDropdownMaxHeight: filterDropdownMaxHeight,
              selectAllCheckBox: selectAllCheckBox,
              setSelectAllCheckBox: setSelectAllCheckBox,
              isFrozen: isFrozen$1,
              lastHeadingClass: lastHeadingClass$1,
              fixLastCol: fixLastCol$1,
              headerCustomBgColor: headerCustomBgColor,
              filterRow: filterRow,
              customizeColumnNewTheme: customizeColumnNewTheme,
              tableHeadingTextClass: tableHeadingTextClass$1,
            },
          );
        }),
      ),
    );
  } else {
    return null;
  }
}

var TableHeadingRow = {
  make: Table$TableHeadingRow,
};

function Table(props) {
  var tableHeadingTextClass = props.tableHeadingTextClass;
  var showborderColor = props.showborderColor;
  var customCellColor = props.customCellColor;
  var customizeColumnNewTheme = props.customizeColumnNewTheme;
  var filterDropdownMaxHeight = props.filterDropdownMaxHeight;
  var minTableHeightClass = props.minTableHeightClass;
  var alignCellContent = props.alignCellContent;
  var headerCustomBgColor = props.headerCustomBgColor;
  var fixLastCol = props.fixLastCol;
  var lastColClass = props.lastColClass;
  var showCheckbox = props.showCheckbox;
  var lastHeadingClass = props.lastHeadingClass;
  var selectedRowColor = props.selectedRowColor;
  var ellipseClass = props.ellipseClass;
  var customMoneyStyle = props.customMoneyStyle;
  var isEllipsisTextRelative = props.isEllipsisTextRelative;
  var setSelectAllCheckBox = props.setSelectAllCheckBox;
  var selectAllCheckBox = props.selectAllCheckBox;
  var customFilterRowStyle = props.customFilterRowStyle;
  var labelMargin = props.labelMargin;
  var maxTableHeight = props.maxTableHeight;
  var showHeading = props.showHeading;
  var filterDropdownClass = props.filterDropdownClass;
  var filterIcon = props.filterIcon;
  var headingCenter = props.headingCenter;
  var isHighchartLegend = props.isHighchartLegend;
  var enableEqualWidthCol = props.enableEqualWidthCol;
  var rowCustomClass = props.rowCustomClass;
  var isMinHeightRequired = props.isMinHeightRequired;
  var rowHeightClass = props.rowHeightClass;
  var clearFormatting = props.clearFormatting;
  var frozenUpto = props.frozenUpto;
  var heightHeadingClass = props.heightHeadingClass;
  var highlightText = props.highlightText;
  var onMouseLeave = props.onMouseLeave;
  var onMouseEnter = props.onMouseEnter;
  var actualData = props.actualData;
  var getRowDetails = props.getRowDetails;
  var collapseTableRow = props.collapseTableRow;
  var tableDataBorderClass = props.tableDataBorderClass;
  var tableBorderClass = props.tableBorderClass;
  var tableheadingClass = props.tableheadingClass;
  var columnFilterRow = props.columnFilterRow;
  var filterObj = props.filterObj;
  var setFilterObj = props.setFilterObj;
  var sortedObj = props.sortedObj;
  var setSortedObj = props.setSortedObj;
  var showScrollBar = props.showScrollBar;
  var evenVertivalLines = props.evenVertivalLines;
  var removeHorizontalLines = props.removeHorizontalLines;
  var removeVerticalLines = props.removeVerticalLines;
  var fullWidth = props.fullWidth;
  var onRowClickPresent = props.onRowClickPresent;
  var onRowDoubleClick = props.onRowDoubleClick;
  var onRowClick = props.onRowClick;
  var offset = props.offset;
  var rows = props.rows;
  var heading = props.heading;
  var title = props.title;
  var title$1 = title !== undefined ? title : "Title";
  var heading$1 = heading !== undefined ? heading : [];
  var offset$1 = offset !== undefined ? offset : 0;
  var onRowClickPresent$1 =
    onRowClickPresent !== undefined ? onRowClickPresent : false;
  var fullWidth$1 = fullWidth !== undefined ? fullWidth : true;
  var removeVerticalLines$1 =
    removeVerticalLines !== undefined ? removeVerticalLines : true;
  var removeHorizontalLines$1 =
    removeHorizontalLines !== undefined ? removeHorizontalLines : false;
  var evenVertivalLines$1 =
    evenVertivalLines !== undefined ? evenVertivalLines : false;
  var showScrollBar$1 = showScrollBar !== undefined ? showScrollBar : false;
  var tableheadingClass$1 =
    tableheadingClass !== undefined ? tableheadingClass : "";
  var tableBorderClass$1 =
    tableBorderClass !== undefined ? tableBorderClass : "";
  var tableDataBorderClass$1 =
    tableDataBorderClass !== undefined ? tableDataBorderClass : "";
  var collapseTableRow$1 =
    collapseTableRow !== undefined ? collapseTableRow : false;
  var highlightText$1 = highlightText !== undefined ? highlightText : "";
  var heightHeadingClass$1 =
    heightHeadingClass !== undefined ? heightHeadingClass : "h-16";
  var frozenUpto$1 = frozenUpto !== undefined ? frozenUpto : 0;
  var clearFormatting$1 =
    clearFormatting !== undefined ? clearFormatting : false;
  var rowHeightClass$1 = rowHeightClass !== undefined ? rowHeightClass : "";
  var isMinHeightRequired$1 =
    isMinHeightRequired !== undefined ? isMinHeightRequired : false;
  var rowCustomClass$1 = rowCustomClass !== undefined ? rowCustomClass : "";
  var enableEqualWidthCol$1 =
    enableEqualWidthCol !== undefined ? enableEqualWidthCol : false;
  var isHighchartLegend$1 =
    isHighchartLegend !== undefined ? isHighchartLegend : false;
  var headingCenter$1 = headingCenter !== undefined ? headingCenter : false;
  var showHeading$1 = showHeading !== undefined ? showHeading : true;
  var maxTableHeight$1 = maxTableHeight !== undefined ? maxTableHeight : "";
  var labelMargin$1 = labelMargin !== undefined ? labelMargin : "";
  var customFilterRowStyle$1 =
    customFilterRowStyle !== undefined ? customFilterRowStyle : "";
  var isEllipsisTextRelative$1 =
    isEllipsisTextRelative !== undefined ? isEllipsisTextRelative : true;
  var customMoneyStyle$1 =
    customMoneyStyle !== undefined ? customMoneyStyle : "";
  var ellipseClass$1 = ellipseClass !== undefined ? ellipseClass : "";
  var lastHeadingClass$1 =
    lastHeadingClass !== undefined ? lastHeadingClass : "";
  var showCheckbox$1 = showCheckbox !== undefined ? showCheckbox : false;
  var lastColClass$1 = lastColClass !== undefined ? lastColClass : "";
  var fixLastCol$1 = fixLastCol !== undefined ? fixLastCol : false;
  var minTableHeightClass$1 =
    minTableHeightClass !== undefined ? minTableHeightClass : "";
  var showborderColor$1 =
    showborderColor !== undefined ? showborderColor : true;
  var tableHeadingTextClass$1 =
    tableHeadingTextClass !== undefined ? tableHeadingTextClass : "";
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var numberOfCols = heading$1.length;
  var totalTableWidth = Core__Option.mapOr(
    Caml_option.nullable_to_opt(document.getElementById("table")),
    0,
    function (ele) {
      return ele.offsetWidth;
    },
  );
  var equalColWidth = Caml_int32.div(totalTableWidth, numberOfCols).toString();
  var fixedWidthClass = enableEqualWidthCol$1 ? "" + equalColWidth + "px" : "";
  var widthClass = fullWidth$1 ? "min-w-full" : "";
  var scrollBarClass = showScrollBar$1 ? "show-scrollbar" : "";
  var filterPresent = Core__Option.isSome(
    heading$1.find(function (head) {
      return head.showFilter;
    }),
  );
  var highlightEnabledFieldsArray = Core__Array.reduceWithIndex(
    heading$1,
    [],
    function (acc, item, index) {
      if (item.highlightCellOnHover) {
        acc.push(index);
      }
      return acc;
    },
  );
  var tableRows = function (rowArr, isCustomiseColumn) {
    return rowArr.map(function (item, rowIndex) {
      return JsxPPXReactSupport.createElementWithKey(
        ((offset$1 + rowIndex) | 0).toString(),
        Table$TableRow,
        {
          title: title$1,
          item: item,
          rowIndex: rowIndex,
          onRowClick: onRowClick,
          onRowDoubleClick: onRowDoubleClick,
          onRowClickPresent: onRowClickPresent$1,
          offset: offset$1,
          removeVerticalLines: removeVerticalLines$1,
          removeHorizontalLines: removeHorizontalLines$1,
          evenVertivalLines: evenVertivalLines$1,
          highlightEnabledFieldsArray: highlightEnabledFieldsArray,
          tableDataBorderClass: tableDataBorderClass$1,
          collapseTableRow: collapseTableRow$1,
          expandedRow: function (param) {
            var rowIndex$1 = (offset$1 + rowIndex) | 0;
            if (actualData !== undefined && getRowDetails !== undefined) {
              return Curry._1(
                getRowDetails,
                Core__Option.getOr(actualData[rowIndex$1], null),
              );
            } else {
              return null;
            }
          },
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave,
          highlightText: highlightText$1,
          clearFormatting: clearFormatting$1,
          rowHeightClass: rowHeightClass$1,
          rowCustomClass:
            "" +
            rowCustomClass$1 +
            " " +
            (isCustomiseColumn ? "opacity-0" : "") +
            "",
          fixedWidthClass: fixedWidthClass,
          isHighchartLegend: isHighchartLegend$1,
          labelMargin: labelMargin$1,
          isEllipsisTextRelative: isEllipsisTextRelative$1,
          customMoneyStyle: customMoneyStyle$1,
          ellipseClass: ellipseClass$1,
          selectedRowColor: selectedRowColor,
          lastColClass: lastColClass$1,
          fixLastCol: fixLastCol$1,
          alignCellContent: alignCellContent,
          customCellColor: customCellColor,
        },
      );
    });
  };
  var renderTableHeadingRow = function (
    headingArray,
    isFrozen,
    isCustomiseColumn,
    lastHeadingClass,
  ) {
    var columnFilterRow$1 =
      columnFilterRow !== undefined
        ? isFrozen
          ? columnFilterRow.slice(0, frozenUpto$1)
          : columnFilterRow.slice(frozenUpto$1)
        : undefined;
    var tableheadingClass$2 = Core__Option.isSome(customizeColumnNewTheme)
      ? "" + tableheadingClass$1 + " " + heightHeadingClass$1 + ""
      : tableheadingClass$1;
    var customizeColumnNewTheme$1 = isCustomiseColumn
      ? customizeColumnNewTheme
      : undefined;
    return React.createElement(Table$TableHeadingRow, {
      headingArray: headingArray,
      isHighchartLegend: isHighchartLegend$1,
      frozenUpto: frozenUpto$1,
      heightHeadingClass: heightHeadingClass$1,
      tableheadingClass: tableheadingClass$2,
      sortedObj: sortedObj,
      setSortedObj: setSortedObj,
      filterObj: filterObj,
      fixedWidthClass: fixedWidthClass,
      setFilterObj: setFilterObj,
      headingCenter: headingCenter$1,
      filterIcon: filterIcon,
      filterDropdownClass: filterDropdownClass,
      selectAllCheckBox: selectAllCheckBox,
      setSelectAllCheckBox: setSelectAllCheckBox,
      isFrozen: isFrozen,
      lastHeadingClass: lastHeadingClass,
      fixLastCol: fixLastCol$1,
      headerCustomBgColor: headerCustomBgColor,
      filterDropdownMaxHeight: filterDropdownMaxHeight,
      columnFilterRow: columnFilterRow$1,
      customizeColumnNewTheme: customizeColumnNewTheme$1,
      tableHeadingTextClass: tableHeadingTextClass$1,
    });
  };
  var tableFilterRow = function (isFrozen) {
    if (columnFilterRow === undefined) {
      return null;
    }
    var filterRows = isFrozen
      ? columnFilterRow.slice(0, frozenUpto$1)
      : columnFilterRow.slice(frozenUpto$1);
    return React.createElement(Table$TableFilterRow, {
      item: filterRows,
      removeVerticalLines: removeVerticalLines$1,
      removeHorizontalLines: removeHorizontalLines$1,
      evenVertivalLines: evenVertivalLines$1,
      tableDataBorderClass: tableDataBorderClass$1,
      customFilterRowStyle: customFilterRowStyle$1,
      showCheckbox: showCheckbox$1,
    });
  };
  var frozenHeading = heading$1.slice(0, frozenUpto$1);
  var frozenCustomiseColumnHeading = [
    TableUtils.makeHeaderInfo(
      "",
      "Customize Column",
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      true,
      undefined,
      undefined,
      undefined,
    ),
  ];
  var frozenRow = rows.map(function (row) {
    return row.slice(0, frozenUpto$1);
  });
  var remainingHeading = heading$1.slice(frozenUpto$1);
  var remaingRow = rows.map(function (row) {
    return row.slice(frozenUpto$1);
  });
  var frozenTableWidthClass = isMobileView ? "w-48" : "w-auto";
  var boderColor = showborderColor$1
    ? "border border-jp-gray-940 border-opacity-50 dark:border-jp-gray-960"
    : "";
  var frozenTable = React.createElement(
    "table",
    {
      className:
        "table-auto " +
        frozenTableWidthClass +
        " border border-jp-gray-940 border-opacity-100 dark:border-jp-gray-960 rounded-lg " +
        tableBorderClass$1 +
        " sticky left-0 z-10",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: showHeading$1,
      children: renderTableHeadingRow(
        frozenHeading,
        true,
        false,
        lastHeadingClass$1,
      ),
    }),
    React.createElement(
      "tbody",
      undefined,
      tableFilterRow(true),
      tableRows(frozenRow, false),
    ),
  );
  var totalLength = rows.length;
  var customizeColumn = React.createElement(
    "table",
    {
      className: "table-auto rounded-lg sticky right-0 !px-0 !py-0 z-10",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: showHeading$1,
      children: renderTableHeadingRow(
        frozenCustomiseColumnHeading,
        true,
        true,
        "" + lastHeadingClass$1 + " rounded-tl-none rounded-tr-lg",
      ),
    }),
    React.createElement(
      "tbody",
      undefined,
      tableRows(
        Core__Array.fromInitializer(totalLength, function (i) {
          return (i + 1) | 0;
        }).map(function (param) {
          return [
            {
              TAG: /* Text */ 1,
              _0: "",
            },
          ];
        }),
        true,
      ),
    ),
  );
  var tableBorderClass$2 = isHighchartLegend$1
    ? "table-auto " + widthClass + ""
    : "table-auto " +
      widthClass +
      " " +
      tableBorderClass$1 +
      " " +
      boderColor +
      " rounded-lg";
  var match = React.useContext(DataTableFilterOpenContext.filterOpenContext);
  var nonFrozenTable = React.createElement(
    "table",
    {
      className: tableBorderClass$2,
      id: "table",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: showHeading$1,
      children: renderTableHeadingRow(
        remainingHeading,
        false,
        false,
        "" + lastHeadingClass$1 + "",
      ),
    }),
    React.createElement(
      "tbody",
      undefined,
      tableFilterRow(false),
      tableRows(remaingRow, false),
    ),
  );
  var parentMinWidthClass = frozenUpto$1 > 0 ? "min-w-max" : "";
  var childMinWidthClass = frozenUpto$1 > 0 ? "" : "min-w-full";
  var overflowClass =
    Core__Array.reduce(Object.values(match[0]), false, function (acc, item) {
      if (item) {
        return true;
      } else {
        return acc;
      }
    }) || isMinHeightRequired$1
      ? ""
      : "overflow-scroll";
  var parentBorderRadius = isHighchartLegend$1 ? "" : "rounded-t-lg";
  var parentBorderClass = isHighchartLegend$1
    ? ""
    : "border border-jp-2-light-gray-300";
  return React.createElement(
    "div",
    {
      className:
        "flex flex-row items-stretch " +
        scrollBarClass +
        " loadedTable " +
        parentMinWidthClass +
        " " +
        Core__Option.getOr(
          props.customBorderClass,
          parentBorderClass + " " + parentBorderRadius,
        ) +
        "",
      style: {
        maxHeight: maxTableHeight$1,
        minHeight: LogicUtils.isNonEmptyString(minTableHeightClass$1)
          ? minTableHeightClass$1
          : filterPresent || isMinHeightRequired$1
            ? "25rem"
            : "",
      },
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: frozenUpto$1 > 0,
      children: frozenTable,
    }),
    React.createElement(
      "div",
      {
        className:
          "flex-1 " +
          overflowClass +
          " no-scrollbar " +
          childMinWidthClass +
          "",
      },
      nonFrozenTable,
    ),
    customizeColumnNewTheme !== undefined
      ? React.createElement(UIUtils.RenderIf.make, {
          condition: customizeColumnNewTheme.customizeColumnUi !== null,
          children: customizeColumn,
        })
      : null,
  );
}

var regex = TableUtils.regex;

var highlightedText = TableUtils.highlightedText;

var getSortOrderString = TableUtils.getSortOrderString;

var makeHeaderInfo = TableUtils.makeHeaderInfo;

var getCell = TableUtils.getCell;

var ProgressCell = TableUtils.ProgressCell;

var getTextAlignmentClass = TableUtils.getTextAlignmentClass;

var BaseComponentMethod = TableUtils.BaseComponentMethod;

var LabelCell = TableUtils.LabelCell;

var NewLabelCell = TableUtils.NewLabelCell;

var ColoredTextCell = TableUtils.ColoredTextCell;

var Numeric = TableUtils.Numeric;

var MoneyCell = TableUtils.MoneyCell;

var LinkCell = TableUtils.LinkCell;

var DateCell = TableUtils.DateCell;

var StartEndDateCell = TableUtils.StartEndDateCell;

var EllipsisText = TableUtils.EllipsisText;

var TrimmedText = TableUtils.TrimmedText;

var TableFilterCell = TableUtils.TableFilterCell;

var DeltaColumn = TableUtils.DeltaColumn;

var TableCell = TableUtils.TableCell;

var NewTableCell = TableUtils.NewTableCell;

var getTableCellValue = TableUtils.getTableCellValue;

var SortIcons = TableUtils.SortIcons;

var HeaderActions = TableUtils.HeaderActions;

var make = Table;

export {
  regex,
  highlightedText,
  getSortOrderString,
  makeHeaderInfo,
  getCell,
  ProgressCell,
  getTextAlignmentClass,
  BaseComponentMethod,
  LabelCell,
  NewLabelCell,
  ColoredTextCell,
  Numeric,
  MoneyCell,
  LinkCell,
  DateCell,
  StartEndDateCell,
  EllipsisText,
  TrimmedText,
  TableFilterCell,
  DeltaColumn,
  TableCell,
  NewTableCell,
  getTableCellValue,
  SortIcons,
  HeaderActions,
  TableFilterRow,
  TableRow,
  SortAction,
  TableHeadingCell,
  TableHeadingRow,
  make,
};
/* Icon Not a pure module */
