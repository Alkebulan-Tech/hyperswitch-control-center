// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Lottie from "../libraries/Lottie.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as PopUpState from "../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LottieFiles from "./custom-icons/LottieFiles.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as ReactSuspenseWrapper from "../context/ReactSuspenseWrapper.bs.js";

function SearchInput(props) {
  var showSearchIcon = props.showSearchIcon;
  var onKeyDown = props.onKeyDown;
  var iconName = props.iconName;
  var bgColor = props.bgColor;
  var placeholderCss = props.placeholderCss;
  var shouldSubmitForm = props.shouldSubmitForm;
  var heightClass = props.heightClass;
  var widthClass = props.widthClass;
  var roundedBorder = props.roundedBorder;
  var placeholder = props.placeholder;
  var autoFocus = props.autoFocus;
  var inputText = props.inputText;
  var onChange = props.onChange;
  var autoFocus$1 = autoFocus !== undefined ? autoFocus : true;
  var placeholder$1 = placeholder !== undefined ? placeholder : "";
  var roundedBorder$1 = roundedBorder !== undefined ? roundedBorder : true;
  var widthClass$1 = widthClass !== undefined ? widthClass : "w-full";
  var heightClass$1 = heightClass !== undefined ? heightClass : "h-10";
  var shouldSubmitForm$1 =
    shouldSubmitForm !== undefined ? shouldSubmitForm : true;
  var placeholderCss$1 =
    placeholderCss !== undefined ? placeholderCss : "bg-transparent";
  var bgColor$1 =
    bgColor !== undefined
      ? bgColor
      : "bg-white border-jp-gray-600 border-opacity-75 focus-within:border-blue-500";
  var iconName$1 = iconName !== undefined ? iconName : "new_search_icon";
  var onKeyDown$1 = onKeyDown !== undefined ? onKeyDown : function (param) {};
  var showSearchIcon$1 = showSearchIcon !== undefined ? showSearchIcon : true;
  var match = React.useState(function () {
    return "";
  });
  var setPrevVal = match[1];
  var prevVal = match[0];
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var defaultRef = React.useRef(null);
  var searchRef = Core__Option.getOr(props.searchRef, defaultRef);
  var handleSearch = function (e) {
    Curry._1(setPrevVal, function (param) {
      return inputText;
    });
    var value = e.target.value;
    if (value.includes("<script>") || value.includes("</script>")) {
      Curry._1(showPopUp, {
        heading: "Script Tags are not allowed",
        description: "Input cannot contain <script>, </script> tags",
        popUpType: [/* Warning */ 4, /* WithIcon */ 0],
        handleConfirm: {
          text: "OK",
        },
      });
    }
    Curry._1(onChange, value.replace("<script>", "").replace("</script>", ""));
  };
  var clearSearch = function (e) {
    e.stopPropagation();
    Curry._1(onChange, "");
  };
  var form = shouldSubmitForm$1 ? undefined : "fakeForm";
  var borderClass = roundedBorder$1
    ? "border rounded-md pl-1 pr-2"
    : "border-b-2 focus-within:border-b";
  var exitCross = LottieFiles.useLottieJson(LottieFiles.exitSearchCross);
  var enterCross = LottieFiles.useLottieJson(LottieFiles.enterSearchCross);
  return React.createElement(
    "div",
    {
      className:
        "" +
        widthClass$1 +
        " " +
        borderClass +
        " " +
        heightClass$1 +
        " " +
        bgColor$1 +
        " flex flex-row items-center justify-between\n    dark:bg-jp-gray-lightgray_background\n    dark:focus-within:border-blue-500 hover:border-opacity-100 \n    dark:border-jp-gray-850 dark:border-opacity-50 dark:hover:border-opacity-100",
    },
    React.createElement(UIUtils.RenderIf.make, {
      condition: showSearchIcon$1,
      children: React.createElement(Icon.make, {
        name: iconName$1,
        size: 16,
        className: "align-begin 16",
      }),
    }),
    React.createElement("input", {
      ref: Caml_option.some(searchRef),
      className:
        "rounded-md w-full pl-2 focus:outline-none " + placeholderCss$1 + "",
      autoFocus: autoFocus$1,
      form: form,
      placeholder: placeholder$1,
      type: "text",
      value: inputText,
      onKeyDown: onKeyDown$1,
      onChange: handleSearch,
    }),
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-icon", "searchExit"]],
      children: React.createElement(
        "div",
        {
          className: "h-6 my-auto w-6",
          onClick: clearSearch,
        },
        React.createElement(ReactSuspenseWrapper.make, {
          children: React.createElement(Lottie.make, {
            animationData:
              (LogicUtils.isNonEmptyString(prevVal) &&
                LogicUtils.isEmptyString(inputText)) ||
              (LogicUtils.isEmptyString(prevVal) &&
                LogicUtils.isEmptyString(inputText))
                ? exitCross
                : enterCross,
            autoplay: true,
            loop: false,
          }),
          loadingText: "",
        }),
      ),
    }),
  );
}

var make = SearchInput;

export { make };
/* Icon Not a pure module */
