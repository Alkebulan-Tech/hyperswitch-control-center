// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../utils/Modal.bs.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as SelectBox from "./SelectBox.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function SelectModal(props) {
  var headerTextClass = props.headerTextClass;
  var showConversionRate = props.showConversionRate;
  var showSerialNumber = props.showSerialNumber;
  var sortingBasedOnDisabled = props.sortingBasedOnDisabled;
  var enableSelect = props.enableSelect;
  var maxSelection = props.maxSelection;
  var showSelectAll = props.showSelectAll;
  var showDeSelectAll = props.showDeSelectAll;
  var disableSelect = props.disableSelect;
  var title = props.title;
  var closeOnOutsideClick = props.closeOnOutsideClick;
  var revealFrom = props.revealFrom;
  var options = props.options;
  var initialValues = props.initialValues;
  var onSubmit = props.onSubmit;
  var isModalView = props.isModalView;
  var showModal = props.showModal;
  var modalHeadingDescription = props.modalHeadingDescription;
  var modalHeading = props.modalHeading;
  var modalHeading$1 =
    modalHeading !== undefined ? modalHeading : "Select Options";
  var modalHeadingDescription$1 =
    modalHeadingDescription !== undefined ? modalHeadingDescription : "";
  var isModalView$1 = isModalView !== undefined ? isModalView : true;
  var revealFrom$1 = revealFrom !== undefined ? revealFrom : /* Right */ 1;
  var closeOnOutsideClick$1 =
    closeOnOutsideClick !== undefined ? closeOnOutsideClick : true;
  var title$1 = title !== undefined ? title : "Columns";
  var disableSelect$1 = disableSelect !== undefined ? disableSelect : false;
  var showDeSelectAll$1 =
    showDeSelectAll !== undefined ? showDeSelectAll : false;
  var showSelectAll$1 = showSelectAll !== undefined ? showSelectAll : true;
  var maxSelection$1 = maxSelection !== undefined ? maxSelection : -1;
  var enableSelect$1 = enableSelect !== undefined ? enableSelect : false;
  var sortingBasedOnDisabled$1 =
    sortingBasedOnDisabled !== undefined ? sortingBasedOnDisabled : true;
  var showSerialNumber$1 =
    showSerialNumber !== undefined ? showSerialNumber : true;
  var showConversionRate$1 =
    showConversionRate !== undefined ? showConversionRate : false;
  var headerTextClass$1 =
    headerTextClass !== undefined
      ? headerTextClass
      : "text-3xl font-semibold tracking-tight";
  var maxLengthArray = function (arr, setValues) {
    if (maxSelection$1 === -1) {
      return Curry._1(setValues, function (param) {
        return arr;
      });
    }
    if (arr.length <= maxSelection$1) {
      return Curry._1(setValues, function (param) {
        return arr;
      });
    }
    var temp = arr.slice((arr.length - maxSelection$1) | 0);
    return Curry._1(setValues, function (param) {
      return temp;
    });
  };
  var match = React.useState(function () {
    return initialValues;
  });
  var setValues = match[1];
  var values = match[0];
  var onClick = function (param) {
    Curry._1(onSubmit, values);
  };
  var disableSelectBtn = React.useMemo(
    function () {
      if (initialValues.toString() === values.toString() && !enableSelect$1) {
        return true;
      } else {
        return values.length === 0;
      }
    },
    [values, initialValues],
  );
  var len = values.length;
  var buttonText = Core__Option.getOr(
    props.submitButtonText,
    len > 0 ? "" + len.toString() + " " + title$1 + " Selected" : "Select",
  );
  React.useEffect(
    function () {
      if (!showModal) {
        Curry._1(setValues, function (param) {
          return initialValues;
        });
      }
    },
    [showModal, initialValues],
  );
  var applyBtnStyle = "w-full mx-5";
  var input_onBlur = function (_ev) {};
  var input_onChange = function (ev) {
    maxLengthArray(ev, setValues);
  };
  var input_onFocus = function (_ev) {};
  var input_value = LogicUtils.getJsonFromArrayOfString(values);
  var input = {
    name: "cutomixedColumnsInput",
    onBlur: input_onBlur,
    onChange: input_onChange,
    onFocus: input_onFocus,
    value: input_value,
    checked: false,
  };
  if (isModalView$1) {
    return React.createElement(
      Modal.make,
      {
        showModal: showModal,
        setShowModal: props.setShowModal,
        children: null,
        modalHeading: modalHeading$1,
        modalClass:
          "w-full h-screen md:w-96 float-right overflow-hidden !bg-white dark:!bg-jp-gray-lightgray_background",
        childClass: "p-0 m-0",
        headingClass:
          "py-6 px-2.5 h-24 border-b border-solid flex flex-col justify-center !bg-white dark:!bg-black border-slate-300",
        paddingClass: "",
        modalHeadingDescription: modalHeadingDescription$1,
        closeOnOutsideClick: closeOnOutsideClick$1,
        headerTextClass: headerTextClass$1,
        revealFrom: revealFrom$1,
      },
      React.createElement(
        "div",
        {
          className:
            "overflow-hidden p-6 pb-12 border-b border-solid  " +
            (showConversionRate$1 ? "border-slate-100" : "border-slate-300") +
            " dark:border-slate-500",
          style: {
            height:
              "" +
              (showConversionRate$1
                ? "calc(100vh - 17rem)"
                : "calc(100vh - 12rem)") +
              "",
          },
        },
        React.createElement(SelectBox.BaseSelect.make, {
          showSelectAll: showSelectAll$1,
          isDropDown: false,
          options: options,
          onSelect: function (arr) {
            maxLengthArray(arr, setValues);
          },
          value: LogicUtils.getJsonFromArrayOfString(values),
          showSerialNumber: showSerialNumber$1,
          maxHeight: "max-h-full",
          searchable: true,
          searchInputPlaceHolder:
            "Search in " + options.length.toString() + " options",
          customStyle: "px-2 py-1",
          disableSelect: disableSelect$1,
          isModalView: isModalView$1,
          customSearchStyle: "bg-white dark:bg-jp-gray-lightgray_background",
          sortingBasedOnDisabled: sortingBasedOnDisabled$1,
        }),
      ),
      showConversionRate$1
        ? React.createElement(
            "div",
            {
              className:
                "bg-[#F6F6F6] p-4 border-b border-slate-300 text-center text-[#868686]",
            },
            "Conversion rate  = " +
              Core__Option.getOr(
                options
                  .filter(function (itm) {
                    return Core__Option.getOr(values[0], "") === itm.value;
                  })
                  .map(function (item) {
                    return item.label;
                  })[0],
                "Factor 1",
              ) +
              " / " +
              Core__Option.getOr(
                options
                  .filter(function (itm) {
                    return Core__Option.getOr(values[1], "") === itm.value;
                  })
                  .map(function (item) {
                    return item.label;
                  })[0],
                "Factor 2",
              ) +
              "",
          )
        : null,
      React.createElement(
        "div",
        {
          className:
            "flex flex-row items-center overflow-hidden justify-center mt-1.5 mb-1 h-20 gap-2",
        },
        showDeSelectAll$1 && values.length > 0
          ? React.createElement(Button.make, {
              buttonState: disableSelect$1 ? /* Disabled */ 2 : /* Normal */ 0,
              text: "DESELECT ALL",
              onClick: function (param) {
                Curry._1(setValues, function (param) {
                  return [];
                });
              },
              customButtonStyle: applyBtnStyle,
            })
          : null,
        React.createElement(Button.make, {
          buttonState: disableSelectBtn ? /* Disabled */ 2 : /* Normal */ 0,
          text: buttonText,
          buttonType: /* Primary */ 0,
          buttonVariant: /* Fit */ 0,
          onClick: onClick,
          customButtonStyle: applyBtnStyle,
        }),
      ),
    );
  } else {
    return React.createElement(SelectBox.BaseDropdown.make, {
      buttonText: "Columns",
      allowMultiSelect: true,
      input: input,
      showSelectAll: false,
      options: options,
      hideMultiSelectButtons: true,
      showBorder: false,
      hasApplyButton: true,
      onApply: onClick,
    });
  }
}

var make = SelectModal;

export { make };
/* Modal Not a pure module */
