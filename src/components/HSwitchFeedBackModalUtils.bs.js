// Generated by ReScript, PLEASE EDIT WITH CARE

import * as SelectBox from "./SelectBox.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as InputFields from "./InputFields.bs.js";
import * as FormRenderer from "./form/FormRenderer.bs.js";

var feedbackTextBox = FormRenderer.makeFieldInfo(
  "",
  undefined,
  "feedbacks",
  function (param) {
    return function (param$1) {
      var param$2 = false;
      var param$3 = 6;
      var param$4 = 4;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      return InputFields.multiLineTextInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Tell us in words...",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

var feedbackTypeList = [/* Suggestion */ 0, /* Bugs */ 1, /* Other */ 3];

function getFeedBackStringFromVariant(feedbackType) {
  switch (feedbackType) {
    case /* Suggestion */ 0:
      return "Suggestion";
    case /* Bugs */ 1:
      return "Bugs";
    case /* RequestConnector */ 2:
      return "Request A Connector";
    case /* Other */ 3:
      return "Other";
  }
}

var arg = SelectBox.makeOptions(
  feedbackTypeList.map(getFeedBackStringFromVariant),
);

var selectFeedbackType = FormRenderer.makeFieldInfo(
  "",
  undefined,
  "category",
  function (param) {
    return function (param$1) {
      var param$2 = "options";
      var param$3;
      var param$4;
      var param$5 = true;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      return InputFields.radioInput(
        param,
        arg,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

var connectorNameField = FormRenderer.makeFieldInfo(
  "Processor Name",
  undefined,
  "connector_name",
  function (param) {
    return function (param$1) {
      var param$2;
      var param$3;
      var param$4;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      var param$9;
      var param$10;
      var param$11;
      var param$12;
      var param$13;
      var param$14;
      var param$15;
      var param$16;
      var param$17;
      var param$18;
      var param$19;
      var param$20;
      var param$21;
      var param$22;
      var param$23;
      var param$24;
      var param$25;
      var param$26;
      var param$27;
      return InputFields.textInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
        param$9,
        param$10,
        param$11,
        param$12,
        param$13,
        param$14,
        param$15,
        param$16,
        param$17,
        param$18,
        param$19,
        param$20,
        param$21,
        param$22,
        param$23,
        param$24,
        param$25,
        param$26,
        param$27,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Enter a processor name",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

var connectorDescription = FormRenderer.makeFieldInfo(
  "Description",
  undefined,
  "description",
  function (param) {
    return function (param$1) {
      var param$2 = false;
      var param$3 = 6;
      var param$4 = 4;
      var param$5;
      var param$6;
      var param$7;
      var param$8;
      return InputFields.multiLineTextInput(
        param,
        param$1,
        param$2,
        param$3,
        param$4,
        param$5,
        param$6,
        param$7,
        param$8,
      );
    };
  },
  undefined,
  undefined,
  undefined,
  undefined,
  "Write here...",
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
  undefined,
);

function validateFields(values, modalType) {
  var errors = {};
  var values$1 = LogicUtils.getDictFromJsonObject(values);
  if (modalType) {
    if (LogicUtils.getString(values$1, "connector_name", "").length <= 0) {
      errors["connector_name"] = "Please enter a connector name";
    }
  } else {
    if (LogicUtils.getInt(values$1, "rating", -1) === -1) {
      errors["rating"] = "Please rate";
    }
    if (
      LogicUtils.isNonEmptyString(
        LogicUtils.getString(values$1, "category", ""),
      ) &&
      LogicUtils.isEmptyString(LogicUtils.getString(values$1, "feedbacks", ""))
    ) {
      errors["feedbacks"] = "Please give the feedback";
    }
  }
  return errors;
}

var makeFieldInfo = FormRenderer.makeFieldInfo;

export {
  makeFieldInfo,
  feedbackTextBox,
  feedbackTypeList,
  getFeedBackStringFromVariant,
  selectFeedbackType,
  connectorNameField,
  connectorDescription,
  validateFields,
};
/* feedbackTextBox Not a pure module */
