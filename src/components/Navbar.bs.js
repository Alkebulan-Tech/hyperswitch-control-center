// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as OutsideClick from "../hooks/OutsideClick.bs.js";
import * as PortalCapture from "./portal/PortalCapture.bs.js";
import * as SidebarProvider from "../screens/Sidebar/SidebarProvider.bs.js";
import * as AuthInfoProvider from "../context/AuthInfoProvider.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as HSwitchFeedBackModal from "./HSwitchFeedBackModal.bs.js";

var bgClass = "bg-white hover:bg-jp-gray-100";

function Navbar$MenuOption(props) {
  var children = props.children;
  var text = props.text;
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-testid", Core__Option.getOr(text, "").toLowerCase()]],
    children: React.createElement(
      "button",
      {
        className:
          "px-4 py-3 flex text-sm w-full text-gray-700 cursor-pointer " +
          bgClass +
          "",
        onClick: props.onClick,
      },
      text !== undefined ? text : null,
      children !== undefined ? Caml_option.valFromOption(children) : null,
    ),
  });
}

var MenuOption = {
  make: Navbar$MenuOption,
};

function Navbar(props) {
  var headerLeftActions = props.headerLeftActions;
  var portalStyle = props.portalStyle;
  var customHeight = props.customHeight;
  var liveMode = props.liveMode;
  var outageActions = props.outageActions;
  var notificationActions = props.notificationActions;
  var midUiActions = props.midUiActions;
  var headerActions = props.headerActions;
  var customHeight$1 = customHeight !== undefined ? customHeight : "";
  var portalStyle$1 = portalStyle !== undefined ? portalStyle : "";
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var match = React.useState(function () {
    return false;
  });
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsAppearancePopupOpen = match$1[1];
  var match$2 = React.useContext(SidebarProvider.defaultContext);
  var setIsSidebarExpanded = match$2.setIsSidebarExpanded;
  var match$3 = React.useContext(AuthInfoProvider.authStatusContext);
  var authStatus = match$3[0];
  var mobileMargin = isMobileView ? "" : "mr-7";
  var leftPortalName = isMobileView ? "mobileNavbarTitle" : "desktopNavbarLeft";
  var ref = React.useRef(null);
  OutsideClick.useOutsideClick(
    {
      TAG: /* ArrayOfRef */ 0,
      _0: [ref],
    },
    undefined,
    match$1[0],
    undefined,
    function (param) {
      Curry._1(setIsAppearancePopupOpen, function (param) {
        return false;
      });
    },
    undefined,
  );
  if (typeof authStatus === "number") {
    if (authStatus !== 0) {
      return "...";
    } else {
      return null;
    }
  } else {
    return React.createElement(
      "div",
      {
        className: "w-full mx-auto",
        id: "navbar",
      },
      React.createElement(
        "div",
        {
          className:
            "flex flex-row items-start justify-between min-h-16 items-center " +
            customHeight$1 +
            "",
        },
        headerLeftActions !== undefined
          ? Caml_option.valFromOption(headerLeftActions)
          : null,
        React.createElement(
          "div",
          {
            className:
              "flex flex-wrap ml-5 justify-between items-center w-full",
          },
          JsxPPXReactSupport.createElementWithKey(
            leftPortalName,
            PortalCapture.make,
            {
              name: leftPortalName,
              customStyle: "" + portalStyle$1 + "",
            },
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-row place-content-centerx",
            },
            JsxPPXReactSupport.createElementWithKey(
              "desktopNavbarCenter",
              PortalCapture.make,
              {
                name: "desktopNavbarCenter",
              },
            ),
          ),
          React.createElement(
            "div",
            {
              className: "flex flex-row items-center",
            },
            JsxPPXReactSupport.createElementWithKey(
              "desktopNavbarRight",
              PortalCapture.make,
              {
                name: "desktopNavbarRight",
              },
            ),
            JsxPPXReactSupport.createElementWithKey(
              "desktopNavYoutubeLink",
              PortalCapture.make,
              {
                name: "desktopNavYoutubeLink",
              },
            ),
          ),
        ),
        React.createElement(
          "div",
          {
            className:
              "flex-1 flex items-center justify-center sm:items-stretch sm:justify-start",
          },
          React.createElement("div", {
            className: "flex-shrink-0 flex items-center",
          }),
        ),
        midUiActions !== undefined
          ? Caml_option.valFromOption(midUiActions)
          : null,
        React.createElement(
          "div",
          {
            className:
              " inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0  " +
              mobileMargin +
              "",
          },
          headerActions !== undefined
            ? Caml_option.valFromOption(headerActions)
            : null,
          outageActions !== undefined
            ? Caml_option.valFromOption(outageActions)
            : null,
          isMobileView && liveMode !== undefined
            ? Caml_option.valFromOption(liveMode)
            : null,
          notificationActions !== undefined
            ? Caml_option.valFromOption(notificationActions)
            : null,
          React.createElement(
            "div",
            {
              className: "mt-2 ml-0",
            },
            JsxPPXReactSupport.createElementWithKey(
              "onboarding",
              PortalCapture.make,
              {
                name: "onboarding",
              },
            ),
          ),
          React.createElement(
            "div",
            {
              className:
                "h-full px-1.5 flex items-center focus:outline-none cursor-pointer transform transition duration-500 ease-in-out md:hidden",
              onClick: function (param) {
                Curry._1(setIsSidebarExpanded, function (prev) {
                  return !prev;
                });
              },
            },
            React.createElement(Icon.make, {
              name: "bars",
              className: "align-middle",
            }),
          ),
        ),
      ),
      React.createElement(
        "div",
        {
          className: "ml-5",
        },
        JsxPPXReactSupport.createElementWithKey(
          "navbarSecondRow",
          PortalCapture.make,
          {
            name: "navbarSecondRow",
          },
        ),
      ),
      React.createElement(HSwitchFeedBackModal.make, {
        modalHeading: "We'd love to hear from you!",
        setShowModal: match[1],
        showModal: match[0],
      }),
    );
  }
}

var make = Navbar;

export { bgClass, MenuOption, make };
/* Icon Not a pure module */
