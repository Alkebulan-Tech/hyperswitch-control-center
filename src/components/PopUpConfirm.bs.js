// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as PopUpConfirmUtils from "./PopUpConfirmUtils.bs.js";

function PopUpConfirm$Close(props) {
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-component", "popUpConfirmClose"]],
    children: PopUpConfirmUtils.getCloseIcon(props.onClick),
  });
}

var Close = {
  make: PopUpConfirm$Close,
};

function PopUpConfirm(props) {
  var showCloseIcon = props.showCloseIcon;
  var showPopUp = props.showPopUp;
  var showIcon = props.showIcon;
  var cancelButtonText = props.cancelButtonText;
  var popUpType = props.popUpType;
  var cancelButtonIcon = props.cancelButtonIcon;
  var confirmButtonIcon = props.confirmButtonIcon;
  var buttonText = props.buttonText;
  var confirmButtonDisabled = props.confirmButtonDisabled;
  var confirmType = props.confirmType;
  var handleCancel = props.handleCancel;
  var handleConfirm = props.handleConfirm;
  var handlePopUp = props.handlePopUp;
  var confirmButtonDisabled$1 =
    confirmButtonDisabled !== undefined ? confirmButtonDisabled : false;
  var confirmButtonIcon$1 =
    confirmButtonIcon !== undefined ? confirmButtonIcon : /* NoIcon */ 0;
  var cancelButtonIcon$1 =
    cancelButtonIcon !== undefined ? cancelButtonIcon : /* NoIcon */ 0;
  var popUpType$1 = popUpType !== undefined ? popUpType : /* Warning */ 4;
  var showIcon$1 = showIcon !== undefined ? showIcon : false;
  var showCloseIcon$1 = showCloseIcon !== undefined ? showCloseIcon : true;
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var match;
  switch (popUpType$1) {
    case /* Success */ 0:
      match = ["bg-green-700", "border-t-green-700"];
      break;
    case /* Primary */ 1:
      match = ["bg-blue-500", "border-t-blue-500"];
      break;
    case /* Secondary */ 2:
      match = ["bg-yellow-300", "border-t-yellow-300"];
      break;
    case /* Warning */ 4:
      match = ["bg-orange-960", "border-t-orange-960"];
      break;
    case /* Danger */ 3:
    case /* Denied */ 5:
      match = ["bg-red-600", "border-t-red-600"];
      break;
  }
  var appPrefix = LogicUtils.useUrlPrefix(undefined);
  var rounded_top_border = "rounded-t-xl";
  var btnWidthClass = isMobileView ? "w-full" : "";
  var customButtonStyle = "px-2 py-0 h-9 rounded-md " + btnWidthClass + "";
  var textStyle = "font-medium text-fs-13";
  var showModal = showPopUp ? "flex" : "hidden";
  var popupMargin = isMobileView ? "pt-4 pl-4" : "pr-4 pl-8 pt-6";
  var btnPosition = isMobileView
    ? "gap-6 justify-between"
    : "gap-4 justify-end";
  var paddingCss = isMobileView ? "px-4" : "px-8";
  var handleOverlayClick = function (ev) {
    ev.stopPropagation();
  };
  var actionButton;
  if (buttonText !== undefined) {
    var buttonType =
      popUpType$1 !== 3 && popUpType$1 < 5 ? /* Primary */ 0 : /* Delete */ 8;
    var buttonState = confirmButtonDisabled$1
      ? /* Disabled */ 2
      : /* Normal */ 0;
    actionButton =
      handleConfirm !== undefined
        ? React.createElement(Button.make, {
            buttonState: buttonState,
            text: buttonText,
            buttonType: buttonType,
            leftIcon: confirmButtonIcon$1,
            onClick: handleConfirm,
            textStyle: textStyle,
            customButtonStyle: customButtonStyle,
          })
        : React.createElement(Button.make, {
            buttonState: buttonState,
            text: buttonText,
            buttonType: buttonType,
            leftIcon: confirmButtonIcon$1,
            type_: "submit",
            textStyle: textStyle,
            customButtonStyle: customButtonStyle,
          });
  } else {
    actionButton = null;
  }
  var cancelButton =
    cancelButtonText !== undefined
      ? handleCancel !== undefined
        ? React.createElement(Button.make, {
            text: cancelButtonText,
            buttonType: /* SecondaryFilled */ 3,
            leftIcon: cancelButtonIcon$1,
            onClick: handleCancel,
            textStyle: textStyle,
            customButtonStyle: customButtonStyle,
          })
        : React.createElement(Button.make, {
            text: cancelButtonText,
            buttonType: /* SecondaryFilled */ 3,
            leftIcon: cancelButtonIcon$1,
            onClick: handlePopUp,
            textStyle: textStyle,
            customButtonStyle: customButtonStyle,
          })
      : null;
  var handleKeyUp = function (ev) {
    var key = ev.key;
    var keyCode = ev.keyCode;
    if ((key === "Escape" || keyCode === 27) && handleCancel !== undefined) {
      return Curry._1(handleCancel, ev);
    }
  };
  React.useEffect(
    function () {
      if (showPopUp) {
        window.addEventListener("keyup", handleKeyUp);
      } else {
        window.removeEventListener("keyup", handleKeyUp);
      }
      return function (param) {
        window.removeEventListener("keyup", handleKeyUp);
      };
    },
    [showPopUp],
  );
  var tmp;
  switch (popUpType$1) {
    case /* Success */ 0:
      tmp = React.createElement(Icon.make, {
        name: "check-circle",
        size: 40,
        className: PopUpConfirmUtils.iconStyle,
      });
      break;
    case /* Primary */ 1:
    case /* Secondary */ 2:
      tmp = React.createElement(Icon.make, {
        name: "info-circle",
        size: 40,
        className: PopUpConfirmUtils.iconStyle,
      });
      break;
    case /* Danger */ 3:
      tmp = React.createElement("img", {
        className: PopUpConfirmUtils.imageStyle,
        alt: "danger",
        src: "" + appPrefix + "/icons/error.svg",
      });
      break;
    case /* Warning */ 4:
      tmp = React.createElement("img", {
        className: PopUpConfirmUtils.imageStyle,
        alt: "warning",
        src: "" + appPrefix + "/icons/warning.svg",
      });
      break;
    case /* Denied */ 5:
      tmp = React.createElement(Icon.make, {
        name: "denied",
        size: 50,
        className: PopUpConfirmUtils.iconStyle,
      });
      break;
  }
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-component", "popUpConfirm " + confirmType + ""]],
    children: React.createElement(
      "div",
      {
        className:
          "" +
          showModal +
          " " +
          PopUpConfirmUtils.overlayStyle +
          " fixed cursor-default h-screen w-screen z-100 inset-0 overflow-auto",
        onClick: handleOverlayClick,
      },
      React.createElement(
        "div",
        {
          className:
            "" +
            match[1] +
            " absolute lg:top-1/3 md:top-1/3 left-0 lg:left-1/3 border border-jp-gray-500 dark:border-jp-gray-960 w-full bottom-0 md:bottom-auto " +
            PopUpConfirmUtils.modalWidth +
            " bg-jp-gray-100 dark:bg-jp-gray-lightgray_background shadow " +
            PopUpConfirmUtils.containerBorderRadius +
            " z-20 dark:text-opacity-75 " +
            rounded_top_border +
            "",
        },
        React.createElement("div", {
          className:
            "h-2 w-12/12 p-0 mt-0 " + match[0] + " " + rounded_top_border + "",
        }),
        React.createElement(
          "div",
          {
            className: "flex flex-row " + popupMargin + " justify-between",
          },
          React.createElement(
            "div",
            {
              className: "flex flex-row gap-5 pt-4 items-center w-full",
            },
            React.createElement(UIUtils.RenderIf.make, {
              condition: showIcon$1,
              children: tmp,
            }),
            React.createElement(
              "div",
              {
                className: "w-full",
              },
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-header-text", confirmType]],
                children: React.createElement(
                  "div",
                  {
                    className: PopUpConfirmUtils.headerStyle,
                  },
                  confirmType,
                ),
              }),
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-description-text", "popUp Confirmation"]],
                children: React.createElement(
                  "div",
                  {
                    className: PopUpConfirmUtils.subHeaderStyle,
                  },
                  props.confirmText,
                ),
              }),
            ),
          ),
          React.createElement(
            "div",
            {
              className: "flex justify-end ",
            },
            React.createElement(UIUtils.RenderIf.make, {
              condition: showCloseIcon$1,
              children: React.createElement(PopUpConfirm$Close, {
                onClick: handlePopUp,
              }),
            }),
          ),
        ),
        React.createElement(
          "div",
          {
            className:
              "flex justify-between items-center flex-row " +
              paddingCss +
              " py-4 mt-4",
          },
          React.createElement(
            "div",
            {
              className:
                "flex flex-row items-center w-full " + btnPosition + "",
            },
            cancelButton,
            actionButton,
          ),
        ),
      ),
    ),
  });
}

var make = PopUpConfirm;

export { Close, make };
/* Icon Not a pure module */
