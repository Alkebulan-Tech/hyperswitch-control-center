// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Core__Int from "@rescript/core/src/Core__Int.bs.js";
import * as SelectBox from "./SelectBox.bs.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Pagination from "./Pagination.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as NewPagination from "./NewPagination.bs.js";
import * as LoadedTableContext from "../context/LoadedTableContext.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function Paginator(props) {
  var showResultsPerPageSelector = props.showResultsPerPageSelector;
  var paginationClass = props.paginationClass;
  var setResultsPerPage = props.setResultsPerPage;
  var tableDataLoading = props.tableDataLoading;
  var actualData = props.actualData;
  var isNewPaginator = props.isNewPaginator;
  var downloadCsv = props.downloadCsv;
  var currrentFetchCount = props.currrentFetchCount;
  var handleRefetch = props.handleRefetch;
  var setOffset = props.setOffset;
  var resultsPerPage = props.resultsPerPage;
  var offset = props.offset;
  var totalResults = props.totalResults;
  var isNewPaginator$1 = isNewPaginator !== undefined ? isNewPaginator : false;
  var tableDataLoading$1 =
    tableDataLoading !== undefined ? tableDataLoading : false;
  var setResultsPerPage$1 =
    setResultsPerPage !== undefined ? setResultsPerPage : function (param) {};
  var paginationClass$1 = paginationClass !== undefined ? paginationClass : "";
  var showResultsPerPageSelector$1 =
    showResultsPerPageSelector !== undefined
      ? showResultsPerPageSelector
      : true;
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var currentPage = (Caml_int32.div(offset, resultsPerPage) + 1) | 0;
  var start = (offset + 1) | 0;
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var isTabView =
    MatchMedia.useMatchMedia("(max-width: 800px)") && !isMobileView;
  var mobileFlexDirection = isMobileView ? "flex-row" : "flex-col md:flex-row";
  var match =
    downloadCsv !== undefined
      ? [mobileFlexDirection, isTabView ? 2 : 4, "items-center justify-between"]
      : ["flex-row", isMobileView ? 2 : 4, "justify-start"];
  var btnCount = match[1];
  var toNum =
    ((resultsPerPage + start) | 0) > totalResults
      ? totalResults
      : (((resultsPerPage + start) | 0) - 1) | 0;
  var shouldRefetch =
    toNum > currrentFetchCount && toNum <= totalResults && !tableDataLoading$1;
  React.useEffect(
    function () {
      if (shouldRefetch && handleRefetch !== undefined) {
        Curry._1(handleRefetch, undefined);
      }
    },
    [shouldRefetch, handleRefetch],
  );
  var selectInputOption = SelectBox.makeOptions(
    [5, 10, 15, 25, 50, 100]
      .filter(function (val) {
        return val <= totalResults;
      })
      .map(function (prim) {
        return prim.toString();
      }),
  );
  var selectInput_onBlur = function (_ev) {};
  var selectInput_onChange = function (ev) {
    Curry._1(setResultsPerPage$1, function (param) {
      return Core__Option.getOr(Core__Int.fromString(undefined, ev), 15);
    });
  };
  var selectInput_onFocus = function (_ev) {};
  var selectInput_value = resultsPerPage.toString();
  var selectInput = {
    name: "dummy-name",
    onBlur: selectInput_onBlur,
    onChange: selectInput_onChange,
    onFocus: selectInput_onFocus,
    value: selectInput_value,
    checked: true,
  };
  var paginate = React.useCallback(
    function (pageNumber) {
      var total = Math.ceil(totalResults / resultsPerPage) | 0;
      var defaultPageNumber = Math.min(total, pageNumber);
      var newOffset = Math.imul((defaultPageNumber - 1) | 0, resultsPerPage);
      Curry._1(setOffset, function (param) {
        return newOffset;
      });
    },
    [setOffset, resultsPerPage, currrentFetchCount, url.search, totalResults],
  );
  if (totalResults >= resultsPerPage) {
    return React.createElement(
      "div",
      {
        className:
          "flex " +
          match[0] +
          " justify-between mt-4 md:mr-0 " +
          paginationClass$1 +
          " ",
      },
      React.createElement(
        "div",
        {
          className: "flex flex-row w-full " + match[2] + "",
        },
        React.createElement(UIUtils.RenderIf.make, {
          condition: !isMobileView && showResultsPerPageSelector$1,
          children: React.createElement(
            "div",
            {
              className:
                "flex self-center text-center text-gray-400 dark:text-gray-500 font-medium",
            },
            "Showing " +
              start.toString() +
              " to " +
              toNum.toString() +
              " of " +
              totalResults.toString() +
              " entries",
            React.createElement(SelectBox.BaseDropdown.make, {
              buttonText: "",
              allowMultiSelect: false,
              input: selectInput,
              options: selectInputOption,
              hideMultiSelectButtons: true,
              deselectDisable: true,
              buttonType: /* Primary */ 0,
              baseComponent: Caml_option.some(
                React.createElement(Icon.make, {
                  name: "chevron-down",
                  size: 20,
                  className: "pl-2",
                }),
              ),
              searchable: false,
            }),
          ),
        }),
        downloadCsv !== undefined
          ? React.createElement(
              "div",
              {
                className: "md:mr-2 lg:mr-5 mb-2",
              },
              React.createElement(LoadedTableContext.make, {
                value: actualData,
                children: Caml_option.valFromOption(downloadCsv),
              }),
            )
          : null,
      ),
      React.createElement(
        "div",
        {
          className:
            "flex justify-end sm:justify-center tablePagination select-none",
        },
        isNewPaginator$1
          ? React.createElement(NewPagination.make, {
              resultsPerPage: resultsPerPage,
              totalResults: totalResults,
              currentPage: currentPage,
              paginate: paginate,
              btnCount: btnCount,
            })
          : React.createElement(Pagination.make, {
              resultsPerPage: resultsPerPage,
              totalResults: totalResults,
              currentPage: currentPage,
              paginate: paginate,
              btnCount: btnCount,
            }),
      ),
    );
  } else if (downloadCsv !== undefined) {
    return React.createElement(
      "div",
      {
        className: "flex justify-end mt-4",
      },
      React.createElement(LoadedTableContext.make, {
        value: actualData,
        children: Caml_option.valFromOption(downloadCsv),
      }),
    );
  } else {
    return null;
  }
}

var make = Paginator;

export { make };
/* Icon Not a pure module */
