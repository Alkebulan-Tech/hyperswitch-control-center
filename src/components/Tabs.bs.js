// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FramerMotion from "../libraries/FramerMotion.bs.js";
import * as ErrorBoundary from "./ErrorBoundary.bs.js";
import * as FramerMotion$1 from "framer-motion";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function Tabs$TabInfo(props) {
  var onTabSelection = props.onTabSelection;
  var showBottomBorder = props.showBottomBorder;
  var borderDefaultStyle = props.borderDefaultStyle;
  var borderSelectionStyle = props.borderSelectionStyle;
  var backgroundStyle = props.backgroundStyle;
  var darkThemeColor = props.darkThemeColor;
  var lightThemeColor = props.lightThemeColor;
  var textStyle = props.textStyle;
  var disabledTab = props.disabledTab;
  var isDisabled = props.isDisabled;
  var handleSelectedIndex = props.handleSelectedIndex;
  var index = props.index;
  var isScrollIntoViewRequired = props.isScrollIntoViewRequired;
  var isSelected = props.isSelected;
  var title = props.title;
  var isScrollIntoViewRequired$1 =
    isScrollIntoViewRequired !== undefined ? isScrollIntoViewRequired : false;
  var isDisabled$1 = isDisabled !== undefined ? isDisabled : false;
  var disabledTab$1 = disabledTab !== undefined ? disabledTab : [];
  var textStyle$1 = textStyle !== undefined ? textStyle : "";
  var lightThemeColor$1 =
    lightThemeColor !== undefined ? lightThemeColor : "blue-500";
  var darkThemeColor$1 =
    darkThemeColor !== undefined ? darkThemeColor : "blue-500";
  var backgroundStyle$1 =
    backgroundStyle !== undefined ? backgroundStyle : "bg-gradient-to-b";
  var borderSelectionStyle$1 =
    borderSelectionStyle !== undefined ? borderSelectionStyle : "";
  var borderDefaultStyle$1 =
    borderDefaultStyle !== undefined ? borderDefaultStyle : "";
  var showBottomBorder$1 =
    showBottomBorder !== undefined ? showBottomBorder : true;
  var onTabSelection$1 =
    onTabSelection !== undefined ? onTabSelection : function (param) {};
  var tabRef = React.useRef(null);
  var fontClass = "font-inter-style";
  var defaultBorderClass = "border-0";
  var tabTextPadding = "px-6";
  var roundedClass = "rounded-t-md";
  var defaultClasses =
    isDisabled$1 && disabledTab$1.includes(title)
      ? "cursor-not-allowed " +
        fontClass +
        " w-max flex flex-auto flex-row items-center justify-center " +
        roundedClass +
        " " +
        tabTextPadding +
        " " +
        backgroundStyle$1 +
        " from-white to-white dark:from-jp-gray-950 dark:to-jp-gray-950 border-b-0 border-jp-gray-500 dark:border-jp-gray-960 " +
        defaultBorderClass +
        " font-semibold dark:text-jp-gray-text_darktheme dark:text-opacity-50 text-opacity-50 hover:text-opacity-50 dark:hover:text-opacity-50"
      : "" +
        fontClass +
        " w-max flex flex-auto flex-row items-center justify-center " +
        tabTextPadding +
        " " +
        roundedClass +
        " " +
        defaultBorderClass +
        "  font-semibold text-body";
  var selectionClasses = isSelected
    ? "font-semibold text-" +
      lightThemeColor$1 +
      " dark:text-" +
      darkThemeColor$1 +
      " " +
      textStyle$1 +
      " " +
      borderSelectionStyle$1 +
      " "
    : "text-jp-gray-900 dark:text-jp-gray-text_darktheme dark:text-opacity-75 text-opacity-50 hover:text-opacity-75 dark:hover:text-opacity-100  " +
      borderDefaultStyle$1 +
      "";
  var handleClick = React.useCallback(
    function (_ev) {
      if (isDisabled$1 && disabledTab$1.includes(title)) {
      } else {
        Curry._1(handleSelectedIndex, index);
      }
      Curry._1(onTabSelection$1, undefined);
    },
    [index, handleSelectedIndex],
  );
  var lineStyle = showBottomBorder$1
    ? "bg-black w-full h-0.5 rounded-full"
    : "";
  React.useEffect(
    function () {
      if (isSelected && isScrollIntoViewRequired$1) {
        Core__Option.forEach(
          Caml_option.nullable_to_opt(tabRef.current),
          function (input) {
            input.scrollIntoView({
              behavior: "smooth",
              block: "nearest",
              inline: "nearest",
            });
          },
        );
      }
    },
    [isSelected, isScrollIntoViewRequired$1],
  );
  return React.createElement(
    "div",
    {
      className: "flex flex-col cursor-pointer w-max",
    },
    React.createElement(
      "div",
      {
        className:
          "" + defaultClasses + " " + selectionClasses + " select-none pb-2",
        onClick: handleClick,
      },
      title,
    ),
    isSelected
      ? React.createElement(FramerMotion$1.motion.div, {
          className: lineStyle,
          layoutId: "underline",
        })
      : React.createElement("div", {
          className: "h-0.5",
        }),
  );
}

var TabInfo = {
  make: Tabs$TabInfo,
};

function Tabs$IndicationArrow(props) {
  var refElement = props.refElement;
  var side = props.side;
  var onClick = function (_ev) {
    Core__Option.forEach(
      Caml_option.nullable_to_opt(refElement.current),
      function (input) {
        input.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "start",
        });
      },
    );
  };
  var roundness = side === "left" ? "rounded-tr-md" : "rounded-tl-md";
  var className = props.isVisible
    ? "absolute " +
      side +
      "-0 bottom-0 shadow-side_shadow 2xl:hidden  " +
      roundness +
      " bg-gray-50"
    : "hidden";
  return React.createElement(
    "div",
    {
      className: className,
    },
    React.createElement(Button.make, {
      buttonType: /* Secondary */ 1,
      leftIcon: {
        TAG: /* FontAwesome */ 0,
        _0: props.iconName,
      },
      flattenBottom: true,
      onClick: onClick,
    }),
  );
}

var IndicationArrow = {
  make: Tabs$IndicationArrow,
};

function getBoundingRectInfo(ref, getter) {
  return Core__Option.mapOr(
    Core__Option.map(Caml_option.nullable_to_opt(ref.current), function (prim) {
      return prim.getBoundingClientRect();
    }),
    0,
    getter,
  );
}

function Tabs(props) {
  var contentHeight = props.contentHeight;
  var showStickyHeader = props.showStickyHeader;
  var showBottomBorder = props.showBottomBorder;
  var borderDefaultStyle = props.borderDefaultStyle;
  var borderSelectionStyle = props.borderSelectionStyle;
  var gapBetweenTabs = props.gapBetweenTabs;
  var tabView = props.tabView;
  var backgroundStyle = props.backgroundStyle;
  var includeMargin = props.includeMargin;
  var renderedTabClassName = props.renderedTabClassName;
  var showBorder = props.showBorder;
  var darkThemeColor = props.darkThemeColor;
  var lightThemeColor = props.lightThemeColor;
  var tabBottomShadow = props.tabBottomShadow;
  var disabledTab = props.disabledTab;
  var isDisabled = props.isDisabled;
  var textStyle = props.textStyle;
  var isScrollIntoViewRequired = props.isScrollIntoViewRequired;
  var borderBottomStyle = props.borderBottomStyle;
  var tabContainerClass = props.tabContainerClass;
  var onTitleClick = props.onTitleClick;
  var tabsCustomClass = props.tabsCustomClass;
  var tabs = props.tabs;
  var tabsCustomClass$1 = tabsCustomClass !== undefined ? tabsCustomClass : "";
  var tabContainerClass$1 =
    tabContainerClass !== undefined ? tabContainerClass : "";
  var borderBottomStyle$1 =
    borderBottomStyle !== undefined ? borderBottomStyle : "";
  var isScrollIntoViewRequired$1 =
    isScrollIntoViewRequired !== undefined ? isScrollIntoViewRequired : false;
  var textStyle$1 = textStyle !== undefined ? textStyle : "";
  var isDisabled$1 = isDisabled !== undefined ? isDisabled : false;
  var disabledTab$1 = disabledTab !== undefined ? disabledTab : [];
  var tabBottomShadow$1 =
    tabBottomShadow !== undefined ? tabBottomShadow : "shadow-md";
  var lightThemeColor$1 =
    lightThemeColor !== undefined ? lightThemeColor : "blue-500";
  var darkThemeColor$1 =
    darkThemeColor !== undefined ? darkThemeColor : "blue-500";
  var showBorder$1 = showBorder !== undefined ? showBorder : true;
  var renderedTabClassName$1 =
    renderedTabClassName !== undefined ? renderedTabClassName : "";
  var includeMargin$1 = includeMargin !== undefined ? includeMargin : true;
  var backgroundStyle$1 =
    backgroundStyle !== undefined ? backgroundStyle : "bg-gradient-to-b";
  var tabView$1 = tabView !== undefined ? tabView : /* Compress */ 0;
  var gapBetweenTabs$1 =
    gapBetweenTabs !== undefined ? gapBetweenTabs : "gap-1.5";
  var borderSelectionStyle$1 =
    borderSelectionStyle !== undefined ? borderSelectionStyle : "";
  var borderDefaultStyle$1 =
    borderDefaultStyle !== undefined ? borderDefaultStyle : "";
  var showBottomBorder$1 =
    showBottomBorder !== undefined ? showBottomBorder : true;
  var showStickyHeader$1 =
    showStickyHeader !== undefined ? showStickyHeader : false;
  var contentHeight$1 = contentHeight !== undefined ? contentHeight : "";
  var initialIndex = Core__Option.getOr(props.initialIndex, 0);
  var match = React.useState(function () {
    return initialIndex;
  });
  var setSelectedIndex = match[1];
  var selectedIndex = match[0];
  var tabOuterClass = "" + tabBottomShadow$1 + " " + gapBetweenTabs$1 + "";
  React.useEffect(
    function () {
      Curry._1(setSelectedIndex, function (param) {
        return initialIndex;
      });
    },
    [initialIndex],
  );
  var match$1 = React.useState(function () {
    return false;
  });
  var setIsLeftArrowVisible = match$1[1];
  var match$2 = React.useState(function () {
    return true;
  });
  var setIsRightArrowVisible = match$2[1];
  var firstTabRef = React.useRef(null);
  var scrollRef = React.useRef(null);
  var lastTabRef = React.useRef(null);
  var numberOfTabs = tabs.length;
  var onScroll = function (_ev) {
    var leftVal = getBoundingRectInfo(firstTabRef, function (val) {
      return val.x;
    });
    var rightVal = getBoundingRectInfo(lastTabRef, function (val) {
      return val.right;
    });
    var scrollValLeft = getBoundingRectInfo(scrollRef, function (val) {
      return val.x;
    });
    var scrollValRight = getBoundingRectInfo(scrollRef, function (val) {
      return val.right;
    });
    var newIsLeftArrowVisible = ((leftVal - scrollValLeft) | 0) < 0;
    var newIsRightArrowVisible = ((rightVal - scrollValRight) | 0) >= 10;
    Curry._1(setIsLeftArrowVisible, function (param) {
      return newIsLeftArrowVisible;
    });
    Curry._1(setIsRightArrowVisible, function (param) {
      return newIsRightArrowVisible;
    });
  };
  var handleSelectedIndex = function (index) {
    if (onTitleClick !== undefined) {
      Curry._1(onTitleClick, index);
    }
    Curry._1(setSelectedIndex, function (param) {
      return index;
    });
  };
  var tabClass = tabView$1 ? "w-full" : "";
  var stickyHeader = showStickyHeader$1
    ? "top-0 height-50 sticky bg-white border-b dark:bg-black border-jp-gray-500 dark:border-jp-gray-960"
    : "";
  var selectedTab = tabs[selectedIndex];
  var tmp;
  if (selectedTab !== undefined) {
    var component = Curry._1(selectedTab.renderContent, undefined);
    tmp = React.createElement(FramerMotion.TransitionComponent.make, {
      id: selectedIndex.toString(),
      children: component,
      className: contentHeight$1,
    });
  } else {
    tmp = "No tabs found";
  }
  return React.createElement(ErrorBoundary.make, {
    children: React.createElement(
      "div",
      {
        className: "flex flex-col " + contentHeight$1 + "",
      },
      React.createElement(
        "div",
        {
          className: "py-0 " + stickyHeader + "",
        },
        React.createElement(
          "div",
          {
            ref: Caml_option.some(scrollRef),
            className: "overflow-x-auto no-scrollbar overflow-y-hidden",
            onScroll: onScroll,
          },
          React.createElement(
            "div",
            {
              className:
                "flex flex-row mt-5 pr-8 " +
                tabOuterClass +
                "\n          " +
                (showBorder$1 && includeMargin$1 ? "ml-5" : "") +
                "  " +
                tabContainerClass$1 +
                "",
            },
            tabs.map(function (tab, i) {
              var ref =
                i === 0
                  ? Caml_option.some(firstTabRef)
                  : i === ((numberOfTabs - 1) | 0)
                    ? Caml_option.some(lastTabRef)
                    : undefined;
              return React.createElement(
                "div",
                {
                  key: i.toString(),
                  ref: ref,
                  className: tabClass,
                },
                React.createElement(Tabs$TabInfo, {
                  title: tab.title,
                  tabElement: Caml_option.some(tab.tabElement),
                  isSelected: selectedIndex === i,
                  isScrollIntoViewRequired: isScrollIntoViewRequired$1,
                  index: i,
                  handleSelectedIndex: handleSelectedIndex,
                  isDisabled: isDisabled$1,
                  disabledTab: disabledTab$1,
                  textStyle: textStyle$1,
                  tabsCustomClass: tabsCustomClass$1,
                  borderBottomStyle: borderBottomStyle$1,
                  lightThemeColor: lightThemeColor$1,
                  darkThemeColor: darkThemeColor$1,
                  backgroundStyle: backgroundStyle$1,
                  tabView: tabView$1,
                  borderSelectionStyle: borderSelectionStyle$1,
                  borderDefaultStyle: borderDefaultStyle$1,
                  showBottomBorder: showBottomBorder$1,
                  onTabSelection: tab.onTabSelection,
                }),
              );
            }),
          ),
        ),
      ),
      React.createElement(UIUtils.RenderIf.make, {
        condition: !showStickyHeader$1 && showBorder$1,
        children: React.createElement("div", {
          className: "border-b border-jp-gray-500 dark:border-jp-gray-960",
        }),
      }),
      React.createElement(
        "div",
        {
          className: renderedTabClassName$1,
        },
        JsxPPXReactSupport.createElementWithKey(
          selectedIndex.toString(),
          ErrorBoundary.make,
          {
            children: tmp,
          },
        ),
      ),
    ),
  });
}

var make = Tabs;

export { TabInfo, IndicationArrow, getBoundingRectInfo, make };
/* react Not a pure module */
