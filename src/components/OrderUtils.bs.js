// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ToolTip from "./tooltip/ToolTip.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as TableUtils from "./TableUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as FormRenderer from "./form/FormRenderer.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";

function OrderUtils$Section(props) {
  var customCssClass = props.customCssClass;
  var customCssClass$1 =
    customCssClass !== undefined
      ? customCssClass
      : "border border-jp-gray-500 dark:border-jp-gray-960 bg-white dark:bg-jp-gray-950 rounded-md p-0 m-3";
  return React.createElement(
    "div",
    {
      className: customCssClass$1,
    },
    props.children,
  );
}

var Section = {
  make: OrderUtils$Section,
};

function OrderUtils$DisplayKeyValueParams(props) {
  var overiddingHeadingStyles = props.overiddingHeadingStyles;
  var textColor = props.textColor;
  var wordBreak = props.wordBreak;
  var customDateStyle = props.customDateStyle;
  var labelMargin = props.labelMargin;
  var customMoneyStyle = props.customMoneyStyle;
  var isHorizontal = props.isHorizontal;
  var isInHeader = props.isInHeader;
  var heading = props.heading;
  var showTitle = props.showTitle;
  var showTitle$1 = showTitle !== undefined ? showTitle : true;
  var isInHeader$1 = isInHeader !== undefined ? isInHeader : false;
  var isHorizontal$1 = isHorizontal !== undefined ? isHorizontal : false;
  var customMoneyStyle$1 =
    customMoneyStyle !== undefined ? customMoneyStyle : "";
  var labelMargin$1 = labelMargin !== undefined ? labelMargin : "";
  var customDateStyle$1 = customDateStyle !== undefined ? customDateStyle : "";
  var wordBreak$1 = wordBreak !== undefined ? wordBreak : true;
  var textColor$1 = textColor !== undefined ? textColor : "";
  var overiddingHeadingStyles$1 =
    overiddingHeadingStyles !== undefined ? overiddingHeadingStyles : "";
  var marginClass = LogicUtils.isEmptyString(labelMargin$1)
    ? "mt-4 py-0"
    : labelMargin$1;
  var fontClass = isInHeader$1 ? "text-fs-20" : "text-fs-13";
  var breakWords = wordBreak$1 ? "break-all" : "";
  var textColor$2 = LogicUtils.isEmptyString(textColor$1)
    ? "text-jp-gray-900 dark:text-white"
    : textColor$1;
  var description = Core__Option.getOr(heading.description, "");
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-label", heading.title]],
    children: React.createElement(
      "div",
      {
        className:
          "flex " +
          (isHorizontal$1 ? "flex-row gap-3" : "flex-col gap-1") +
          " py-4",
      },
      React.createElement(
        "div",
        {
          className:
            "flex flex-row text-fs-11 leading-3 text-jp-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50 items-center",
        },
        React.createElement(
          "div",
          {
            className: "" + overiddingHeadingStyles$1 + "",
          },
          showTitle$1 ? heading.title : "",
        ),
        React.createElement(UIUtils.RenderIf.make, {
          condition: LogicUtils.isNonEmptyString(description),
          children: React.createElement(
            "div",
            {
              className: "text-sm text-gray-500 mx-2 -mt-1",
            },
            React.createElement(ToolTip.make, {
              description: description,
              toolTipPosition: /* Top */ 0,
            }),
          ),
        }),
      ),
      React.createElement(
        "div",
        {
          className:
            "" +
            fontClass +
            " font-semibold text-left  mr-5 " +
            textColor$2 +
            " " +
            breakWords +
            "",
        },
        React.createElement(TableUtils.TableCell.make, {
          cell: props.value,
          textAlign: /* Left */ 0,
          fontBold: true,
          labelMargin: marginClass,
          customMoneyStyle: customMoneyStyle$1,
          customDateStyle: customDateStyle$1,
        }),
      ),
    ),
  });
}

var DisplayKeyValueParams = {
  make: OrderUtils$DisplayKeyValueParams,
};

function OrderUtils$Heading(props) {
  var headingCss = props.headingCss;
  var borderClass = props.borderClass;
  var children = props.children;
  var topic = props.topic;
  var borderClass$1 = borderClass !== undefined ? borderClass : "border-b";
  var headingCss$1 = headingCss !== undefined ? headingCss : "";
  var widthClass = LogicUtils.isEmptyString(headingCss$1) ? "" : "w-full";
  var tmp;
  if (topic.TAG === /* String */ 0) {
    var string = topic._0;
    tmp = React.createElement(AddDataAttributes.make, {
      attributes: [["data-heading", string]],
      children: React.createElement(
        "span",
        {
          className:
            "text-gray-600 dark:text-gray-400 font-bold text-base text-fs-16",
        },
        string,
      ),
    });
  } else {
    tmp = topic._0;
  }
  return React.createElement(
    "div",
    {
      className:
        "" +
        borderClass$1 +
        " border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 flex justify justify-between dark:bg-jp-gray-lightgray_background " +
        headingCss$1 +
        "",
    },
    React.createElement(
      "div",
      {
        className: "p-2 m-2 flex flex-row justify-start " + widthClass + "",
      },
      tmp,
    ),
    React.createElement(
      "div",
      {
        className: "p-2 m-2 flex flex-row justify-end ",
      },
      React.createElement(
        "span",
        undefined,
        children !== undefined ? Caml_option.valFromOption(children) : null,
      ),
    ),
  );
}

var Heading = {
  make: OrderUtils$Heading,
};

function OrderUtils$Details(props) {
  var flexClass = props.flexClass;
  var showTitle = props.showTitle;
  var headingCss = props.headingCss;
  var showDetails = props.showDetails;
  var cardView = props.cardView;
  var isHeadingRequired = props.isHeadingRequired;
  var borderRequired = props.borderRequired;
  var headRightElement = props.headRightElement;
  var children = props.children;
  var bgColor = props.bgColor;
  var chargeBackField = props.chargeBackField;
  var widthClass = props.widthClass;
  var justifyClassName = props.justifyClassName;
  var detailsFields = props.detailsFields;
  var excludeColKeys = props.excludeColKeys;
  var getCell = props.getCell;
  var getHeading = props.getHeading;
  var data = props.data;
  var excludeColKeys$1 = excludeColKeys !== undefined ? excludeColKeys : [];
  var justifyClassName$1 =
    justifyClassName !== undefined ? justifyClassName : "justify-start";
  var widthClass$1 = widthClass !== undefined ? widthClass : "w-3/12";
  var chargeBackField$1 =
    chargeBackField !== undefined
      ? Caml_option.valFromOption(chargeBackField)
      : undefined;
  var bgColor$1 =
    bgColor !== undefined
      ? bgColor
      : "bg-white dark:bg-jp-gray-lightgray_background";
  var headRightElement$1 =
    headRightElement !== undefined
      ? Caml_option.valFromOption(headRightElement)
      : null;
  var borderRequired$1 = borderRequired !== undefined ? borderRequired : true;
  var isHeadingRequired$1 =
    isHeadingRequired !== undefined ? isHeadingRequired : true;
  var cardView$1 = cardView !== undefined ? cardView : false;
  var showDetails$1 = showDetails !== undefined ? showDetails : true;
  var headingCss$1 = headingCss !== undefined ? headingCss : "";
  var showTitle$1 = showTitle !== undefined ? showTitle : true;
  var flexClass$1 = flexClass !== undefined ? flexClass : "flex flex-wrap";
  if (cardView$1) {
    return React.createElement(
      "div",
      {
        className:
          "flex flex-col w-full pt-4 gap-4 bg-white rounded-md dark:bg-jp-gray-lightgray_background",
      },
      detailsFields.map(function (item) {
        return React.createElement(
          "div",
          {
            className: "flex justify-between",
          },
          React.createElement(
            "div",
            {
              className:
                "text-jp-gray-900 dark:text-white opacity-50 font-medium",
            },
            Curry._1(getHeading, item).title,
          ),
          React.createElement(
            "div",
            {
              className: "font-semibold break-all",
            },
            React.createElement(TableUtils.TableCell.make, {
              cell: Curry._2(getCell, data, item),
            }),
          ),
        );
      }),
    );
  } else {
    return React.createElement(
      OrderUtils$Section,
      {
        children: null,
        customCssClass:
          "" +
          (borderRequired$1
            ? "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960"
            : "") +
          " " +
          bgColor$1 +
          " rounded-md ",
      },
      React.createElement(UIUtils.RenderIf.make, {
        condition: isHeadingRequired$1,
        children: React.createElement(OrderUtils$Heading, {
          topic: props.heading,
          children: Caml_option.some(headRightElement$1),
          headingCss: headingCss$1,
        }),
      }),
      React.createElement(UIUtils.RenderIf.make, {
        condition: showDetails$1,
        children: React.createElement(FormRenderer.DesktopRow.make, {
          children: React.createElement(
            "div",
            {
              className:
                "" +
                flexClass$1 +
                " " +
                justifyClassName$1 +
                " dark:bg-jp-gray-lightgray_background dark:border-jp-gray-no_data_border",
            },
            detailsFields.map(function (colType, i) {
              if (excludeColKeys$1.includes(colType)) {
                return null;
              } else {
                return React.createElement(
                  "div",
                  {
                    key: i.toString(),
                    className: widthClass$1,
                  },
                  React.createElement(OrderUtils$DisplayKeyValueParams, {
                    showTitle: showTitle$1,
                    heading: Curry._1(getHeading, colType),
                    value: Curry._2(getCell, data, colType),
                    customMoneyStyle: "!text-fs-13",
                    labelMargin: "!py-0 mt-2",
                    customDateStyle: "!font-fira-code",
                  }),
                  React.createElement("div", undefined),
                );
              }
            }),
            chargeBackField$1 !== undefined
              ? React.createElement(
                  "div",
                  {
                    className: "flex flex-col py-4",
                  },
                  React.createElement(
                    "div",
                    {
                      className:
                        "text-fs-11 leading-3 text-jp-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50",
                    },
                    "Chargeback Amount",
                  ),
                  React.createElement(
                    "div",
                    {
                      className:
                        "text-fs-13 font-semibold text-left dark:text-white text-jp-gray-900 break-all",
                    },
                    React.createElement(TableUtils.TableCell.make, {
                      cell: chargeBackField$1,
                      textAlign: /* Left */ 0,
                      fontBold: true,
                      labelMargin: "!py-0 mt-2 h-6",
                      customMoneyStyle: "!text-fs-13",
                      customDateStyle: "!font-fira-code",
                    }),
                  ),
                )
              : null,
          ),
        }),
      }),
      children !== undefined ? Caml_option.valFromOption(children) : null,
    );
  }
}

var Details = {
  make: OrderUtils$Details,
};

export { Section, DisplayKeyValueParams, Heading, Details };
/* react Not a pure module */
