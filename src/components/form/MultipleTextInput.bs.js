// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../Button.bs.js";
import * as TextInput from "./TextInput.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function MultipleTextInput$Tag(props) {
  var disabled = props.disabled;
  var customButtonStyle = props.customButtonStyle;
  var remove = props.remove;
  var text = props.text;
  var disabled$1 = disabled !== undefined ? disabled : false;
  var handleOnRemove = function (e) {
    e.stopPropagation();
    Curry._1(remove, text);
  };
  var buttonStyle = customButtonStyle !== undefined ? customButtonStyle : "";
  if (disabled$1) {
    return null;
  } else {
    return React.createElement(Button.make, {
      text: text,
      rightIcon: {
        TAG: /* CustomIcon */ 1,
        _0: React.createElement(Icon.make, {
          name: "close",
          size: 10,
          className: "mr-1",
          onClick: handleOnRemove,
        }),
      },
      textStyle: "text-inherit dark:text-white",
      textWeight: "font-bold",
      disableRipple: true,
      customButtonStyle: "h-8 " + buttonStyle + "",
    });
  }
}

var Tag = {
  make: MultipleTextInput$Tag,
};

function MultipleTextInput(props) {
  var customButtonStyle = props.customButtonStyle;
  var placeholder = props.placeholder;
  var seperateBySpace = props.seperateBySpace;
  var seperateByComma = props.seperateByComma;
  var disabled = props.disabled;
  var name = props.name;
  var input = props.input;
  var name$1 = name !== undefined ? name : "tag_value";
  var disabled$1 = disabled !== undefined ? disabled : false;
  var seperateByComma$1 =
    seperateByComma !== undefined ? seperateByComma : false;
  var seperateBySpace$1 =
    seperateBySpace !== undefined ? seperateBySpace : false;
  var placeholder$1 = placeholder !== undefined ? placeholder : "";
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var currentTags = React.useMemo(
    function () {
      return Belt_Array.keepMap(
        Core__Option.getOr(Core__JSON.Decode.array(input.value), []),
        Core__JSON.Decode.string,
      );
    },
    [input.value],
  );
  var match = React.useState(function () {
    return "";
  });
  var setText = match[1];
  var text = match[0];
  var customStyleClass = Core__Option.getOr(
    props.customStyle,
    "gap-2 w-full px-1 py-1",
  );
  var onTagRemove = function (text) {
    Curry._1(
      input.onChange,
      currentTags.filter(function (tag) {
        return tag !== text;
      }),
    );
  };
  var keyDownCondition = React.useMemo(function () {
    return function (param) {
      if (param.keyCode === 13) {
        param.preventDefault();
        param.stopPropagation();
      }
      return param.keyCode === 9;
    };
  }, []);
  var handleKeyDown = function (e) {
    var isEmpty = LogicUtils.isEmptyString(text);
    if (
      isEmpty &&
      (e.key === "Backspace" || e.keyCode === 8) &&
      currentTags.length > 0
    ) {
      Curry._1(setText, function (param) {
        return Core__Option.getOr(
          currentTags[(currentTags.length - 1) | 0],
          "",
        );
      });
      return Curry._1(input.onChange, currentTags.slice(0, -1));
    }
    if (text.length === 0) {
      return;
    }
    if (
      !(
        e.key === "Enter" ||
        e.keyCode === 13 ||
        e.key === "Tab" ||
        e.keyCode === 9
      )
    ) {
      return;
    }
    if (seperateByComma$1) {
      var arr = text.split(",");
      var newArr = [];
      arr.forEach(function (ele) {
        if (
          !newArr.includes(ele.trim()) &&
          !currentTags.includes(ele.trim()) &&
          LogicUtils.isNonEmptyString(ele.trim())
        ) {
          newArr.push(ele.trim());
          return;
        }
      });
      Curry._1(input.onChange, currentTags.concat(newArr));
    } else if (seperateBySpace$1) {
      var arr$1 = text.split(" ");
      var newArr$1 = [];
      arr$1.forEach(function (ele) {
        if (
          !newArr$1.includes(ele.trim()) &&
          !currentTags.includes(ele.trim()) &&
          LogicUtils.isNonEmptyString(ele.trim())
        ) {
          newArr$1.push(ele.trim());
          return;
        }
      });
      Curry._1(input.onChange, currentTags.concat(newArr$1));
    } else if (!currentTags.includes(text.trim())) {
      Curry._1(input.onChange, currentTags.concat([text.trim()]));
    }
    Curry._1(setText, function (param) {
      return "";
    });
  };
  var input1_onBlur = function (_ev) {};
  var input1_onChange = function (ev) {
    var value = ev.target.value;
    if (value.includes("<script>") || value.includes("</script>")) {
      Curry._1(showPopUp, {
        heading: "Script Tags are not allowed",
        description: "Input cannot contain <script>, </script> tags",
        popUpType: [/* Warning */ 4, /* WithIcon */ 0],
        handleConfirm: {
          text: "OK",
        },
      });
    }
    var val = value.replace("<script>", "").replace("</script>", "");
    Curry._1(setText, function (param) {
      return val;
    });
  };
  var input1_onFocus = function (_ev) {};
  var input1 = {
    name: name$1,
    onBlur: input1_onBlur,
    onChange: input1_onChange,
    onFocus: input1_onFocus,
    value: text,
    checked: false,
  };
  var className =
    "flex flex-wrap items-center  " +
    customStyleClass +
    " bg-transparent\n                  text-jp-gray-900 text-opacity-75 dark:text-jp-gray-text_darktheme dark:text-opacity-75 text-sm font-semibold \n                  placeholder-jp-gray-900 placeholder-opacity-25 dark:placeholder-jp-gray-text_darktheme dark:placeholder-opacity-25\n                  border rounded border-opacity-75 border-jp-gray-lightmode_steelgray hover:border-jp-gray-600 dark:border-jp-gray-960 dark:hover:border-jp-gray-900";
  return React.createElement(
    "div",
    {
      className: className,
    },
    currentTags.map(function (tag) {
      if (
        LogicUtils.isNonEmptyString(tag) &&
        tag !== "<script>" &&
        tag !== "</script>"
      ) {
        return JsxPPXReactSupport.createElementWithKey(
          tag,
          MultipleTextInput$Tag,
          {
            text: tag,
            remove: onTagRemove,
            customButtonStyle: customButtonStyle,
            disabled: disabled$1,
          },
        );
      } else {
        return null;
      }
    }),
    React.createElement(TextInput.make, {
      focusOnKeyPress: keyDownCondition,
      input: input1,
      placeholder: placeholder$1,
      isDisabled: disabled$1,
      autoComplete: props.autoComplete,
      onKeyUp: handleKeyDown,
      customStyle: "dark:bg-jp-gray-970 border-none",
    }),
  );
}

var make = MultipleTextInput;

export { Tag, make };
/* Icon Not a pure module */
