// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as MatchMedia from "../../context/MatchMedia.bs.js";
import * as CheckBoxIcon from "../custom-icons/CheckBoxIcon.bs.js";
import * as AddDataAttributes from "../AddDataAttributes.bs.js";

function BoolInput$BaseComponent(props) {
  var addAttributeId = props.addAttributeId;
  var boolCustomClass = props.boolCustomClass;
  var isDisabled = props.isDisabled;
  var setIsSelected = props.setIsSelected;
  var isSelected = props.isSelected;
  var isDisabled$1 = isDisabled !== undefined ? isDisabled : false;
  var boolCustomClass$1 = boolCustomClass !== undefined ? boolCustomClass : "";
  var addAttributeId$1 = addAttributeId !== undefined ? addAttributeId : "";
  var toggleSelect = React.useCallback(
    function (_ev) {
      if (!isDisabled$1) {
        return Curry._1(setIsSelected, !isSelected);
      }
    },
    [isDisabled$1, isSelected, setIsSelected],
  );
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var boolCustomClass$2 = LogicUtils.isEmptyString(boolCustomClass$1)
    ? isMobileView
      ? ""
      : "mx-4"
    : boolCustomClass$1;
  var selectedClass =
    "" + boolCustomClass$2 + " bg-green-950  border dark:bg-green-950";
  var borderSelectedClass = "border border-green-950";
  var defaultInputClass =
    "" +
    boolCustomClass$2 +
    " bg-gradient-to-t from-jp-gray-200 to-jp-gray-250 dark:from-jp-gray-darkgray_background dark:to-jp-gray-darkgray_background";
  var backgroundClass = isSelected ? selectedClass : defaultInputClass;
  var borderClass =
    isSelected && !isDisabled$1
      ? borderSelectedClass
      : "border border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960";
  var transformValue = isSelected ? "translateX(14px)" : "translateX(0px)";
  var cursorClass = isDisabled$1 ? "cursor-not-allowed" : "cursor-pointer";
  var circleColor = isSelected
    ? "bg-white"
    : isDisabled$1
      ? "bg-jp-gray-900 bg-opacity-50 dark:bg-jp-gray-900 dark:bg-opacity-40"
      : "bg-jp-gray-900 bg-opacity-50 dark:bg-white dark:bg-opacity-100";
  var toggleWidth = "30px";
  var innerCircleHeight = "12px";
  return React.createElement(AddDataAttributes.make, {
    attributes: [
      ["data-bool-value", isSelected ? "on" : "off"],
      ["data-bool-for", addAttributeId$1],
    ],
    children: React.createElement(
      "div",
      {
        className:
          "flex items-center transition rounded-2.5 " +
          backgroundClass +
          " " +
          borderClass +
          " " +
          cursorClass +
          " ",
        style: {
          height: "16px",
          minWidth: toggleWidth,
          width: toggleWidth,
        },
        onClick: toggleSelect,
      },
      React.createElement("div", {
        className: "m-0.25 transition rounded-full " + circleColor + " ",
        style: {
          height: innerCircleHeight,
          width: innerCircleHeight,
          transform: transformValue,
        },
      }),
    ),
  });
}

var BaseComponent = {
  make: BoolInput$BaseComponent,
};

function BoolInput(props) {
  var addAttributeId = props.addAttributeId;
  var boolCustomClass = props.boolCustomClass;
  var isCheckBox = props.isCheckBox;
  var isDisabled = props.isDisabled;
  var baseInput = props.input;
  var isDisabled$1 = isDisabled !== undefined ? isDisabled : false;
  var isCheckBox$1 = isCheckBox !== undefined ? isCheckBox : false;
  var boolCustomClass$1 = boolCustomClass !== undefined ? boolCustomClass : "";
  var addAttributeId$1 = addAttributeId !== undefined ? addAttributeId : "";
  var boolValue = baseInput.value;
  var str = Core__JSON.Classify.classify(boolValue);
  var isSelected;
  if (typeof str === "number") {
    isSelected = false;
  } else {
    switch (str.TAG | 0) {
      case /* Bool */ 0:
        isSelected = str._0 ? true : false;
        break;
      case /* String */ 1:
        isSelected = str._0 === "true";
        break;
      default:
        isSelected = false;
    }
  }
  var setIsSelected = baseInput.onChange;
  if (isCheckBox$1) {
    return React.createElement(CheckBoxIcon.make, {
      isSelected: isSelected,
      isDisabled: isDisabled$1,
      setIsSelected: setIsSelected,
    });
  } else {
    return React.createElement(BoolInput$BaseComponent, {
      isSelected: isSelected,
      setIsSelected: setIsSelected,
      isDisabled: isDisabled$1,
      boolCustomClass: boolCustomClass$1,
      addAttributeId: addAttributeId$1,
    });
  }
}

var make = BoolInput;

export { BaseComponent, make };
/* react Not a pure module */
