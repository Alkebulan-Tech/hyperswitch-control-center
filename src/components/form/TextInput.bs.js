// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ToolTip from "../tooltip/ToolTip.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../../utils/LogicUtils.bs.js";
import * as PopUpState from "../../hooks/PopUpState.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as ConfigContext from "../../context/ConfigContext.bs.js";
import * as ReactFinalForm from "react-final-form";
import * as AddDataAttributes from "../AddDataAttributes.bs.js";
import * as ButtonGroupContext from "../../context/ButtonGroupContext.bs.js";

function TextInput(props) {
  var removeValidationCheck = props.removeValidationCheck;
  var phoneInput = props.phoneInput;
  var customDarkBackground = props.customDarkBackground;
  var onActiveStyle = props.onActiveStyle;
  var onDisabledStyle = props.onDisabledStyle;
  var onHoverCss = props.onHoverCss;
  var leftIconCustomStyle = props.leftIconCustomStyle;
  var rightIconCustomStyle = props.rightIconCustomStyle;
  var widthMatchwithPlaceholderLength = props.widthMatchwithPlaceholderLength;
  var customPaddingClass = props.customPaddingClass;
  var iconOpacity = props.iconOpacity;
  var readOnly = props.readOnly;
  var customWidth = props.customWidth;
  var customStyle = props.customStyle;
  var onKeyUp = props.onKeyUp;
  var inputStyle = props.inputStyle;
  var rightIconOnClick = props.rightIconOnClick;
  var rightIcon = props.rightIcon;
  var leftIcon = props.leftIcon;
  var autoFocus = props.autoFocus;
  var maxLength = props.maxLength;
  var max = props.max;
  var min = props.min;
  var shouldSubmitForm = props.shouldSubmitForm;
  var autoComplete = props.autoComplete;
  var pattern = props.pattern;
  var inputMode = props.inputMode;
  var type_ = props.type_;
  var isDisabled = props.isDisabled;
  var description = props.description;
  var placeholder = props.placeholder;
  var input = props.input;
  var focusOnKeyPress = props.focusOnKeyPress;
  var description$1 = description !== undefined ? description : "";
  var isDisabled$1 = isDisabled !== undefined ? isDisabled : false;
  var type_$1 = type_ !== undefined ? type_ : "text";
  var inputMode$1 = inputMode !== undefined ? inputMode : "text";
  var shouldSubmitForm$1 =
    shouldSubmitForm !== undefined ? shouldSubmitForm : true;
  var autoFocus$1 = autoFocus !== undefined ? autoFocus : false;
  var inputStyle$1 = inputStyle !== undefined ? inputStyle : "";
  var customStyle$1 = customStyle !== undefined ? customStyle : "";
  var customWidth$1 = customWidth !== undefined ? customWidth : "w-full";
  var iconOpacity$1 = iconOpacity !== undefined ? iconOpacity : "opacity-30";
  var customPaddingClass$1 =
    customPaddingClass !== undefined ? customPaddingClass : "";
  var widthMatchwithPlaceholderLength$1 =
    widthMatchwithPlaceholderLength !== undefined
      ? Caml_option.valFromOption(widthMatchwithPlaceholderLength)
      : undefined;
  var rightIconCustomStyle$1 =
    rightIconCustomStyle !== undefined ? rightIconCustomStyle : "";
  var leftIconCustomStyle$1 =
    leftIconCustomStyle !== undefined ? leftIconCustomStyle : "";
  var onHoverCss$1 = onHoverCss !== undefined ? onHoverCss : "";
  var onDisabledStyle$1 = onDisabledStyle !== undefined ? onDisabledStyle : "";
  var onActiveStyle$1 = onActiveStyle !== undefined ? onActiveStyle : "";
  var customDarkBackground$1 =
    customDarkBackground !== undefined
      ? customDarkBackground
      : "dark:bg-jp-gray-darkgray_background";
  var phoneInput$1 = phoneInput !== undefined ? phoneInput : false;
  var removeValidationCheck$1 =
    removeValidationCheck !== undefined ? removeValidationCheck : false;
  var match = React.useContext(ConfigContext.configContext);
  var match$1 = match.globalUIConfig;
  var borderColor = match$1.border.borderColor;
  var showPopUp = PopUpState.useShowPopUp(undefined);
  var isInValid;
  try {
    var match$2 = ReactFinalForm.useField(input.name);
    if (removeValidationCheck$1) {
      isInValid = false;
    } else {
      var meta = match$2.meta;
      isInValid =
        !meta.valid && meta.touched
          ? (!(meta.submitError == null) && !meta.dirtySinceLastSubmit) ||
            !(meta.error == null)
          : false;
    }
  } catch (exn) {
    isInValid = false;
  }
  var match$3 = React.useContext(ButtonGroupContext.buttonGroupContext);
  var isLast = match$3.isLast;
  var isFirst = match$3.isFirst;
  var match$4 = React.useState(function () {
    return false;
  });
  var setShowPassword = match$4[1];
  var showPassword = match$4[0];
  var inputRef = React.useRef(null);
  React.useEffect(
    function () {
      if (widthMatchwithPlaceholderLength$1 !== undefined) {
        var elem = inputRef.current;
        if (!(elem == null)) {
          var size = Core__Option.mapOr(
            Caml_option.nullable_to_opt(elem.getAttribute("placeholder")),
            widthMatchwithPlaceholderLength$1,
            function (str) {
              return Math.max(widthMatchwithPlaceholderLength$1, str.length);
            },
          ).toString();
          elem.setAttribute("size", size);
        }
      }
    },
    [inputRef.current, input.name],
  );
  React.useEffect(
    function () {
      var val = Core__Option.getOr(Core__JSON.Decode.string(input.value), "");
      if (val.includes("<script>") || val.includes("</script>")) {
        Curry._1(showPopUp, {
          heading: "Script Tags are not allowed",
          description: "Input cannot contain <script>, </script> tags",
          popUpType: [/* Warning */ 4, /* WithIcon */ 0],
          handleConfirm: {
            text: "OK",
          },
        });
        Curry._1(
          input.onChange,
          val.replace("<script>", "").replace("</script>", ""),
        );
      }
    },
    [input.value],
  );
  React.useEffect(
    function () {
      if (focusOnKeyPress === undefined) {
        return;
      }
      var keyDownFn = function (ev) {
        if (!Curry._1(focusOnKeyPress, ev)) {
          return;
        }
        ev.preventDefault();
        var elem = inputRef.current;
        if (!(elem == null)) {
          elem.focus();
          return;
        }
      };
      window.addEventListener("keydown", keyDownFn);
      return function (param) {
        window.removeEventListener("keydown", keyDownFn);
      };
    },
    [focusOnKeyPress],
  );
  var cursorClass = isDisabled$1 ? "cursor-not-allowed" : "";
  var roundingClass =
    isFirst && isLast
      ? "rounded"
      : isFirst
        ? "rounded-l"
        : isLast
          ? "rounded-r"
          : "";
  var borderClass = isInValid
    ? "border-red-500 focus:border-red-500  dark:border-red-500 dark:hover:border-red-500 dark:focus:border-red-500 focus:shadow-text_input_shadow focus:shadow-red-500"
    : "border-jp-gray-lightmode_steelgray " +
      borderColor.primaryFocused +
      " dark:border-jp-gray-960 dark:hover:border-jp-gray-960 dark:" +
      borderColor.primaryFocused +
      " focus:shadow-text_input_shadow " +
      match$1.shadow.shadowColor.primaryFocused +
      "";
  var dashboardClass = Core__Option.getOr(
    props.customDashboardClass,
    "h-10 text-sm font-normal",
  );
  var rightPaddingClass =
    LogicUtils.isNonEmptyString(description$1) ||
    isInValid ||
    rightIcon !== undefined
      ? "pr-10"
      : "pr-2";
  var leftPaddingClass = leftIcon !== undefined ? "pl-10" : "pl-2";
  var textAndBgClass =
    "" +
    customDarkBackground$1 +
    " text-jp-gray-900 text-opacity-75 focus:text-opacity-100 dark:text-jp-gray-text_darktheme dark:text-opacity-75 dark:placeholder-jp-gray-text_darktheme dark:placeholder-opacity-25 dark:focus:text-opacity-100";
  var width = Core__Option.isSome(widthMatchwithPlaceholderLength$1)
    ? ""
    : customWidth$1;
  var textPaddingClass =
    type_$1 !== "range" && LogicUtils.isEmptyString(customPaddingClass$1)
      ? "" + rightPaddingClass + " " + leftPaddingClass + " "
      : customPaddingClass$1;
  var hoverCss = LogicUtils.isEmptyString(onHoverCss$1)
    ? "hover:bg-jp-gray-lightmode_steelgray hover:bg-opacity-20 hover:border-opacity-20 dark:hover:bg-jp-gray-970"
    : onHoverCss$1;
  var className =
    "" +
    width +
    " border border-opacity-75 " +
    textPaddingClass +
    " " +
    textAndBgClass +
    " placeholder-jp-gray-900 placeholder-opacity-25 focus:outline-none\n      focus:border-opacity-100 " +
    hoverCss +
    " " +
    roundingClass +
    " " +
    cursorClass +
    " " +
    dashboardClass +
    " " +
    inputStyle$1 +
    " " +
    borderClass +
    " " +
    customStyle$1 +
    "  " +
    (isDisabled$1 ? onDisabledStyle$1 : onActiveStyle$1) +
    "";
  var str = Core__JSON.Classify.classify(input.value);
  var value;
  if (typeof str === "number") {
    value = "";
  } else {
    switch (str.TAG | 0) {
      case /* String */ 1:
        value = str._0;
        break;
      case /* Number */ 2:
        value = str._0.toString();
        break;
      default:
        value = "";
    }
  }
  var passwordVisiblity = function (param) {
    Curry._1(setShowPassword, function (prev) {
      return !prev;
    });
  };
  var leftIconClass =
    "absolute self-center p-3 " +
    iconOpacity$1 +
    " " +
    leftIconCustomStyle$1 +
    "";
  var leftIconElement =
    leftIcon !== undefined
      ? React.createElement(
          "div",
          {
            className: leftIconClass,
            id: "leftIcon",
          },
          Caml_option.valFromOption(leftIcon),
        )
      : null;
  var rightIconCursorClass =
    rightIconOnClick !== undefined ? "cursor-pointer" : "";
  var rightIconStyle = LogicUtils.isEmptyString(rightIconCustomStyle$1)
    ? "-ml-10 " + rightIconCursorClass + ""
    : rightIconCustomStyle$1;
  var rightIconClick = function (ev) {
    if (rightIconOnClick !== undefined) {
      return Curry._1(rightIconOnClick, ev);
    }
  };
  var rightIconElement =
    rightIcon !== undefined
      ? React.createElement(
          "div",
          {
            className: "" + rightIconStyle + "",
            id: "rightIcon",
            onClick: rightIconClick,
          },
          Caml_option.valFromOption(rightIcon),
        )
      : null;
  var inputName = autoComplete === "off" ? undefined : input.name;
  var form = shouldSubmitForm$1 ? undefined : "fakeForm";
  var className$1;
  if (Caml_obj.notequal(rightIconElement, null)) {
    className$1 = "" + className + " pr-10";
  } else if (Caml_obj.notequal(leftIconElement, null)) {
    var padding = phoneInput$1 ? "pl-20" : "pl-10";
    className$1 = "" + className + " " + padding + "";
  } else {
    className$1 = className;
  }
  var eyeIcon = showPassword ? "eye" : "eye-slash";
  if (type_$1 === "password" || type_$1 === "password_without_icon") {
    return React.createElement(AddDataAttributes.make, {
      attributes: [
        ["data-id-password", input.name],
        ["data-input-name", input.name],
        ["data-testid", input.name],
      ],
      children: React.createElement(
        "div",
        {
          className: "flex flex-row items-center relative",
        },
        leftIconElement,
        React.createElement("input", {
          ref: Caml_option.some(inputRef),
          className: "" + className$1 + " pr-10",
          autoComplete: autoComplete,
          disabled: isDisabled$1,
          form: form,
          inputMode: inputMode$1,
          max: max,
          maxLength: maxLength,
          min: min,
          name: inputName,
          pattern: pattern,
          placeholder: placeholder,
          readOnly: readOnly,
          type: showPassword ? "text" : "password",
          value: value,
          onKeyUp: onKeyUp,
          onFocus: input.onFocus,
          onBlur: input.onBlur,
          onChange: input.onChange,
        }),
        type_$1 !== "password_without_icon"
          ? React.createElement(
              "div",
              {
                className: "cursor-pointer select-none -ml-8",
                onClick: passwordVisiblity,
              },
              React.createElement(Icon.make, {
                name: eyeIcon,
                size: 15,
                className: "fill-jp-gray-700",
              }),
            )
          : null,
      ),
    });
  } else {
    return React.createElement(AddDataAttributes.make, {
      attributes: [
        ["data-id", placeholder],
        ["data-input-name", input.name],
        ["data-testid", input.name],
      ],
      children: React.createElement(
        "div",
        {
          className: "flex flex-row relative items-center grow",
        },
        leftIconElement,
        React.createElement("input", {
          ref: Caml_option.some(inputRef),
          className: className$1,
          autoComplete: autoComplete,
          autoFocus: autoFocus$1,
          disabled: isDisabled$1,
          form: form,
          inputMode: inputMode$1,
          max: max,
          maxLength: maxLength,
          min: min,
          name: inputName,
          pattern: pattern,
          placeholder: placeholder,
          readOnly: readOnly,
          type: type_$1,
          value: value,
          onKeyUp: onKeyUp,
          onFocus: input.onFocus,
          onBlur: input.onBlur,
          onChange: input.onChange,
        }),
        LogicUtils.isNonEmptyString(description$1)
          ? React.createElement(ToolTip.make, {
              description: description$1,
              toolTipFor: Caml_option.some(
                React.createElement(
                  "div",
                  {
                    className: "cursor-pointer select-none -ml-8",
                  },
                  React.createElement(Icon.make, {
                    name: "new-question-circle",
                    size: 16,
                    className: "stroke-jp-2-light-gray-1000",
                  }),
                ),
              ),
              toolTipPosition: /* Right */ 3,
              height: "h-min",
            })
          : rightIconElement,
      ),
    });
  }
}

var make = TextInput;

export { make };
/* Icon Not a pure module */
