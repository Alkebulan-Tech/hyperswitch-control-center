// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import Dayjs from "dayjs";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as UIUtils from "../utils/UIUtils.bs.js";
import * as AuthHooks from "../hooks/AuthHooks.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.js";
import * as FilterContext from "../context/FilterContext.bs.js";
import * as AnalyticsUtils from "../entities/analytics/AnalyticsUtils.bs.js";
import * as LineChartUtils from "./CustomCharts/LineChartUtils.bs.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as EulerAnalyticsLogUtils from "../entities/analytics/EulerAnalyticsLogUtils.bs.js";
import * as HSwitchSingleStatWidget from "./HSwitchSingleStatWidget.bs.js";

function singleStatBodyMake(singleStatBodyEntity) {
  return JSON.stringify([
    AnalyticsUtils.getFilterRequestBody(
      Caml_option.some(singleStatBodyEntity.granularity),
      undefined,
      Caml_option.some(singleStatBodyEntity.filter),
      Caml_option.some(singleStatBodyEntity.metrics),
      singleStatBodyEntity.delta,
      Caml_option.some(singleStatBodyEntity.prefix),
      undefined,
      singleStatBodyEntity.startDateTime,
      singleStatBodyEntity.endDateTime,
      undefined,
      Caml_option.some(singleStatBodyEntity.mode),
      singleStatBodyEntity.customFilter,
      singleStatBodyEntity.source,
      undefined,
    ),
  ]);
}

function deltaTimeRangeMapper(arrJson) {
  var emptyDict = {};
  arrJson.map(function (item) {
    var dict = LogicUtils.getDictFromJsonObject(item);
    var deltaTimeRange = LogicUtils.getDictFromJsonObject(
      LogicUtils.getJsonObjectFromDict(dict, "deltaTimeRange"),
    );
    var fromTime = LogicUtils.getString(deltaTimeRange, "startTime", "");
    var toTime = LogicUtils.getString(deltaTimeRange, "endTime", "");
    var timeRanges = {
      fromTime: fromTime,
      toTime: toTime,
    };
    if (Object.entries(deltaTimeRange).length > 0) {
      emptyDict["currentSr"] = timeRanges;
      return;
    }
  });
  return {
    currentSr: Core__Option.getOr(emptyDict["currentSr"], {
      fromTime: "",
      toTime: "",
    }),
  };
}

function DynamicSingleStat(props) {
  var statThreshold = props.statThreshold;
  var statSentiment = props.statSentiment;
  var filterNullVals = props.filterNullVals;
  var defaultEndDate = props.defaultEndDate;
  var defaultStartDate = props.defaultStartDate;
  var isHomePage = props.isHomePage;
  var chartAlignment = props.chartAlignment;
  var setTotalVolume = props.setTotalVolume;
  var moduleName = props.moduleName;
  var endTimeFilterKey = props.endTimeFilterKey;
  var startTimeFilterKey = props.startTimeFilterKey;
  var filterKeys = props.filterKeys;
  var modeKey = props.modeKey;
  var entity = props.entity;
  var moduleName$1 = moduleName !== undefined ? moduleName : "";
  var chartAlignment$1 =
    chartAlignment !== undefined ? chartAlignment : "column";
  var isHomePage$1 = isHomePage !== undefined ? isHomePage : false;
  var defaultStartDate$1 =
    defaultStartDate !== undefined ? defaultStartDate : "";
  var defaultEndDate$1 = defaultEndDate !== undefined ? defaultEndDate : "";
  var filterNullVals$1 = filterNullVals !== undefined ? filterNullVals : false;
  var match = React.useContext(FilterContext.filterContext);
  var filterValueJson = match.filterValueJson;
  var fetchApi = AuthHooks.useApiFetcher(undefined);
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var match$1 = React.useState(function () {
    return false;
  });
  var setShowStats = match$1[1];
  var showStats = match$1[0];
  var getTopLevelFilter = React.useMemo(
    function () {
      return Object.fromEntries(
        Belt_Array.keepMap(Object.entries(filterValueJson), function (item) {
          var keyArr = item[0].split(".");
          var prefix = Core__Option.getOr(keyArr[0], "");
          if (prefix === moduleName$1 && LogicUtils.isNonEmptyString(prefix)) {
            return;
          } else {
            return [prefix, item[1]];
          }
        }),
      );
    },
    [filterValueJson],
  );
  var mode =
    modeKey !== undefined
      ? LogicUtils.getString(getTopLevelFilter, modeKey, "")
      : "ORDER";
  var source = entity.source;
  var source$1 = source !== undefined ? source : "BATCH";
  var enableLoaders = Core__Option.getOr(entity.enableLoaders, true);
  var customFilterKey = entity.customFilterKey;
  var customFilterKey$1 = customFilterKey !== undefined ? customFilterKey : "";
  var allFilterKeys = [
    startTimeFilterKey,
    endTimeFilterKey,
    Core__Option.getOr(mode, ""),
  ].concat(filterKeys);
  var deltaItemToObjMapper = function (json) {
    return deltaTimeRangeMapper(
      LogicUtils.getArrayFromDict(
        LogicUtils.getDictFromJsonObject(json),
        "metaData",
        [],
      ),
    );
  };
  var match$2 = React.useMemo(
    function () {
      var filterSearchParam = Belt_Array.keepMap(
        Object.entries(getTopLevelFilter),
        function (entry) {
          var key = entry[0];
          if (!allFilterKeys.includes(key)) {
            return;
          }
          var str = Core__JSON.Classify.classify(entry[1]);
          if (typeof str === "number") {
            return;
          }
          switch (str.TAG | 0) {
            case /* String */ 1:
              return "" + key + "=" + str._0 + "";
            case /* Number */ 2:
              return "" + key + "=" + String(str._0) + "";
            case /* Array */ 4:
              return "" + key + "=[" + String(str._0) + "]";
            default:
              return;
          }
        },
      ).join("&");
      return [
        filterSearchParam,
        LogicUtils.getString(getTopLevelFilter, customFilterKey$1, ""),
      ];
    },
    [getTopLevelFilter],
  );
  var customFilter = match$2[1];
  var topFiltersToSearchParam = match$2[0];
  var filterValueFromUrl = React.useMemo(
    function () {
      return Caml_option.some(
        LogicUtils.getJsonFromArrayOfJson(
          Belt_Array.keepMap(
            Object.entries(getTopLevelFilter),
            function (entries) {
              var key = entries[0];
              if (filterKeys.includes(key)) {
                return [key, entries[1]];
              }
            },
          ),
        ),
      );
    },
    [topFiltersToSearchParam],
  );
  var startTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(
        getTopLevelFilter,
        startTimeFilterKey,
        defaultStartDate$1,
      );
    },
    [topFiltersToSearchParam],
  );
  var endTimeFromUrl = React.useMemo(
    function () {
      return LogicUtils.getString(
        getTopLevelFilter,
        endTimeFilterKey,
        defaultEndDate$1,
      );
    },
    [topFiltersToSearchParam],
  );
  var homePageCss =
    isHomePage$1 || chartAlignment$1 === "row" ? "flex-col" : "flex-row";
  var wrapperClass = Core__Option.getOr(
    props.wrapperClass,
    "flex mt-5 flex-col md:" +
      homePageCss +
      " flex-wrap justify-start items-stretch relative",
  );
  var match$3 = React.useState(function () {});
  var setSingleStatData = match$3[1];
  var singleStatData = match$3[0];
  var match$4 = React.useState(function () {
    return /* Shimmer */ 1;
  });
  var setShimmerType = match$4[1];
  var shimmerType = match$4[0];
  var match$5 = React.useState(function () {});
  var setSingleStatTimeData = match$5[1];
  var singleStatTimeData = match$5[0];
  var match$6 = React.useState(function () {
    return true;
  });
  var setSingleStatLoading = match$6[1];
  var singleStatLoading = match$6[0];
  var match$7 = React.useState(function () {
    return true;
  });
  var setSingleStatLoadingTimeSeries = match$7[1];
  var singleStatLoadingTimeSeries = match$7[0];
  var match$8 = React.useState(function () {
    return {
      singleStatData: singleStatData,
      singleStatTimeData: singleStatTimeData,
    };
  });
  var setSingleStatCombinedData = match$8[1];
  var singlestatDataCombined = match$8[0];
  React.useEffect(
    function () {
      if (!(singleStatLoading || singleStatLoadingTimeSeries)) {
        Curry._1(setSingleStatCombinedData, function (param) {
          return {
            singleStatData: singleStatData,
            singleStatTimeData: singleStatTimeData,
          };
        });
      }
    },
    [
      singleStatLoadingTimeSeries,
      singleStatLoading,
      singleStatTimeData,
      singleStatData,
    ],
  );
  var addLogsAroundFetch =
    EulerAnalyticsLogUtils.useAddLogsAroundFetch(undefined);
  React.useEffect(
    function () {
      if (singleStatData !== undefined && singleStatTimeData !== undefined) {
        Curry._1(setShimmerType, function (param) {
          return /* SideLoader */ 0;
        });
      }
    },
    [singleStatData, singleStatTimeData],
  );
  React.useEffect(
    function () {
      if (
        LogicUtils.isNonEmptyString(startTimeFromUrl) &&
        LogicUtils.isNonEmptyString(endTimeFromUrl)
      ) {
        Curry._1(setSingleStatLoading, function (param) {
          return enableLoaders;
        });
        Promise.all(
          entity.urlConfig.map(function (urlConfig) {
            var uri = urlConfig.uri;
            var domain = Core__Option.getOr("/".split(uri)[4], "");
            var startTime =
              domain === "mandate"
                ? Dayjs(endTimeFromUrl)
                    .subtract(1, "hour")
                    .toDate()
                    .toISOString()
                : startTimeFromUrl;
            var getDelta = domain !== "mandate";
            var singleStatBodyEntity_metrics = urlConfig.metrics;
            var singleStatBodyEntity_delta = getDelta;
            var singleStatBodyEntity_customFilter = customFilter;
            var singleStatBodyEntity_source = source$1;
            var singleStatBodyEntity_prefix = urlConfig.prefix;
            var singleStatBodyEntity = {
              filter: filterValueFromUrl,
              metrics: singleStatBodyEntity_metrics,
              delta: singleStatBodyEntity_delta,
              startDateTime: startTime,
              endDateTime: endTimeFromUrl,
              mode: mode,
              customFilter: singleStatBodyEntity_customFilter,
              source: singleStatBodyEntity_source,
              prefix: singleStatBodyEntity_prefix,
            };
            var singleStatBodyMakerFn = Core__Option.getOr(
              urlConfig.singleStatBody,
              singleStatBodyMake,
            );
            var singleStatBody = Curry._1(
              singleStatBodyMakerFn,
              singleStatBodyEntity,
            );
            return Core__Promise.$$catch(
              Curry._3(
                addLogsAroundFetch,
                undefined,
                "SingleStat Data Api",
                Curry._8(
                  fetchApi,
                  uri,
                  singleStatBody,
                  undefined,
                  Caml_option.some(
                    Object.fromEntries([["QueryType", "SingleStat"]]),
                  ),
                  /* Post */ 2,
                  undefined,
                  undefined,
                  undefined,
                ),
              ).then(function (json) {
                return Promise.resolve([
                  "" + Core__Option.getOr(urlConfig.prefix, "") + "" + uri + "",
                  json,
                ]);
              }),
              function (_err) {
                return Promise.resolve(["", {}]);
              },
            );
          }),
        ).then(function (dataArr) {
          var data = dataArr.map(function (item) {
            var json = item[1];
            var val = entity.totalVolumeCol;
            if (val !== undefined) {
              var totalVolumeKeyVal = Object.entries(
                LogicUtils.getDictFromJsonObject(
                  Core__Option.getOr(
                    LogicUtils.getArrayFromJson(
                      LogicUtils.getJsonObjectFromDict(
                        LogicUtils.getDictFromJsonObject(json),
                        "queryData",
                      ),
                      [],
                    )[0],
                    {},
                  ),
                ),
              ).find(function (item) {
                return item[0] === val;
              });
              if (totalVolumeKeyVal !== undefined) {
                var value = totalVolumeKeyVal[1];
                Curry._1(setTotalVolume, function (param) {
                  return (
                    Core__Option.getOr(Core__JSON.Decode.$$float(value), 0) | 0
                  );
                });
              }
            }
            var data = Curry._1(entity.getObjects, json);
            var deltaTime = deltaItemToObjMapper(json);
            return {
              sectionUrl: item[0],
              singleStatData: data,
              deltaTime: deltaTime,
            };
          });
          Curry._1(setSingleStatData, function (param) {
            return data;
          });
          Curry._1(setSingleStatLoading, function (param) {
            return false;
          });
        });
      }
    },
    [endTimeFromUrl, startTimeFromUrl, filterValueFromUrl, customFilter, mode],
  );
  React.useEffect(
    function () {
      if (
        LogicUtils.isNonEmptyString(startTimeFromUrl) &&
        LogicUtils.isNonEmptyString(endTimeFromUrl)
      ) {
        Curry._1(setSingleStatLoadingTimeSeries, function (param) {
          return enableLoaders;
        });
        Promise.all(
          entity.urlConfig.map(function (urlConfig) {
            var uri = urlConfig.uri;
            var domain = Core__Option.getOr("/".split(uri)[4], "");
            var startTime =
              domain === "mandate"
                ? Dayjs(endTimeFromUrl)
                    .subtract(1, "hour")
                    .toDate()
                    .toISOString()
                : startTimeFromUrl;
            var granularity = LineChartUtils.getGranularity(
              startTime,
              endTimeFromUrl,
            );
            var singleStatBodyEntity_metrics = urlConfig.metrics;
            var singleStatBodyEntity_delta = false;
            var singleStatBodyEntity_granularity = granularity[0];
            var singleStatBodyEntity_customFilter = customFilter;
            var singleStatBodyEntity_source = source$1;
            var singleStatBodyEntity_prefix = urlConfig.prefix;
            var singleStatBodyEntity = {
              filter: filterValueFromUrl,
              metrics: singleStatBodyEntity_metrics,
              delta: singleStatBodyEntity_delta,
              startDateTime: startTime,
              endDateTime: endTimeFromUrl,
              granularity: singleStatBodyEntity_granularity,
              mode: mode,
              customFilter: singleStatBodyEntity_customFilter,
              source: singleStatBodyEntity_source,
              prefix: singleStatBodyEntity_prefix,
            };
            var singleStatBodyMakerFn = Core__Option.getOr(
              urlConfig.singleStatTimeSeriesBody,
              singleStatBodyMake,
            );
            return Core__Promise.$$catch(
              Curry._3(
                addLogsAroundFetch,
                undefined,
                "SingleStatTimeseries Data Api",
                Curry._8(
                  fetchApi,
                  uri,
                  Curry._1(singleStatBodyMakerFn, singleStatBodyEntity),
                  undefined,
                  Caml_option.some(
                    Object.fromEntries([["QueryType", "SingleStatTimeseries"]]),
                  ),
                  /* Post */ 2,
                  undefined,
                  undefined,
                  undefined,
                ),
              ).then(function (json) {
                return Promise.resolve([
                  "" + Core__Option.getOr(urlConfig.prefix, "") + "" + uri + "",
                  json,
                ]);
              }),
              function (_err) {
                return Promise.resolve(["", {}]);
              },
            );
          }),
        ).then(function (timeSeriesArr) {
          var data = timeSeriesArr.map(function (item) {
            return [item[0], Curry._1(entity.getTimeSeriesObject, item[1])];
          });
          Curry._1(setSingleStatTimeData, function (param) {
            return data;
          });
          Curry._1(setSingleStatLoadingTimeSeries, function (param) {
            return false;
          });
        });
      }
    },
    [endTimeFromUrl, startTimeFromUrl, filterValueFromUrl, customFilter, mode],
  );
  return entity.defaultColumns.map(function (urlConfig, index) {
    var sectionName = urlConfig.sectionName;
    var singleStateArr = urlConfig.columns.map(
      function (col, singleStatArrIndex) {
        var uri = Curry._1(entity.matrixUriMapper, col);
        var timeSeriesData = Belt_Array.keepMap(
          Core__Option.getOr(singlestatDataCombined.singleStatTimeData, [
            ["--", []],
          ]),
          function (item) {
            if (item[0] === uri) {
              return item[1];
            }
          },
        );
        var timeSeriesData$1 = Caml_splice_call.spliceObjApply([], "concat", [
          timeSeriesData,
        ]);
        var sdata = singlestatDataCombined.singleStatData;
        if (sdata === undefined) {
          return JsxPPXReactSupport.createElementWithKey(
            singleStatArrIndex.toString(),
            HSwitchSingleStatWidget.make,
            {
              title: "",
              tooltipText: "",
              deltaTooltipComponent: Caml_option.some(null),
              value: 0,
              data: [],
              statType: "",
              singleStatLoading:
                singleStatLoading || singleStatLoadingTimeSeries,
              loaderType: shimmerType,
              statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
              filterNullVals: filterNullVals$1,
              statSentiment: statSentiment,
              isHomePage: isHomePage$1,
            },
          );
        }
        var sectiondata = sdata.filter(function (item) {
          return item.sectionUrl === uri;
        })[0];
        if (sectiondata === undefined) {
          return JsxPPXReactSupport.createElementWithKey(
            singleStatArrIndex.toString(),
            HSwitchSingleStatWidget.make,
            {
              title: "",
              tooltipText: "",
              deltaTooltipComponent: Caml_option.some(null),
              value: 0,
              data: [],
              statType: "",
              singleStatLoading:
                singleStatLoading || singleStatLoadingTimeSeries,
              loaderType: shimmerType,
              statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
              filterNullVals: filterNullVals$1,
              statSentiment: statSentiment,
              statThreshold: statThreshold,
              isHomePage: isHomePage$1,
            },
          );
        }
        var info = Curry._5(
          entity.getData,
          sectiondata.singleStatData,
          timeSeriesData$1,
          sectiondata.deltaTime,
          col,
          Core__Option.getOr(mode, "ORDER"),
        );
        return JsxPPXReactSupport.createElementWithKey(
          singleStatArrIndex.toString(),
          HSwitchSingleStatWidget.make,
          {
            title: info.title,
            tooltipText: info.tooltipText,
            deltaTooltipComponent: Caml_option.some(
              Curry._1(info.deltaTooltipComponent, info.statType),
            ),
            value: info.value,
            data: info.data,
            statType: info.statType,
            singleStatLoading: singleStatLoading || singleStatLoadingTimeSeries,
            showPercentage: info.showDelta,
            loaderType: shimmerType,
            statChartColor: singleStatArrIndex % 2 === 0 ? "blue" : "grey",
            filterNullVals: filterNullVals$1,
            statSentiment: statSentiment,
            statThreshold: statThreshold,
            isHomePage: isHomePage$1,
          },
        );
      },
    );
    var info = urlConfig.sectionInfo;
    return JsxPPXReactSupport.createElementWithKey(
      index.toString(),
      AddDataAttributes.make,
      {
        attributes: [["data-dynamic-single-stats", "dynamic stats"]],
        children: React.createElement(
          "div",
          undefined,
          React.createElement(UIUtils.RenderIf.make, {
            condition: LogicUtils.isNonEmptyString(sectionName),
            children: React.createElement(
              "div",
              {
                className:
                  "mb-5 block pl-5 pt-5 not-italic font-bold text-fs-18 text-black dark:text-white",
              },
              sectionName,
            ),
          }),
          info !== undefined
            ? React.createElement(
                "div",
                {
                  className:
                    "mb-5 block p-2 not-italic font-normal text-fs-12 text-black dark:text-white bg-blue-info dark:bg-blue-info dark:bg-opacity-20 ml-6",
                  style: {
                    borderLeft: "6px solid #2196F3",
                    maxWidth: "max-content",
                  },
                },
                info,
              )
            : null,
          React.createElement(
            "div",
            {
              className: wrapperClass,
            },
            isMobileView && !isHomePage$1
              ? React.createElement(
                  "div",
                  {
                    className: "flex flex-col gap-2 items-center",
                  },
                  React.createElement(
                    "div",
                    {
                      className: "flex flex-wrap w-full",
                    },
                    singleStateArr.map(function (element, index) {
                      return JsxPPXReactSupport.createElementWithKey(
                        index.toString(),
                        UIUtils.RenderIf.make,
                        {
                          condition: index < 4 || showStats,
                          children: React.createElement(
                            "div",
                            {
                              className: "w-full md:w-1/2",
                            },
                            element,
                          ),
                        },
                      );
                    }),
                  ),
                  React.createElement(
                    "div",
                    {
                      className: "w-full px-2",
                    },
                    React.createElement(Button.make, {
                      text: showStats ? "Hide All Stats" : "View All Stats",
                      buttonType: /* Pagination */ 5,
                      onClick: function (param) {
                        Curry._1(setShowStats, function (prev) {
                          return !prev;
                        });
                      },
                      customButtonStyle: "w-full",
                    }),
                  ),
                )
              : singleStateArr,
          ),
        ),
      },
    );
  });
}

var make = DynamicSingleStat;

export { singleStatBodyMake, deltaTimeRangeMapper, make };
/* dayjs Not a pure module */
