// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Loader from "./Loader.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as LocalStorage from "../libraries/LocalStorage.bs.js";
import * as AuthInfoProvider from "../context/AuthInfoProvider.bs.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as HyperSwitchAuthTypes from "../screens/login/HSwitchLoginFlow/HyperSwitchAuthTypes.bs.js";
import * as HyperSwitchAuthScreen from "../screens/login/HSwitchLoginFlow/HyperSwitchAuthScreen.bs.js";

function HyperSwitchAuthWrapper(props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
    return /* CheckingAuthStatus */ 1;
  });
  var setCurrentAuthState = match[1];
  var currentAuthState = match[0];
  var setAuthStatus = React.useCallback(
    function (newAuthStatus) {
      if (typeof newAuthStatus === "number") {
      } else {
        LocalStorage.setItem("login", newAuthStatus._0.token);
      }
      Curry._1(setCurrentAuthState, function (param) {
        return newAuthStatus;
      });
    },
    [setCurrentAuthState],
  );
  React.useEffect(function () {
    var match = url.path;
    var exit = 0;
    if (match) {
      switch (match.hd) {
        case "register":
          if (match.tl) {
            exit = 1;
          } else {
            Curry._1(setAuthStatus, /* LoggedOut */ 0);
          }
          break;
        case "user":
          var match$1 = match.tl;
          if (match$1) {
            var exit$1 = 0;
            switch (match$1.hd) {
              case "accept_invite_from_email":
              case "login":
              case "set_password":
              case "verify_email":
                exit$1 = 2;
                break;
              default:
                exit = 1;
            }
            if (exit$1 === 2) {
              if (match$1.tl) {
                exit = 1;
              } else {
                Curry._1(setAuthStatus, /* LoggedOut */ 0);
              }
            }
          } else {
            exit = 1;
          }
          break;
        default:
          exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var token = localStorage.getItem("login");
      if (!(token == null) && !LogicUtils.isEmptyString(token)) {
        Curry._1(
          setAuthStatus,
          /* LoggedIn */ {
            _0: HyperSwitchAuthTypes.getDummyAuthInfoForToken(token),
          },
        );
      } else {
        Curry._1(setAuthStatus, /* LoggedOut */ 0);
      }
    }
  }, []);
  return React.createElement(
    "div",
    {
      className: "font-inter-style",
    },
    React.createElement(AuthInfoProvider.make, {
      value: [currentAuthState, setAuthStatus],
      children:
        typeof currentAuthState === "number"
          ? currentAuthState !== 0
            ? React.createElement(Loader.make, {})
            : React.createElement(HyperSwitchAuthScreen.make, {
                setAuthStatus: setAuthStatus,
              })
          : props.children,
    }),
  );
}

var make = HyperSwitchAuthWrapper;

export { make };
/* react Not a pure module */
