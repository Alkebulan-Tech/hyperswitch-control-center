// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as BoolInput from "./form/BoolInput.bs.js";
import * as SelectBox from "./SelectBox.bs.js";
import * as TextInput from "./form/TextInput.bs.js";
import * as DatePicker from "./DatePicker.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as DateRangePicker from "./DateRangePicker.bs.js";
import * as NumericTextInput from "./form/NumericTextInput.bs.js";
import * as MultipleTextInput from "./form/MultipleTextInput.bs.js";
import * as MultiLineTextInput from "./MultiLineTextInput.bs.js";
import * as PasswordStrengthInput from "./form/PasswordStrengthInput.bs.js";

function selectInput(
  input,
  options,
  param,
  buttonText,
  deselectDisableOpt,
  isHorizontalOpt,
  disableSelectOpt,
  fullLengthOpt,
  customButtonStyleOpt,
  textStyleOpt,
  marginTopOpt,
  customStyleOpt,
  searchable,
  showBorder,
  showToolTipOptionsOpt,
  textEllipsisForDropDownOptionsOpt,
  showCustomBtnAtEndOpt,
  dropDownCustomBtnClickOpt,
  addDynamicValueOpt,
  showMatchingRecordsTextOpt,
  fixedDropDownDirection,
  customButtonOpt,
  buttonTypeOpt,
  dropdownCustomWidthOpt,
  allowButtonTextMinWidth,
  setExtSearchStringOpt,
  textStyleClass,
  ellipsisOnlyOpt,
  showBtnTextToolTipOpt,
  dropdownClassNameOpt,
  descriptionOnHoverOpt,
  param$1,
) {
  var deselectDisable =
    deselectDisableOpt !== undefined ? deselectDisableOpt : false;
  var isHorizontal = isHorizontalOpt !== undefined ? isHorizontalOpt : true;
  var disableSelect = disableSelectOpt !== undefined ? disableSelectOpt : false;
  var fullLength = fullLengthOpt !== undefined ? fullLengthOpt : false;
  var customButtonStyle =
    customButtonStyleOpt !== undefined ? customButtonStyleOpt : "";
  var textStyle = textStyleOpt !== undefined ? textStyleOpt : "";
  var marginTop = marginTopOpt !== undefined ? marginTopOpt : "mt-12";
  var customStyle = customStyleOpt !== undefined ? customStyleOpt : "";
  var showToolTipOptions =
    showToolTipOptionsOpt !== undefined ? showToolTipOptionsOpt : false;
  var textEllipsisForDropDownOptions =
    textEllipsisForDropDownOptionsOpt !== undefined
      ? textEllipsisForDropDownOptionsOpt
      : false;
  var showCustomBtnAtEnd =
    showCustomBtnAtEndOpt !== undefined ? showCustomBtnAtEndOpt : false;
  var dropDownCustomBtnClick =
    dropDownCustomBtnClickOpt !== undefined ? dropDownCustomBtnClickOpt : false;
  var addDynamicValue =
    addDynamicValueOpt !== undefined ? addDynamicValueOpt : false;
  var showMatchingRecordsText =
    showMatchingRecordsTextOpt !== undefined
      ? showMatchingRecordsTextOpt
      : true;
  var customButton =
    customButtonOpt !== undefined
      ? Caml_option.valFromOption(customButtonOpt)
      : null;
  var buttonType =
    buttonTypeOpt !== undefined ? buttonTypeOpt : /* SecondaryFilled */ 3;
  var dropdownCustomWidth =
    dropdownCustomWidthOpt !== undefined ? dropdownCustomWidthOpt : "w-80";
  var setExtSearchString =
    setExtSearchStringOpt !== undefined
      ? setExtSearchStringOpt
      : function (param) {};
  var ellipsisOnly = ellipsisOnlyOpt !== undefined ? ellipsisOnlyOpt : false;
  var showBtnTextToolTip =
    showBtnTextToolTipOpt !== undefined ? showBtnTextToolTipOpt : false;
  var dropdownClassName =
    dropdownClassNameOpt !== undefined ? dropdownClassNameOpt : "";
  var descriptionOnHover =
    descriptionOnHoverOpt !== undefined ? descriptionOnHoverOpt : false;
  return React.createElement(SelectBox.make, {
    input: input,
    buttonText: buttonText,
    allowMultiSelect: false,
    options: options,
    isHorizontal: isHorizontal,
    deselectDisable: deselectDisable,
    buttonType: buttonType,
    disableSelect: disableSelect,
    fullLength: fullLength,
    customButtonStyle: customButtonStyle,
    textStyle: textStyle,
    marginTop: marginTop,
    customStyle: customStyle,
    searchable: searchable,
    showBorder: showBorder,
    showCustomBtnAtEnd: showCustomBtnAtEnd,
    dropDownCustomBtnClick: dropDownCustomBtnClick,
    addDynamicValue: addDynamicValue,
    showMatchingRecordsText: showMatchingRecordsText,
    customButton: Caml_option.some(customButton),
    descriptionOnHover: descriptionOnHover,
    fixedDropDownDirection: fixedDropDownDirection,
    dropdownCustomWidth: dropdownCustomWidth,
    allowButtonTextMinWidth: allowButtonTextMinWidth,
    textStyleClass: textStyleClass,
    setExtSearchString: setExtSearchString,
    ellipsisOnly: ellipsisOnly,
    showToolTipOptions: showToolTipOptions,
    textEllipsisForDropDownOptions: textEllipsisForDropDownOptions,
    showBtnTextToolTip: showBtnTextToolTip,
    dropdownClassName: dropdownClassName,
  });
}

function infraSelectInput(
  input,
  options,
  param,
  deselectDisableOpt,
  borderRadiusOpt,
  selectedClassOpt,
  nonSelectedClassOpt,
  showTickMarkOpt,
  allowMultiSelectOpt,
  param$1,
) {
  var deselectDisable =
    deselectDisableOpt !== undefined ? deselectDisableOpt : false;
  var borderRadius =
    borderRadiusOpt !== undefined ? borderRadiusOpt : "rounded-full";
  var selectedClass =
    selectedClassOpt !== undefined
      ? selectedClassOpt
      : "border-jp-gray-900 dark:border-jp-gray-300 text-jp-gray-900 dark:text-jp-gray-300 font-semibold";
  var nonSelectedClass =
    nonSelectedClassOpt !== undefined
      ? nonSelectedClassOpt
      : "border-jp-gray-600 dark:border-jp-gray-800 text-jp-gray-850 dark:text-jp-gray-400";
  var showTickMark = showTickMarkOpt !== undefined ? showTickMarkOpt : true;
  var allowMultiSelect =
    allowMultiSelectOpt !== undefined ? allowMultiSelectOpt : true;
  return React.createElement(SelectBox.InfraSelectBox.make, {
    options: options,
    input: input,
    deselectDisable: deselectDisable,
    allowMultiSelect: allowMultiSelect,
    borderRadius: borderRadius,
    selectedClass: selectedClass,
    nonSelectedClass: nonSelectedClass,
    showTickMark: showTickMark,
  });
}

function multiSelectInput(
  input,
  options,
  optionSizeOpt,
  param,
  buttonText,
  buttonSize,
  hideMultiSelectButtonsOpt,
  showSelectionAsChipsOpt,
  showToggleOpt,
  isDropDownOpt,
  searchableOpt,
  showBorder,
  optionRigthElement,
  customStyleOpt,
  customMarginOpt,
  customButtonStyle,
  hideBorderOpt,
  allSelectTypeOpt,
  showToolTipOpt,
  showNameAsToolTipOpt,
  buttonTypeOpt,
  showSelectAllOpt,
  isHorizontalOpt,
  fullLength,
  fixedDropDownDirection,
  dropdownCustomWidth,
  customMarginStyle,
  buttonTextWeight,
  marginTop,
  customButtonLeftIcon,
  customButtonPaddingClass,
  customButtonIconMargin,
  customTextPaddingClass,
  listFlexDirectionOpt,
  buttonClickFn,
  showDescriptionAsToolOpt,
  optionClassOpt,
  selectClassOpt,
  togglePropsOpt,
  showSelectCountButtonOpt,
  showAllSelectedOptionsOpt,
  leftIcon,
  customBackColor,
  customSelectAllStyle,
  onItemSelectOpt,
  wrapBasisOpt,
  dropdownClassNameOpt,
  baseComponentMethod,
  disableSelectOpt,
  param$1,
) {
  var optionSize = optionSizeOpt !== undefined ? optionSizeOpt : /* Small */ 0;
  var hideMultiSelectButtons =
    hideMultiSelectButtonsOpt !== undefined ? hideMultiSelectButtonsOpt : false;
  var showSelectionAsChips =
    showSelectionAsChipsOpt !== undefined ? showSelectionAsChipsOpt : true;
  var showToggle = showToggleOpt !== undefined ? showToggleOpt : false;
  var isDropDown = isDropDownOpt !== undefined ? isDropDownOpt : true;
  var searchable = searchableOpt !== undefined ? searchableOpt : false;
  var customStyle = customStyleOpt !== undefined ? customStyleOpt : "";
  var customMargin = customMarginOpt !== undefined ? customMarginOpt : "";
  var hideBorder = hideBorderOpt !== undefined ? hideBorderOpt : false;
  var allSelectType =
    allSelectTypeOpt !== undefined ? allSelectTypeOpt : /* Icon */ 0;
  var showToolTip = showToolTipOpt !== undefined ? showToolTipOpt : false;
  var showNameAsToolTip =
    showNameAsToolTipOpt !== undefined ? showNameAsToolTipOpt : false;
  var buttonType =
    buttonTypeOpt !== undefined ? buttonTypeOpt : /* SecondaryFilled */ 3;
  var showSelectAll = showSelectAllOpt !== undefined ? showSelectAllOpt : true;
  var isHorizontal = isHorizontalOpt !== undefined ? isHorizontalOpt : false;
  var listFlexDirection =
    listFlexDirectionOpt !== undefined ? listFlexDirectionOpt : "";
  var showDescriptionAsTool =
    showDescriptionAsToolOpt !== undefined ? showDescriptionAsToolOpt : true;
  var optionClass = optionClassOpt !== undefined ? optionClassOpt : "";
  var selectClass = selectClassOpt !== undefined ? selectClassOpt : "";
  var toggleProps = togglePropsOpt !== undefined ? togglePropsOpt : "";
  var showSelectCountButton =
    showSelectCountButtonOpt !== undefined ? showSelectCountButtonOpt : false;
  var showAllSelectedOptions =
    showAllSelectedOptionsOpt !== undefined ? showAllSelectedOptionsOpt : true;
  var onItemSelect =
    onItemSelectOpt !== undefined
      ? onItemSelectOpt
      : function (param, param$1) {};
  var wrapBasis = wrapBasisOpt !== undefined ? wrapBasisOpt : "";
  var dropdownClassName =
    dropdownClassNameOpt !== undefined ? dropdownClassNameOpt : "";
  var disableSelect = disableSelectOpt !== undefined ? disableSelectOpt : false;
  return React.createElement(SelectBox.make, {
    input: input,
    buttonText: buttonText,
    buttonSize: buttonSize,
    allowMultiSelect: true,
    isDropDown: isDropDown,
    hideMultiSelectButtons: hideMultiSelectButtons,
    options: options,
    optionSize: optionSize,
    isHorizontal: isHorizontal,
    showSelectAll: showSelectAll,
    buttonType: buttonType,
    disableSelect: disableSelect,
    fullLength: fullLength,
    customButtonStyle: customButtonStyle,
    marginTop: marginTop,
    customStyle: customStyle,
    showSelectionAsChips: showSelectionAsChips,
    showToggle: showToggle,
    searchable: searchable,
    optionRigthElement: optionRigthElement,
    hideBorder: hideBorder,
    allSelectType: allSelectType,
    customMargin: customMargin,
    showToolTip: showToolTip,
    showNameAsToolTip: showNameAsToolTip,
    showBorder: showBorder,
    fixedDropDownDirection: fixedDropDownDirection,
    dropdownCustomWidth: dropdownCustomWidth,
    baseComponentMethod: baseComponentMethod,
    customMarginStyle: customMarginStyle,
    buttonTextWeight: buttonTextWeight,
    customButtonLeftIcon: customButtonLeftIcon,
    customTextPaddingClass: customTextPaddingClass,
    customButtonPaddingClass: customButtonPaddingClass,
    customButtonIconMargin: customButtonIconMargin,
    listFlexDirection: listFlexDirection,
    showAllSelectedOptions: showAllSelectedOptions,
    buttonClickFn: buttonClickFn,
    showDescriptionAsTool: showDescriptionAsTool,
    optionClass: optionClass,
    selectClass: selectClass,
    toggleProps: toggleProps,
    showSelectCountButton: showSelectCountButton,
    leftIcon: leftIcon,
    customBackColor: customBackColor,
    customSelectAllStyle: customSelectAllStyle,
    dropdownClassName: dropdownClassName,
    onItemSelect: onItemSelect,
    wrapBasis: wrapBasis,
  });
}

function radioInput(
  input,
  options,
  param,
  buttonText,
  disableSelectOpt,
  optionSizeOpt,
  isHorizontalOpt,
  deselectDisableOpt,
  customStyleOpt,
  baseComponentCustomStyleOpt,
  customSelectStyleOpt,
  fill,
  maxHeight,
  param$1,
) {
  var disableSelect = disableSelectOpt !== undefined ? disableSelectOpt : true;
  var optionSize = optionSizeOpt !== undefined ? optionSizeOpt : /* Small */ 0;
  var isHorizontal = isHorizontalOpt !== undefined ? isHorizontalOpt : false;
  var deselectDisable =
    deselectDisableOpt !== undefined ? deselectDisableOpt : true;
  var customStyle = customStyleOpt !== undefined ? customStyleOpt : "";
  var baseComponentCustomStyle =
    baseComponentCustomStyleOpt !== undefined
      ? baseComponentCustomStyleOpt
      : "";
  var customSelectStyle =
    customSelectStyleOpt !== undefined ? customSelectStyleOpt : "";
  return React.createElement(SelectBox.make, {
    input: input,
    buttonText: buttonText,
    allowMultiSelect: false,
    isDropDown: false,
    options: options,
    optionSize: optionSize,
    isHorizontal: isHorizontal,
    deselectDisable: deselectDisable,
    disableSelect: disableSelect,
    customStyle: customStyle,
    maxHeight: maxHeight,
    fill: fill,
    baseComponentCustomStyle: baseComponentCustomStyle,
    customSelectStyle: customSelectStyle,
  });
}

function textInput(
  input,
  placeholder,
  descriptionOpt,
  isDisabledOpt,
  autoFocusOpt,
  type_Opt,
  inputModeOpt,
  pattern,
  autoComplete,
  maxLength,
  leftIcon,
  rightIcon,
  rightIconOnClick,
  inputStyleOpt,
  customStyleOpt,
  customWidthOpt,
  customPaddingClassOpt,
  iconOpacityOpt,
  rightIconCustomStyleOpt,
  leftIconCustomStyleOpt,
  customDashboardClass,
  onHoverCss,
  onDisabledStyle,
  onActiveStyle,
  customDarkBackground,
  phoneInputOpt,
  widthMatchwithPlaceholderLengthOpt,
  param,
) {
  var description = descriptionOpt !== undefined ? descriptionOpt : "";
  var isDisabled = isDisabledOpt !== undefined ? isDisabledOpt : false;
  var autoFocus = autoFocusOpt !== undefined ? autoFocusOpt : false;
  var type_ = type_Opt !== undefined ? type_Opt : "text";
  var inputMode = inputModeOpt !== undefined ? inputModeOpt : "text";
  var inputStyle = inputStyleOpt !== undefined ? inputStyleOpt : "";
  var customStyle = customStyleOpt !== undefined ? customStyleOpt : "";
  var customWidth = customWidthOpt !== undefined ? customWidthOpt : "w-full";
  var customPaddingClass =
    customPaddingClassOpt !== undefined ? customPaddingClassOpt : "";
  var iconOpacity =
    iconOpacityOpt !== undefined ? iconOpacityOpt : "opacity-30";
  var rightIconCustomStyle =
    rightIconCustomStyleOpt !== undefined ? rightIconCustomStyleOpt : "";
  var leftIconCustomStyle =
    leftIconCustomStyleOpt !== undefined ? leftIconCustomStyleOpt : "";
  var phoneInput = phoneInputOpt !== undefined ? phoneInputOpt : false;
  var widthMatchwithPlaceholderLength =
    widthMatchwithPlaceholderLengthOpt !== undefined
      ? Caml_option.valFromOption(widthMatchwithPlaceholderLengthOpt)
      : undefined;
  return React.createElement(TextInput.make, {
    input: input,
    placeholder: placeholder,
    description: description,
    isDisabled: isDisabled,
    type_: type_,
    inputMode: inputMode,
    pattern: pattern,
    autoComplete: autoComplete,
    maxLength: maxLength,
    autoFocus: autoFocus,
    leftIcon: leftIcon,
    rightIcon: rightIcon,
    rightIconOnClick: rightIconOnClick,
    customDashboardClass: customDashboardClass,
    inputStyle: inputStyle,
    customStyle: customStyle,
    customWidth: customWidth,
    iconOpacity: iconOpacity,
    customPaddingClass: customPaddingClass,
    widthMatchwithPlaceholderLength: Caml_option.some(
      widthMatchwithPlaceholderLength,
    ),
    rightIconCustomStyle: rightIconCustomStyle,
    leftIconCustomStyle: leftIconCustomStyle,
    onHoverCss: onHoverCss,
    onDisabledStyle: onDisabledStyle,
    onActiveStyle: onActiveStyle,
    customDarkBackground: customDarkBackground,
    phoneInput: phoneInput,
  });
}

function textTagInput(
  input,
  placeholder,
  nameOpt,
  customStyle,
  disabledOpt,
  seperateByCommaOpt,
  seperateBySpaceOpt,
  customButtonStyle,
  param,
) {
  var name = nameOpt !== undefined ? nameOpt : "";
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var seperateByComma =
    seperateByCommaOpt !== undefined ? seperateByCommaOpt : false;
  var seperateBySpace =
    seperateBySpaceOpt !== undefined ? seperateBySpaceOpt : false;
  return React.createElement(MultipleTextInput.make, {
    input: input,
    name: name,
    disabled: disabled,
    seperateByComma: seperateByComma,
    seperateBySpace: seperateBySpace,
    customStyle: customStyle,
    placeholder: placeholder,
    customButtonStyle: customButtonStyle,
  });
}

function numericTextInput(
  input,
  placeholder,
  isDisabledOpt,
  customStyleOpt,
  inputMode,
  precision,
  maxLength,
  removeLeadingZeroesOpt,
  leftIcon,
  rightIcon,
  customPaddingClass,
  rightIconCustomStyle,
  leftIconCustomStyle,
  param,
) {
  var isDisabled = isDisabledOpt !== undefined ? isDisabledOpt : false;
  var customStyle = customStyleOpt !== undefined ? customStyleOpt : "";
  var removeLeadingZeroes =
    removeLeadingZeroesOpt !== undefined ? removeLeadingZeroesOpt : false;
  return React.createElement(NumericTextInput.make, {
    input: input,
    placeholder: placeholder,
    isDisabled: isDisabled,
    inputMode: inputMode,
    customStyle: customStyle,
    precision: precision,
    maxLength: maxLength,
    removeLeadingZeroes: removeLeadingZeroes,
    leftIcon: leftIcon,
    rightIcon: rightIcon,
    customPaddingClass: customPaddingClass,
    rightIconCustomStyle: rightIconCustomStyle,
    leftIconCustomStyle: leftIconCustomStyle,
  });
}

function singleDatePickerInput(
  input,
  param,
  disablePastDatesOpt,
  disableFutureDatesOpt,
  customDisabledFutureDaysOpt,
  formatOpt,
  currentDateHourFormatOpt,
  currentDateMinuteFormatOpt,
  currentDateSecondsFormatOpt,
  customButtonStyle,
  newThemeCustomButtonStyle,
  calendarContaierStyle,
  buttonSize,
  showTime,
  fullLength,
  param$1,
) {
  var disablePastDates =
    disablePastDatesOpt !== undefined ? disablePastDatesOpt : true;
  var disableFutureDates =
    disableFutureDatesOpt !== undefined ? disableFutureDatesOpt : false;
  var customDisabledFutureDays =
    customDisabledFutureDaysOpt !== undefined
      ? customDisabledFutureDaysOpt
      : 0.0;
  var format = formatOpt !== undefined ? formatOpt : "YYYY-MM-DDTHH:mm:ss";
  var currentDateHourFormat =
    currentDateHourFormatOpt !== undefined ? currentDateHourFormatOpt : "00";
  var currentDateMinuteFormat =
    currentDateMinuteFormatOpt !== undefined
      ? currentDateMinuteFormatOpt
      : "00";
  var currentDateSecondsFormat =
    currentDateSecondsFormatOpt !== undefined
      ? currentDateSecondsFormatOpt
      : "00";
  return React.createElement(DatePicker.make, {
    input: input,
    disablePastDates: disablePastDates,
    disableFutureDates: disableFutureDates,
    format: format,
    customButtonStyle: customButtonStyle,
    newThemeCustomButtonStyle: newThemeCustomButtonStyle,
    buttonSize: buttonSize,
    customDisabledFutureDays: customDisabledFutureDays,
    currentDateHourFormat: currentDateHourFormat,
    currentDateMinuteFormat: currentDateMinuteFormat,
    currentDateSecondsFormat: currentDateSecondsFormat,
    calendarContaierStyle: calendarContaierStyle,
    showTime: showTime,
    fullLength: fullLength,
  });
}

function dateRangeField(
  startKey,
  endKey,
  format,
  disablePastDatesOpt,
  disableFutureDatesOpt,
  showTimeOpt,
  predefinedDaysOpt,
  disableApplyOpt,
  numMonthsOpt,
  dateRangeLimit,
  removeFilterOption,
  optFieldKey,
  showSecondsOpt,
  hideDateOpt,
  selectStandardTimeOpt,
  customButtonStyle,
  isTooltipVisibleOpt,
  param,
) {
  var disablePastDates =
    disablePastDatesOpt !== undefined ? disablePastDatesOpt : false;
  var disableFutureDates =
    disableFutureDatesOpt !== undefined ? disableFutureDatesOpt : false;
  var showTime = showTimeOpt !== undefined ? showTimeOpt : false;
  var predefinedDays = predefinedDaysOpt !== undefined ? predefinedDaysOpt : [];
  var disableApply = disableApplyOpt !== undefined ? disableApplyOpt : false;
  var numMonths = numMonthsOpt !== undefined ? numMonthsOpt : 1;
  var showSeconds = showSecondsOpt !== undefined ? showSecondsOpt : true;
  var hideDate = hideDateOpt !== undefined ? hideDateOpt : false;
  var selectStandardTime =
    selectStandardTimeOpt !== undefined ? selectStandardTimeOpt : false;
  var isTooltipVisible =
    isTooltipVisibleOpt !== undefined ? isTooltipVisibleOpt : true;
  var fn = function (_fieldsArray) {
    return React.createElement(DateRangePicker.make, {
      startKey: startKey,
      endKey: endKey,
      showTime: showTime,
      disablePastDates: disablePastDates,
      disableFutureDates: disableFutureDates,
      predefinedDays: predefinedDays,
      format: format,
      numMonths: numMonths,
      disableApply: disableApply,
      removeFilterOption: removeFilterOption,
      dateRangeLimit: dateRangeLimit,
      optFieldKey: optFieldKey,
      showSeconds: showSeconds,
      hideDate: hideDate,
      selectStandardTime: selectStandardTime,
      customButtonStyle: customButtonStyle,
      isTooltipVisible: isTooltipVisible,
    });
  };
  return {
    fn: fn,
    names: [startKey, endKey],
  };
}

function multiLineTextInput(
  input,
  placeholder,
  isDisabled,
  rows,
  cols,
  customClassOpt,
  leftIcon,
  maxLength,
  param,
) {
  var customClass = customClassOpt !== undefined ? customClassOpt : "text-lg";
  return React.createElement(MultiLineTextInput.make, {
    input: input,
    placeholder: placeholder,
    isDisabled: isDisabled,
    rows: rows,
    cols: cols,
    customClass: customClass,
    leftIcon: leftIcon,
    maxLength: maxLength,
  });
}

function iconFieldWithMessageDes(
  mainInputField,
  input,
  placeholder,
  descriptionOpt,
  param,
) {
  var description = descriptionOpt !== undefined ? descriptionOpt : "";
  var tmp =
    description === ""
      ? null
      : React.createElement(
          "div",
          {
            className:
              "pt-2 pb-2 text-sm text-bold text-jp-gray-900 text-opacity-50 dark:text-jp-gray-text_darktheme dark:text-opacity-50 ",
          },
          description,
        );
  return React.createElement(
    "div",
    undefined,
    React.createElement(
      "div",
      undefined,
      Curry._2(mainInputField, input, placeholder),
    ),
    React.createElement("div", undefined, tmp),
  );
}

function passwordMatchField(input, placeholder, leftIcon, param) {
  return React.createElement(PasswordStrengthInput.make, {
    input: input,
    placeholder: placeholder,
    displayStatus: false,
    leftIcon: leftIcon,
  });
}

function checkboxInput(
  isHorizontalOpt,
  options,
  optionSizeOpt,
  isSelectedStateMinusOpt,
  disableSelectOpt,
  buttonTextOpt,
  maxHeight,
  searchable,
  searchInputPlaceHolder,
  dropdownCustomWidth,
  customSearchStyleOpt,
  customLabelStyle,
  customMarginStyleOpt,
  customStyleOpt,
  checkboxDimensionOpt,
  wrapBasisOpt,
  param,
  input,
  param$1,
) {
  var isHorizontal = isHorizontalOpt !== undefined ? isHorizontalOpt : false;
  var optionSize = optionSizeOpt !== undefined ? optionSizeOpt : /* Small */ 0;
  var isSelectedStateMinus =
    isSelectedStateMinusOpt !== undefined ? isSelectedStateMinusOpt : false;
  var disableSelect = disableSelectOpt !== undefined ? disableSelectOpt : false;
  var buttonText = buttonTextOpt !== undefined ? buttonTextOpt : "";
  var customSearchStyle =
    customSearchStyleOpt !== undefined
      ? customSearchStyleOpt
      : "bg-jp-gray-100 dark:bg-jp-gray-950 p-2";
  var customMarginStyle =
    customMarginStyleOpt !== undefined
      ? customMarginStyleOpt
      : "mx-3 py-2 gap-2";
  var customStyle = customStyleOpt !== undefined ? customStyleOpt : "";
  var checkboxDimension =
    checkboxDimensionOpt !== undefined ? checkboxDimensionOpt : "";
  var wrapBasis = wrapBasisOpt !== undefined ? wrapBasisOpt : "";
  return React.createElement(SelectBox.make, {
    input: input,
    buttonText: buttonText,
    allowMultiSelect: true,
    isDropDown: false,
    options: options,
    optionSize: optionSize,
    isSelectedStateMinus: isSelectedStateMinus,
    isHorizontal: isHorizontal,
    showSelectAll: false,
    disableSelect: disableSelect,
    customStyle: customStyle,
    maxHeight: maxHeight,
    searchable: searchable,
    customSearchStyle: customSearchStyle,
    searchInputPlaceHolder: searchInputPlaceHolder,
    customLabelStyle: customLabelStyle,
    dropdownCustomWidth: dropdownCustomWidth,
    customMarginStyle: customMarginStyle,
    checkboxDimension: checkboxDimension,
    wrapBasis: wrapBasis,
  });
}

function boolInput(
  isDisabled,
  isCheckBoxOpt,
  boolCustomClassOpt,
  input,
  param,
  param$1,
) {
  var isCheckBox = isCheckBoxOpt !== undefined ? isCheckBoxOpt : false;
  var boolCustomClass =
    boolCustomClassOpt !== undefined ? boolCustomClassOpt : "";
  return React.createElement(BoolInput.make, {
    input: input,
    isDisabled: isDisabled,
    isCheckBox: isCheckBox,
    boolCustomClass: boolCustomClass,
  });
}

export {
  selectInput,
  infraSelectInput,
  multiSelectInput,
  radioInput,
  textInput,
  textTagInput,
  numericTextInput,
  singleDatePickerInput,
  dateRangeField,
  multiLineTextInput,
  iconFieldWithMessageDes,
  passwordMatchField,
  checkboxInput,
  boolInput,
};
/* react Not a pure module */
