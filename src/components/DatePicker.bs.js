// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import Dayjs from "dayjs";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as TimeInput from "./TimeInput.bs.js";
import * as Core__JSON from "@rescript/core/src/Core__JSON.bs.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as BottomModal from "./BottomModal.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CalendarList from "./CalendarList.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as OutsideClick from "../hooks/OutsideClick.bs.js";
import * as TimeZoneHook from "../hooks/TimeZoneHook.bs.js";
import * as DateRangePicker from "./DateRangePicker.bs.js";

function DatePicker(props) {
  var fullLength = props.fullLength;
  var showSeconds = props.showSeconds;
  var showTime = props.showTime;
  var currentDateSecondsFormat = props.currentDateSecondsFormat;
  var currentDateMinuteFormat = props.currentDateMinuteFormat;
  var currentDateHourFormat = props.currentDateHourFormat;
  var customDisabledFutureDays = props.customDisabledFutureDays;
  var rightIcon = props.rightIcon;
  var leftIcon = props.leftIcon;
  var customButtonStyle = props.customButtonStyle;
  var format = props.format;
  var disableFutureDates = props.disableFutureDates;
  var disablePastDates = props.disablePastDates;
  var isDisabled = props.isDisabled;
  var input = props.input;
  var isDisabled$1 = isDisabled !== undefined ? isDisabled : false;
  var disablePastDates$1 =
    disablePastDates !== undefined ? disablePastDates : true;
  var disableFutureDates$1 =
    disableFutureDates !== undefined ? disableFutureDates : false;
  var format$1 = format !== undefined ? format : "YYYY-MM-DDTHH:mm:ss";
  var customButtonStyle$1 =
    customButtonStyle !== undefined ? customButtonStyle : "";
  var customDisabledFutureDays$1 =
    customDisabledFutureDays !== undefined ? customDisabledFutureDays : 0.0;
  var currentDateHourFormat$1 =
    currentDateHourFormat !== undefined ? currentDateHourFormat : "00";
  var currentDateMinuteFormat$1 =
    currentDateMinuteFormat !== undefined ? currentDateMinuteFormat : "00";
  var currentDateSecondsFormat$1 =
    currentDateSecondsFormat !== undefined ? currentDateSecondsFormat : "00";
  var showTime$1 = showTime !== undefined ? showTime : false;
  var showSeconds$1 = showSeconds !== undefined ? showSeconds : true;
  var dropdownRef = React.useRef(null);
  var match = React.useState(function () {
    return false;
  });
  var setIsExpanded = match[1];
  var isExpanded = match[0];
  var customTimezoneToISOString =
    TimeZoneHook.useCustomTimeZoneToIsoString(undefined);
  var isoStringToCustomTimeZone =
    TimeZoneHook.useIsoStringToCustomTimeZone(undefined);
  var match$1 = React.useState(function () {
    return DateRangePicker.getDateStringForValue(
      LogicUtils.getStringFromJson(input.value, ""),
      isoStringToCustomTimeZone,
    );
  });
  var setSelectedDate = match$1[1];
  var selectedDate = match$1[0];
  var match$2 = React.useState(function () {
    if (!LogicUtils.isNonEmptyString(selectedDate)) {
      return "";
    }
    var date = selectedDate.split("-");
    var dateDay = Core__Option.getOr(date[2], "1");
    var dateMonth = Core__Option.getOr(date[1], "1");
    var dateYear = Core__Option.getOr(date[0], "1970");
    var str = Core__JSON.Decode.string(input.value);
    var timeSplit = DateRangePicker.getTimeStringForValue(
      str !== undefined ? str : "",
      isoStringToCustomTimeZone,
    ).split(":");
    var timeHour = Core__Option.getOr(timeSplit[0], currentDateHourFormat$1);
    var timeMinute = Core__Option.getOr(
      timeSplit[1],
      currentDateMinuteFormat$1,
    );
    var timeSecond = Core__Option.getOr(
      timeSplit[2],
      currentDateSecondsFormat$1,
    );
    var dateTimeCheck = Curry._6(
      customTimezoneToISOString,
      dateYear,
      dateMonth,
      dateDay,
      timeHour,
      timeMinute,
      timeSecond,
    );
    return TimeZoneHook.formattedISOString(dateTimeCheck, format$1);
  });
  var setDate = match$2[1];
  var date = match$2[0];
  var dropdownVisibilityClass = isExpanded ? "inline-block z-100" : "hidden";
  var onDateClick = function (str) {
    if (showTime$1) {
    } else {
      Curry._1(setIsExpanded, function (p) {
        return !p;
      });
    }
    Curry._1(setSelectedDate, function (param) {
      return str;
    });
    var currentDateSplit = str.split("-");
    var currentDateDay = Core__Option.getOr(currentDateSplit[2], "1");
    var currentDateYear = Core__Option.getOr(currentDateSplit[0], "1970");
    var currentDateMonth = Core__Option.getOr(currentDateSplit[1], "1");
    var currentDateTimeCheck = Curry._6(
      customTimezoneToISOString,
      currentDateYear,
      currentDateMonth,
      currentDateDay,
      currentDateHourFormat$1,
      currentDateMinuteFormat$1,
      currentDateSecondsFormat$1,
    );
    Curry._1(setDate, function (param) {
      return currentDateTimeCheck;
    });
    Curry._1(input.onChange, currentDateTimeCheck);
  };
  React.useEffect(
    function () {
      if (Caml_obj.equal(input.value, "")) {
        Curry._1(setSelectedDate, function (param) {
          return "";
        });
      }
    },
    [input.value],
  );
  var defaultCellHighlighter = function (currDate) {
    return {
      highlightSelf: currDate === selectedDate,
      highlightLeft: false,
      highlightRight: false,
    };
  };
  OutsideClick.useOutsideClick(
    {
      TAG: /* ArrayOfRef */ 0,
      _0: [dropdownRef],
    },
    undefined,
    isExpanded,
    undefined,
    function (param) {
      Curry._1(setIsExpanded, function (p) {
        return !p;
      });
    },
    undefined,
  );
  var changeVisibility = function (_ev) {
    if (!isDisabled$1) {
      return Curry._1(setIsExpanded, function (p) {
        return !p;
      });
    }
  };
  var startDateStr;
  if (LogicUtils.isEmptyString(selectedDate)) {
    startDateStr = "Select Date";
  } else if (showTime$1) {
    var time = DateRangePicker.getTimeStringForValue(
      date,
      isoStringToCustomTimeZone,
    );
    var splitTime = time.split(":");
    startDateStr =
      "" +
      selectedDate +
      " " +
      (LogicUtils.isEmptyString(time)
        ? "" +
          currentDateHourFormat$1 +
          ":" +
          currentDateMinuteFormat$1 +
          "" +
          (showSeconds$1 ? ":" + currentDateSecondsFormat$1 : "") +
          ""
        : Core__Option.getOr(splitTime[0], "NA") +
          ":" +
          Core__Option.getOr(splitTime[1], "NA") +
          (showSeconds$1 ? ":" + Core__Option.getOr(splitTime[2], "NA") : "")) +
      "";
  } else {
    startDateStr = selectedDate;
  }
  var buttonIcon = isExpanded ? "angle-up" : "angle-down";
  var rightIcon$1 =
    rightIcon !== undefined
      ? rightIcon
      : {
          TAG: /* FontAwesome */ 0,
          _0: buttonIcon,
        };
  var leftIcon$1 =
    leftIcon !== undefined
      ? leftIcon
      : {
          TAG: /* FontAwesome */ 0,
          _0: "calendar",
        };
  var fullLengthWidthClass = Core__Option.getOr(fullLength, false)
    ? "2xl:w-full"
    : "";
  var time$1 = DateRangePicker.getTimeStringForValue(
    date,
    isoStringToCustomTimeZone,
  );
  var startTimeInput_onBlur = function (_ev) {};
  var startTimeInput_onChange = function (timeValEv) {
    if (!LogicUtils.isNonEmptyString(selectedDate)) {
      return;
    }
    var todayDayJsObj = Dayjs(new Date().toString());
    var todayTime = todayDayJsObj.format("HH:mm:ss");
    var todayDate = todayDayJsObj.format("YYYY-MM-DD");
    var timeVal =
      disableFutureDates$1 &&
      selectedDate === todayDate &&
      timeValEv > todayTime
        ? todayTime
        : timeValEv;
    var date = selectedDate.split("-");
    var dateDay = Core__Option.getOr(date[2], "1");
    var dateMonth = Core__Option.getOr(date[1], "1");
    var dateYear = Core__Option.getOr(date[0], "1970");
    var timeSplit = timeVal.split(":");
    var timeHour = Core__Option.getOr(timeSplit[0], currentDateHourFormat$1);
    var timeMinute = Core__Option.getOr(
      timeSplit[1],
      currentDateMinuteFormat$1,
    );
    var timeSecond = Core__Option.getOr(
      timeSplit[2],
      currentDateSecondsFormat$1,
    );
    var dateTimeCheck = Curry._6(
      customTimezoneToISOString,
      dateYear,
      dateMonth,
      dateDay,
      timeHour,
      timeMinute,
      timeSecond,
    );
    var timestamp = TimeZoneHook.formattedISOString(dateTimeCheck, format$1);
    Curry._1(setDate, function (param) {
      return timestamp;
    });
    Curry._1(input.onChange, LogicUtils.dateFormat(timestamp, format$1));
  };
  var startTimeInput_onFocus = function (_ev) {};
  var startTimeInput_value = LogicUtils.isEmptyString(time$1)
    ? "" +
      currentDateHourFormat$1 +
      ":" +
      currentDateMinuteFormat$1 +
      ":" +
      currentDateSecondsFormat$1 +
      ""
    : time$1;
  var startTimeInput = {
    name: "string",
    onBlur: startTimeInput_onBlur,
    onChange: startTimeInput_onChange,
    onFocus: startTimeInput_onFocus,
    value: startTimeInput_value,
    checked: false,
  };
  var styleClass = showTime$1
    ? " flex-col bg-white dark:bg-jp-gray-lightgray_background border-jp-gray-500 dark:border-jp-gray-960 p-4 rounded border"
    : "flex-row";
  var isMobileView = MatchMedia.useMobileChecker(undefined);
  var calendarElement = React.createElement(
    React.Fragment,
    undefined,
    React.createElement(CalendarList.make, {
      calendarContaierStyle: props.calendarContaierStyle,
      onDateClick: onDateClick,
      count: 1,
      cellHighlighter: defaultCellHighlighter,
      disablePastDates: disablePastDates$1,
      disableFutureDates: disableFutureDates$1,
      customDisabledFutureDays: customDisabledFutureDays$1,
    }),
    showTime$1
      ? React.createElement(
          "div",
          {
            className: "w-fit dark:text-gray-400 text-gray-700 ",
          },
          React.createElement(TimeInput.make, {
            input: startTimeInput,
            isDisabled: LogicUtils.isEmptyString(selectedDate),
            showSeconds: showSeconds$1,
          }),
        )
      : null,
  );
  return React.createElement(
    "div",
    {
      ref: Caml_option.some(dropdownRef),
      className: "md:relative",
    },
    React.createElement(Button.make, {
      buttonState: isDisabled$1 ? /* Disabled */ 2 : /* Normal */ 0,
      text: startDateStr,
      buttonType: props.buttonType,
      buttonSize: props.buttonSize,
      leftIcon: leftIcon$1,
      rightIcon: rightIcon$1,
      onClick: changeVisibility,
      fullLength: fullLength,
      customButtonStyle: customButtonStyle$1,
    }),
    React.createElement(
      "div",
      {
        className: dropdownVisibilityClass,
      },
      isMobileView
        ? React.createElement(BottomModal.make, {
            onCloseClick: changeVisibility,
            children: calendarElement,
            headerText: startDateStr,
          })
        : React.createElement(
            "div",
            {
              className:
                "absolute flex w-max z-10  " +
                fullLengthWidthClass +
                " " +
                styleClass +
                "",
            },
            calendarElement,
          ),
    ),
  );
}

var make = DatePicker;

export { make };
/* dayjs Not a pure module */
