// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as ToolTip from "./ToolTip.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HSwitchUtils from "../../screens/Utils/HSwitchUtils.bs.js";

function ACLToolTip(props) {
  var dismissable = props.dismissable;
  var isRelative = props.isRelative;
  var descriptionComponentClass = props.descriptionComponentClass;
  var visibleOnClick = props.visibleOnClick;
  var tooltipArrowSize = props.tooltipArrowSize;
  var hoverOnToolTip = props.hoverOnToolTip;
  var textStyle = props.textStyle;
  var height = props.height;
  var flexClass = props.flexClass;
  var justifyClass = props.justifyClass;
  var contentAlign = props.contentAlign;
  var bgColor = props.bgColor;
  var arrowBgClass = props.arrowBgClass;
  var textStyleGap = props.textStyleGap;
  var arrowCustomStyle = props.arrowCustomStyle;
  var customStyle = props.customStyle;
  var tooltipForWidthClass = props.tooltipForWidthClass;
  var tooltipWidthClass = props.tooltipWidthClass;
  var tooltipPositioning = props.tooltipPositioning;
  var descriptionComponent = props.descriptionComponent;
  var description = props.description;
  var noAccessDescription = props.noAccessDescription;
  var noAccessDescription$1 =
    noAccessDescription !== undefined
      ? noAccessDescription
      : HSwitchUtils.noAccessControlText;
  var description$1 = description !== undefined ? description : "";
  var descriptionComponent$1 =
    descriptionComponent !== undefined
      ? Caml_option.valFromOption(descriptionComponent)
      : null;
  var tooltipPositioning$1 =
    tooltipPositioning !== undefined ? tooltipPositioning : "fixed";
  var tooltipWidthClass$1 =
    tooltipWidthClass !== undefined ? tooltipWidthClass : "w-fit";
  var tooltipForWidthClass$1 =
    tooltipForWidthClass !== undefined ? tooltipForWidthClass : "";
  var customStyle$1 = customStyle !== undefined ? customStyle : "";
  var arrowCustomStyle$1 =
    arrowCustomStyle !== undefined ? arrowCustomStyle : "";
  var textStyleGap$1 = textStyleGap !== undefined ? textStyleGap : "";
  var arrowBgClass$1 = arrowBgClass !== undefined ? arrowBgClass : "";
  var bgColor$1 = bgColor !== undefined ? bgColor : "";
  var contentAlign$1 =
    contentAlign !== undefined ? contentAlign : /* Middle */ 2;
  var justifyClass$1 =
    justifyClass !== undefined ? justifyClass : "justify-center";
  var flexClass$1 = flexClass !== undefined ? flexClass : "flex-col";
  var height$1 = height !== undefined ? height : "h-full";
  var textStyle$1 = textStyle !== undefined ? textStyle : "text-fs-11";
  var hoverOnToolTip$1 = hoverOnToolTip !== undefined ? hoverOnToolTip : false;
  var tooltipArrowSize$1 =
    tooltipArrowSize !== undefined ? tooltipArrowSize : 5;
  var visibleOnClick$1 = visibleOnClick !== undefined ? visibleOnClick : false;
  var descriptionComponentClass$1 =
    descriptionComponentClass !== undefined
      ? descriptionComponentClass
      : "flex flex-row-reverse";
  var isRelative$1 = isRelative !== undefined ? isRelative : true;
  var dismissable$1 = dismissable !== undefined ? dismissable : false;
  var description$2 =
    props.access === /* Access */ 1 ? description$1 : noAccessDescription$1;
  return React.createElement(ToolTip.make, {
    description: description$2,
    descriptionComponent: Caml_option.some(descriptionComponent$1),
    tooltipPositioning: tooltipPositioning$1,
    toolTipFor: props.toolTipFor,
    tooltipWidthClass: tooltipWidthClass$1,
    tooltipForWidthClass: tooltipForWidthClass$1,
    toolTipPosition: props.toolTipPosition,
    customStyle: customStyle$1,
    arrowCustomStyle: arrowCustomStyle$1,
    textStyleGap: textStyleGap$1,
    arrowBgClass: arrowBgClass$1,
    bgColor: bgColor$1,
    contentAlign: contentAlign$1,
    justifyClass: justifyClass$1,
    flexClass: flexClass$1,
    height: height$1,
    textStyle: textStyle$1,
    hoverOnToolTip: hoverOnToolTip$1,
    tooltipArrowSize: tooltipArrowSize$1,
    visibleOnClick: visibleOnClick$1,
    descriptionComponentClass: descriptionComponentClass$1,
    isRelative: isRelative$1,
    dismissable: dismissable$1,
  });
}

var make = ACLToolTip;

export { make };
/* react Not a pure module */
