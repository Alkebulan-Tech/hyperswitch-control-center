// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Recoil from "recoil";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as ToastState from "../hooks/ToastState.bs.js";
import * as AddDataAttributes from "./AddDataAttributes.bs.js";
import * as HSwitchGlobalVars from "../utils/HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";

function ToastContainer$ToastHeading(props) {
  var toastDuration = props.toastDuration;
  var hideToast = props.hideToast;
  var toastProps = props.toastProps;
  var toastDuration$1 = toastDuration !== undefined ? toastDuration : 0;
  React.useEffect(
    function () {
      var duration = toastDuration$1 === 0 ? 3000 : toastDuration$1;
      var timeout = setTimeout(function (param) {
        Curry._1(hideToast, toastProps.toastKey);
      }, duration);
      return function (param) {
        clearTimeout(timeout);
      };
    },
    [hideToast, toastProps],
  );
  var match = toastProps.toastType;
  var toastColorClasses;
  switch (match) {
    case /* ToastError */ 0:
      toastColorClasses = "bg-red-960 border-red-960 rounded-md";
      break;
    case /* ToastWarning */ 1:
      toastColorClasses = "bg-orange-950 border-orange-950 rounded-md";
      break;
    case /* ToastInfo */ 2:
      toastColorClasses = "bg-blue-600 border-blue-600 rounded-md";
      break;
    case /* ToastSuccess */ 3:
      toastColorClasses = "bg-green-700 border-green-700 rounded-md";
      break;
  }
  var match$1 = toastProps.toastType;
  var toastIconName;
  switch (match$1) {
    case /* ToastError */ 0:
      toastIconName = "times-circle";
      break;
    case /* ToastWarning */ 1:
      toastIconName = "exclamation-triangle";
      break;
    case /* ToastInfo */ 2:
      toastIconName = "info-circle";
      break;
    case /* ToastSuccess */ 3:
      toastIconName = "check-circle";
      break;
  }
  var text = toastProps.buttonText;
  return React.createElement(
    "div",
    {
      className:
        "" +
        toastColorClasses +
        "  border p-4 font-semibold text-lg text-jp-gray-text_darktheme flex flex-row justify-between",
    },
    React.createElement(Icon.make, {
      name: toastIconName,
      className: "align-middle self-center",
    }),
    React.createElement(AddDataAttributes.make, {
      attributes: [["data-toast", toastProps.message]],
      children: React.createElement(
        "div",
        {
          className: "inline-flex items-center ",
        },
        React.createElement(
          "div",
          {
            className: "px-3 break-word",
          },
          toastProps.message,
        ),
        text !== undefined
          ? React.createElement(
              "div",
              {
                className: "border-l",
              },
              React.createElement(
                "div",
                {
                  className:
                    "ml-2 border rounded-full pl-2 pr-2 cursor-pointer",
                },
                React.createElement(
                  "span",
                  {
                    className: "text-sm",
                    onClick: function (param) {
                      var str = toastProps.helpLink;
                      RescriptReactRouter.push(
                        str !== undefined
                          ? HSwitchGlobalVars.appendDashboardPath(str)
                          : HSwitchGlobalVars.appendDashboardPath(""),
                      );
                    },
                  },
                  text,
                ),
              ),
            )
          : null,
      ),
    }),
  );
}

var ToastHeading = {
  make: ToastContainer$ToastHeading,
};

function ToastContainer$Toast(props) {
  var stopPropagation = React.useCallback(function (ev) {
    ev.stopPropagation();
  }, []);
  return React.createElement(
    "div",
    {
      className: " m-2 shadow-lg z-100 pointer-events-auto",
      onClick: stopPropagation,
    },
    React.createElement(ToastContainer$ToastHeading, {
      toastProps: props.toastProps,
      hideToast: props.hideToast,
      toastDuration: props.toastDuration,
    }),
  );
}

var Toast = {
  make: ToastContainer$Toast,
};

function ToastContainer(props) {
  var match = Recoil.useRecoilState(ToastState.openToasts);
  var setOpenToasts = match[1];
  var hideToast = React.useCallback(
    function (key) {
      setOpenToasts(function (prevArr) {
        return prevArr.filter(function (toastProps) {
          return toastProps.toastKey !== key;
        });
      });
    },
    [setOpenToasts],
  );
  return React.createElement(
    "div",
    {
      className: "relative",
    },
    props.children,
    React.createElement(
      "div",
      undefined,
      React.createElement(
        "div",
        {
          className:
            "absolute inset-0 overflow-scroll flex flex-col pointer-events-none m-4 items-center justify-start no-scrollbar",
        },
        React.createElement(
          "div",
          {
            className:
              "flex flex-col pointer-events-auto w-auto w-max max-w-4xl",
          },
          match[0].map(function (toastProps) {
            if (Caml_obj.notequal(toastProps.toastElement, null)) {
              return toastProps.toastElement;
            } else {
              return JsxPPXReactSupport.createElementWithKey(
                toastProps.toastKey,
                ToastContainer$Toast,
                {
                  toastProps: toastProps,
                  hideToast: hideToast,
                  toastDuration: toastProps.toastDuration,
                },
              );
            }
          }),
        ),
      ),
    ),
  );
}

var make = ToastContainer;

export { ToastHeading, Toast, make };
/* Icon Not a pure module */
