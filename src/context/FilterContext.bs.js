// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as LogicUtils from "../utils/LogicUtils.bs.js";
import * as FilterUtils from "../components/FilterUtils.bs.js";
import * as UrlFetchUtils from "../utils/UrlFetchUtils.bs.js";
import * as DictionaryUtils from "../utils/DictionaryUtils.bs.js";

var filterUpdater_filterValue = {};

function filterUpdater_updateExistingKeys(_dict) {}

function filterUpdater_removeKeys(_arr) {}

var filterUpdater_filterValueJson = {};

function filterUpdater_reset(param) {}

var filterUpdater = {
  query: "",
  filterValue: filterUpdater_filterValue,
  updateExistingKeys: filterUpdater_updateExistingKeys,
  removeKeys: filterUpdater_removeKeys,
  filterValueJson: filterUpdater_filterValueJson,
  reset: filterUpdater_reset,
};

var filterContext = React.createContext(filterUpdater);

var make = filterContext.Provider;

var Provider = {
  make: make,
};

function FilterContext(props) {
  var disableSessionStorage = props.disableSessionStorage;
  var index = props.index;
  var disableSessionStorage$1 =
    disableSessionStorage !== undefined ? disableSessionStorage : false;
  var query = React.useMemo(function () {
    return {
      contents: "",
    };
  }, []);
  var searcParamsToDict = FilterUtils.parseFilterString(query.contents);
  var match = React.useState(function () {
    return searcParamsToDict;
  });
  var setfilterDict = match[1];
  var filterDict = match[0];
  var updateFilter = React.useMemo(
    function () {
      var updateFilter = function (dict) {
        Curry._1(setfilterDict, function (prev) {
          var prevDictArr = Belt_Array.keepMap(
            Object.entries(prev),
            function (item) {
              var match = dict[item[0]];
              if (match !== undefined || LogicUtils.isEmptyString(item[1])) {
                return;
              } else {
                return item;
              }
            },
          );
          var currentDictArr = Object.entries(dict).filter(function (item) {
            return !LogicUtils.isEmptyString(item[1]);
          });
          var updatedDict = Object.fromEntries(
            prevDictArr.concat(currentDictArr),
          );
          var dict$1 = DictionaryUtils.equalDicts(updatedDict, prev)
            ? prev
            : updatedDict;
          query.contents = FilterUtils.parseFilterDict(dict$1);
          return dict$1;
        });
      };
      var reset = function (param) {
        var dict = {};
        Curry._1(setfilterDict, function (param) {
          return dict;
        });
        query.contents = FilterUtils.parseFilterDict(dict);
      };
      var removeKeys = function (arr) {
        Curry._1(setfilterDict, function (prev) {
          var updatedDict = DictionaryUtils.deleteKeys(
            Object.fromEntries(Object.entries(prev).slice()),
            arr,
          );
          var dict = DictionaryUtils.equalDicts(updatedDict, prev)
            ? prev
            : updatedDict;
          query.contents = FilterUtils.parseFilterDict(dict);
          return dict;
        });
      };
      return {
        query: query.contents,
        filterValue: filterDict,
        updateExistingKeys: updateFilter,
        removeKeys: removeKeys,
        filterValueJson: Object.fromEntries(
          Object.entries(filterDict).map(function (item) {
            return [item[0], UrlFetchUtils.getFilterValue(item[1])];
          }),
        ),
        reset: reset,
      };
    },
    [filterDict, setfilterDict],
  );
  React.useEffect(function () {
    var value = sessionStorage.getItem(index);
    if (!(value == null) && !disableSessionStorage$1) {
      Curry._1(
        updateFilter.updateExistingKeys,
        FilterUtils.parseFilterString(value),
      );
    }
  }, []);
  React.useEffect(
    function () {
      if (query.contents.length >= 1 && !disableSessionStorage$1) {
        sessionStorage.setItem(index, query.contents);
      }
    },
    [query.contents],
  );
  return React.createElement(make, {
    value: updateFilter,
    children: props.children,
  });
}

var make$1 = FilterContext;

export { filterUpdater, filterContext, Provider, make$1 as make };
/* filterContext Not a pure module */
