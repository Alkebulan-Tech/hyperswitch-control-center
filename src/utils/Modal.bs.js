// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as LogicUtils from "./LogicUtils.bs.js";
import * as MatchMedia from "../context/MatchMedia.bs.js";
import * as ModalUtils from "./ModalUtils.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as AddDataAttributes from "../components/AddDataAttributes.bs.js";
import * as HSwitchGlobalVars from "./HSwitchGlobalVars.bs.js";
import * as JsxPPXReactSupport from "rescript/lib/es6/jsxPPXReactSupport.js";

function Modal$Back(props) {
  return React.createElement(Icon.make, {
    name: "chevron-left",
    size: 18,
    className: "cursor-pointer opacity-50 dark:opacity-100 ",
    onClick: props.onClick,
  });
}

function Modal$ModalHeading(props) {
  var customIcon = props.customIcon;
  var modalHeadingClass = props.modalHeadingClass;
  var showModalHeadingIconName = props.showModalHeadingIconName;
  var modalHeadingDescriptionElement = props.modalHeadingDescriptionElement;
  var headBgClass = props.headBgClass;
  var centerHeading = props.centerHeading;
  var onCloseClick = props.onCloseClick;
  var rightHeading = props.rightHeading;
  var leftHeadingIcon = props.leftHeadingIcon;
  var showBackIcon = props.showBackIcon;
  var showCloseOnLeft = props.showCloseOnLeft;
  var showCloseIcon = props.showCloseIcon;
  var modalHeading = props.modalHeading;
  var centerHeading$1 = centerHeading !== undefined ? centerHeading : false;
  var borderClass = props.showBorderBottom
    ? "border-b border-jp-gray-940 border-opacity-75 dark:border-jp-gray-960 dark:border-opacity-75"
    : "";
  var isMobileView = MatchMedia.useMatchMedia("(max-width: 700px)");
  var justifyClass = centerHeading$1 ? "justify-center" : "justify-between";
  var headerTextClass = isMobileView
    ? "text-fs-18 font-semibold"
    : props.headerTextClass;
  var descriptionStyle = HSwitchGlobalVars.isHyperSwitchDashboard
    ? "text-md font-medium leading-7 opacity-50 mt-1 w-full max-w-sm "
    : "text-sm mt-1 w-10/12 empty:hidden";
  var subInfoStyle = HSwitchGlobalVars.isHyperSwitchDashboard
    ? "text-md font-medium leading-7 opacity-50 mt-1 w-full max-w-sm empty:hidden"
    : "text-sm empty:hidden";
  return React.createElement(
    "div",
    {
      className:
        "!p-4 " +
        (LogicUtils.isNonEmptyString(headBgClass)
          ? headBgClass
          : "bg-jp-gray-200 dark:bg-jp-gray-darkgray_background") +
        " rounded-t-lg z-10  w-full  m-0 md:!pl-6  " +
        props.headingClass +
        " " +
        borderClass +
        " ",
    },
    leftHeadingIcon !== undefined
      ? React.createElement(
          "div",
          {
            className:
              "fill-current flex-col justify-between h-0 bg-jp-gray-100",
          },
          React.createElement(
            "div",
            {
              className: "fill-current",
            },
            Caml_option.valFromOption(leftHeadingIcon),
          ),
        )
      : null,
    React.createElement(
      "div",
      {
        className:
          "flex " +
          props.headerAlignmentClass +
          " " +
          justifyClass +
          " " +
          headerTextClass +
          "",
      },
      React.createElement(
        "div",
        {
          className: props.modalParentHeadingClass,
        },
        showCloseIcon && showCloseOnLeft && !showBackIcon
          ? ModalUtils.getCloseIcon(onCloseClick)
          : null,
        showBackIcon
          ? React.createElement(
              "div",
              {
                className: "mr-4 pt-1.5",
              },
              React.createElement(Modal$Back, {
                onClick: props.onBackClick,
              }),
            )
          : null,
        LogicUtils.isNonEmptyString(showModalHeadingIconName)
          ? React.createElement(
              "div",
              {
                className: "flex items-center gap-4",
              },
              customIcon !== undefined
                ? Caml_option.valFromOption(customIcon)
                : React.createElement(Icon.make, {
                    name: showModalHeadingIconName,
                    size: props.modalHeaderIconSize,
                    className: "",
                  }),
              React.createElement(AddDataAttributes.make, {
                attributes: [["data-modal-header-text", modalHeading]],
                children: React.createElement(
                  "div",
                  {
                    className:
                      "font-inter-style font-semibold text-fs-16 leading-6 text-jp-2-gray-600 " +
                      modalHeadingClass +
                      "",
                  },
                  modalHeading,
                ),
              }),
            )
          : React.createElement(AddDataAttributes.make, {
              attributes: [["data-modal-header-text", modalHeading]],
              children: React.createElement(
                "div",
                {
                  className: "" + modalHeadingClass + "",
                },
                modalHeading,
              ),
            }),
      ),
      rightHeading !== undefined
        ? Caml_option.valFromOption(rightHeading)
        : null,
      showCloseIcon && !showCloseOnLeft
        ? ModalUtils.getCloseIcon(onCloseClick)
        : null,
    ),
    modalHeadingDescriptionElement !== null
      ? modalHeadingDescriptionElement
      : React.createElement(AddDataAttributes.make, {
          attributes: [["data-modal-description-text", modalHeading]],
          children: React.createElement(
            "div",
            {
              className: descriptionStyle,
            },
            props.modalHeadingDescription,
          ),
        }),
    React.createElement(
      "div",
      {
        className: subInfoStyle,
      },
      props.modalSubInfo,
    ),
  );
}

var ModalHeading = {
  make: Modal$ModalHeading,
};

function Modal$ModalContent(props) {
  var customHeight = props.customHeight;
  var customHeight$1 = customHeight !== undefined ? customHeight : "h-fit";
  return React.createElement(
    "div",
    {
      className:
        "border border-jp-gray-500 dark:border-jp-gray-900 " +
        props.bgClass +
        " shadow rounded-lg dark:text-opacity-75 dark:bg-jp-gray-darkgray_background " +
        props.modalClass +
        " " +
        customHeight$1 +
        "",
      id: "neglectTopbarTheme",
      onClick: props.handleContainerClick,
    },
    props.children,
  );
}

var ModalContent = {
  make: Modal$ModalContent,
};

function Modal$ModalOverlay(props) {
  var addAttributeId = props.addAttributeId;
  var isBackdropBlurReq = props.isBackdropBlurReq;
  var noBackDrop = props.noBackDrop;
  var modalPosition = props.modalPosition;
  var modalHeading = props.modalHeading;
  var paddingClass = props.paddingClass;
  var children = props.children;
  var modalPosition$1 = modalPosition !== undefined ? modalPosition : "";
  var noBackDrop$1 = noBackDrop !== undefined ? noBackDrop : false;
  var isBackdropBlurReq$1 =
    isBackdropBlurReq !== undefined ? isBackdropBlurReq : true;
  var addAttributeId$1 = addAttributeId !== undefined ? addAttributeId : "";
  var isMobileView = MatchMedia.useMatchMedia("(max-width: 700px)");
  var mobileClass = isMobileView ? "flex flex-col " : "";
  var displayClass = props.showModal ? "block" : "hidden";
  var overlayBgStyle = HSwitchGlobalVars.isHyperSwitchDashboard
    ? isBackdropBlurReq$1
      ? "bg-grey-700 bg-opacity-50"
      : ""
    : props.overlayBG;
  var backgroundDropStyles = isBackdropBlurReq$1 ? "backdrop-blur-sm" : "";
  var attributeId = LogicUtils.isEmptyString(addAttributeId$1)
    ? modalHeading !== undefined
      ? ":" + Core__Option.getOr(modalHeading, "") + ""
      : ""
    : ":" + addAttributeId$1 + "";
  var zIndexClass = "z-40";
  return React.createElement(AddDataAttributes.make, {
    attributes: [["data-component", "modal" + attributeId]],
    children: noBackDrop$1
      ? React.createElement(
          "div",
          {
            className:
              "" +
              displayClass +
              " " +
              paddingClass +
              " fixed inset-0 " +
              zIndexClass +
              "",
          },
          children,
        )
      : React.createElement(
          "div",
          {
            className:
              "" +
              mobileClass +
              " " +
              displayClass +
              " " +
              overlayBgStyle +
              " fixed h-screen w-screen " +
              zIndexClass +
              " " +
              modalPosition$1 +
              " " +
              paddingClass +
              " flex " +
              props.alignModal +
              " inset-0 overflow-auto " +
              backgroundDropStyles +
              "",
            onClick: props.handleOverlayClick,
          },
          children,
        ),
  });
}

var ModalOverlay = {
  make: Modal$ModalOverlay,
};

function Modal(props) {
  var modalHeaderIconSize = props.modalHeaderIconSize;
  var alignModal = props.alignModal;
  var customIcon = props.customIcon;
  var addAttributeId = props.addAttributeId;
  var isBackdropBlurReq = props.isBackdropBlurReq;
  var noBackDrop = props.noBackDrop;
  var headerAlignmentClass = props.headerAlignmentClass;
  var modalParentHeadingClass = props.modalParentHeadingClass;
  var modalPosition = props.modalPosition;
  var modalHeadingClass = props.modalHeadingClass;
  var showModalHeadingIconName = props.showModalHeadingIconName;
  var overlayBG = props.overlayBG;
  var modalFooter = props.modalFooter;
  var onCloseClickCustomFun = props.onCloseClickCustomFun;
  var modalHeadingDescriptionElement = props.modalHeadingDescriptionElement;
  var headBgClass = props.headBgClass;
  var onBackClick = props.onBackClick;
  var showBackIcon = props.showBackIcon;
  var showCloseOnLeft = props.showCloseOnLeft;
  var showCloseIcon = props.showCloseIcon;
  var borderBottom = props.borderBottom;
  var headerTextClass = props.headerTextClass;
  var closeOnOutsideClick = props.closeOnOutsideClick;
  var modalSubInfo = props.modalSubInfo;
  var modalHeadingDescription = props.modalHeadingDescription;
  var centerHeading = props.centerHeading;
  var paddingClass = props.paddingClass;
  var headingClass = props.headingClass;
  var childClass = props.childClass;
  var modalClass = props.modalClass;
  var bgClass = props.bgClass;
  var customModalHeading = props.customModalHeading;
  var modalHeading = props.modalHeading;
  var setShowModal = props.setShowModal;
  var showModal = props.showModal;
  var bgClass$1 =
    bgClass !== undefined
      ? bgClass
      : "bg-white dark:bg-jp-gray-lightgray_background";
  var modalClass$1 =
    modalClass !== undefined ? modalClass : "md:mt-20 overflow-auto";
  var childClass$1 = childClass !== undefined ? childClass : "p-2 m-2";
  var headingClass$1 = headingClass !== undefined ? headingClass : "p-2";
  var paddingClass$1 = paddingClass !== undefined ? paddingClass : "";
  var centerHeading$1 = centerHeading !== undefined ? centerHeading : false;
  var modalHeadingDescription$1 =
    modalHeadingDescription !== undefined ? modalHeadingDescription : "";
  var modalSubInfo$1 = modalSubInfo !== undefined ? modalSubInfo : "";
  var closeOnOutsideClick$1 =
    closeOnOutsideClick !== undefined ? closeOnOutsideClick : false;
  var headerTextClass$1 =
    headerTextClass !== undefined ? headerTextClass : "font-bold text-fs-24";
  var borderBottom$1 = borderBottom !== undefined ? borderBottom : true;
  var showCloseIcon$1 = showCloseIcon !== undefined ? showCloseIcon : true;
  var showCloseOnLeft$1 =
    showCloseOnLeft !== undefined ? showCloseOnLeft : false;
  var showBackIcon$1 = showBackIcon !== undefined ? showBackIcon : false;
  var onBackClick$1 =
    onBackClick !== undefined ? onBackClick : function (param) {};
  var headBgClass$1 =
    headBgClass !== undefined
      ? headBgClass
      : "bg-white dark:bg-jp-gray-darkgray_background";
  var modalHeadingDescriptionElement$1 =
    modalHeadingDescriptionElement !== undefined
      ? Caml_option.valFromOption(modalHeadingDescriptionElement)
      : null;
  var onCloseClickCustomFun$1 =
    onCloseClickCustomFun !== undefined
      ? onCloseClickCustomFun
      : function (param) {};
  var modalFooter$1 =
    modalFooter !== undefined ? Caml_option.valFromOption(modalFooter) : null;
  var overlayBG$1 =
    overlayBG !== undefined
      ? overlayBG
      : "bg-jp-gray-950 dark:bg-white-600 dark:bg-opacity-80 bg-opacity-70";
  var showModalHeadingIconName$1 =
    showModalHeadingIconName !== undefined ? showModalHeadingIconName : "";
  var modalHeadingClass$1 =
    modalHeadingClass !== undefined ? modalHeadingClass : "";
  var modalPosition$1 = modalPosition !== undefined ? modalPosition : "";
  var modalParentHeadingClass$1 =
    modalParentHeadingClass !== undefined
      ? modalParentHeadingClass
      : "flex flex-row flex-1";
  var headerAlignmentClass$1 =
    headerAlignmentClass !== undefined ? headerAlignmentClass : "flex-row";
  var noBackDrop$1 = noBackDrop !== undefined ? noBackDrop : false;
  var isBackdropBlurReq$1 =
    isBackdropBlurReq !== undefined ? isBackdropBlurReq : true;
  var addAttributeId$1 = addAttributeId !== undefined ? addAttributeId : "";
  var customIcon$1 =
    customIcon !== undefined
      ? Caml_option.valFromOption(customIcon)
      : undefined;
  var alignModal$1 = alignModal !== undefined ? alignModal : "justify-end";
  var modalHeaderIconSize$1 =
    modalHeaderIconSize !== undefined ? modalHeaderIconSize : 35;
  var headerTextClass$2 = ModalUtils.getHeaderTextClass(headerTextClass$1);
  var onCloseClick = function (_evt) {
    Curry._1(setShowModal, function (prev) {
      return !prev;
    });
    Curry._1(onCloseClickCustomFun$1, undefined);
  };
  var onBackClick$2 = function (_evt) {
    Curry._1(onBackClick$1, undefined);
  };
  var handleOverlayClick = function (ev) {
    if (closeOnOutsideClick$1) {
      ev.stopPropagation();
      onCloseClick(ev);
      return Curry._1(setShowModal, function (param) {
        return false;
      });
    }
  };
  var handleKeyUp = function (ev) {
    if (!closeOnOutsideClick$1) {
      return;
    }
    var key = ev.key;
    var keyCode = ev.keyCode;
    if (key === "Escape" || keyCode === 27) {
      return Curry._1(setShowModal, function (param) {
        return false;
      });
    }
  };
  React.useEffect(
    function () {
      if (showModal) {
        window.addEventListener("keyup", handleKeyUp);
      } else {
        window.removeEventListener("keyup", handleKeyUp);
      }
      return function (param) {
        window.removeEventListener("keyup", handleKeyUp);
      };
    },
    [showModal, closeOnOutsideClick$1],
  );
  var handleContainerClick = function (ev) {
    if (closeOnOutsideClick$1) {
      ev.stopPropagation();
      return;
    }
  };
  var animationClass = ModalUtils.getAnimationClass(showModal);
  return React.createElement(Modal$ModalOverlay, {
    handleOverlayClick: handleOverlayClick,
    showModal: showModal,
    children: JsxPPXReactSupport.createElementVariadicWithKey(
      showModal ? "true" : "false",
      Modal$ModalContent,
      {
        handleContainerClick: handleContainerClick,
        bgClass: bgClass$1,
        modalClass: "" + animationClass + " " + modalClass$1 + "",
        children: null,
        customHeight: props.customHeight,
      },
      [
        modalHeading !== undefined
          ? React.createElement(Modal$ModalHeading, {
              headingClass: headingClass$1,
              headerTextClass: headerTextClass$2,
              headerAlignmentClass: headerAlignmentClass$1,
              modalHeading: modalHeading,
              showCloseIcon: showCloseIcon$1,
              showCloseOnLeft: showCloseOnLeft$1,
              showBackIcon: showBackIcon$1,
              leftHeadingIcon: props.leftHeadingIcon,
              rightHeading: props.rightHeading,
              onCloseClick: onCloseClick,
              onBackClick: onBackClick$2,
              modalHeadingDescription: modalHeadingDescription$1,
              modalSubInfo: modalSubInfo$1,
              showBorderBottom: borderBottom$1,
              centerHeading: centerHeading$1,
              headBgClass: headBgClass$1,
              modalHeadingDescriptionElement: modalHeadingDescriptionElement$1,
              showModalHeadingIconName: showModalHeadingIconName$1,
              modalHeadingClass: modalHeadingClass$1,
              modalParentHeadingClass: modalParentHeadingClass$1,
              customIcon: customIcon$1,
              modalHeaderIconSize: modalHeaderIconSize$1,
            })
          : null,
        customModalHeading !== undefined
          ? Caml_option.valFromOption(customModalHeading)
          : null,
        React.createElement(
          "div",
          {
            className: childClass$1,
          },
          props.children,
        ),
        Caml_obj.notequal(modalFooter$1, null)
          ? React.createElement(
              "div",
              {
                className: "h-[5rem]",
              },
              modalFooter$1,
            )
          : null,
      ],
    ),
    paddingClass: paddingClass$1,
    modalHeading: modalHeading,
    overlayBG: overlayBG$1,
    modalPosition: modalPosition$1,
    noBackDrop: noBackDrop$1,
    isBackdropBlurReq: isBackdropBlurReq$1,
    addAttributeId: addAttributeId$1,
    alignModal: alignModal$1,
  });
}

var make = Modal;

export { ModalHeading, ModalContent, ModalOverlay, make };
/* Icon Not a pure module */
